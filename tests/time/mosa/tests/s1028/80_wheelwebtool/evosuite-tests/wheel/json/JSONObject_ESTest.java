/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 11:31:51 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("fals[", 1057);
      jSONObject1.toString(1057, 1057);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      jSONObject0.put("fals[", (Map) hashMap0);
      jSONObject1.getJSONObject("fals[");
      String string0 = JSONObject.quote("fals[");
      assertEquals("\"fals[\"", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(136);
      String string0 = "$u5[j3@o3P|";
      jSONObject0.optBoolean("$u5[j3@o3P|");
      JSONObject.quote("Dh</v6pElP");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "\"Dh</v6pElP\"", 136, 136);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      Float float0 = new Float(Double.NaN);
      byte byte0 = (byte) (-57);
      Byte byte1 = new Byte((byte) (-57));
      Byte.toUnsignedLong((byte)2);
      hashMap0.put(float0, byte1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8724498055907666
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\t", 0.0);
      jSONObject0.getDouble("\t");
      JSONObject jSONObject1 = jSONObject0.accumulate("\t", hashMap0);
      String string0 = jSONObject1.optString("\t");
      Float float0 = new Float(0.0F);
      Float.sum(2044.3412F, 0.0F);
      jSONObject0.putOpt("isaccumulate", float0);
      String string1 = jSONObject1.toString((-1666));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5928459413384477
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject1.toJSONArray(jSONArray0);
      Byte byte0 = new Byte((byte)80);
      jSONObject0.putOpt("nam", byte0);
      int int0 = jSONObject0.optInt("nam");
      assertEquals(1, jSONObject0.length());
      assertEquals(80, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put(" L/n@H(", (Collection) linkedList0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.432120247914651
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("Z6rv,Yz");
      JSONObject jSONObject0 = new JSONObject(object0);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("Z6rv,Yz", object1);
      jSONObject1.isNull("Z6rv,Yz");
      String string0 = "\\u";
      jSONObject0.optInt(",", (-320));
      Object object2 = JSONObject.NULL;
      jSONObject0.accumulate(string0, object2);
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2945474517952
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(47, 42);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 2536, 85);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7991368171319766
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Byte byte0 = new Byte((byte)58);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      Byte.compare((byte) (-128), (byte)76);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      int int0 = jSONObject0.optInt("] not found.");
      assertEquals(0, int0);
      
      Byte.toUnsignedLong((byte)1);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      linkedList1.addFirst("] not found.");
      JSONObject jSONObject2 = jSONObject1.put("] not found.", (Collection) linkedList1);
      JSONObject.valueToString(linkedList1);
      Double double0 = new Double((byte)58);
      jSONObject0.optLong("Expected a ',' or ']'", 1L);
      jSONObject2.append("] not found.", double0);
      jSONObject0.optJSONArray("Expected '");
      String string0 = jSONObject0.optString("tr");
      assertEquals("", string0);
      
      String string1 = JSONObject.quote("tr");
      assertEquals("\"tr\"", string1);
      
      Byte.compare((byte)1, (byte)76);
      Short short0 = Short.valueOf((short) (byte)76);
      jSONObject1.append("Expected '", short0);
      jSONObject0.optInt("int", (int) (byte)58);
      String[] stringArray1 = JSONObject.getNames(jSONObject2);
      assertEquals(2, stringArray1.length);
      
      jSONObject1.put("int", (Collection) linkedList1);
      jSONObject1.toString((-204));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray1 = jSONObject2.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("ALD");
      JSONObject jSONObject1 = jSONObject0.accumulate("ALD", boolean0);
      double double0 = jSONObject1.optDouble("ALD");
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean1 = jSONObject0.getBoolean("ALD");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("false", "false");
      double double0 = jSONObject0.optDouble("false");
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = jSONObject1.getBoolean("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2633836094401962
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer integer0 = new Integer(82);
      Integer.toUnsignedLong(82);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Byte byte0 = new Byte((byte) (-46));
      jSONObject0.putOpt("%?.L(l-~eu5nZ~", byte0);
      int int0 = jSONObject0.optInt("%?.L(l-~eu5nZ~");
      assertEquals(2, jSONObject0.length());
      assertEquals((-46), int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.516068964688669
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "7l/)E}eYcWyN-0HE,(Z";
      JSONObject jSONObject0 = new JSONObject((Object) "7l/)E}eYcWyN-0HE,(Z");
      String string1 = "is";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = Double.valueOf(0.0);
      linkedList0.add(double0);
      JSONObject jSONObject1 = jSONObject0.put("7l/)E}eYcWyN-0HE,(Z", (Collection) linkedList0);
      // Undeclared exception!
      jSONObject1.toString(2149);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "BMV)rT~K\\DO";
      jSONObject0.accumulate("BMV)rT~KDO", "BMV)rT~KDO");
      JSONObject.quote("K");
      jSONObject0.isNull("BMV)rT~KDO");
      Float float0 = new Float(Double.NaN);
      jSONObject0.optLong("X", 1L);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.590919980975802
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float((-217.27F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Float float1 = new Float((-217.27F));
      JSONObject jSONObject0 = new JSONObject(float1, stringArray0);
      jSONObject0.optDouble("");
      try { 
        jSONObject0.getBoolean("getgetBytes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetBytes\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1345561583439623
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject1.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.916777807271176
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      stringArray0[1] = "gettoLowerCase";
      stringArray0[2] = ".YeJ";
      stringArray0[3] = "$5[YbTP}yHy.{kGD";
      stringArray0[4] = "gettoLowerCase";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("$5[YbTP}yHy.{kGD", 904.9731631);
      jSONObject0.accumulate("gettoLowerCase", stringArray0[0]);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNotNull(jSONArray0);
      
      String string0 = jSONObject1.optString("bg<Rmo[E", (String) null);
      assertNull(string0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9435586432723295
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = 2757.1123238216246;
      Double double1 = new Double(2757.1123238216246);
      Double.isFinite((-458.31328455));
      Double.min(2401.937477945, (-4827.51));
      String[] stringArray0 = JSONObject.getNames((Object) double1);
      JSONObject jSONObject0 = new JSONObject(double1, stringArray0);
      String string0 = "wheel.json.JSONArray";
      jSONObject0.optInt("wheel.json.JSONArray");
      String string1 = "k!$!\\[Vkso4z !e,~";
      try { 
        jSONObject0.get("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject2 = jSONObject1.accumulate("BMV)rT~KDO", boolean0);
      String string0 = JSONObject.quote("getoptString");
      assertEquals("\"getoptString\"", string0);
      
      boolean boolean1 = jSONObject2.isNull("\"getoptString\"");
      boolean boolean2 = jSONObject2.optBoolean("BMV)rT~KDO");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected a ':' after a key", true);
      jSONObject0.optBoolean("Expected a ':' after a key", true);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Object) null, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("islength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of islength
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6855983590263937
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getdecode", (-333L));
      jSONObject1.optLong("getdecode");
      try { 
        jSONObject1.append("getdecode", "getdecode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[getdecode] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6379940485425775
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap hashMap1 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.342186565703311
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("}p#pQbZ!`TFx^P_s{", (-1667));
      jSONObject0.getInt("}p#pQbZ!`TFx^P_s{");
      JSONObject.doubleToString(0.0);
      jSONObject0.names();
      try { 
        jSONObject0.getInt("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.494760723229704
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.pollFirst();
      linkedList0.add((Byte) null);
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[null]", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1938867540524503
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("Z($0]><'bb^L'vO", (Map) hashMap0);
      try { 
        jSONObject0.getDouble("Z($0]><'bb^L'vO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z($0]><'bb^L'vO\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.647317009044464
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      jSONObject0.toString(1121);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0994300702539674
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(12, 12);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("BMV)rT~KDO", 8);
      String string1 = JSONObject.quote("H\"$Hx@/Fp\")3KV?V:");
      assertEquals("\"H\\\"$Hx@/Fp\\\")3KV?V:\"", string1);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      String string2 = jSONObject1.optString("6");
      assertEquals("", string2);
      
      double double0 = jSONObject1.getDouble("BMV)rT~KDO");
      assertEquals(8.0, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9413710578197731
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("KXHz/'K CmV3Um/", "0");
      jSONObject0.optDouble(":|TC9W?=dVv");
      jSONObject0.has(":|TC9W?=dVv");
      jSONObject1.getInt("KXHz/'K CmV3Um/");
      jSONObject0.put("] is not a JSONArray.", 0);
      long long0 = jSONObject0.getLong("KXHz/'K CmV3Um/");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1267060057251084
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(0.0);
      jSONObject0.accumulate("getequals", double0);
      jSONObject0.optDouble("getequals");
      try { 
        jSONObject0.getBoolean("KIo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KIo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      String string0 = jSONObject0.optString(",:]}/\"[{;=#", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.optDouble("nXRk6%*", (-1.0));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.199175958877372
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
      
      Float float0 = new Float(5258.401F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 128, 128);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-516), 114);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4384474624881487
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(">:ujO,C0_Ovjs_", (Map) hashMap0);
      jSONObject1.optString(">:ujO,C0_Ovjs_");
      Float float0 = new Float(1126.8246F);
      JSONObject.valueToString(">:ujO,C0_Ovjs_");
      Double.isFinite(1127.20333);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("\"java.lang.String@0000000003\"", (Collection) linkedList0);
      jSONObject1.toString(140, 140);
      JSONObject jSONObject2 = new JSONObject("{\n                                                                                                                                                                                                                                                                                        \"java.lang.String@0000000005\": [],\n                                                                                                                                                                                                                                                                                        \"java.lang.String@0000000003\": {}\n                                                                                                                                            }");
      jSONObject2.put("wheel.json.JSONObject@0000000002", (Object) "{\n                                                                                                                                                                                                                                                                                        \"java.lang.String@0000000005\": [],\n                                                                                                                                                                                                                                                                                        \"java.lang.String@0000000003\": {}\n                                                                                                                                            }");
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.188118820046292
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(665.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("665", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.282325506963904
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1521L);
      JSONObject jSONObject2 = jSONObject1.append("=e", "=e");
      jSONObject0.optLong("");
      jSONObject0.accumulate("] is not a Boolean.", "");
      jSONObject2.optJSONArray("=e");
      jSONObject1.getString("");
      jSONObject1.names();
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1098171340858656
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)4);
      jSONObject0.accumulate("`Mq>K]_N~NbTdr/o1__", short0);
      jSONObject0.optDouble("`Mq>K]_N~NbTdr/o1__");
      try { 
        jSONObject0.getBoolean("getsubstring");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsubstring\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5005425831478187
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1521L);
      jSONObject0.optDouble("", (double) 1521L);
      jSONObject1.append("=e", "=e");
      jSONObject0.optLong("");
      jSONObject0.accumulate("] is not a Boolean.", "");
      JSONObject jSONObject2 = new JSONObject((Object) "");
      JSONObject jSONObject3 = jSONObject0.put("] is not a Boolean.", 1521L);
      assertNotSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3143719702816234
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-1288));
      JSONObject jSONObject1 = jSONObject0.accumulate("n`", short0);
      jSONObject0.isNull("$KYW33H");
      double double0 = jSONObject1.optDouble("n`");
      assertEquals(1, jSONObject0.length());
      assertEquals((-1288.0), double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2170539279221386
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.putOpt("~l", jSONObject1);
      jSONObject2.optBoolean("~l", true);
      String[] stringArray0 = new String[1];
      jSONObject2.optJSONObject("~l");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("J6k:O*LRZ!;)C]&", 1.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.379123516937678
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("isdecode", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.optJSONArray("isdecode");
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 1057);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5555002233721045
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "/~Z=-$S+80#;K.$";
      JSONObject.getNames((Object) "/~Z=-$S+80#;K.$");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{IDbz|Ljp`.RtT\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of {IDbz|Ljp`.RtT\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("get", (Collection) linkedList0);
      jSONObject1.toString((-1222), (-1222));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\": []}");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject1.put("{\"java.lang.String@0000000003\": []}", object0);
      assertSame(jSONObject0, jSONObject3);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.490403227787064
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("`!M1n*TDM_bRLSO", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7842068034002128
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7906679823987566
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("=e", "=e");
      jSONObject0.accumulate("] is not a Boolean.", "");
      jSONObject0.isNull("ues");
      jSONObject0.has((String) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optString("=e", "");
      jSONObject1.optJSONObject("ues");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("] is not a number.", 101);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, (-1834L));
      String[] stringArray0 = new String[2];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8149376608997776
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("YIE3,e>", linkedList0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.names();
      Long long0 = new Long(1651L);
      jSONObject0.toString(12, 12);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7492441588574956
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject0.optString(">:ujO,C0_Ovjs_");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.opt((String) null);
      jSONObject2.names();
      jSONObject0.put("com", true);
      jSONObject0.keys();
      Object object0 = new Object();
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.2059168292404205
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(":Q%,>]", "mF!");
      jSONObject0.remove("mF!");
      JSONObject jSONObject1 = jSONObject0.put("mF!", 88);
      jSONObject1.getInt("mF!");
      try { 
        jSONObject1.getJSONObject("mF!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mF!\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0443466085248463
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      Long long0 = new Long(0L);
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0);
      int int0 = jSONObject1.getInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.138261944687921
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{}\"8M,,3!_/kT");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Long long0 = new Long((-2003L));
      Long.divideUnsigned((-2003L), (-1L));
      jSONObject0.accumulate(",Ws<rJ'jg", long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{ulMPO9TCcM5ngB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of {ulMPO9TCcM5ngB
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = "x`yA";
      JSONObject jSONObject1 = jSONObject0.put("x`yA", (Collection) linkedList0);
      jSONObject0.length();
      try { 
        jSONObject1.getInt("x`yA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x`yA\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.3373641978673163
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("UG4a+r", jSONArray0);
      JSONArray jSONArray2 = (JSONArray)jSONObject1.get("UG4a+r");
      assertEquals(1, jSONArray2.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0327524056262956
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.put("nul", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.094592927355563
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer(2126);
      Integer.min(2126, (-3256));
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      jSONObject1.optBoolean("null", false);
      Float float1 = new Float((float) (-3256));
      JSONObject.numberToString(float1);
      Double.isFinite(4730.448507104866);
      Float.isFinite((-3256));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject0.toString();
      jSONObject0.optDouble("jXosTV7MwF");
      jSONObject2.toString((-1211), 128);
      jSONObject2.put("getfloatToRawIntBits", (long) 128);
      jSONObject2.optJSONArray("{\"java.lang.String@0000000008\":wheel.json.JSONArray@0000000012,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      jSONObject1.opt("getfloatToRawIntBits");
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3953952213852676
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\n", (Map) hashMap0);
      jSONObject1.optString((String) null);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject0.put("getjoin", (Collection) linkedList1);
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("getjoin");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.894674138136133
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "BMV)rT~K\\DO";
      JSONObject jSONObject1 = jSONObject0.accumulate("BMV)rT~KDO", "BMV)rT~KDO");
      try { 
        jSONObject1.getJSONArray("BMV)rT~KDO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BMV)rT~KDO\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("O^RT", "O^RT");
      jSONObject1.accumulate("O^RT", jSONObject0);
      Boolean boolean0 = new Boolean("O^RT");
      boolean boolean1 = jSONObject1.optBoolean("O^RT");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.append(" 4!5z R{x", " 4!5z R{x");
      jSONObject0.optInt(" 4!5z R{x", (-1424));
      jSONObject1.accumulate(" 4!5z R{x", jSONObject2);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("YY[PihZv=T", "YY[PihZv=T");
      jSONObject0.accumulate("YY[PihZv=T", "YY[PihZv=T");
      boolean boolean0 = jSONObject0.isNull("YY[PihZv=T");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("H#_>Rc^r", true);
      assertTrue(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = JSONObject.quote("/5'#U-.}");
      assertEquals("\"/5'#U-.}\"", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("i<*bX>p", false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.203091016406272
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject.quote("");
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("", (-1628L));
      jSONObject1.getString("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1867915479384763
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(">EGt'g:G", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0300388177574233
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Z6rv,Yz", "Z6rv,Yz");
      try { 
        jSONObject1.getBoolean("Z6rv,Yz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z6rv,Yz\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("?", (Map) null);
      try { 
        jSONObject0.getBoolean("?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("to", "to");
      boolean boolean0 = jSONObject1.optBoolean("to");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.411330577007327
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Object object0 = hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(">:ujO,C0_Ovjs_", (Map) hashMap0);
      JSONObject.valueToString(object0);
      jSONObject0.optString(">:ujO,C0_Ovjs_");
      jSONObject0.opt("{}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.9211285950374575
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      int int0 = jSONObject0.optInt("wai");
      assertEquals(0, int0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      jSONObject1.toString((-3009));
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-164), (-164));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1651L);
      JSONObject jSONObject1 = new JSONObject();
      Float float0 = new Float((-1.0));
      String string0 = JSONObject.valueToString(hashMap0, 11, 35);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("BMV)rT~KDO", 1057);
      try { 
        jSONObject1.getJSONObject("BMV)rT~KDO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BMV)rT~KDO\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.20296116421579
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("O^RT", "O^RT");
      jSONObject1.remove("O^RT");
      jSONObject1.optDouble("O^RT");
      try { 
        jSONObject0.getBoolean("O^RT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O^RT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = jSONObject0.optString("(VS,E#'3Nv=R&+F]L`", "getsplit");
      assertEquals("getsplit", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      jSONObject0.put("CO@", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7202245016325666
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float((-2999.62F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(128, 128);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("@8b`>Zx&:P3a jHrr}4", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0121515258995455
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.addLast((Byte) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString(")BL=g53{_Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")BL=g53{_Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.24970069723459
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(2961, 2961);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.885488118580586
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(1374);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.275712101117219
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-3385), (-3385));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("|>9WMx.k{", 10L);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("|>9WMx.k{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |>9WMx.k{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 1507, 49);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.264175892570279
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote("2");
      assertEquals("\"2\"", string0);
      
      Integer integer0 = new Integer(128);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString(128);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.2022413954579148
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-3));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString(39, 39);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = jSONObject0.toString(23, 23);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 801, 801);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7268296415485096
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-972), (-972));
      jSONObject0.put("{}", (-972));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1915.070425077);
      assertEquals("1915.070425077", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.0422590391891036
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("|>9WMx.k{", 0L);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5094656225315988
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CQ9)0a|@TGR2: C&";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("48?;wS?TYtWhe3o)(ZU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"48?;wS?TYtWhe3o)(ZU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.369669675292922
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      byte byte0 = (byte)107;
      Byte byte1 = new Byte((byte)107);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("n@Q.j[-l&=", (double) (byte)107);
      jSONObject2.optLong("n@Q.j[-l&=");
      try { 
        jSONObject1.getBoolean("n@Q.j[-l&=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n@Q.j[-l&=\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1534L);
      jSONObject1.getLong("");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("I<0EaL#MW;13gyyHfK+", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("I<0EaL#MW;13gyyHfK+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I<0EaL#MW;13gyyHfK+\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("] is not a JSONArray.", "] is not a JSONArray.");
      int int0 = jSONObject0.optInt("] is not a JSONArray.");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Short short0 = new Short((short)3201);
      JSONObject jSONObject0 = new JSONObject(short0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Fu;M<8D'}U-ks", (-1362));
      assertEquals((-1362), int0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer(3960);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = JSONObject.quote("l#-6Wi#y|dU/$1.Ft_6");
      assertEquals("\"l#-6Wi#y|dU/$1.Ft_6\"", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float float0 = new Float((-627.0F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = JSONObject.quote("zo\"J");
      assertEquals("\"zo\\\"J\"", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.885488118580586
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-3222));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = JSONObject.valueToString("dou", 33, 33);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = new Integer(52);
      String string0 = JSONObject.valueToString(integer0, 52, 52);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("U$&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U$&\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("m");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of m
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("lTSH+tJ p1R=OE,S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of lTSH+tJ p1R=OE,S
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("I$;Hw|6L(TZMQ");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote("BMV)rT~KDO");
      assertEquals("\"BMV)rT~KDO\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("}}Ff");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("true", 0.0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.0115053753997263
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("C8\"]o[z}t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C8\\\"]o[z}t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\b");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Expected a ',' or ']'");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
