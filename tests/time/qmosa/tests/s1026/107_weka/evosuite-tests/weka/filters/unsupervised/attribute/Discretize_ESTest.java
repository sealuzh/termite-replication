/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:25:07 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Properties;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 15;
      SparseInstance sparseInstance0 = new SparseInstance(15);
      int int1 = 6;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 6);
      Instances instances1 = new Instances(instances0);
      Attribute attribute0 = new Attribute("", 6);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("Quote parse error.");
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at Quote parse error.
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[12];
      doubleArray1[0] = 69.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 69.0;
      doubleArray3[1] = 69.0;
      doubleArray3[2] = 69.0;
      doubleArray3[3] = 69.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 69.0;
      doubleArray4[1] = 69.0;
      doubleArray4[2] = 69.0;
      doubleArray4[3] = 69.0;
      doubleArray4[4] = 69.0;
      doubleArray4[5] = 69.0;
      doubleArray4[6] = 69.0;
      doubleArray4[7] = 69.0;
      doubleArray4[8] = 69.0;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[2] = (byte) (-107);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, intArray0, (byte) (-117));
      Discretize discretize0 = new Discretize("$Oo#u*");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      Discretize discretize1 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, (-11));
      assertEquals(0.0, binarySparseInstance0.weight(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.827733406931232
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("R");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "R";
      discretize0.setBins(6);
      stringArray0[1] = "R";
      stringArray0[2] = "R";
      stringArray0[3] = "R";
      stringArray0[4] = "R";
      stringArray0[5] = "-F";
      stringArray0[6] = "R";
      stringArray0[7] = "R";
      stringArray0[8] = "R";
      discretize0.setOptions(stringArray0);
      discretize0.getUseEqualFrequency();
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      
      discretize0.setOutputFormat();
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2428.30391163);
      doubleArray0[1] = (-2428.30391163);
      doubleArray0[2] = (-2428.30391163);
      doubleArray0[3] = (-2428.30391163);
      doubleArray0[4] = (-2428.30391163);
      doubleArray0[5] = (-2428.30391163);
      doubleArray0[6] = (-2428.30391163);
      doubleArray0[7] = (-2428.30391163);
      doubleArray0[8] = (-2428.30391163);
      SparseInstance sparseInstance0 = new SparseInstance((-2428.30391163), doubleArray0);
      double[] doubleArray1 = new double[3];
      sparseInstance0.setWeight((-251.5586));
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (double) 6;
      doubleArray1[2] = (-2428.30391163);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(6);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.801150207871118
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.getAttributeIndices();
      discretize0.getAttributeIndices();
      discretize0.getCapabilities();
      discretize0.getOptions();
      discretize0.getBinRangesString((-1201));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1201));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-414L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)");
      String[] stringArray0 = new String[4];
      Discretize.main(stringArray0);
      stringArray0[0] = "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      int int0 = 82;
      DenseInstance denseInstance0 = new DenseInstance(82);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RI=%<1rzrXZwAb");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("8 ");
      String[] stringArray0 = discretize0.getOptions();
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("uu|J@sX=i|we).Y(?*");
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 15;
      doubleArray0[3] = (double) 15;
      doubleArray0[8] = (double) 15;
      Discretize discretize0 = new Discretize("QM)w]X");
      int[] intArray0 = new int[8];
      intArray0[7] = 3;
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "BqZ<";
      Discretize discretize0 = new Discretize("BqZ<");
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      range0.getInvert();
      discretize0.getInvertSelection();
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-1326.42872007);
      boolean boolean0 = false;
      discretize0.setUseBinNumbers(false);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        range0.getSelection();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1L);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine("O");
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      assertFalse(discretize0.getUseBinNumbers());
      
      Discretize discretize1 = new Discretize();
      discretize1.getBinRangesString(1024);
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getFindNumBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(15);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 15;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) 6;
      doubleArray0[7] = (double) 6;
      doubleArray0[8] = (double) 15;
      SparseInstance sparseInstance2 = new SparseInstance(6, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2515.899142254155, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = (-4768);
      intArray0[4] = 4466;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(15.0, intArray0, 6);
      Discretize discretize0 = new Discretize("first-last");
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(15);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Z/2aFQ].?LnSih", arrayList0, 6);
      Instances instances1 = new Instances(instances0);
      Discretize discretize0 = new Discretize();
      discretize0.useBinNumbersTipText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = 0.8888122240289741;
      SparseInstance sparseInstance1 = new SparseInstance(6, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      int[] intArray0 = new int[5];
      intArray0[0] = 15;
      intArray0[1] = 6;
      sparseInstance1.setMissing(2336);
      intArray0[2] = 15;
      intArray0[3] = 6;
      intArray0[4] = 6;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6.0, intArray0, (-4768));
      assertEquals(5, binarySparseInstance1.numValues());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(15);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 15;
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "-EZ<_^:sVY|N*";
      stringArray0[2] = "ordered";
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 13;
      intArray0[4] = 13;
      intArray0[5] = 13;
      intArray0[6] = 13;
      intArray0[7] = 13;
      discretize0.setAttributeIndicesArray(intArray0);
      stringArray0[3] = "-M";
      stringArray0[4] = "^$5";
      discretize0.m_FindNumBins = false;
      stringArray0[5] = "";
      discretize0.setIgnoreClass(false);
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 13;
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7321184591665695
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 13;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "-EZ<_^:sVY|N*";
      stringArray0[2] = "ordered";
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 13;
      intArray0[4] = 13;
      intArray0[5] = 13;
      intArray0[6] = 13;
      intArray0[7] = 13;
      discretize0.setAttributeIndicesArray(intArray0);
      stringArray0[3] = "-M";
      stringArray0[4] = "^$5";
      discretize0.m_FindNumBins = false;
      stringArray0[5] = "";
      discretize0.setIgnoreClass(false);
      stringArray0[6] = "";
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 13;
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // For input string: \"^$5\"
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.listOptions();
      discretize0.setIgnoreClass(false);
      discretize0.getAttributeIndices();
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopy(discretize0);
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("8964", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("Get position of option -o: ");
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("hi(8B}1A");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1430.61426395173);
      doubleArray0[1] = (-1430.61426395173);
      doubleArray0[2] = (-1430.61426395173);
      SparseInstance sparseInstance0 = new SparseInstance(2745.0247087, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize1 = new Discretize();
      String string1 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string1);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      
      String string2 = discretize1.invertSelectionTipText();
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string2);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getUseEqualFrequency());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8211303254932276
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize("'FE_Mu8e");
      discretize0.setOutputFormat();
      discretize0.setDesiredWeightOfInstancesPerInterval(1715.0399645102);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(1715.0399645102, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'FE_Mu8e";
      stringArray0[1] = "'FE_Mu8e";
      stringArray0[2] = "'FE_Mu8e";
      stringArray0[3] = "'FE_Mu8e";
      stringArray0[4] = "'FE_Mu8e";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance0 = new SparseInstance(6);
      discretize0.makeBinaryTipText();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      SparseInstance sparseInstance1 = new SparseInstance((-124.6912003), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6, (int[]) null, (-1840700267));
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.827733406931232
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize("Get position of option -o: ");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setBins(6);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-F";
      stringArray0[1] = "-F";
      stringArray0[2] = "-F";
      stringArray0[3] = "Get position of option -o: ";
      stringArray0[4] = "-F";
      stringArray0[5] = "Quote parse error.";
      stringArray0[6] = "-F";
      stringArray0[7] = "-F";
      stringArray0[8] = "-F";
      discretize0.setOptions(stringArray0);
      discretize0.getUseEqualFrequency();
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(false);
      discretize0.getFindNumBins();
      discretize0.getUseEqualFrequency();
      String string0 = "weka.core.Capabilities$Capability";
      StringReader stringReader0 = new StringReader("weka.core.Capabilities$Capability");
      stringReader0.reset();
      stringReader0.markSupported();
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[weka.core.Capabilities$Capability], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "premature end of line";
      stringArray0[1] = "~";
      stringArray0[2] = "F";
      stringArray0[3] = "X]swSWn+";
      stringArray0[4] = "   * @return always true, to indicate that the output format can \n";
      stringArray0[5] = ":S9+!=d5nCu`[<\"";
      stringArray0[6] = "?";
      stringArray0[7] = "A7Z<}\"-lk-tZ$$Y6j";
      stringArray0[8] = "F";
      Filter.runFilter((Filter) null, stringArray0);
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize("hi(8B}1A");
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-1430.61426395173);
      doubleArray0[1] = (-1430.61426395173);
      doubleArray0[2] = (-1430.61426395173);
      doubleArray0[3] = (-1430.61426395173);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-83);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-83);
      discretize0.m_UseBinNumbers = true;
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte) (-83);
      String[] stringArray0 = new String[7];
      stringArray0[3] = "hi(8B}1A";
      stringArray0[1] = "hi(8B}1A";
      stringArray0[2] = "hi(8B}1A";
      stringArray0[3] = "hi(8B}1A";
      stringArray0[4] = "hi(8B}1A";
      stringArray0[5] = "hi(8B}1A";
      stringArray0[6] = "hi(8B}1A";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("Get position of option -o: ");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 349);
      Instances instances1 = new Instances(instances0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-V";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[3] = "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[4] = "-V";
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("-V", arrayList1, protectedProperties1);
      instances1.setClass(attribute0);
      stringArray0[5] = "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getCutPoints(349);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      int[] intArray0 = new int[3];
      intArray0[0] = 2412;
      intArray0[1] = 2412;
      intArray0[2] = (-1137);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4768), intArray0, 2412);
      assertEquals(3, binarySparseInstance0.numValues());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(68);
      assertEquals(68, discretize0.getBins());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9119661949192053
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("Get position of option -o: ");
      assertFalse(discretize0.getUseEqualFrequency());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 349);
      Instances instances1 = new Instances(instances0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      stringArray0[3] = "-V";
      stringArray0[4] = "@data";
      stringArray0[5] = "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[6] = "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[7] = ".bsi";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      
      Discretize discretize1 = new Discretize();
      discretize1.setMakeBinary(false);
      assertFalse(discretize1.getMakeBinary());
      
      Discretize discretize2 = new Discretize();
      assertFalse(discretize2.getUseEqualFrequency());
      assertEquals(10, discretize2.getBins());
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize2.getUseBinNumbers());
      assertFalse(discretize2.getFindNumBins());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(15);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 15;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) 6;
      doubleArray0[7] = (double) 15;
      doubleArray0[8] = (double) 15;
      Discretize discretize0 = new Discretize("QM)w]X");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize("au|J@sX=i|we).Y(?*");
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance0 = new SparseInstance(6);
      int int0 = (-81);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-81));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = false;
      discretize0.setDesiredWeightOfInstancesPerInterval((-2128.112));
      discretize0.m_IgnoreClass = false;
      discretize0.getBinRangesString(0);
      discretize0.setFindNumBins(true);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance0 = new SparseInstance(6);
      int[] intArray0 = new int[7];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = (-81);
      intArray0[3] = (-81);
      intArray0[4] = (-81);
      intArray0[5] = (-81);
      intArray0[6] = 1802;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6, intArray0, 3016);
      discretize0.setAttributeIndices("c:n{Z<CDc");
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize("Get position of option -o: ");
      discretize0.setFindNumBins(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 349;
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 349);
      Instances instances1 = new Instances(instances0);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(15);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 15;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 15;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) 6;
      doubleArray0[7] = (double) 6;
      doubleArray0[8] = (double) 15;
      SparseInstance sparseInstance2 = new SparseInstance(6, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2515.899142254155, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = (-4768);
      intArray0[4] = 4466;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(15.0, intArray0, 6);
      Discretize discretize0 = new Discretize("first-last");
      discretize0.getBinRangesString(15);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize("Get position of option -o: ");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 349);
      Instances instances1 = new Instances(instances0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      stringArray0[3] = "-V";
      stringArray0[4] = "@data";
      stringArray0[5] = "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[6] = "Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[7] = ".bsi";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getCutPoints(349);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
