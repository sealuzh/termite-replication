/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:42:02 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.trees.DecisionStump;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.972146235760389
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      textDirectoryLoader0.getRevision();
      double double0 = evaluation0.m_SumSqrPredicted;
      textDirectoryLoader0.reset();
      evaluation0.truePositiveRate((-1993));
      evaluation0.precision((-1993));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      evaluation0.areaUnderROC(25);
      evaluation0.pctUnclassified();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedFalseNegativeRate();
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "8034");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1350489339346823
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = evaluation0.toClassDetailsString("");
      evaluation0.falsePositiveRate((-1243));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.numFalseNegatives((-1243));
      ArffLoader arffLoader0 = new ArffLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      evaluation0.unweightedMacroFmeasure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SGD sGD0 = new SGD();
      String string1 = Evaluation.makeOptionString(sGD0, false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0405440423296217
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      evaluation0.falsePositiveRate(25);
      evaluation0.falsePositiveRate((-1243));
      evaluation0.numFalseNegatives((-1243));
      evaluation0.truePositiveRate((-1243));
      double double0 = evaluation0.precision((-1243));
      double double1 = evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.pctIncorrect();
      evaluation1.addNumericTrainClass((-1243), 1255.0384048);
      double double2 = evaluation1.weightedTrueNegativeRate();
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = evaluation1.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double4 = evaluation2.sizeOfPredictedRegions();
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation1.weightedAreaUnderPRC();
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, evaluation1.pctIncorrect(), 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.318115134719941
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      double double0 = evaluation0.m_SumSqrPredicted;
      int[] intArray0 = new int[1];
      intArray0[0] = 11;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(103.56568997308, intArray0, 104);
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.toSummaryString("dPa", true);
      evaluation0.toClassDetailsString();
      evaluation0.rootRelativeSquaredError();
      double[] doubleArray1 = null;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2289626018127464
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRevision();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      int[] intArray0 = new int[4];
      intArray0[0] = 25;
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = 25;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(481.6412, intArray0, 25);
      instances0.add((Instance) binarySparseInstance0);
      evaluation1.toSummaryString("\tOutput synopsis for classifier (use in conjunction  with -h)\n", false);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2469);
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = (double) 25;
      doubleArray0[2] = (double) 25;
      double double0 = 4.5;
      evaluation0.updateMargins(doubleArray0, 3, 4.5);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      CoverTree coverTree0 = new CoverTree();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.convertInstance((Instance) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.475217381152924
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.falsePositiveRate((-1243));
      instances0.sort(25);
      double double1 = evaluation0.numFalseNegatives(6);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.truePositiveRate(4231);
      assertEquals(double2, double0, 0.01);
      
      evaluation1.KBMeanInformation();
      double double3 = evaluation1.m_MinTarget;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.updateNumericScores((double[]) null, (double[]) null, Double.NaN);
      evaluation1.setPriors(instances0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7923911516277182
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      evaluation0.numFalseNegatives((-1243));
      evaluation0.truePositiveRate(17);
      evaluation0.precision(25);
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.pctIncorrect();
      ConverterUtils.DataSource.isArff("        if (NUMERIC[n])\n");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 17;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8914135986037484
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      evaluation0.numFalseNegatives((-1243));
      evaluation0.truePositiveRate(17);
      evaluation0.precision(25);
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double double0 = evaluation1.m_SumKBInfo;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.incorrect();
      evaluation1.trueNegativeRate((-1243));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = (double) 17;
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      try { 
        evaluation2.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.384981319297112
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Random.setNextRandom(10);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getRevision();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.m_SumClassPredicted = (-4.800097407);
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4638.014), intArray0, 11);
      evaluation0.areaUnderROC(30000);
      evaluation0.pctUnclassified();
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.426775702954569
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      double double1 = evaluation0.m_SumPriorSqrErr;
      evaluation0.truePositiveRate(17);
      evaluation0.KBMeanInformation();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      AbstractClassifier.makeCopy(filteredClassifier0);
      evaluation0.pctIncorrect();
      evaluation0.addNumericTrainClass(1665.0, (-1244.03824));
      evaluation0.correct();
      KDTree kDTree0 = new KDTree();
      try { 
        kDTree0.nearestNeighbour((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.KDTree", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.776881002426717
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[2] = 0.0;
      evaluation0.weightedMatthewsCorrelation();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Classifier classifier0 = AbstractClassifier.makeCopy(filteredClassifier0);
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel(classifier0, instances0, objectArray0);
      evaluation0.pctIncorrect();
      evaluation0.addNumericTrainClass(100.0, (-675.3));
      CostMatrix costMatrix0 = new CostMatrix(17);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      evaluation1.incorrect();
      evaluation1.priorEntropy();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel(classifier0, instances0, 25, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7891953156584712
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      evaluation0.numFalseNegatives((-1243));
      evaluation0.truePositiveRate(17);
      evaluation0.precision(25);
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(0.0, (-769.8822229476));
      evaluation0.weightedTrueNegativeRate();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      PipedReader pipedReader0 = new PipedReader();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7655747492431795
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate((-894));
      textDirectoryLoader0.getDataSet();
      evaluation0.numFalseNegatives(3086);
      double double1 = evaluation0.truePositiveRate(17);
      assertEquals(double1, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.addNumericTrainClass(3086, 0.0);
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double4 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6727547966053267
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1649552630226827
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      Evaluation.getGlobalInfo(votedPerceptron0);
      evaluation0.KBInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = "    return RevisionUtils.extract(\"1.0\");\n";
      stringArray0[2] = "    return RevisionUtils.extract(\"1.0\");\n";
      stringArray0[3] = "L~hgNQDK<5x#fX;)n9.";
      stringArray0[4] = ".libsvm";
      stringArray0[5] = "\nSynopsis for weka.classifiers.functions.VotedPerceptron:\n\nImplementation of the voted perceptron algorithm by Freund and Schapire. Globally replaces all missing values, and transforms nominal attributes into binary ones.\n\nFor more information, see:\n\nY. Freund, R. E. Schapire: Large margin classification using the perceptron algorithm. In: 11th Annual Conference on Computational Learning Theory, New York, NY, 209-217, 1998.";
      try { 
        Evaluation.evaluateModel((Classifier) votedPerceptron0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.VotedPerceptron:
         // 
         // -I <int>
         // \tThe number of iterations to be performed.
         // \t(default 1)
         // -E <double>
         // \tThe exponent for the polynomial kernel.
         // \t(default 1)
         // -S <int>
         // \tThe seed for the random number generation.
         // \t(default 1)
         // -M <int>
         // \tThe maximum number of alterations allowed.
         // \t(default 10000)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.179529289902419
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      double double0 = evaluation0.falsePositiveRate(25);
      evaluation0.falsePositiveRate((-1243));
      double double1 = evaluation0.numFalseNegatives((-1243));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.truePositiveRate((-1243));
      assertEquals(double2, double0, 0.01);
      
      evaluation0.precision((-1243));
      double double3 = evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double4 = evaluation1.pctIncorrect();
      evaluation1.areaUnderROC(17);
      double double5 = evaluation0.pctUnclassified();
      assertEquals(double5, double4, 0.01);
      
      double double6 = evaluation1.KBRelativeInformation();
      assertEquals(double6, double3, 0.01);
      
      evaluation1.numTruePositives((-1304));
      double double7 = evaluation0.errorRate();
      assertEquals(double7, double4, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4737694320169776
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      double double0 = evaluation0.sizeOfPredictedRegions();
      evaluation0.setDiscardPredictions(false);
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.areaUnderPRC(120);
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'X';
      charArray0[2] = '5';
      charArray0[3] = 'L';
      charArray0[4] = 'F';
      charArray0[5] = 'U';
      charArray0[6] = 'u';
      charArray0[7] = '\\';
      evaluation0.num2ShortID(107, charArray0, 1007);
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1012448189540684
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(25);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      evaluation0.areaUnderPRC(44);
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'U';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = 't';
      String string0 = evaluation0.num2ShortID(9, charArray0, 25);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals("                       Ft", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getStructure();
      double double0 = evaluation0.m_MaxTarget;
      boolean boolean0 = false;
      evaluation0.setDiscardPredictions(false);
      evaluation0.pctCorrect();
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = 4292;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double1 = 2904.4372358;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1843335941), 2904.4372358);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1843335941
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7655747492431795
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate((-1243));
      textDirectoryLoader0.getDataSet();
      double double1 = evaluation0.numFalseNegatives((-1243));
      assertEquals(double1, double0, 0.01);
      
      evaluation0.truePositiveRate(17);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.addNumericTrainClass((-10.0), (-4638.014));
      double double2 = evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double3, double2, 0.01);
      
      evaluation0.sizeOfPredictedRegions();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.592965132436166
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.numFalseNegatives(25);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      evaluation0.truePositiveRate(1665);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 25;
      doubleArray1[1] = (double) 1665;
      doubleArray1[2] = 605.11958585;
      doubleArray1[3] = 0.0;
      evaluation0.weightedTruePositiveRate();
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setDebug(false);
      evaluation0.setDiscardPredictions(true);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      SMO sMO0 = new SMO();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 84);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      AbstractClassifier.makeCopy(filteredClassifier0);
      CostMatrix costMatrix0 = new CostMatrix(21);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.precision(21);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4775431275048834
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.m_ClassPriorsSum;
      textDirectoryLoader0.reset();
      evaluation0.truePositiveRate((-1993));
      evaluation0.precision((-1993));
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      ConverterUtils.DataSource.isArff(" i/y|}q2q,Jf0jBJ");
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.7192535547185
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Random.setNextRandom(10);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getRevision();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.m_SumClassPredicted = (-4.800097407);
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4638.014), intArray0, 11);
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.toSummaryString("@data", false);
      String string1 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string1);
      
      evaluation0.rootRelativeSquaredError();
      evaluation0.kappa();
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.466622865036584
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      double double1 = evaluation0.m_SumSqrPredicted;
      double double2 = evaluation0.m_ClassPriorsSum;
      textDirectoryLoader0.reset();
      double double3 = evaluation0.truePositiveRate((-1993));
      assertEquals(double3, double0, 0.01);
      
      evaluation0.precision((-1993));
      double double4 = evaluation0.unweightedMicroFmeasure();
      assertNotEquals(double4, double3, 0.01);
      
      evaluation0.getHeader();
      evaluation0.weightedRecall();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5806789212792607
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      evaluation0.falsePositiveRate(25);
      evaluation0.numFalseNegatives((-1224));
      double double0 = evaluation0.m_MinTarget;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.m_ClassPriorsSum;
      textDirectoryLoader0.reset();
      evaluation0.truePositiveRate(2147483645);
      evaluation0.precision(1913);
      evaluation1.areaUnderPRC(19);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      try { 
        evaluation1.crossValidateModel("k,ahz=Sl#A", instances0, (-1224), stringArray0, (java.util.Random) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: k,ahz=Sl#A
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5929651324361664
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      double double1 = evaluation0.numFalseNegatives(25);
      assertEquals(0.0, double1, 0.01);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      double double2 = evaluation0.truePositiveRate(1665);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 25;
      doubleArray1[1] = (double) 1665;
      doubleArray1[2] = 605.11958585;
      doubleArray1[3] = 0.0;
      double double3 = evaluation0.weightedTruePositiveRate();
      double double4 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double4, double3, 0.01);
      
      double double5 = evaluation0.numTrueNegatives(34);
      assertEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.337827080898473
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.numFalseNegatives(25);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      textDirectoryLoader0.setDebug(true);
      evaluation0.truePositiveRate(1665);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 25;
      doubleArray1[1] = (double) 1665;
      doubleArray1[2] = 605.11958585;
      doubleArray1[3] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray1);
      MultiScheme multiScheme0 = new MultiScheme();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) multiScheme0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      try { 
        evaluation0.evaluateModel((Classifier) multiScheme0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2749372581977159
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.31128814303217
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.falsePositiveRate((-1243));
      evaluation0.numFalseNegatives((-1243));
      evaluation0.truePositiveRate((-1243));
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8184200769545007
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(25);
      evaluation0.numFalseNegatives((-1243));
      double double1 = evaluation0.truePositiveRate(17);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.precision(25);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double double4 = evaluation1.m_SumKBInfo;
      evaluation1.trueNegativeRate((-1243));
      evaluation0.unweightedMacroFmeasure();
      double double5 = evaluation0.errorRate();
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.787138819780121
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      double double0 = evaluation0.falsePositiveRate(25);
      evaluation0.falsePositiveRate((-1243));
      evaluation0.numFalseNegatives((-1243));
      evaluation0.truePositiveRate((-1243));
      double double1 = evaluation0.m_ClassPriorsSum;
      textDirectoryLoader0.reset();
      double double2 = evaluation0.truePositiveRate(1913);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.precision(34);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double4, 0.01);
      
      evaluation0.areaUnderPRC(34);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@data";
      evaluation0.trueNegativeRate((-3064));
      evaluation0.unweightedMacroFmeasure();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4902259998997436
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate((-1243));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numFalseNegatives((-1243));
      double double1 = evaluation0.truePositiveRate(17);
      evaluation0.numFalseNegatives((-1243));
      evaluation0.truePositiveRate(125);
      double double2 = evaluation0.precision(5780);
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.weightedPrecision();
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.793565828779524
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.fMeasure(5949);
      evaluation0.SFPriorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      textDirectoryLoader0.getOptions();
      evaluation2.falsePositiveRate(2031);
      evaluation2.numFalseNegatives((-1243));
      evaluation2.truePositiveRate((-1030));
      evaluation2.precision(5949);
      evaluation0.KBMeanInformation();
      evaluation2.pctIncorrect();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff";
      try { 
        Evaluation.evaluateModel((Classifier) inputMappedClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.misc.InputMappedClassifier:
         // 
         // -I
         // \tIgnore case when matching attribute names and nominal values.
         // -M
         // \tSuppress the output of the mapping report.
         // -trim
         // \tTrim white space from either end of names before matching.
         // -L <path to model to load>
         // \tPath to a model to load. If set, this model
         // \twill be used for prediction and any base classifier
         // \tspecification will be ignored. Environment variables
         // \tmay be used in the path (e.g. ${HOME}/myModel.model)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6632233829614873
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(true);
      evaluation0.falsePositiveRate(25);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)17;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      double[] doubleArray0 = new double[25];
      doubleArray0[0] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance((-3902.293750045804), doubleArray0);
      instances0.add((Instance) denseInstance0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      evaluation0.pctUnclassified();
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.numFalseNegatives(25);
      evaluation0.truePositiveRate(1665);
      C45Loader c45Loader0 = new C45Loader();
      SparseInstance sparseInstance0 = new SparseInstance(1665, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.459593384289201
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 25;
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.numFalseNegatives(25);
      evaluation0.truePositiveRate(1665);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 25;
      doubleArray1[1] = (double) 25;
      evaluation0.confusionMatrix();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.kappa();
      ConverterUtils.DataSource converterUtils_DataSource0 = null;
      try {
        converterUtils_DataSource0 = new ConverterUtils.DataSource(".xml");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.315209711659621
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(2620);
      evaluation0.numFalseNegatives(2620);
      int int0 = 1665;
      evaluation0.truePositiveRate(1665);
      evaluation0.confusionMatrix();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7995749966735852
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[25];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = evaluation0.falsePositiveRate(25);
      double double1 = evaluation0.numFalseNegatives(25);
      double double2 = evaluation0.truePositiveRate(67);
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.precision(114);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.KBMeanInformation();
      double double5 = evaluation0.pctIncorrect();
      assertEquals(double5, double4, 0.01);
      
      evaluation0.incorrect();
      double double6 = evaluation0.trueNegativeRate(114);
      assertEquals(0.0, double6, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3112881430321695
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      SMO sMO0 = new SMO();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sMO0.setDebug(true);
      jRip0.toString();
      Capabilities capabilities0 = new Capabilities(jRip0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives(15);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.truePositiveRate(1665);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.totalCost();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      SMO sMO0 = new SMO();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sMO0.setDebug(true);
      jRip0.toString();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      double double0 = (-172.29);
      int int0 = 3413;
      double[] doubleArray0 = null;
      int int1 = 12;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 12, (-92.823510368858));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      textDirectoryLoader0.getOptions();
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      double double0 = evaluation0.numFalseNegatives(25);
      double double1 = evaluation0.truePositiveRate(1665);
      double double2 = evaluation0.precision(5780);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.avgCost();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6999732158331993
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure(25);
      double double1 = evaluation0.SFPriorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double2 = evaluation0.numFalseNegatives(63);
      assertEquals(0.0, double2, 0.01);
      
      evaluation1.truePositiveRate(1043);
      double double3 = evaluation1.precision(29);
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation1.weightedPrecision();
      assertEquals(Double.NaN, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate((-1247));
      double double1 = evaluation0.numFalseNegatives((-1247));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.truePositiveRate(17);
      double double2 = evaluation0.precision(25);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.unweightedMicroFmeasure();
      double double4 = evaluation0.pctIncorrect();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-2469);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Logistic logistic0 = new Logistic();
      logistic0.getTechnicalInformation();
      AbstractClassifier.makeCopy(logistic0);
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) linearRegression0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-2469);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Logistic logistic0 = new Logistic();
      logistic0.getTechnicalInformation();
      Classifier classifier0 = AbstractClassifier.makeCopy(logistic0);
      Instance instance0 = null;
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-2469);
      doubleArray1[1] = (double) (-2469);
      doubleArray1[2] = (double) (-2469);
      doubleArray1[3] = (double) (-2469);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) (-2469);
      textDirectoryLoader0.setDebug(false);
      doubleArray2[1] = (double) (-2469);
      doubleArray2[2] = (double) (-2469);
      doubleArray0[1] = doubleArray2;
      try { 
        evaluation0.evaluationForSingleInstance(classifier0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.171218111933964
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.numFalseNegatives(25);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      evaluation0.truePositiveRate(1665);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 25;
      doubleArray1[1] = (double) 1665;
      doubleArray1[2] = 605.11958585;
      doubleArray1[3] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray1);
      try { 
        evaluation0.updateStatsForPredictor(605.11958585, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3112881430321695
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      textDirectoryLoader0.getOptions();
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      evaluation0.numFalseNegatives(25);
      evaluation0.truePositiveRate(1665);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2162443181522673
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      double double1 = evaluation0.m_SumSqrPredicted;
      double double2 = evaluation0.m_ClassPriorsSum;
      textDirectoryLoader0.reset();
      double double3 = evaluation0.truePositiveRate((-1993));
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.precision((-1993));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double4 = evaluation1.precision(25);
      assertEquals(0.0, double4, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double5 = evaluation2.weightedPrecision();
      assertEquals(Double.NaN, double5, 0.01);
      assertNotEquals(double5, double4, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2469);
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = (double) 25;
      doubleArray0[3] = (double) 25;
      double double0 = 4.5;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 3, 4.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6500
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 862.530430274658;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 4.5;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = 4.5;
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = 4.5;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1796082537), 4.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1796082537
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3144496732554845
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      evaluation0.falsePositiveRate(25);
      evaluation0.falsePositiveRate((-1243));
      evaluation0.numFalseNegatives((-1243));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ofK,%.kYhajRL7");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      try { 
        Evaluation.evaluateModel((Classifier) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "yNu[";
      stringArray0[1] = "{~e :";
      stringArray0[2] = "C. Atkeson and A. Moore and S. Schaal";
      stringArray0[3] = "";
      stringArray0[4] = "yNu[";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.recall((-250));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3269.623647);
      doubleArray0[1] = (-10.0);
      doubleArray0[2] = (-4225.86170481);
      doubleArray0[3] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1506.248733, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(25);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 25;
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.numFalseNegatives(25);
      evaluation0.truePositiveRate(1665);
      evaluation0.precision(5780);
      try { 
        Evaluation.evaluateModel("@relation", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name @relation.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      int int0 = 32;
      CostMatrix costMatrix0 = new CostMatrix(32);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Instances instances0 = null;
      String string0 = "";
      Evaluation.handleCostOption("", 1005);
      String string1 = "graph";
      File file0 = MockFile.createTempFile(".cost", "graph");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.getCapabilities();
      try { 
        Evaluation.handleCostOption("Value of -N must be > 0.", 1005);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      SMO sMO0 = new SMO();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sMO0.setDebug(true);
      jRip0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "f9*K|1q.APFT";
      stringArray0[3] = "";
      stringArray0[4] = "`_PL(X8V <9KV@ ";
      stringArray0[5] = "ry^<i";
      stringArray0[7] = "'t2Mt=^S;(";
      stringArray0[8] = "";
      try { 
        Evaluation.evaluateModel((Classifier) jRip0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }
}
