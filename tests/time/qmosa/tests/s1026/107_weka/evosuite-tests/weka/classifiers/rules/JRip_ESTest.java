/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:13:14 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.KStar;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3031513228679628
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      KStar kStar0 = new KStar();
      String[] stringArray0 = new String[1];
      kStar0.setEntropicAutoBlend(true);
      stringArray0[0] = "weka.classifiers.functions.GaussianProcesses";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      AbstractClassifier.runClassifier(kStar0, stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip0.setCheckErrorRate(true);
      jRip0.getSeed();
      Attribute attribute0 = new Attribute("}\"iJ?W]v%");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string0);
      
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, doubleArray0);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      binarySparseInstance0.toString(attribute0);
      jRip_RipperRule0.covers(binarySparseInstance0);
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      jRip_NominalAntd0.covers(binarySparseInstance0);
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(boolean1 == boolean0);
      
      jRip0.minNoTipText();
      jRip0.minNoTipText();
      String string1 = jRip0.checkErrorRateTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string1);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.143652409619771
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      protectedProperties2.keySet();
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) protectedProperties0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      RuleStats ruleStats0 = new RuleStats();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) ruleStats0);
      Predicate<Object> predicate4 = predicate3.negate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      predicate0.and(predicate5);
      Predicate<Object> predicate6 = predicate0.or(predicate2);
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate0.or(predicate7);
      BiFunction<Object, Object, Attribute> biFunction0 = (BiFunction<Object, Object, Attribute>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction0);
      predicate1.negate();
      arrayList0.removeIf(predicate2);
      Instances instances0 = new Instances("string", arrayList0, 4);
      Attribute attribute1 = new Attribute("&0E", linkedList0);
      attribute1.addRelation(instances0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute1);
      jRip_NominalAntd1.splitData(instances0, 0.0, 0);
      double double0 = jRip_NominalAntd0.getMaxInfoGain();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Instances instances0 = null;
      jRip0.globalInfo();
      int int0 = (-12);
      Attribute attribute0 = new Attribute("", (List<String>) null, (-12));
      Attribute.typeToString(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.setConsequent((-2112.54626026));
      try { 
        jRip_RipperRule1.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.542518944739726
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.globalInfo();
      Attribute attribute0 = new Attribute("", (List<String>) null, (-12));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 3;
      binarySparseInstance0.dataset();
      jRip0.setUsePruning(false);
      try { 
        jRip0.rulesetForOneClass(1549.06940476, (Instances) null, 4.0, (-3909.807344589));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4675368896014644
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "=N\"BUv";
      jRip0.setOptions(stringArray0);
      jRip0.optimizationsTipText();
      jRip0.getSeed();
      Attribute attribute0 = new Attribute("", "", 5);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getSplitPoint();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/p OJ4", arrayList0, 10);
      try { 
        jRip0.rulesetForOneClass(0.0, instances0, 0.0, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.globalInfo();
      int int0 = (-12);
      Attribute attribute0 = new Attribute("", (List<String>) null, (-12));
      Attribute.typeToString(attribute0);
      attribute0.addRelation((Instances) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule1.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3399002341122683
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      protectedProperties2.keySet();
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) protectedProperties0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      RuleStats ruleStats0 = new RuleStats();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) ruleStats0);
      Predicate<Object> predicate4 = predicate3.negate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      predicate0.and(predicate5);
      Predicate<Object> predicate6 = predicate0.or(predicate2);
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate0.or(predicate7);
      BiFunction<Object, Object, Attribute> biFunction0 = (BiFunction<Object, Object, Attribute>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction0);
      predicate1.negate();
      arrayList0.removeIf(predicate2);
      Instances instances0 = new Instances("string", arrayList0, 4);
      Properties properties1 = new Properties();
      jRip0.foldsTipText();
      jRip_NumericAntd0.splitData(instances0, 4, 2);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip0.getOptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (-2536.9173670821647);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(3119.14409712);
      jRip_RipperRule0.size();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      assertEquals("The maximum number of attributes to include in transformed attribute names.", principalComponents0.maximumAttributeNamesTipText());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6862668983950013
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      protectedProperties2.keySet();
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) protectedProperties0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      predicate0.or(predicate4);
      predicate1.negate();
      arrayList0.removeIf(predicate2);
      Instances instances0 = new Instances("those", arrayList0, 4);
      jRip_NominalAntd0.splitData(instances0, 0, (-293.71));
      Properties properties1 = new Properties();
      jRip_NumericAntd1.splitData(instances0, (-1747.5653351), 0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.globalInfo();
      Attribute attribute0 = new Attribute("", (List<String>) null, 68);
      Attribute.typeToString(attribute0);
      attribute0.addRelation((Instances) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "string";
      stringArray0[1] = "real";
      stringArray0[2] = "real";
      stringArray0[3] = "@attribute";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jRip0.enumerateMeasures();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("6Kj-v~3p", (List<String>) null, (-1315));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.att = attribute0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@end";
      jRip_NominalAntd0.toString();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      stringArray0[1] = "integer";
      JRip.main(stringArray0);
      jRip_NominalAntd0.maxInfoGain = 0.0;
      jRip_NominalAntd0.maxInfoGain = (double) 2;
      jRip_NominalAntd0.getCover();
      jRip0.globalInfo();
      jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jRip0.enumerateMeasures();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("6Kj-v~3p", (List<String>) null, (-1315));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.att = attribute0;
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@end";
      stringArray0[1] = "integer";
      JRip.main(stringArray0);
      jRip_NominalAntd0.maxInfoGain = 0.0;
      jRip_NominalAntd0.maxInfoGain = (double) 2;
      jRip_NominalAntd0.getCover();
      jRip0.globalInfo();
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.360381915118041
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      protectedProperties2.keySet();
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) protectedProperties0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      RuleStats ruleStats0 = new RuleStats();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) ruleStats0);
      Predicate<Object> predicate4 = predicate3.negate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      predicate0.and(predicate5);
      Predicate<Object> predicate6 = predicate0.or(predicate2);
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate0.or(predicate7);
      BiFunction<Object, Object, Attribute> biFunction0 = (BiFunction<Object, Object, Attribute>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction0);
      predicate8.negate();
      arrayList0.removeIf(predicate2);
      Instances instances0 = new Instances("those", arrayList0, 4);
      Properties properties1 = new Properties();
      jRip0.setOptions((String[]) null);
      jRip0.foldsTipText();
      jRip_NumericAntd0.splitData(instances0, 4, 2);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip0.getOptions();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", jRip0.foldsTipText());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.globalInfo();
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      binarySparseInstance0.dataset();
      try { 
        jRip0.rulesetForOneClass(1549.06940476, (Instances) null, 4.0, (-3909.807344589));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1445934548935424
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Attribute attribute1 = new Attribute("numeric", 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      JRip jRip1 = new JRip();
      AbstractClassifier.makeCopies(jRip1, 92);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "integer";
      stringArray0[1] = "real";
      stringArray0[2] = "-O";
      stringArray0[3] = "@attribute";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@attribute\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9164055708047496
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "V&$&SI0m";
      stringArray0[3] = "\nGrowing and pruning Replace ...";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<-\"~L.,>Y:*Q!FrywT");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[5] = "on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these ";
      String[] stringArray1 = jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.setOptions(stringArray1);
      assertEquals(11, stringArray1.length);
      
      String string0 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.555341749073327
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      jRip0.seedTipText();
      jRip0.getCheckErrorRate();
      double[] doubleArray0 = new double[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip0.getOptions();
      jRip0.setDebug(false);
      jRip0.debugTipText();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      double double0 = Double.POSITIVE_INFINITY;
      double[] doubleArray0 = new double[9];
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      jRip0.minNoTipText();
      String[] stringArray0 = new String[0];
      try { 
        AbstractClassifier.forName("jbh.'13CXBVv", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: jbh.'13CXBVv
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.284895754901243
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.measureBayesScore();
      Instances instances0 = bayesNet0.m_Instances;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip0.getOptions();
      jRip0.setDebug(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.debugTipText();
      jRip0.toString();
      jRip0.getOptimizations();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getDebug();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3141);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(3141);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.349421283797024
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getRevision();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.copy();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "KD'U]";
      stringArray0[1] = "8118";
      stringArray0[2] = "8118";
      stringArray0[3] = "8118";
      stringArray0[4] = "8118";
      stringArray0[5] = "8118";
      stringArray0[6] = "8118";
      jRip0.setOptions(stringArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      int[] intArray0 = new int[1];
      int int0 = 1294;
      intArray0[0] = 1294;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 5);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6930121983106288
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "!dW\"!b0gE}^=L00";
      stringArray0[2] = "Quit rule";
      JRip.main(stringArray0);
      jRip0.getSeed();
      jRip0.listOptions();
      Attribute attribute0 = new Attribute("!dW\"!b0gE}^=L00", 2922);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(69);
      attribute0.copy();
      jRip_NumericAntd0.covers(sparseInstance0);
      attribute0.setWeight(6);
      jRip_NumericAntd0.copy();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      String string0 = "|C_F=N`";
      String string1 = "X/ZdH;j";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3159);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.681095545078155
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Q2R", (String) null, protectedProperties0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Attribute attribute1 = new Attribute("@end", list0);
      Attribute attribute2 = new Attribute("\nrepDL: ", list0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      Object object0 = jRip_NumericAntd0.copy();
      BiFunction<Object, Object, ClassOrder> biFunction0 = (BiFunction<Object, Object, ClassOrder>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)properties0.merge(attribute1, object0, biFunction0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      jRip0.globalInfo();
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The seed used for randomizing the data.";
      stringArray0[1] = "The seed used for randomizing the data.";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.setFolds(95);
      Utils.SMALL = 6.283185307179586;
      stringArray0[2] = "";
      jRip0.setOptions(stringArray0);
      double double0 = jRip0.getMinNo();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jRip0.enumerateMeasures();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Rcla";
      stringArray0[1] = ")ZlsS";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = "6Kj-v~3p";
      try { 
        jRip0.rulesetForOneClass(4.6, (Instances) null, (-429.0), 4.6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6530523784389914
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.copy();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip0.getOptions();
      jRip0.setDebug(true);
      jRip0.debugTipText();
      jRip0.toString();
      int int0 = jRip0.getOptimizations();
      assertFalse(jRip0.getUsePruning());
      assertTrue(jRip0.getDebug());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      Utils.SMALL = (-1.0);
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Instances instances0 = null;
      Attribute attribute0 = new Attribute("kAHg=:>h", 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      JRip jRip1 = new JRip();
      jRip_NumericAntd0.toString();
      jRip0.checkErrorRateTipText();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("IC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // IC not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Attribute attribute1 = new Attribute("numeric", 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      JRip jRip1 = new JRip();
      jRip_NumericAntd0.toString();
      // Undeclared exception!
      try { 
        jRip1.getMeasure("null <= NaN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null <= NaN not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      int int0 = 624;
      Attribute attribute0 = new Attribute((String) null, linkedList0, 624);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      JRip jRip1 = new JRip();
      jRip_NumericAntd0.toString();
      // Undeclared exception!
      try { 
        jRip1.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6930121983106288
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      protectedProperties2.keySet();
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) protectedProperties0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      RuleStats ruleStats0 = new RuleStats();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) ruleStats0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      predicate0.and(predicate5);
      Predicate<Object> predicate6 = predicate0.or(predicate2);
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate0.or(predicate7);
      predicate1.negate();
      arrayList0.removeIf(predicate2);
      Instances instances0 = new Instances("those", arrayList0, 4);
      jRip_NominalAntd0.splitData(instances0, 0, (-293.71));
      Properties properties1 = new Properties();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      jRip_NumericAntd0.getAttr();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      protectedProperties2.keySet();
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) protectedProperties0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      RuleStats ruleStats0 = new RuleStats();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) ruleStats0);
      Predicate<Object> predicate4 = predicate3.negate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      predicate0.and(predicate5);
      Predicate<Object> predicate6 = predicate0.or(predicate2);
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate0.or(predicate7);
      BiFunction<Object, Object, Attribute> biFunction0 = (BiFunction<Object, Object, Attribute>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction0);
      predicate1.negate();
      arrayList0.removeIf(predicate2);
      Instances instances0 = new Instances("string", arrayList0, 4);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nominal";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "real";
      stringArray0[3] = "relational";
      stringArray0[4] = "numeric";
      stringArray0[5] = "date";
      stringArray0[6] = "integer";
      stringArray0[7] = ".arff";
      jRip0.setOptions(stringArray0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "g?";
      stringArray0[1] = "d";
      jRip0.setSeed(2321L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[2] = "V&$&SI0m";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[3] = "\nGrowing and pruning Replace ...";
      JRip.main(stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<-\"~L.,>Y:*Q!FrywT");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[5] = "on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these ";
      jRip0.setDebug(false);
      jRip0.debugTipText();
      jRip0.toString();
      jRip0.getFolds();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(95);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9'|P|aKwv<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("=", "Last newSlope = ", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.usePruningTipText();
      Attribute attribute0 = new Attribute("", (List<String>) null, (-12));
      attribute0.addRelation((Instances) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 935.4588, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.measureExtraArcs();
      jRip0.setDebug(false);
      String string1 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string1);
      
      String string2 = jRip0.seedTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("The seed used for randomizing the data.", string2);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "K";
      AbstractClassifier.makeCopies(jRip0, 3141);
      stringArray0[1] = "N%(D?FCf2";
      stringArray0[2] = "-P";
      stringArray0[3] = "phTVdzl(H";
      jRip0.setMinNo((-1248.132163));
      stringArray0[4] = "";
      stringArray0[5] = "\"aH35e%F|U}<V[SjF6C";
      stringArray0[6] = "$";
      jRip0.globalInfo();
      stringArray0[7] = "Du{GwfL'MWg9_tDg";
      stringArray0[8] = "weka.classifiers.rules.JRip$RipperRule";
      jRip0.setOptions(stringArray0);
      jRip0.optimizationsTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      AbstractClassifier.makeCopies(jRip0, 2839);
      jRip0.setMinNo(3141);
      jRip0.globalInfo();
      JRip jRip1 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "N%(D?FCf2";
      stringArray0[1] = "Du{GwfL'MWg9_tDg";
      double[] doubleArray0 = null;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(3141, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      RuleStats ruleStats0 = new RuleStats();
      attribute0.equalsMsg(ruleStats0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAccu();
      jRip0.getRevision();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("@| )kt9ls]-PL&}RAC", 10);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.toString();
      jRip0.checkErrorRateTipText();
      jRip0.setDebug(false);
      jRip0.debugTipText();
      try { 
        CostMatrix.parseMatlab("integer");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 1798.401792;
      jRip0.optimizationsTipText();
      jRip0.getRevision();
      jRip0.setOptimizations(0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-826));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("The normalized polynomial kernel.\nK(x,y) = <x,y>/sqrt(<x,x><y,y>) where <x,y> = PolyKernel(x,y)", (-1));
      JRip jRip0 = new JRip();
      attribute0.indexOfValue("The normalized polynomial kernel.\nK(x,y) = <x,y>/sqrt(<x,x><y,y>) where <x,y> = PolyKernel(x,y)");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      jRip_RipperRule0.hasAntds();
      jRip0.getCapabilities();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4940355237092673
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("a?p8#]'~", "");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip0.foldsTipText();
      jRip_RipperRule0.hasAntds();
      jRip0.setCheckErrorRate(false);
      jRip0.seedTipText();
      jRip0.getCheckErrorRate();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      DenseInstance denseInstance0 = new DenseInstance(0);
      jRip_RipperRule0.covers(denseInstance0);
      jRip_RipperRule0.size();
      assertFalse(jRip0.getCheckErrorRate());
      
      jRip0.setOptions((String[]) null);
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", jRip0.foldsTipText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      
      int int1 = jRip0.getOptimizations();
      assertEquals(2, int1);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.setDebug(false);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-1);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      int int1 = 123;
      RuleStats ruleStats0 = new RuleStats();
      jRip0.setCheckErrorRate(false);
      jRip0.usePruningTipText();
      JRip jRip1 = new JRip();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 123;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.143652409619771
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      protectedProperties2.keySet();
      Attribute.typeToString(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) protectedProperties0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      RuleStats ruleStats0 = new RuleStats();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) ruleStats0);
      Predicate<Object> predicate4 = predicate3.negate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      predicate0.and(predicate5);
      Predicate<Object> predicate6 = predicate0.or(predicate2);
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate0.or(predicate7);
      BiFunction<Object, Object, Attribute> biFunction0 = (BiFunction<Object, Object, Attribute>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction0);
      predicate1.negate();
      arrayList0.removeIf(predicate2);
      Instances instances0 = new Instances("string", arrayList0, 4);
      Attribute attribute1 = new Attribute("&0E", linkedList0);
      attribute1.addRelation(instances0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute1);
      jRip_NominalAntd1.splitData(instances0, 0.0, 0);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      
      String string0 = jRip1.seedTipText();
      assertEquals(1L, jRip1.getSeed());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(3, jRip1.getFolds());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals("The seed used for randomizing the data.", string0);
      assertFalse(jRip1.getDebug());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      String string0 = jRip0.toString();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("JRIP: No model built yet.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5]LZ");
      jRip0.setUsePruning(false);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "@data";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      protectedProperties0.values();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      jRip0.setDebug(false);
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
      
      String string1 = jRip0.seedTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals("The seed used for randomizing the data.", string1);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCheckErrorRate();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[1];
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      assertEquals(0, list0.size());
  }
}
