/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:16:48 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.util.Currency;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[3];
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("ADDRESS");
      StringBuffer stringBuffer0 = new StringBuffer("ADDRESS");
      FieldPosition fieldPosition0 = new FieldPosition(7);
      StringBuffer stringBuffer1 = numberFormat0.format(1L, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = decimalFormat0.format(0L, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = decimalFormat0.format((double) 0L, stringBuffer0, fieldPosition0);
      stringBuffer2.insert(7, (CharSequence) stringBuffer3);
      decimalFormat0.format(1L, stringBuffer2, fieldPosition0);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0);
      DecimalFormat decimalFormat1 = new DecimalFormat("ADDRESS");
      Currency currency0 = decimalFormat1.getCurrency();
      currency0.getNumericCode();
      numberFormat0.setCurrency(currency0);
      DecimalFormat decimalFormat2 = new DecimalFormat("", decimalFormatSymbols0);
      decimalFormat2.setDecimalSeparatorAlwaysShown(true);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setPatternSeparator('G');
      DecimalFormat decimalFormat0 = new DecimalFormat("ADDRESS");
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0);
      DecimalFormat decimalFormat1 = new DecimalFormat("ADDRESS");
      Currency currency0 = decimalFormat1.getCurrency();
      currency0.getNumericCode();
      numberFormat0.setCurrency(currency0);
      matrix0.print(numberFormat0, (int) 'G');
      DecimalFormat decimalFormat2 = new DecimalFormat("ADDRESS");
      decimalFormat0.setCurrency(currency0);
      DecimalFormat decimalFormat3 = new DecimalFormat("ADDRESS", decimalFormatSymbols0);
      Random.setNextRandom(2);
      double[] doubleArray1 = new double[0];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[3];
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setPatternSeparator('G');
      DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat1 = new DecimalFormat("ADDRESS");
      decimalFormat1.setDecimalFormatSymbols(decimalFormatSymbols0);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0);
      DecimalFormat decimalFormat2 = new DecimalFormat("%C\"l8+CSNlEiiN$n[");
      Currency currency0 = decimalFormat1.getCurrency();
      decimalFormat1.setMinimumIntegerDigits((-168));
      decimalFormat2.setCurrency(currency0);
      matrix0.print((NumberFormat) decimalFormat0, (-1373));
      decimalFormat0.setDecimalSeparatorAlwaysShown(true);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      assertEquals(3, doubleArray2.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[3];
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat1 = new DecimalFormat("ADDRESS");
      StringBuffer stringBuffer0 = new StringBuffer("ADDRESS");
      FieldPosition fieldPosition0 = new FieldPosition(7);
      StringBuffer stringBuffer1 = decimalFormat0.format(1L, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = decimalFormat1.format(0L, stringBuffer1, fieldPosition0);
      StringBuffer stringBuffer3 = decimalFormat1.format((double) 0L, stringBuffer0, fieldPosition0);
      stringBuffer2.insert(7, (CharSequence) stringBuffer3);
      decimalFormat1.format(1L, stringBuffer2, fieldPosition0);
      decimalFormat1.setDecimalFormatSymbols(decimalFormatSymbols0);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0);
      DecimalFormat decimalFormat2 = new DecimalFormat("ADDRESS");
      Currency currency0 = decimalFormat2.getCurrency();
      currency0.getNumericCode();
      decimalFormat0.setCurrency(currency0);
      DecimalFormat decimalFormat3 = new DecimalFormat("", decimalFormatSymbols0);
      decimalFormat3.setDecimalSeparatorAlwaysShown(true);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0625;
      doubleArray1[1] = 1371.8;
      doubleArray1[2] = 23.12952222211089;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0625;
      doubleArray2[1] = 1371.8;
      doubleArray2[2] = 23.12952222211089;
      doubleArray2[3] = (-11.0);
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = 23.12952222211089;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[20];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = (-11.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray3, true, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[3];
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setPatternSeparator('G');
      DecimalFormat decimalFormat0 = new DecimalFormat("ADDRESS");
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      decimalFormat0.setRoundingMode(roundingMode0);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0);
      DecimalFormat decimalFormat1 = new DecimalFormat("ADDRESS");
      matrix0.print(numberFormat0, (int) 'G');
      DecimalFormat decimalFormat2 = new DecimalFormat("ADDRESS");
      decimalFormat2.setDecimalSeparatorAlwaysShown(true);
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, (boolean[]) null);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.294307519607125
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(2578);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement((-1867));
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(2578);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.size();
      StringReader stringReader0 = new StringReader("8076");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 2054);
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.read(bufferedReader0);
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = (double) 2;
      stringReader0.reset();
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1867);
      doubleArray0[3] = (double) (-971);
      doubleArray0[4] = (double) (-1867);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[3];
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setPatternSeparator('G');
      DecimalFormat decimalFormat1 = new DecimalFormat("ADDRESS");
      decimalFormat0.applyLocalizedPattern("");
      StringBuffer stringBuffer0 = new StringBuffer("ADDRESS");
      FieldPosition fieldPosition0 = new FieldPosition(7);
      StringBuffer stringBuffer1 = decimalFormat0.format(1L, stringBuffer0, fieldPosition0);
      StringBuffer stringBuffer2 = decimalFormat1.format(0L, stringBuffer1, fieldPosition0);
      decimalFormat1.format(1L, stringBuffer2, fieldPosition0);
      decimalFormat1.setDecimalFormatSymbols(decimalFormatSymbols0);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0);
      DecimalFormat decimalFormat2 = new DecimalFormat("ADDRESS");
      decimalFormat2.format((double) 0L);
      Currency currency0 = decimalFormat2.getCurrency();
      decimalFormat0.setCurrency(currency0);
      matrix0.print((NumberFormat) decimalFormat0, (int) 'G');
      decimalFormat2.setDecimalSeparatorAlwaysShown(true);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[3];
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setPatternSeparator('G');
      DecimalFormat decimalFormat0 = new DecimalFormat("ADDRESS");
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols0);
      decimalFormat0.setParseBigDecimal(true);
      decimalFormat0.setGroupingUsed(true);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0);
      DecimalFormat decimalFormat1 = new DecimalFormat("ADDRESS");
      matrix0.print((NumberFormat) decimalFormat0, 16);
      matrix0.print(numberFormat0, 16);
      decimalFormat0.setDecimalSeparatorAlwaysShown(false);
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, (boolean[]) null);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[3];
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols0.setPatternSeparator('G');
      DecimalFormat decimalFormat1 = new DecimalFormat("ADDRESS");
      decimalFormat1.setDecimalFormatSymbols(decimalFormatSymbols0);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0);
      DecimalFormat decimalFormat2 = new DecimalFormat("ADDRESS");
      Currency currency0 = decimalFormat2.getCurrency();
      decimalFormat0.setCurrency(currency0);
      matrix0.print((NumberFormat) decimalFormat0, (int) 'G');
      decimalFormat0.setDecimalSeparatorAlwaysShown(true);
      boolean[] booleanArray0 = new boolean[23];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0000000298023224;
      doubleArray1[1] = 991.79;
      doubleArray1[2] = 2601.385;
      doubleArray0[0] = doubleArray1;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-3596), 522);
      MockFile mockFile0 = new MockFile("k<yX", "^z<vAvBm(!{p#");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "^z<vAvBm(!{p#");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      matrix0.print((PrintWriter) mockPrintWriter0, 522, 8);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lm.U<e+w=");
      boolean[] booleanArray0 = new boolean[4];
      matrix0.normF();
      FileSystemHandling.shouldAllThrowIOExceptions();
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {1.0, Double.POSITIVE_INFINITY, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0000000298023224, 991.79, 2601.385}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.27660795407654
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement((-1027));
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt(3120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3120
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2350475846462445
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      int int0 = 0;
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(1);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(458);
      int int1 = 5;
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.964532478280498
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(9, 9);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (double) 9;
      NumberFormat.getNumberInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormatSymbols decimalFormatSymbols1 = DecimalFormatSymbols.getInstance();
      decimalFormatSymbols1.setPatternSeparator('e');
      DecimalFormat decimalFormat0 = new DecimalFormat("\n\n", decimalFormatSymbols1);
      decimalFormat0.setDecimalFormatSymbols(decimalFormatSymbols1);
      decimalFormat0.setParseBigDecimal(true);
      decimalFormat0.setGroupingUsed(false);
      matrix0.print((NumberFormat) decimalFormat0, 2);
      matrix0.print((NumberFormat) decimalFormat0, 9);
      DecimalFormat decimalFormat1 = new DecimalFormat("Lt 6v41>Ya$st98?j`", decimalFormatSymbols0);
      decimalFormat1.setDecimalSeparatorAlwaysShown(true);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1);
      optimization_DynamicIntArray0.addElement(23);
      assertEquals(1, optimization_DynamicIntArray0.size());
  }
}
