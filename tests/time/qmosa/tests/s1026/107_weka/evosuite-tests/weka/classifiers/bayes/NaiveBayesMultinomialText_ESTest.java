/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:33:32 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.stopwordsTipText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The file containing the stopwords (if this is a directory then the default ones are used).";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.m_normalize = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.stemmerTipText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = false;
      double double0 = 3080.0;
      Instance instance0 = null;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1848.564;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 6.0;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.setMinWordFrequency((-2387.0));
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.tokenizerTipText();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals((-2387.0), double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = false;
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      naiveBayesMultinomialText0.m_norm = 0.0;
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)106;
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.toString();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 2835;
      intArray0[1] = 2835;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.tartarus.snowball.ext";
      stringArray0[1] = "";
      stringArray0[2] = "org.tartarus.snowball";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      stringArray0[3] = "org.tartarus.snowball.ext";
      stringArray0[4] = "org.tartarus.snowball.ext";
      snowballStemmer0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.globalInfo();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("yt%D(U\"b", arrayList0, 2835);
      try { 
        naiveBayesMultinomialText1.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.048204044501548
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.m_t = 3433.58129900397;
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.m_periodicP = 1743;
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.pruneDictionary();
      DenseInstance denseInstance0 = new DenseInstance(33);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals(1743, naiveBayesMultinomialText0.getPeriodicPruning());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText1.m_lnorm;
      naiveBayesMultinomialText1.pruneDictionary();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      naiveBayesMultinomialText1.pruneDictionary();
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.047433925133046
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setMinWordFrequency(2.0);
      KDTree kDTree0 = new KDTree();
      double double0 = (-1594.6616);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (double) 2;
      try { 
        naiveBayesMultinomialText0.classifyInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1115.9);
      doubleArray0[2] = (-1115.9);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 3929;
      intArray0[2] = (-2574);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 10000);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2008.7255959972988), intArray0, (-2574));
      try { 
        naiveBayesMultinomialText1.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1682737302712245
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.m_periodicP = 1;
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setLNorm(230.7301433);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      MockFile mockFile0 = new MockFile(file0, "9122");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getPeriodicPruning();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9122";
      stringArray0[1] = "9122";
      stringArray0[2] = "9122";
      stringArray0[3] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals(230.7301433, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.723602588751465
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PM;rZ^XdOfQ0<8,z";
      stringArray0[1] = "s";
      naiveBayesMultinomialText0.m_useStopList = false;
      stringArray0[2] = "s";
      stringArray0[3] = "s";
      stringArray0[4] = "s";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getPeriodicPruning();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0310763973814288
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 2835;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      SnowballStemmer snowballStemmer1 = new SnowballStemmer();
      String[] stringArray0 = new String[0];
      snowballStemmer1.setOptions(stringArray0);
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText1.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      String string1 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string1);
      
      MockFile mockFile0 = new MockFile("E<62}V/Zl'", "");
      String string2 = naiveBayesMultinomialText1.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string2);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      String string3 = naiveBayesMultinomialText3.normTipText();
      assertEquals("The norm of the instances after normalization.", string3);
      
      naiveBayesMultinomialText2.minWordFrequencyTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText4.getNorm();
      assertEquals(1.0, double0, 0.01);
      
      naiveBayesMultinomialText1.pruneDictionary();
      naiveBayesMultinomialText2.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText2.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText2.getLowercaseTokens());
      assertEquals(3.0, naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText2.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText2.getUseStopList());
      assertFalse(naiveBayesMultinomialText2.getUseWordFrequencies());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 2835;
      intArray0[1] = 2835;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.tartarus.snowball.ext";
      stringArray0[1] = "";
      stringArray0[2] = "org.tartarus.snowball";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      stringArray0[3] = "org.tartarus.snowball.ext";
      stringArray0[4] = "org.tartarus.snowball.ext";
      snowballStemmer0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, (String) null);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      String string1 = naiveBayesMultinomialText0.globalInfo();
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string1);
      
      MockFile mockFile0 = new MockFile("yt%D(U\"b", "useful");
      mockFile0.getCanonicalFile();
      MockFile mockFile1 = new MockFile("org.tartarus.snowball", "org.tartarus.snowball.ext");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.setOptions(stringArray0);
      File file0 = serializedClassifier0.getModelFile();
      file0.createNewFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      String string2 = naiveBayesMultinomialText0.LNormTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("The LNorm to use for document length normalization.", string2);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2303860477172286
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      NullStemmer nullStemmer0 = new NullStemmer();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLNorm();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setMinWordFrequency(3.0);
      KDTree kDTree0 = new KDTree();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText1.normTipText();
      naiveBayesMultinomialText2.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getNorm();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText2.pruneDictionary();
      assertFalse(naiveBayesMultinomialText2.getUseWordFrequencies());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1253.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1663.3295330933);
      doubleArray0[3] = 1690.58129900397;
      doubleArray0[4] = (-1446.23714);
      doubleArray0[5] = 2524.3494832026;
      doubleArray0[6] = 0.001;
      naiveBayesMultinomialText0.listOptions();
      doubleArray0[7] = (-491.9178870074892);
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, double0, 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 1);
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getUseStopList();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_minWordP = 1690.58129900397;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball";
      stringArray0[3] = "org.tartarus.snowball";
      stringArray0[4] = "org.tartarus.snowball";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "org.tartarus.snowball.ext";
      stringArray0[8] = "";
      snowballStemmer0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.globalInfo();
      MockFile mockFile0 = new MockFile("org.tartarus.snowball", "org.tartarus.snowball");
      File file0 = mockFile0.getCanonicalFile();
      MockFile mockFile1 = new MockFile("", "org.tartarus.snowball.ext");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.setOptions(stringArray0);
      serializedClassifier0.getModelFile();
      mockFile0.createNewFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getStopwords();
      assertEquals(1690.58129900397, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1715093175284585
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_t = 0.0;
      naiveBayesMultinomialText0.setMinWordFrequency(540.0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setLNorm((-161.57791793444));
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals(540.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.51779727751084
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setMinWordFrequency(2.0);
      KDTree kDTree0 = new KDTree();
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide();
      slidingMidPointOfWidestSide0.getTechnicalInformation();
      kDTree0.setNodeSplitter(slidingMidPointOfWidestSide0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      doubleArray0[3] = (double) 1;
      naiveBayesMultinomialText0.m_leplace = 2.0;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (-1594.6616);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 0;
      naiveBayesMultinomialText0.setMinWordFrequency(1.0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(200.202105, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((-11.305747277), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(200.202105, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2146214135;
      intArray0[1] = (-3237);
      intArray0[2] = (-3237);
      intArray0[3] = (-3237);
      intArray0[4] = (-2206);
      intArray0[5] = (-3237);
      SparseInstance sparseInstance1 = new SparseInstance((-3237), doubleArray0, intArray0, 2123);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.098114931959847
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setMinWordFrequency((-3276.0544320154017));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1001.40695);
      doubleArray0[1] = (-3276.0544320154017);
      doubleArray0[2] = (-1001.40695);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The LNorm to use for document length normalization.";
      stringArray0[1] = "The LNorm to use for document length normalization.";
      stringArray0[2] = "The LNorm to use for document length normalization.";
      stringArray0[3] = "YT5t%;'@c.B Q0Q";
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      stringArray0[4] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[5] = "The LNorm to use for document length normalization.";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.setNorm((-1001.40695));
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setPeriodicPruning(65);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setPeriodicPruning((-509));
      naiveBayesMultinomialText0.getLNorm();
      StringReader stringReader0 = new StringReader("*2,=)?");
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(stringReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*2,=)?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStemmer();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 756.98505;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray1[4] = 756.98505;
      doubleArray1[5] = 1654.272;
      doubleArray1[7] = 0.0;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(756.98505, doubleArray1, (int[]) null, (-668));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1568.0052928689;
      doubleArray0[2] = (-655.5791953570524);
      doubleArray0[3] = (-356.8);
      doubleArray0[4] = 604.906403588;
      doubleArray0[5] = 0.05;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.51779727751084
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setMinWordFrequency(2.0);
      KDTree kDTree0 = new KDTree();
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide();
      slidingMidPointOfWidestSide0.getTechnicalInformation();
      kDTree0.setNodeSplitter(slidingMidPointOfWidestSide0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.m_leplace = 2.0;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-1594.6616);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[2] = 0;
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7216997293944343
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PM;rZ^XdOfQ0<8,z";
      stringArray0[1] = "s";
      naiveBayesMultinomialText0.m_useStopList = true;
      stringArray0[2] = "s";
      stringArray0[3] = "s";
      stringArray0[4] = "s";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getPeriodicPruning();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText1.minWordFrequencyTipText();
      MockFile mockFile0 = new MockFile("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", "");
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency(642.82318277);
      naiveBayesMultinomialText0.getMinWordFrequency();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      IteratedLovinsStemmer.main(stringArray0);
      iteratedLovinsStemmer0.getRevision();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      assertEquals(642.82318277, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.LNormTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText2.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.192898685950695
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setNorm((-1589.05210735443));
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setNorm((-1589.05210735443));
      naiveBayesMultinomialText0.normTipText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "The norm of the instances after normalization.";
      stringArray0[3] = "org.tartarus.snowball";
      stringArray0[4] = "org.tartarus.snowball";
      stringArray0[5] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[6] = "org.tartarus.snowball";
      stringArray0[7] = "org.tartarus.snowball.ext";
      stringArray0[8] = "Whether to convert all tokens to lowercase";
      snowballStemmer0.setOptions(stringArray0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals((-1589.05210735443), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 1743;
      naiveBayesMultinomialText0.m_periodicP = 1743;
      naiveBayesMultinomialText0.m_minWordP = 1690.58129900397;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = tokenizer0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3120);
      String string0 = "";
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment.getSystemWide();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Environment.main(stringArray0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("idQ;LAb,W3]ME(MYhB");
      SnowballStemmer.listStemmers();
      Discretize discretize0 = new Discretize();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 756.98505;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<NGramTokenizer> linkedList1 = new LinkedList<NGramTokenizer>();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      linkedList1.add(nGramTokenizer0);
      String[] stringArray0 = new String[1];
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8226867707962464
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.m_leplace = 3.0;
      Instance instance0 = null;
      naiveBayesMultinomialText0.setNorm(0.0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      DenseInstance denseInstance0 = new DenseInstance(1691);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      int[] intArray0 = new int[10];
      intArray0[0] = 2835;
      naiveBayesMultinomialText0.listOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2068);
      Attribute attribute0 = new Attribute("-stoplist", (List<String>) null, (-3237));
      binarySparseInstance0.setValue(attribute0, "string");
      binarySparseInstance0.getRevision();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 1743;
      naiveBayesMultinomialText0.m_minWordP = 1690.58129900397;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1690.58129900397;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1095.88), doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.00810108335994
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom(10);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "?ny]>JsR!FX";
      stringArray0[1] = "";
      stringArray0[2] = "F1'?`\"<&uSw^9";
      stringArray0[3] = "";
      stringArray0[4] = "ZeroR predicts class value: ";
      stringArray0[5] = "z-)\"";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      sGDText0.getCapabilities();
      naiveBayesMultinomialText0.getTokenizer();
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      
      String string1 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string1);
      
      File file0 = sGDText0.getStopwords();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      naiveBayesMultinomialText0.setStopwords(file0);
      String string2 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string2);
      
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(0, int0);
      
      naiveBayesMultinomialText0.getNormalizeDocLength();
      String string3 = naiveBayesMultinomialText0.stemmerTipText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("The stemming algorithm to use on the words.", string3);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((-11.305747277), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-3237));
      Random.setNextRandom((-3237));
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      SnowballStemmer snowballStemmer1 = new SnowballStemmer();
      snowballStemmer1.stem("org.tartarus.snowball.ext");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(45.0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 45.0;
      doubleArray0[1] = (-20.7244919903907);
      doubleArray0[2] = (-20.7244919903907);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[3] = (-20.7244919903907);
      doubleArray0[4] = (-20.7244919903907);
      doubleArray0[5] = 45.0;
      doubleArray0[6] = 45.0;
      DenseInstance denseInstance0 = new DenseInstance((-20.7244919903907), doubleArray0);
      Attribute attribute0 = new Attribute("[EN}*aVO", (-3237));
      // Undeclared exception!
      try { 
        denseInstance0.setValue(attribute0, "+PN^BS{e#M_h>aXV%i/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute neither nominal nor string!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6298718780844146
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(2.0, double0, 0.01);
      
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide0 = new SlidingMidPointOfWidestSide();
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide1 = new SlidingMidPointOfWidestSide();
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide2 = new SlidingMidPointOfWidestSide();
      slidingMidPointOfWidestSide2.getTechnicalInformation();
      SlidingMidPointOfWidestSide slidingMidPointOfWidestSide3 = new SlidingMidPointOfWidestSide();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.tartarus.snowball";
      stringArray0[1] = "org.tartarus.snowball";
      stringArray0[2] = "org.tartarus.snowball.ext";
      stringArray0[3] = "org.tartarus.snowball.ext";
      stringArray0[4] = "org.tartarus.snowball.ext";
      stringArray0[5] = "org.tartarus.snowball.ext";
      snowballStemmer0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("9122", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l}jz1>KHrQ\"[tkdU";
      stringArray0[1] = "Extracting data...";
      stringArray0[2] = "*P";
      stringArray0[3] = "s|)z9g8d{&oAiv";
      stringArray0[4] = "L*MY|<n~)n_$";
      NaiveBayesMultinomialText.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }
}
