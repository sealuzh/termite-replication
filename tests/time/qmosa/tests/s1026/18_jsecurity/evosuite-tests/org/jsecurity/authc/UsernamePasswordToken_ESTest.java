/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:10:59 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)36;
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("M[YN.bDW%>i+_>Z^6", "M[YN.bDW%>i+_>Z^6", true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=true", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("HQNF");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(">j`Q6s:GO>ga:}+X&[b", "", inetAddress0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[2] = '~';
      MockInetAddress.anyLocalAddress();
      char[] charArray1 = new char[6];
      charArray1[0] = ' ';
      charArray1[1] = ' ';
      charArray1[2] = 'b';
      charArray1[3] = 'z';
      charArray1[4] = '~';
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 'C';
      charArray0[3] = '@';
      charArray0[4] = '-';
      charArray0[5] = '~';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      String string0 = usernamePasswordToken0.toString();
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", " - ", true, inetAddress0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = MockInetAddress.getLocalHost();
      assertFalse(inetAddress1.isMCSiteLocal());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.061093750171824
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "klASB 64j'~/fSI");
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getUsername();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
      
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false, inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '-';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '}';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0);
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", charArray0);
      String string0 = usernamePasswordToken1.toString();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6152804042395514
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '\u0000';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = 'F';
      charArray0[5] = 'F';
      charArray0[6] = ':';
      charArray0[7] = '\u001C';
      charArray0[8] = '1';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("x[(B}", charArray0);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, ")");
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2263282181113064
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(">j`Q6s:GO>ga:}+X&[b", "", inetAddress0);
      char[] charArray0 = new char[5];
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", "", inetAddress0);
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken1.setPassword(charArray0);
      usernamePasswordToken1.getPassword();
      usernamePasswordToken1.getPassword();
      usernamePasswordToken1.clear();
      usernamePasswordToken1.clear();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setUsername((String) null);
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setUsername("M_aM1y-\"EHB");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("|pO:?Z ", (String) null, inetAddress0);
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '\'';
      charArray0[2] = '#';
      charArray0[3] = '+';
      charArray0[4] = 'F';
      charArray0[5] = 'N';
      charArray0[6] = ':';
      charArray0[7] = '.';
      charArray0[8] = '1';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken", charArray0, true);
      usernamePasswordToken0.setRememberMe(true);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.setRememberMe(false);
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = MockInetAddress.getLocalHost();
      assertSame(inetAddress1, inetAddress0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("|pO:?Z ", "|pO:?Z ", inetAddress0);
      usernamePasswordToken0.setInetAddress(inetAddress1);
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress2 = MockInetAddress.getLocalHost();
      assertEquals("192.168.1.42", inetAddress2.getHostAddress());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("|pO:?Z ", "|pO:?Z ", inetAddress0);
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.694124545362909
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("|Hv07P,|6@/_RdE=8N!", charArray0, false);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      Object object0 = new Object();
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.getCredentials();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.getPrincipal();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken1.setPassword(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememberMe=", ", rememberMe=", true);
      usernamePasswordToken0.getCredentials();
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'c';
      charArray0[2] = '?';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = '<';
      charArray0[6] = 'Z';
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("6bQ", "6bQ", true);
      assertTrue(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", " - ", true, inetAddress0);
      usernamePasswordToken0.setUsername("?QCI .]]JgT{D|Z&`!i");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress1.isLinkLocalAddress());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(",VHkYOY7pdTXvY", "", false);
      usernamePasswordToken0.setUsername(",VHkYOY7pdTXvY");
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("|pO:?Z ", "|pO:?Z ", inetAddress0);
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - |pO:?Z , rememberMe=false (/192.168.1.42)", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
