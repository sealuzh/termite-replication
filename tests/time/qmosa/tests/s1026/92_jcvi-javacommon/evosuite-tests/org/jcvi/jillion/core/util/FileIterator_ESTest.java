/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:20:11 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4795990081423045
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder2.build();
      File file0 = MockFile.createTempFile("@=M", "@=M", (File) mockFile0);
      fileIterator0.updateFileIterator(file0);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      multipleFileFilter2.accept(mockFile0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = null;
      MultipleFileFilter multipleFileFilter5 = null;
      try {
        multipleFileFilter5 = new MultipleFileFilter((FileFilter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5579783234303455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder3.build();
      fileIterator0.updateFileIterator(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.getNextFile();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator1.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.616270893638449
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder3.build();
      fileIterator1.updateFileIterator(mockFile0);
      fileIterator_FileIteratorBuilder4.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEachRemaining(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = fileIterator_FileIteratorBuilder4.includeDirectories(true);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder5.build();
      fileIterator3.updateFileIterator(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder6 = fileIterator_FileIteratorBuilder4.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder6.includeHiddenFiles(true);
      File file0 = fileIterator3.getNextFile();
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator1.setUpInitialState(mockFile0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.736112471646773
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEachRemaining(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder4.includeDirectories(false);
      fileIterator1.updateFileIterator(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder4.includeDirectories(true);
      fileIterator2.setUpInitialState(mockFile0);
      assertTrue(fileIterator2.hasNext());
      
      File file0 = MockFile.createTempFile("no elements in empty iterator", "");
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder3.build();
      File file1 = fileIterator3.getNextFile();
      FileIterator.createDepthFirstFileIteratorBuilder(file1);
      FileIterator.createNonRecursiveFileIteratorBuilder(file1);
      fileIterator3.iterator();
      assertTrue(fileIterator3.hasNext());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.7134683070193915
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      MockFile mockFile1 = new MockFile("");
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder2.build();
      MockFile mockFile2 = new MockFile("", "");
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEachRemaining(consumer0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator2.setUpInitialState(mockFile2);
      assertTrue(fileIterator2.hasNext());
      
      MockFile mockFile3 = new MockFile("");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile3);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      fileIterator1.getNextFile();
      assertTrue(fileIterator1.hasNext());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.71030834853905
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder3.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator1.setUpInitialState(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEachRemaining(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      File file0 = fileIterator1.next();
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder0.build();
      fileIterator3.setUpInitialState(mockFile0);
      MockFile.createTempFile("_9zi\bor", "5@Lt*");
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder5.equals((Object)fileIterator_FileIteratorBuilder4));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.659134867203645
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      mockFile0.getAbsoluteFile();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEachRemaining(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder3.includeDirectories(false);
      fileIterator1.updateFileIterator(mockFile0);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder3.includeDirectories(true);
      fileIterator2.setUpInitialState(mockFile0);
      fileIterator1.getNextFile();
      File file0 = MockFile.createTempFile("no elements in empty iterator", "");
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator1.hasNext();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator2.getNextFile();
      assertTrue(fileIterator2.hasNext());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5924204441691967
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.updateFileIterator(mockFile0);
      fileIterator_FileIteratorBuilder1.build();
      String string0 = "~$71Y3uLP";
      String string1 = "_d[j+CKeX@bz_!;fT;";
      MockFile mockFile1 = new MockFile("_d[j+CKeX@bz_!;fT;", "");
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEachRemaining(consumer0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      File file0 = null;
      FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7198883680164587
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder3.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      MockFile mockFile1 = new MockFile("%N'}P@rdAx2", "%N'}P@rdAx2");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder3.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEachRemaining(consumer0);
      MockFile mockFile2 = new MockFile("%N'}P@rdAx2", "%N'}P@rdAx2");
      fileIterator_FileIteratorBuilder3.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      fileIterator_FileIteratorBuilder3.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder5.includeHiddenFiles(false);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      fileIterator1.setUpInitialState(mockFile2);
      MockFile.createTempFile("cP*!47vcB8qJY>bw\"Cv", "\"^<\"Rs7y)0{<q{pXLX");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder6 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      assertFalse(fileIterator_FileIteratorBuilder6.equals((Object)fileIterator_FileIteratorBuilder4));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5266546340326324
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEachRemaining(consumer0);
      fileIterator1.updateFileIterator(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile("~$71Y3uLP", "_d[j+CKeX@bz_!;fT;");
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder3.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder4.includeHiddenFiles(false);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.setUpInitialState(mockFile1);
      try { 
        MockFile.createTempFile("", "_d[j+CKeX@bz_!;fT;");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3945312369292484
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder2.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      // Undeclared exception!
      try { 
        fileIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.585744041575728
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.spliterator();
      mockFile0.toURL();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      mockFile0.setReadOnly();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator0.iterator();
      fileIterator0.iterator();
      // Undeclared exception!
      try { 
        mockFile0.renameTo((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3251168177787394
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator0.setUpInitialState(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator1.updateFileIterator(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEachRemaining(consumer0);
      fileIterator_FileIteratorBuilder3.includeDirectories(true);
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder4.includeHiddenFiles(false);
      fileIterator2.setUpInitialState(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      File file0 = fileIterator2.getNextFile();
      assertNull(file0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.7847749632450958
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder3.build();
      fileIterator_FileIteratorBuilder0.build();
      mockFile0.setExecutable(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder3.build();
      assertTrue(fileIterator2.hasNext());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEachRemaining(consumer0);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder3.includeDirectories(true);
      fileIterator1.updateFileIterator(mockFile0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer1);
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder3.includeDirectories(true);
      fileIterator1.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder4.includeHiddenFiles(true);
      fileIterator2.hasNext();
      fileIterator0.getNextFile();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.8011033974655257
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder3.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder2.build();
      MockFile mockFile1 = new MockFile("~$71Y3uLP", "$y_`(V\"'4bmR`");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEachRemaining(consumer0);
      MockFile mockFile2 = new MockFile("", "no more files");
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      fileIterator_FileIteratorBuilder4.includeHiddenFiles(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      mockFile2.setWritable(true, false);
      File file0 = MockFile.createTempFile("~$71Y3uLP", ")qFxPf*[ZU");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator1.iterator();
      // Undeclared exception!
      try { 
        fileIterator1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5692321286794746
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder2.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList2);
      multipleFileFilter8.accept(mockFile0);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList3);
      linkedList3.add((FileFilter) multipleFileFilter6);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter7;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter6;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter11;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter8;
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(fileFilterArray0);
      assertFalse(multipleFileFilter12.equals((Object)multipleFileFilter2));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.678905911670049
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/", "/");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator1.updateFileIterator(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile1 = new MockFile("", "_d[j+CKeX@bz_!;fT;");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder3.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator2.forEachRemaining(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder4.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder5.includeHiddenFiles(false);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.setUpInitialState(mockFile1);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder6 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder6.equals((Object)fileIterator_FileIteratorBuilder5));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.5707157748523417
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setWritable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      linkedList5.add((FileFilter) multipleFileFilter0);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList7);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList5);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList6);
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList8);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList6);
      multipleFileFilter2.accept(mockFile0);
      LinkedList<FileFilter> linkedList9 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList10 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList0);
      linkedList9.add((FileFilter) multipleFileFilter2);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList7);
      MultipleFileFilter multipleFileFilter12 = null;
      try {
        multipleFileFilter12 = new MultipleFileFilter((FileFilter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[7] = (FileFilter) multipleFileFilter7;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[8] = (FileFilter) multipleFileFilter8;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter9);
      fileIterator_FileIteratorBuilder0.build();
      List<FileFilter> list0 = null;
      MultipleFileFilter multipleFileFilter10 = null;
      try {
        multipleFileFilter10 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileFilter[] fileFilterArray0 = new FileFilter[8];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8420905954707214
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      List<FileFilter> list0 = null;
      MultipleFileFilter multipleFileFilter0 = null;
      try {
        multipleFileFilter0 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("z>", "z>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.385007662460106
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator_FileIteratorBuilder0.build();
      List<FileFilter> list0 = null;
      MultipleFileFilter multipleFileFilter0 = null;
      try {
        multipleFileFilter0 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("]?s0jutod?8:hk3");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      mockFile0.setReadable(true);
      linkedList0.listIterator();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }
}
