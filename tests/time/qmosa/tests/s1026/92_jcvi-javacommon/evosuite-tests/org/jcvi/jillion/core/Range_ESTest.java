/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 11:35:59 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.637965550079652
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-2147483648L);
      range_Builder0.contractEnd((-2147483648L));
      range_Builder0.shift((-2147483648L));
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd(1677L);
      range0.iterator();
      Range range1 = Range.ofLength(1272L);
      range0.endsBefore(range1);
      Range range2 = range0.intersection(range1);
      range0.intersects(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range1.isEmpty();
      range0.toString();
      range0.intersects(range1);
      range0.toString();
      range2.iterator();
      // Undeclared exception!
      range0.split(255L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.186454608168151
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(6637L, 6637L);
      Range range1 = Range.of(65535L);
      boolean boolean0 = range0.intersects(range1);
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      
      Range range2 = Range.ofLength(4294967295L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(410L);
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.161213668543691
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 220L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 732L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2346L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6746916726220613
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 220L);
      range0.spliterator();
      Range range1 = Range.of(127L, 127L);
      Object object0 = new Object();
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      assertEquals(2, list1.size());
      assertEquals(0, list2.size());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2533976735624135
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(9223372036854774729L, 9223372036854774729L);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854774729 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1894961248411358
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.ofLength(333L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1035L, 4294967324L);
      Range range2 = Range.of(3805021467342036L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.871649625135927
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1565537252822344
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Range range0 = Range.of(2147483647L, 3805021467346127L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      range0.isSubRangeOf(range0);
      Range range1 = range0.intersection(range0);
      Object object0 = new Object();
      Long long1 = new Long((-1622L));
      Long long2 = new Long(2147483647L);
      Long.divideUnsigned(2147483647L, (-1622L));
      range0.equals(long0);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 3805021467346127 ]/0B", string0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9843429634622605
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long(2098L);
      Long long1 = new Long(1463L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(1463L);
      range_Builder0.build();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9669434861893547
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.of((-8L), (-8L));
      Long long0 = new Long((-8L));
      Range.Builder range_Builder0 = new Range.Builder((-33L), 2147483627L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = null;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.12832248662293
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4092L, 2147483647L);
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      
      Long long1 = new Long((-2086L));
      Long long2 = new Long(1272L);
      Long.divideUnsigned(4092L, (-2086L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9504258637418843
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      long long0 = range0.getLength();
      assertEquals(2147483647L, long0);
      
      Long long1 = new Long(2661L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = Range.ofLength(4092L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.ofLength(2147483647L);
      assertSame(range3, range1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1064271929195777
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long((-1059L));
      Long.getLong("`Q'a@?'G&yYp", long0);
      Range range0 = Range.of(1378L, 1378L);
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.112251040213321
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 220L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      Range range1 = Range.of((-2147483648L), 2098L);
      Long long0 = new Long(2098L);
      boolean boolean0 = range0.equals(spliterator0);
      assertNotSame(range0, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0901216500247215
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 1L, 1L);
      Range range0 = Range.of(416L, 2147483647L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6062839445133745
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(3805021467346127L);
      Range range1 = Range.ofLength(854L);
      Range.ofLength(3805021467346127L);
      range0.spliterator();
      range0.complement(range1);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Range range2 = Range.ofLength(4294967295L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7115929085425403
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(1079L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-95L), 1079L);
      range0.isSubRangeOf(range1);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(4294967295L, 4294967295L);
      range3.endsBefore(range2);
      List<Range> list0 = range1.complement(range0);
      range3.complementFrom(list0);
      range3.complement(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.6593532521148426
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4092L, 2147483647L);
      range1.startsBefore(range0);
      range0.isSubRangeOf(range1);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(4092L);
      List<Range> list0 = range1.complement(range3);
      List<Range> list1 = range1.complementFrom(list0);
      range2.complementFrom(list1);
      Range range4 = Range.of(4092L, 3805021467346127L);
      Range.of(255L, 255L);
      Long long1 = new Long(2147483647L);
      range4.equals(long1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9785439348439597
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(1079L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.ofLength(3265L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7436353882736624
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(1079L);
      Object object0 = new Object();
      Long long0 = new Long((-1395L));
      Range range1 = Range.ofLength(3479L);
      range0.equals(range1);
      Range.ofLength(2667L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2696L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.824380540474895
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(837L);
      Long long0 = new Long(837L);
      Long long1 = new Long(837L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-127L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.320237383858575
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-1L), (-1L));
      Range.of(range_CoordinateSystem1, (-1L), (-1L));
      Range.of(1860L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.of(2542L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.135788186513553
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-8L), (-8L));
      Long long0 = new Long((-8L));
      Range.Builder range_Builder0 = new Range.Builder((-33L), 2147483627L);
      Object object0 = new Object();
      Long long1 = new Long((-8L));
      range0.equals(long0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.shift(0L);
      Range range1 = range_Builder1.build();
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.35383896813415
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.of((-8L), (-8L));
      Long long0 = new Long((-8L));
      Long long1 = new Long(2667L);
      Range range0 = Range.ofLength(3805021467346127L);
      range0.equals("");
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1395L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.348380346158454
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      range0.equals((Object) null);
      range1.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range1.getLength();
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4169819651995814
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      range0.endsBefore(range1);
      Long long0 = new Long(0L);
      Long.divideUnsigned((-1L), 1713L);
      range0.complement(range1);
      range0.equals("");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 732L;
      Range.of(range_CoordinateSystem1, (-2285L), 0L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.224791896950824
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.ofLength(2098L);
      Long long0 = new Long(2098L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = Range.ofLength(2098L);
      Range range3 = range1.intersection(range2);
      assertFalse(range3.isEmpty());
      assertSame(range3, range2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.024695553858248
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = (-32768L);
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      String string0 = "";
      Range range0 = Range.of(0L, 1371L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(32767L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1445801968384903
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long((-1059L));
      Long.getLong("`Q'a@?'G&yYp", long0);
      Range range0 = Range.of(1378L, 1378L);
      Long long1 = new Long(4294967295L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-3225L), 1357L);
      assertFalse(range_Builder3.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.7345294931569413
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(6641L);
      Range range1 = Range.ofLength(6641L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
      
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1059L), (-1059L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      Long.getLong("J2v)=32ygio");
      range1.equals((Object) null);
      Range range3 = Range.of(774L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.689219273008978
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 4294967295L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(3513L);
      List<Range> list0 = range2.complement(range0);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range2));
      
      Object object0 = new Object();
      Range range3 = Range.ofLength(0L);
      Long long0 = new Long((-184L));
      range3.equals(long0);
      assertTrue(range3.isEmpty());
      
      Range range4 = Range.ofLength(2147483647L);
      assertFalse(range4.equals((Object)range0));
      
      Range range5 = Range.ofLength(106L);
      Range range6 = range2.intersection(range5);
      assertSame(range6, range5);
      assertNotSame(range6, range2);
      assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2767888804081085
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(134L, 134L);
      range0.isEmpty();
      Range range1 = Range.of(134L, 134L);
      List<Range> list0 = range0.complement(range0);
      range1.intersects(range0);
      range1.complementFrom(list0);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0443902281158373
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Range.ofLength(2147483647L);
      Long long1 = new Long(1463L);
      Range.Builder range_Builder0 = new Range.Builder(1463L, 2147483647L);
      range_Builder0.expandEnd(2685L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 3805021467346127L, 4045L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1403381284166865
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(1086L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(255L, 3265L);
      // Undeclared exception!
      try { 
        Range.of(255L, 155L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.046824646197683
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        range0.split(9223372036854710528L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -130561 would make range [9223372036854710528 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.7261775070395147
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 6637L, 65535L);
      range0.toString();
      Range range1 = Range.ofLength(65535L);
      range1.equals(range0);
      range1.split(255L);
      range0.complement(range1);
      Range range2 = Range.of(6637L, 65535L);
      range2.isEmpty();
      range2.getBegin();
      range2.iterator();
      Range range3 = range2.asRange();
      range3.intersects(range2);
      range2.toString();
      range_CoordinateSystem0.toString();
      Range range4 = Range.of((-1261L), 255L);
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1064271929195777
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Long long0 = new Long((-1059L));
      Long.getLong("`Q'a@?'G&yYp", long0);
      Range range0 = Range.of(1378L, 1378L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.431873508656116
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder2.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(1014L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4355393318232608
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of((-1L));
      Range range2 = Range.of(range_CoordinateSystem0, 134L, 2743L);
      range1.isSubRangeOf(range0);
      range0.intersection(range2);
      range0.endsBefore(range0);
      range2.complement(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.730824739956079
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.ofLength(1079L);
      Object object0 = new Object();
      Long long0 = new Long((-1395L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-28L), 2667L);
      List<Range> list0 = range0.split(1079L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 405L, 9223372036854775807L);
      List<Range> list1 = range1.complementFrom(list0);
      assertFalse(list1.contains(range0));
      assertEquals(1, list1.size());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2733427787872347
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Long long0 = new Long((-1059L));
      Long.getLong("`Q'a@?'G&yYp", long0);
      Range range0 = Range.of((-1059L), (-1059L));
      Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.103237237705472
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-2765L), 1084L);
      range0.spliterator();
      Long long0 = new Long((-1779L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(255L, 9223372036854774729L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long(2098L);
      long long1 = 1463L;
      Long long2 = new Long(1463L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2414761095305393
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.split(1L);
      assertTrue(list0.contains(range0));
      
      Range.of(671L, 46458L);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.487648150624548
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long((-1059L));
      Long.max((-1059L), (-2888L));
      Long.getLong("`Q'a@?'G&yYp", long0);
      Range range0 = Range.of((-1059L), 9223372036854773294L);
      range0.intersects(range0);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      //  // Unstable assertion: assertFalse(list1.contains(range0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9390992612888582
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(9223372036854711293L, 9223372036854711293L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.split(9223372036854711293L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1950856082047636
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), 220L);
      range1.intersects(range0);
      Long long0 = new Long(1139L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 3258L, 3258L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.831480240067973
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.094317917690956
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long((-1059L));
      Long.getLong("`Q'a@?'G&yYp", long0);
      Range range0 = Range.of(1378L, 1378L);
      Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.550844080691749
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(333L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-195L), 980L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = range1.intersection(range0);
      range0.complementFrom(linkedList0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(linkedList0);
      assertTrue(list1.equals((Object)list0));
      
      Range.Comparators.values();
      boolean boolean0 = range0.isEmpty();
      assertSame(range0, range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.5668162697038266
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(6637L);
      Range range1 = Range.of(65535L);
      range0.intersects(range1);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 732L, 65535L);
      Range range3 = Range.ofLength(4294967295L);
      Range.ofLength(732L);
      Range range4 = Range.ofLength(65535L);
      Range range5 = range4.intersection(range2);
      assertSame(range5, range2);
      assertFalse(range5.isEmpty());
      
      Range.Comparators.values();
      List<Range> list0 = range4.complement(range3);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.5689642305367983
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(3805021467346127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 854L, 4294967295L);
      Range.ofLength(3805021467346127L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      List<Range> list1 = range1.complement(range0);
      List<Range> list2 = range0.complementFrom(list1);
      assertTrue(list2.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.503240003074236
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Range range0 = Range.of(2147483647L, 3805021467346127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.isSubRangeOf(range0);
      Range range1 = range0.intersection(range0);
      range1.isSubRangeOf(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range3 = Range.of(255L, 255L);
      Long long1 = new Long(2147483647L);
      range2.equals(long1);
      range2.equals(long0);
      List<Range> list0 = range3.complement(range1);
      range2.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.284542603208327
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Long long0 = new Long(2112L);
      Long.getLong("`Q'a@?'G&yYp", long0);
      Range range0 = Range.of((-497L), 1378L);
      Range range1 = Range.ofLength(9223372036854775807L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(9223372036854775807L, 9223372036854775806L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-496L), long1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9401427026868374
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(333L);
      Range range1 = Range.ofLength(6637L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range range3 = range2.asRange();
      assertSame(range3, range0);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.130960553087927
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Range range0 = Range.of((-32768L), 3805021467346127L);
      range0.spliterator();
      Long long1 = new Long((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3172322281147366
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Long.getLong((String) null, long0);
      Range.of((-32768L), 3805021467346127L);
      Range range0 = Range.ofLength(1079L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.259138925204432
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      range_Builder0.build();
      Range.of(0L);
      Long long0 = new Long((-32768L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("offset must be >= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.offset must be >= 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2980534232846175
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.ofLength(2147483647L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-1994L));
      Range.of((-2147483648L), 2147483647L);
      Long long0 = new Long(1487L);
      assertEquals(1487L, (long)long0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.317750744017106
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 220L);
      Long long0 = new Long(2098L);
      Range range1 = Range.ofLength(65535L);
      assertFalse(range1.isEmpty());
      
      long long1 = range0.getLength();
      assertEquals(2147483869L, long1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.3129181569828563
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Range range0 = Range.of(2147483647L, 3805021467346127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.startsBefore(range0);
      range0.isSubRangeOf(range0);
      Range range1 = range0.intersection(range0);
      range1.iterator();
      range1.isSubRangeOf(range0);
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.of(4600L, 3757L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.470217919550742
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.endsBefore(range0);
      Long long0 = new Long((-1L));
      Long.divideUnsigned((-1L), 1713L);
      Long long1 = new Long(1557L);
      Long.getLong("", long1);
      Range range1 = Range.of(1557L);
      boolean boolean1 = range0.intersects(range1);
      assertFalse(boolean1 == boolean0);
      
      Long.toUnsignedString(1L);
      Long.sum(9223372036854769172L, (-1964L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 271L, 1557L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 271L, 10768677217577087L);
      Range range4 = range2.intersection(range3);
      assertFalse(range4.isEmpty());
      assertSame(range2, range4);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.939099261288858
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(345L, 9223372036854775807L);
      Long long0 = new Long(345L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.4608125174992788
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getBegin();
      Range range1 = Range.of(2147483627L, 2147483627L);
      range0.isSubRangeOf(range1);
      range1.getBegin();
      Long.getLong("P.l~o >", (Long) null);
      range1.endsBefore(range0);
      Long long0 = new Long(0L);
      Long.divideUnsigned((-1L), (-2543L));
      Long.getLong("}w9jSs{.z3.w", long0);
      range1.intersects(range0);
      range0.getBegin();
      Long.toUnsignedString(0L);
      Long.sum(2147483627L, 500L);
      range1.equals((Object) null);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 2147484127L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder2.copy();
      assertFalse(range_Builder3.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.5791744301720465
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4092L, 2147483647L);
      boolean boolean0 = range1.startsBefore(range0);
      range0.isSubRangeOf(range1);
      Range range2 = range0.intersection(range1);
      boolean boolean1 = range2.isSubRangeOf(range1);
      assertFalse(boolean1 == boolean0);
      
      Range range3 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range4 = Range.of(255L, 255L);
      Long long1 = new Long(2147483647L);
      range3.equals(long1);
      List<Range> list0 = range4.complement(range2);
      List<Range> list1 = range3.complementFrom(list0);
      assertTrue(list1.contains(range4));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.3131667116660024
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(134L, 134L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list0.contains(range1));
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2889641001150007
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-8L), (-8L));
      Long long0 = new Long((-8L));
      Range.Builder range_Builder0 = new Range.Builder((-33L), 2147483627L);
      range_Builder0.contractBegin((-8L));
      range_Builder0.shift((-1L));
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandEnd(4590L);
      Range range1 = Range.of(2147483627L);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(4590L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.5780982613895365
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = new Long((-1059L));
      Long.getLong("`Q'a@?'G&yYp", long0);
      Range range0 = Range.of(1378L, 1378L);
      Range range1 = Range.ofLength(9223372036854775807L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(1L);
      Range.of((-32768L));
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3613058358368977
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(6641L);
      Range range1 = Range.ofLength(6641L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = range1.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list1 = range1.complementFrom(linkedList0);
      assertTrue(list1.equals((Object)list0));
      
      range2.toString();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2457223061335454
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-418L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-1583L), 255L);
      Range range2 = Range.of((-1583L));
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.480748758074925
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-418L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-1583L), 255L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      range0.intersection(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.6669541056078137
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.ofLength(3513L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-2147483647L), long0);
      
      Range range3 = Range.of((-2147483647L), 3513L);
      Long long1 = new Long(3513L);
      range1.equals("+CK0?(Rzh");
      assertFalse(range1.isEmpty());
      
      Range range4 = range3.intersection(range2);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2900135671271937
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long long0 = new Long(2098L);
      Long long1 = new Long(1463L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(1463L);
      Range range2 = range0.intersection(range1);
      range0.complement(range2);
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(range2.isEmpty());
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.4487324805941943
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(333L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1035L, 4294967324L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.complement(range0);
      assertFalse(list0.isEmpty());
      
      List<Range> list1 = range0.complement(range1);
      List<Range> list2 = range0.complementFrom(list1);
      assertTrue(list2.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.437770372666477
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      Range range1 = Range.of(134L, 134L);
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1 == boolean0);
      
      range1.getBegin();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = range0.intersection(range0);
      assertFalse(range2.isEmpty());
      
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertSame(range0, range2);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.4253742292181477
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getBegin();
      Range range1 = Range.of(2147483627L, 2147483627L);
      range0.isSubRangeOf(range1);
      range1.getBegin();
      Long.getLong("P.l~o >", (Long) null);
      range1.endsBefore(range0);
      Long long0 = new Long(0L);
      Long.divideUnsigned((-1L), (-2543L));
      Long.getLong("", long0);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1049L, 1055L);
      Range range2 = Range.of((-1135L), 127L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.412592844033897
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long.compareUnsigned(4201L, 1112L);
      Range.Builder range_Builder0 = new Range.Builder(2683L, 2147483647L);
      Object object0 = new Object();
      Long long0 = new Long(1);
      range0.equals(long0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range_Builder1.build();
      Range range2 = range1.intersection(range0);
      range2.getBegin();
      List<Range> list0 = range0.complement(range1);
      Range range3 = range_Builder1.build();
      range0.complementFrom(list0);
      range3.intersects(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("SpMace Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.SpMace Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.507160583734481
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of((-128L));
      Range range2 = Range.of(2147483647L);
      range0.intersects(range1);
      range1.startsBefore(range2);
      Range range3 = Range.of(0L, 920L);
      range1.isSubRangeOf(range3);
      range3.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 920L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.187183327423583
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      range_Builder0.build();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(9223372036854774729L, 9223372036854774729L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.2000188761162764
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(range_CoordinateSystem0, 0L, 9223372036854774729L);
      Range range0 = Range.of(255L, 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.0005998121061817
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-8L), (-8L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854774729L, (-417L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.215871484586937
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(1079L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(255L, 3265L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.366105287558782
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(6641L);
      Range range1 = Range.ofLength(6641L);
      range1.complement(range0);
      Range range2 = range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      assertTrue(linkedList0.contains(range2));
      assertSame(range0, range2);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.5370300772652823
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-187L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-615L), 2743L);
      range1.isSubRangeOf(range0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(584L, 820L);
      range3.endsBefore(range2);
      List<Range> list0 = range1.complement(range2);
      range2.complementFrom(list0);
      range0.complement(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.275913273734352
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = 2112L;
      Long long1 = new Long(2112L);
      Long.getLong("`Q'a@?'G&yYp", long1);
      Range range0 = Range.of((-497L), 1378L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1633L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.950425863741884
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of((-33L), (-33L));
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.ofLength(1079L);
      Object object0 = new Object();
      Range range0 = Range.ofLength(3479L);
      Range.ofLength(2667L);
      long long0 = range0.getLength();
      assertEquals(3479L, long0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.175783483807699
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Long long0 = new Long((-1059L));
      Long.getLong("58nTZ)on!wB|py2!pp", long0);
      Long long1 = new Long(9223372036854775807L);
      Long.getLong("", (Long) null);
      Long.toUnsignedString(818L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 255L, 568L);
      Range range0 = Range.of((-1059L), 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.413194511627322
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range range2 = Range.of(0L, (-1L));
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1 == boolean0);
      
      range2.intersection(range1);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range2.complementFrom(list0);
      assertFalse(list1.contains(range1));
      assertSame(range2, range0);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.177822601777031
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4092L, 2147483647L);
      range0.isSubRangeOf(range1);
      Range range2 = range0.intersection(range1);
      range2.toString(range_CoordinateSystem0);
      range2.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 4294967295L;
      // Undeclared exception!
      try { 
        Range.parseRange("|`P4", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse |`P4 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.3380577343758895
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-187L), 3805021467346127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-127L), 2542L);
      Range.of(3805021467346127L);
      range0.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of(3805021467346127L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.1914185176112597
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(1079L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(255L, 3265L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(256L, long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.976886688685664
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2490L, 2490L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.4799104455501118
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(65535L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 65535 .. 65535 ]/0B", string0);
      
      Range range1 = Range.ofLength(65535L);
      range0.intersects(range1);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 732L, 65535L);
      Range.ofLength(4294967295L);
      Range range3 = Range.ofLength(732L);
      Range range4 = Range.parseRange("[ 65535 .. 65535 ]/0B");
      Range range5 = range4.intersection(range2);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      //  // Unstable assertion: assertNotSame(range5, range4);
      
      String string1 = range2.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 732 .. 65535 ]/RB", string1);
      
      String string2 = range3.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 731 ]/0B", string2);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-530L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.9678674685340356
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.1675251049616486
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 9223372036854774729L);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.9252027641711082
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.024695553858248
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder2 = range_Builder0.shift((-7L));
      Range.Builder range_Builder3 = range_Builder2.expandEnd(4590L);
      Range range0 = Range.ofLength(4590L);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range.Builder range_Builder5 = range_Builder3.contractBegin((-1L));
      assertSame(range_Builder5, range_Builder1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.8892632916692693
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775398L, 9223372036854775398L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(9223372036854774729L, 2613L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.7519159690311215
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(1051L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getEnd();
      // Undeclared exception!
      try { 
        linkedList0.set(256, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.1657090092928195
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(1L);
      range0.complement(range1);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("F0Tu3?IRKP%/k5m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse F0Tu3?IRKP%/k5m into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.1427753621937122
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Long long0 = new Long(3805021467346127L);
      Range.of(3805021467346127L, 3805021467346127L);
      Long long1 = new Long((-766L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 3805021467346127L, 3805021467346127L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.of((-1686L), (-766L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      range_Builder0.expandEnd(2112L);
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.0026974323801805
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-418L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-1583L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.315020806616469
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.222410677516011
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2210L), 0L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(2165L);
      assertFalse(range_Builder2.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.3039723809285833
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(750L, 750L);
      range_Builder0.copy();
      range_Builder0.shift(843L);
      range_Builder0.expandBegin(750L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(750L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandBegin(0L);
      range_Builder0.copy();
      range_Builder0.expandBegin(750L);
      range_Builder0.expandEnd(52L);
      range_Builder0.build();
      range_Builder0.expandBegin(750L);
      range_Builder0.shift(750L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1128L);
      range0.getBegin();
      Range range1 = Range.of(1L);
      range1.intersection(range0);
      range0.startsBefore(range1);
      range1.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("K2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.K2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.9463967732440532
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(6641L);
      assertFalse(range0.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.9110093374869215
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3836L), 2098L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(9223372036854774729L, (-3009L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3009 would make range [9223372036854774729 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.of(288L, 9223372036854774729L);
      Long long0 = new Long(65534L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
