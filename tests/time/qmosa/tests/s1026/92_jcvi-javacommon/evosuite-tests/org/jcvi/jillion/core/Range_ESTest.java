/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:17:16 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.615375143637284
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      long long1 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      long long2 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Range range1 = Range.of(65535L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.intersection(range0);
      long long3 = 53606811L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 53606811L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4674693675861
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      long long0 = 145L;
      Range range1 = Range.of(145L, 782L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-303L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.952920378728351
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 3765L;
      Range range0 = Range.of(3765L, 3765L);
      Range range1 = Range.ofLength(3765L);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(3765L);
      range_Builder0.shift((-2147483648L));
      Range.Comparators.values();
      Range range3 = Range.of((-2147483648L), (-2147483648L));
      Range range4 = range2.intersection(range0);
      Range.of((-3228L), (-3228L));
      long long1 = 1556L;
      range4.endsBefore(range3);
      // Undeclared exception!
      try { 
        Range.of(3765L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5332666068936693
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 134L;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      range0.equals(range_CoordinateSystem0);
      Range.ofLength(134L);
      long long1 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(134L, 9223372036854775807L);
      range_Builder0.expandEnd(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8998209751012554
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getBegin();
      Range range1 = Range.of(2147483627L, 2147483627L);
      range0.isSubRangeOf(range1);
      range1.getBegin();
      Range range2 = Range.ofLength(2147483627L);
      range0.complement(range2);
      Long.getLong("P.l~o >", (Long) null);
      range1.endsBefore(range0);
      Long long0 = new Long(1620L);
      Long long1 = new Long((-150L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.066669686699783
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of(1737L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775675L, (-1651L));
      Range range1 = Range.of(0L);
      range1.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.parseRange("[ 0 .. 0 ]/0B", range_CoordinateSystem2);
      long long0 = (-933L);
      Range range3 = Range.of((-933L));
      range3.intersection(range0);
      Range.of(range_CoordinateSystem1, 2067L, 2067L);
      Range.ofLength(4294967295L);
      range2.getLength();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 4294967295L, (-3698L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.9281241601850727
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.ofLength(134L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      range_Builder0.shift(0L);
      Range.Comparators.values();
      long long0 = (-1210L);
      Long.sum(1886L, (-1210L));
      Object object0 = new Object();
      range2.equals(range1);
      range0.iterator();
      Range range3 = Range.ofLength(9223372036854773656L);
      range3.getLength();
      range2.intersects(range1);
      Long.toUnsignedString(255L);
      Long.sum(676L, 500L);
      range3.equals("end of file reached before entire block was skipped");
      // Undeclared exception!
      try { 
        Range.parseRange("*^]yNGX'~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse *^]yNGX'~ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.760700612020042
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getBegin();
      Range range1 = Range.of(2147483627L, 2147483627L);
      range0.isSubRangeOf(range1);
      String string0 = "P.l~o >";
      range1.getBegin();
      Long long0 = new Long((-1L));
      range1.endsBefore(range0);
      long long1 = 1620L;
      range0.intersects(range1);
      long long2 = 4294967295L;
      Long.toUnsignedString(4294967295L);
      Object object0 = new Object();
      range0.getLength();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("start offset can not be less than 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse start offset can not be less than 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.6638125181720715
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 127L, 127L);
      Range range0 = Range.of(32767L);
      long long0 = 3577L;
      Range.ofLength(3577L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range1 = Range.parseRange("[ 32767 .. 32768 ]/SB", range_CoordinateSystem0);
      Range.parseRange("[ 32767 .. 32768 ]/SB");
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.632489076098533
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      range0.equals(range_CoordinateSystem0);
      Range.ofLength(134L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      range0.getEnd();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.7725660726575683
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 134L;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.ofLength(134L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      range_Builder0.shift(0L);
      Range.Comparators.values();
      Long.sum(1886L, (-1210L));
      Object object0 = new Object();
      range2.equals(range1);
      range0.iterator();
      Range range3 = Range.ofLength(9223372036854773656L);
      range3.getLength();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-1210L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.7110923376658262
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of((-1059L), (-1059L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1059L), 1038L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.300349515739897
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = (-1L);
      long long1 = 2152L;
      Range range0 = Range.of(2152L);
      String string0 = "org.jcvi.jillion.core.Range$Builder";
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.857592392715264
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1059L), (-1059L));
      range0.toString();
      Range range1 = Range.of((-1059L), (-1059L));
      range1.toString();
      Range range2 = Range.of(range_CoordinateSystem0, (-1059L), (-1059L));
      long long0 = 255L;
      range2.split(255L);
      Range range3 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.79993177053842
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      long long0 = (-1L);
      Range.of((-1L));
      Range.ofLength(65535L);
      Range.of(2147483647L);
      long long1 = 3577L;
      Range range0 = Range.ofLength(2147483647L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.8762051922164167
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(750L, 750L);
      range_Builder0.copy();
      range_Builder0.shift(843L);
      range_Builder0.expandBegin(750L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(750L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandBegin(0L);
      range_Builder0.copy();
      range_Builder0.expandBegin(750L);
      range_Builder0.expandEnd(52L);
      range_Builder0.build();
      range_Builder0.expandBegin(750L);
      range_Builder0.shift(750L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1128L);
      range0.getBegin();
      Range range1 = Range.of(1L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      
      range1.getBegin();
      range1.complement(range2);
      range1.intersection(range0);
      List<Range> list0 = range2.complement(range1);
      assertEquals(0, list0.size());
      
      boolean boolean1 = range1.isEmpty();
      assertSame(range1, range2);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.842971045025495
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.iterator();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1839L), 0L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.endsBefore(range0);
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      range_CoordinateSystem0.toString();
      boolean boolean2 = range0.startsBefore(range1);
      assertTrue(range0.isEmpty());
      assertFalse(boolean2 == boolean1);
      
      String string0 = range2.toString();
      assertEquals("[ -1839 .. -1 ]/0B", string0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.9818266789961747
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-9223372036854775808L));
      boolean boolean0 = range1.endsBefore(range2);
      assertFalse(boolean0);
      
      Long long1 = new Long(0L);
      Long long2 = new Long(2147483647L);
      List<Range> list0 = range0.complement(range2);
      assertTrue(list0.contains(range0));
      
      Long.max(2412L, (-16L));
      Long long3 = new Long(2412L);
      boolean boolean1 = range1.intersects(range2);
      assertTrue(boolean1);
      
      Long.toUnsignedString(500L);
      Range range3 = Range.of(range_CoordinateSystem0, 2412L, 2147483647L);
      long long4 = range3.getLength();
      assertEquals(2147481235L, long4);
      
      Range range4 = Range.of((-1L), 600L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.596627807481911
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(134L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = Range.ofLength(134L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Long.toUnsignedString(134L);
      List<Range> list0 = range0.split(134L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      boolean boolean1 = range1.isEmpty();
      assertSame(range1, range2);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.8055426566952355
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 127L, 127L);
      Range range0 = Range.of((-2128L));
      Range range1 = Range.ofLength(3577L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.parseRange("[ 0 .. 3577 ]/SB", range_CoordinateSystem2);
      Range range2 = Range.parseRange("[ 0 .. 3577 ]/SB");
      range1.intersection(range2);
      range2.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, 255L, 645L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem4, 317L, (-1250L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.844731589400241
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 1737L;
      Range range0 = Range.of(1737L);
      Range range1 = Range.of(1737L, 1737L);
      range1.iterator();
      range0.startsBefore(range1);
      Range range2 = Range.of(1737L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.ofLength(1737L);
      Range range3 = range_Builder0.build();
      Long.sum(1738L, 4294967295L);
      range3.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("El\"]sXGaUbpBxAzz-0", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse El\"]sXGaUbpBxAzz-0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.8662635396393905
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(1737L);
      Range range1 = Range.of(1737L, 1737L);
      range1.iterator();
      range0.startsBefore(range1);
      Range range2 = Range.of(1737L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.ofLength(1737L);
      range2.intersects(range1);
      Long.toUnsignedString(255L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.parseRange("255");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 255 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.8517827318291156
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = 127L;
      Range range0 = Range.of((-2128L));
      Range range1 = Range.ofLength(3594L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.parseRange("[ 0 .. 3594 ]/SB", range_CoordinateSystem1);
      Range range2 = Range.parseRange("[ 0 .. 3594 ]/SB");
      range1.intersection(range2);
      range2.isSubRangeOf(range0);
      range0.equals("[ 0 .. 3594 ]/SB");
      // Undeclared exception!
      try { 
        Range.parseRange("byte array can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse byte array can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.9393112399256625
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range range2 = Range.ofLength(3745L);
      Range range3 = Range.of(65535L);
      Range range4 = Range.ofLength(3462L);
      assertNotSame(range4, range2);
      
      List<Range> list2 = range0.split(593L);
      range3.complementFrom(list2);
      range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.041023465801837
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(0L, 0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      long long1 = range1.getBegin();
      assertEquals(0L, long1);
      
      Long.getLong("P.l~o >", (Long) null);
      range0.intersects(range1);
      Long long2 = new Long((-2427L));
      Long long3 = new Long(0L);
      Long.getLong("org.jcvi.jillion.core.Range$LongStartIntLengthRange", long3);
      Long.max((-1L), 5421L);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      
      Long.toUnsignedString((-855L));
      Long.sum(0L, 1L);
      range0.equals(long3);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder0.build();
      range0.getBegin(range_CoordinateSystem0);
      range_Builder0.copy();
      long long4 = range1.getLength();
      assertEquals(1L, long4);
      assertSame(range1, range2);
      
      Range range3 = Range.of(range_CoordinateSystem1, 1L, 1L);
      List<Range> list0 = range3.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(range3.isEmpty());
      assertTrue(list1.contains(range3));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.965927373044559
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-9223372036854775808L));
      range1.endsBefore(range2);
      Long long1 = new Long(0L);
      Long long2 = new Long(2147483647L);
      range0.complement(range2);
      Long.max(2412L, (-16L));
      Long long3 = new Long(2412L);
      Long.getLong("S^hyTR[A9<L7 s", long0);
      range2.intersects(range1);
      Long.toUnsignedString((-1L));
      Long.sum((-9223372036854775808L), 0L);
      range0.equals(long3);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.8560769003696818
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(3765L, 3765L);
      Range range1 = Range.ofLength(3765L);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(3765L);
      range_Builder0.shift((-2147483648L));
      Range.Comparators.values();
      Long long0 = new Long((-1364L));
      range2.complement(range1);
      Long.max((-16L), 1737L);
      Long long1 = new Long((-2514L));
      Long.getLong("S^hyTR[A9<L7 s", long0);
      range2.intersects(range1);
      Long.toUnsignedString((-1364L));
      Long.sum(0L, (-1364L));
      Object object0 = new Object();
      range2.equals(object0);
      // Undeclared exception!
      try { 
        Range.parseRange("S^hyTR[A9<L7 s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse S^hyTR[A9<L7 s into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.962999622708092
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of((-737L), (-286L));
      range1.intersection(range0);
      Range range2 = Range.ofLength(2147483391L);
      range2.intersection(range1);
      range0.toString();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.parseRange("El\"]sXGaUbpBxAzz-0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse El\"]sXGaUbpBxAzz-0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.7171317389898855
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Long long0 = new Long((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2750L, (-9223372036854775808L));
      range0.endsBefore(range1);
      Long long1 = new Long((-1L));
      Long long2 = new Long(2750L);
      Long.max(255L, (-1375L));
      Long long3 = new Long(1L);
      Long.getLong("org.jcvi.jillion.core.Range$Builder", long3);
      range0.intersects(range1);
      Long.toUnsignedString((-1789L));
      Long.sum((-5328L), 9223372034707292986L);
      range1.equals("18446744073709549827");
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$Builder");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$Builder into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.074206646468557
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-9223372036854775808L));
      range1.endsBefore(range2);
      Long long1 = new Long((-12L));
      Long long2 = new Long(2147483647L);
      Long.max(2412L, 0L);
      Long.getLong("", long2);
      Range.ofLength(1194L);
      boolean boolean0 = range1.intersects(range2);
      Long.toUnsignedString(500L);
      Long long3 = new Long((-1L));
      boolean boolean1 = range2.equals("org.jcvi.jillion.core.Range$Builder");
      assertFalse(boolean1);
      
      boolean boolean2 = range0.isSubRangeOf(range1);
      Range range3 = Range.of(range_CoordinateSystem0, (-1L), 2412L);
      assertFalse(range3.isEmpty());
      
      boolean boolean3 = range1.intersects(range0);
      assertFalse(boolean3 == boolean2);
      
      Range range4 = Range.ofLength(2147483647L);
      boolean boolean4 = range4.isSubRangeOf(range1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.9895307302569556
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getBegin();
      Range range1 = Range.of(2147483627L, 2147483627L);
      range0.iterator();
      range1.startsBefore(range0);
      Range range2 = Range.of((-2975L));
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.ofLength(0L);
      Range.ofLength(2147483627L);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.554500479658796
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 134L;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      range0.spliterator();
      range0.equals(range_CoordinateSystem0);
      Range.of(134L, 134L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.735075291622378
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.ofLength(3745L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, (-9223372036854775808L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.6060599539998233
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      Long long1 = new Long((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = 2750L;
      Range range1 = Range.of(range_CoordinateSystem0, 2750L, (-9223372036854775808L));
      range0.endsBefore(range1);
      Long long3 = new Long((-1L));
      Long long4 = new Long(2750L);
      long long5 = 53803414L;
      // Undeclared exception!
      try { 
        Range.of(53803414L, (-2414L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2100336238302782
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.ofLength(3745L);
      Range range1 = Range.ofLength(3745L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range range2 = range1.asRange();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.of(134L, 134L);
      String string0 = "org.jcvi.jillion.core.Range$Builder";
      long long0 = (-9223372036854775808L);
      Long long1 = new Long((-9223372036854775808L));
      long long2 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6630387162340594
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2210L), 0L);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder3 = range_Builder2.contractBegin(2165L);
      assertNotSame(range_Builder3, range_Builder1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.485684574870289
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 134L, 134L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(134L, 134L);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.9970800124604335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(3765L, 3765L);
      Range range1 = Range.ofLength(3765L);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(3765L);
      long long0 = (-2147483648L);
      range_Builder0.shift((-2147483648L));
      Range.Comparators.values();
      Range.of((-2147483648L), (-1364L));
      Range range3 = range2.intersection(range0);
      long long1 = (-4446L);
      Long.max(9223372036854775807L, (-4446L));
      Long long2 = new Long(3765L);
      Long long3 = new Long((-3228L));
      Long.getLong("file can not be null", long3);
      range1.intersects(range3);
      Long.toUnsignedString(9223372036854775807L);
      Long.sum(332L, 3764L);
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("unable to mkdirs for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse unable to mkdirs for  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3035770196432024
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.91946610230608
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of(1737L);
      Range range1 = Range.of(1737L, 1737L);
      range1.iterator();
      range0.startsBefore(range1);
      Range range2 = Range.of(1737L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range3 = Range.ofLength(1737L);
      Range range4 = range_Builder0.build();
      range_Builder1.shift(1738L);
      Range.Comparators.values();
      Range range5 = range4.intersection(range3);
      Range range6 = Range.of(4294967295L);
      assertFalse(range6.equals((Object)range5));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.677255754998645
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2210L), 0L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.7214264848417145
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getBegin();
      Range range1 = Range.of(2147483647L, 2147483647L);
      range0.isSubRangeOf(range1);
      range1.getBegin();
      Long.getLong("P.l~o >", (Long) null);
      range1.endsBefore(range0);
      Long long0 = new Long((-2427L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range1.getLength();
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("CTB,#W(B@H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse CTB,#W(B@H into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.22894646980251
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-9223372036854775808L));
      range1.endsBefore(range2);
      Long long1 = new Long(0L);
      Long long2 = new Long(2147483647L);
      range0.complement(range2);
      Long.max(2412L, (-16L));
      range2.equals("DEPARTURE");
      range2.iterator();
      Range.ofLength(2147483647L);
      range1.getLength();
      long long3 = 255L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-1542L), 9223372036854773656L);
      String string0 = "inputstream can not be null";
      // Undeclared exception!
      try { 
        Range.parseRange("inputstream can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse inputstream can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.748803859171115
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L), 2147483647L);
      long long1 = (-9223372036854775808L);
      Long long2 = new Long((-9223372036854775808L));
      range0.endsBefore(range1);
      Long long3 = new Long((-1L));
      long long4 = 1408L;
      // Undeclared exception!
      try { 
        Range.of(1408L, (-778L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.5681447572140277
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-500L), (-500L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.0153393882235875
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(2147483647L, 2147483647L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      long long1 = range1.getBegin();
      assertEquals(2147483647L, long1);
      
      Long.getLong("P.l~o >", (Long) null);
      boolean boolean1 = range1.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      
      Long long2 = new Long(0L);
      Long.getLong("", long2);
      boolean boolean2 = range1.intersects(range0);
      assertFalse(boolean2);
      
      Long.toUnsignedString(0L);
      Long.sum(2147483647L, 500L);
      range1.equals((Object) null);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 2147484147L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      long long3 = range1.getLength();
      assertEquals(1L, long3);
      
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.999697790242456
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(2147483627L, 2147483627L);
      range0.isSubRangeOf(range1);
      long long1 = range1.getBegin();
      assertEquals(2147483627L, long1);
      
      Long.getLong("P.l~o >", (Long) null);
      range1.endsBefore(range0);
      Long long2 = new Long(1620L);
      Long long3 = new Long((-150L));
      Long.getLong("number of entries must be <= Integer.MAX_VALUE", long3);
      boolean boolean0 = range0.startsBefore(range0);
      Long.toUnsignedString(1620L);
      Long.sum(28L, 0L);
      Object object0 = new Object();
      range1.equals(object0);
      range0.iterator();
      Range range2 = Range.ofLength(1L);
      long long4 = new Long((-150L));
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
      
      boolean boolean1 = range2.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.986324964191272
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of((-737L), (-286L));
      Range range2 = range1.intersection(range0);
      Range.of((-737L));
      Range.of(range_CoordinateSystem0, (-286L), 9223372036854743042L);
      // Undeclared exception!
      try { 
        range2.split((-2181L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2632331331521764
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long long0 = 1114L;
      Range range0 = Range.ofLength(1114L);
      range0.getBegin();
      Long long1 = new Long((-1757L));
      range0.equals(long1);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("V`dn;~Bg`[:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse V`dn;~Bg`[: into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.966089756838656
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 2147483647L);
      Long long0 = new Long((-9223372036854775808L));
      range1.endsBefore(range2);
      Long long1 = new Long(0L);
      range0.complement(range2);
      Long.max(2412L, (-16L));
      Long long2 = new Long(2412L);
      Long long3 = new Long(2412L);
      range2.intersects(range1);
      Long.toUnsignedString((-1L));
      Long.sum((-9223372036854775808L), 0L);
      range2.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.83935770086952
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      long long0 = 2147483647L;
      Range range2 = Range.of((-1L), 2147483647L);
      range2.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range1.getLength();
      range2.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.999957753847552
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.ofLength(2147483621L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of((-737L), (-286L));
      Range range2 = range1.intersection(range0);
      long long0 = 32767L;
      Range.of(32767L);
      Long long1 = new Long((-737L));
      range2.endsBefore(range0);
      Long long2 = new Long(0L);
      range1.complement(range0);
      long long3 = (-16L);
      Long.max((-737L), (-737L));
      Long long4 = new Long(10L);
      range2.endsBefore(range2);
      Long.toUnsignedString(10L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-16L), (-1287L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.6777851890329396
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = Range.of((-1270L));
      long long0 = (-141L);
      range0.iterator();
      range0.startsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.ofLength((-141L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.4839374484335077
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2098L, 2098L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.765969275981898
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.of(134L, 134L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertTrue(range1.isEmpty());
      assertEquals(0L, long0);
      
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.8535811447580466
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.of((-1L));
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(1651L);
      Range.Comparators.values();
      range1.intersection(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.947122461597054
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Long long0 = new Long((-1L));
      range0.endsBefore(range0);
      Long long1 = new Long((-1L));
      Long long2 = new Long(2750L);
      Long.max(255L, (-1375L));
      Long long3 = new Long(1L);
      boolean boolean0 = range0.intersects(range0);
      Long.toUnsignedString((-1789L));
      Long.sum(255L, 9223372034707292986L);
      boolean boolean1 = range0.equals("18446744073709549827");
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      boolean boolean2 = range0.isSubRangeOf(range0);
      assertFalse(boolean2 == boolean1);
      
      Range range1 = Range.of((-2552L));
      Range range2 = Range.of(2750L, 9223372034707293241L);
      boolean boolean3 = range1.startsBefore(range2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.7213905152741096
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 127L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 127L, 127L);
      long long1 = 0L;
      Range range0 = Range.of(127L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 128 .. 128 ]/RB", range_CoordinateSystem1);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 127L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-530L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6623255766369827
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1501L);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-1090L));
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1501L);
      range_Builder2.contractBegin(2165L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.9540613680997803
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long long0 = 3765L;
      Range range0 = Range.of(3765L, 3765L);
      Range range1 = Range.ofLength(3765L);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(3765L);
      range_Builder0.shift((-2147483648L));
      Range.Comparators.values();
      long long1 = (-1364L);
      Range range3 = Range.of((-2147483648L), (-1364L));
      Range range4 = range2.intersection(range0);
      Range.of((-3228L), (-3228L));
      range3.getEnd();
      long long2 = 1556L;
      range4.endsBefore(range3);
      // Undeclared exception!
      try { 
        Range.of((-1364L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.245905362460895
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-424L), 246L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.750122963077745
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.of(3765L, 3765L);
      Range range1 = Range.ofLength(3765L);
      range1.intersection(range0);
      range1.intersects(range1);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("j1uI07&uB&eD]R'G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse j1uI07&uB&eD]R'G into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.781443847166769
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.of(3765L, 3765L);
      Range range1 = Range.ofLength(3765L);
      Range range2 = range1.intersection(range0);
      range1.intersects(range1);
      range2.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("j1uI07&uB&eD]R'G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse j1uI07&uB&eD]R'G into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.180683087165041
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3876344284752276
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.8743964866801774
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 2147483647L);
      range1.startsBefore(range0);
      Range range3 = Range.of((-1753L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.ofLength((-91L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.721478411694901
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.of(127L);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 2897L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-569L), 1313L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.5670951704444085
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1501L);
      Range range1 = Range.of(2165L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.6371612861993285
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2210L), 0L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(2165L);
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2013342660761466
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1L), (-51L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.761431718325336
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range range0 = Range.of(134L, 134L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.ofLength(134L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      Long.toUnsignedString(134L);
      range1.complement(range0);
      Range range2 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      
      boolean boolean1 = range1.isEmpty();
      assertFalse(boolean1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.79480868377538
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(750L, 750L);
      range_Builder0.copy();
      range_Builder0.shift(843L);
      range_Builder0.expandBegin(750L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(750L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandBegin(0L);
      range_Builder0.copy();
      range_Builder0.expandBegin(750L);
      range_Builder0.expandEnd(52L);
      range_Builder0.build();
      range_Builder0.expandBegin(750L);
      range_Builder0.shift(750L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1128L);
      range0.getBegin();
      Range range1 = Range.of(1L);
      Range range2 = range1.intersection(range0);
      range0.startsBefore(range1);
      range1.getBegin();
      Range range3 = Range.ofLength(843L);
      range2.isSubRangeOf(range3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("O\"c$1o`(5oT{:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.O\"c$1o`(5oT{:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.5961949841843452
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.contractEnd((-1L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2210L), 0L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(2165L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.6373439346011547
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd(0L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2210L), 0L);
      Range.Builder range_Builder3 = range_Builder2.contractBegin(2165L);
      assertSame(range_Builder3, range_Builder2);
  }
}
