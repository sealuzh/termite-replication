/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:17:09 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.570879382332354
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth((-63));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", advancedSettings0.getClientIdentifier());
      assertEquals((-63), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(507);
      advancedSettings0.setCharset("");
      advancedSettings1.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(507, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3801515960237256
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("0RwMVOIh-=fIdF");
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setQSObjectPoolMaker("0RwMVOIh-=fIdF");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger((-124));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.toXML("");
      assertEquals((-124), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("RVtK");
      advancedSettings0.setSocketLinger((-124));
      advancedSettings0.setQSObjectPoolMaker("\t<debug-non-blockn-mode>");
      advancedSettings0.setClientSocketSendBufferSize((-879));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(5516);
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(5516, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.099501544769486
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(4);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize(1331);
      advancedSettings0.setByteBufferSize(1331);
      advancedSettings0.setBacklog(166);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setSocketLinger((-108));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1727);
      int int0 = advancedSettings0.getBacklog();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(166, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1331);
      advancedSettings0.setSocketLinger(2090);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("J");
      advancedSettings1.setQSObjectPoolMaker("aZZ9gIH");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setQSObjectPoolMaker("aZZ9gIH");
      advancedSettings1.setMaxThreadsForNioWrite((-2558));
      advancedSettings0.getClientIdentifier();
      advancedSettings1.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketReceiveBufferSize(2640);
      assertEquals((-2558), advancedSettings1.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3832884333189273
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1053));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML("c-q4m");
      assertEquals((-1053), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4882967972644554
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1727);
      advancedSettings0.setClientSocketSendBufferSize(1196);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize(419);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(419, advancedSettings0.getClientSocketReceiveBufferSize());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize(1331);
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setClientSocketSendBufferSize(1331);
      advancedSettings0.setByteBufferSize(1331);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setSocketLinger((-2488));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("vz2{O#x7nv<gr)X");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // vz2{O#x7nv<gr)X
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("z");
      advancedSettings0.setSocketLinger(24);
      advancedSettings0.setClientIdentifier("eV8z@5YBfRF-Ty");
      advancedSettings0.setQSObjectPoolMaker("z");
      advancedSettings0.setSocketLinger(2250);
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(2250, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.487634764824866
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1727);
      advancedSettings0.setClientSocketSendBufferSize(1196);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1936);
      assertEquals(1196, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.382435249959657
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesBandwidth(2902);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getBacklog();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientIdentifier();
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("0RwMVOIh-=fIdF");
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketReceiveBufferSize((-4644));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setQSObjectPoolMaker("");
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, int0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.428748492421972
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setCharset("");
      advancedSettings4.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      
      String string0 = advancedSettings3.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.024884788669466
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-2966));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize(1331);
      advancedSettings0.setByteBufferSize(1331);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setSocketLinger((-108));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketReceiveBufferSize(433);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getCharset();
      assertEquals(433, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.598804596953717
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-2605));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesLatency((-2605));
      advancedSettings0.setByteBufferSize((-893));
      advancedSettings0.toXML("");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesLatency(0);
      int int0 = 852;
      advancedSettings0.setMaxThreadsForNioWrite(852);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(403);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>-2605</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         // \t<charset>ISO-8859-1</charset>
         // \t<use-direct-byte-buffer>true</use-direct-byte-buffer>
         // \t<byte-buffer-size>65536</byte-buffer-size>
         // \t<backlog>0</backlog>
         // \t<socket-linger>-1</socket-linger>
         // \t<debug-non-blocking-mode>false</debug-non-blocking-mode>
         // \t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>
         // \t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>
         // \t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<performance-preferences-connection-time>0</performance-preferences-connection-time>
         // \t<performance-preferences-latency>-2605</performance-preferences-latency>
         // \t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>
         // \t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>
         // </advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesBandwidth(1191);
      advancedSettings0.getPerformancePreferencesLatency();
      boolean boolean0 = advancedSettings1.getUseDirectByteBuffer();
      assertEquals(1191, advancedSettings1.getPerformancePreferencesBandwidth());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.491229329407284
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1727);
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setQSObjectPoolMaker("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>false</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-receive-buffer-size>1727</client-socket-receive-buffer-size>\n</advanced-settings>\n");
      advancedSettings0.setByteBufferSize(1727);
      advancedSettings0.setPerformancePreferencesLatency((-309));
      advancedSettings0.toXML("");
      assertEquals((-309), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6203430528913634
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "J";
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1331);
      advancedSettings0.setByteBufferSize(2090);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setPerformancePreferencesLatency(2090);
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.toXML("<NsE{D");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getSocketLinger();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("o@}pP%g]>Yxwus");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // o@}pP%g]>Yxwus
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesLatency();
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertEquals(10, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setCharset("ISO-8859-1");
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      assertEquals((-1), advancedSettings3.getSocketLinger());
      assertEquals(0, advancedSettings3.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings3.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings3.getClientIdentifier());
      assertEquals(10, advancedSettings3.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings3.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings3.getCharset());
      assertEquals(65536, advancedSettings3.getByteBufferSize());
      assertEquals(0, advancedSettings3.getPerformancePreferencesLatency());
      assertTrue(advancedSettings3.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings3.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9456645463488123
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(1331);
      advancedSettings2.setClientSocketReceiveBufferSize((-2596));
      assertEquals(1331, advancedSettings2.getClientSocketSendBufferSize());
      
      advancedSettings1.setCharset((String) null);
      assertEquals((-1), advancedSettings1.getSocketLinger());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.6216128941612045
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(1331);
      advancedSettings0.setByteBufferSize(1331);
      advancedSettings0.setPerformancePreferencesBandwidth(1483);
      advancedSettings0.getClientSocketTrafficClass();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize((-1157));
      advancedSettings1.setClientSocketTrafficClass("S[w7*d.r$ZCZ RFc");
      advancedSettings0.setClientIdentifier("k]esMV0/],H~s&?j");
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesLatency(1331);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setPerformancePreferencesLatency(1544);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.toXML("[[a");
      advancedSettings2.setClientSocketTrafficClass("&La_iJ*");
      advancedSettings2.getClientSocketTrafficClass();
      assertEquals(1544, advancedSettings2.getPerformancePreferencesLatency());
      
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setClientSocketSendBufferSize(0);
      assertEquals(0, advancedSettings4.getBacklog());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.847642989259894
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-3017));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setClientIdentifier("\t<performance-preferences-connection-time>");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-1), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.606422741764532
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("0RwMVOIh-=fIdF");
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setSocketLinger((-124));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize(1407);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.toXML(",3&g?m69f");
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize((-2543));
      advancedSettings0.toXML("");
      advancedSettings0.setClientIdentifier("|cB2");
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals((-2543), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4820675063111985
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1766));
      advancedSettings0.setClientSocketReceiveBufferSize((-3016));
      advancedSettings0.setBacklog(2233);
      advancedSettings0.setPerformancePreferencesConnectionTime((-3016));
      advancedSettings0.toXML("</client-socket-receive-buffer-size>\n");
      advancedSettings0.setByteBufferSize((-1766));
      advancedSettings0.getClientSocketTcpNoDelay();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-3016), int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-2906));
      advancedSettings0.setClientSocketReceiveBufferSize(1494);
      assertEquals(1494, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(1, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1727);
      advancedSettings0.setClientSocketSendBufferSize(1196);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1936);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(1936, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "J";
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1331);
      advancedSettings0.setByteBufferSize(2090);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      int int0 = 0;
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("J");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // J
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setSocketLinger((-95));
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTrafficClass();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals((-95), int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.531653001452
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1727);
      advancedSettings0.setClientSocketSendBufferSize(6);
      advancedSettings0.setClientSocketReceiveBufferSize(11);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getBacklog();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize(1407);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setByteBufferSize((-2875));
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getClientSocketTrafficClass();
      advancedSettings1.getClientSocketTcpNoDelay();
      boolean boolean0 = advancedSettings1.getUseDirectByteBuffer();
      assertEquals(1407, advancedSettings1.getByteBufferSize());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1727);
      advancedSettings0.setClientSocketSendBufferSize(1196);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1936);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier(".b~ENA");
      assertEquals(1936, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "\t<socket-linger>";
      advancedSettings0.setClientIdentifier("\t<socket-linger>");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      int int0 = 1;
      advancedSettings0.setBacklog(1);
      advancedSettings0.setPerformancePreferencesBandwidth(3287);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<socket-linger>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<socket-linger>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
