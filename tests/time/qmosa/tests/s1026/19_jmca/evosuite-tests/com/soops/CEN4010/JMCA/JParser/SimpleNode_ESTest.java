/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:29:01 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5016221632244457
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(101);
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("}");
      StringReader stringReader0 = new StringReader("AllocationExpressionAllocationExpression");
      simpleNode0.setIdentifier("-p&O");
      StringWriter stringWriter0 = new StringWriter(101);
      StringBuffer stringBuffer0 = new StringBuffer(608);
      stringWriter0.append((CharSequence) "-p&O");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      SystemInUtil.addInputLine("}");
      StringWriter stringWriter3 = new StringWriter(608);
      simpleNode0.dump("}", stringWriter2);
      assertEquals("<MemberValue>\n  <identifier>-p&O</identifier>\n</MemberValue>\n", stringWriter2.toString());
      
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 797, (-1994820648), (-1994820626));
      simpleNode0.toString("AllocationExpressionAllocationExpression");
      SimpleNode simpleNode1 = new SimpleNode((-997));
      simpleNode0.jjtGetParent();
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleNode simpleNode0 = new SimpleNode((-2028349635));
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      jJTJavaParserState0.pushNode(simpleNode0);
      jJTJavaParserState0.pushNode(simpleNode0);
      Node node0 = jJTJavaParserState0.peekNode();
      simpleNode0.jjtSetParent(node0);
      simpleNode0.setIdentifier("<EXPONENT>");
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      String string0 = "Tp]uu";
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2028349635
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4404756299126638
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("2p$KXc!wVK");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      Node node0 = simpleNode0.parent;
      simpleNode0.setIdentifier("2p$KXc!wVK");
      simpleNode0.setIdentifier("-p&O");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      simpleNode1.toString();
      simpleNode0.toString("\"+\"");
      simpleNode1.jjtSetParent((Node) null);
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.jjtAddChild(simpleNode1, 3);
      simpleNode0.dump("CompilationUnit", stringWriter0);
      simpleNode0.dump("VariableDeclaratorId", stringWriter0);
      simpleNode1.toString("\"+\"CompilationUnit : 2p$KXc!wVK : -p&O");
      simpleNode0.toString("VariableDeclaratorId");
      assertEquals(4, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.692777846205881
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("");
      simpleNode0.jjtOpen();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = null;
      nodeArray0[4] = null;
      simpleNode0.jjtGetParent();
      simpleNode0.toString("");
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.setIdentifier((String) null);
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      simpleNode0.toString("");
      simpleNode0.jjtGetNumChildren();
      simpleNode0.setIdentifier((String) null);
      simpleNode0.jjtGetChild(0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.jjtAddChild((Node) null, 68);
      assertEquals(69, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3765585591273541
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(101);
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("");
      StringReader stringReader0 = new StringReader("AllocationExpressionAllocationExpression");
      simpleNode0.setIdentifier("-p&O");
      StringWriter stringWriter0 = new StringWriter(101);
      StringBuffer stringBuffer0 = new StringBuffer(608);
      stringWriter0.append((CharSequence) "-p&O");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      SystemInUtil.addInputLine("");
      StringWriter stringWriter3 = new StringWriter(608);
      simpleNode0.dump("", stringWriter2);
      assertEquals("<MemberValue>\n  <identifier>-p&O</identifier>\n</MemberValue>\n", stringWriter2.toString());
      
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 797, (-1994820626), (-1994820626));
      simpleNode0.toString("AllocationExpressionAllocationExpression");
      SimpleNode simpleNode1 = new SimpleNode((-997));
      String string0 = simpleNode0.toString("AllocationExpressionAllocationExpression");
      assertEquals("AllocationExpressionAllocationExpressionMemberValue :  : -p&O", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9920480917684886
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("&");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier(" ^PeB>3%N");
      StringWriter stringWriter1 = new StringWriter(0);
      StringBuffer stringBuffer0 = new StringBuffer(608);
      stringWriter1.append((CharSequence) stringBuffer0);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      SystemInUtil.addInputLine("*k.&99TKhP~EdvoY?=z");
      StringWriter stringWriter4 = new StringWriter(608);
      simpleNode0.dump("TypeParameters", stringWriter4);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      assertFalse(simpleNode1.equals((Object)simpleNode0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("&&");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('M');
      simpleNode0.dump("&&", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      simpleNode0.jjtAddChild(simpleNode1, 51);
      simpleNode0.jjtGetChild(0);
      // Undeclared exception!
      try { 
        simpleNode1.jjtAddChild(simpleNode0, (-2735));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3101058389348563
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("5;T");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      javaParser0.ShiftExpression();
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParser0.ReInit(javaParserTokenManager0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      StringWriter stringWriter0 = new StringWriter(3072);
      simpleNode0.dump("5;T", (Writer) null);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 1);
      assertFalse(simpleNode2.equals((Object)simpleNode0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0974033676362451
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("&&");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter1 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(615);
      StringBuffer stringBuffer1 = new StringBuffer(608);
      stringWriter1.append((CharSequence) "&&");
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      SystemInUtil.addInputLine("&&");
      simpleNode0.dump("l}cu:", stringWriter3);
      assertEquals("<CompilationUnit>\n  <identifier>*amp</identifier>\n  <identifier>*amp</identifier>\n</CompilationUnit>\n", stringWriter3.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("CompilationUnit : && : &&", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2598656087553026
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SimpleNode simpleNode0 = new SimpleNode(68);
      simpleNode0.setIdentifier("-p&O");
      StringWriter stringWriter0 = new StringWriter(68);
      StringBuffer stringBuffer0 = new StringBuffer(68);
      stringWriter0.append((CharSequence) "-p&O");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      SystemInUtil.addInputLine("-p&O");
      StringWriter stringWriter3 = new StringWriter(608);
      simpleNode0.dump("-p&O", stringWriter0);
      assertEquals("-p&O<AllocationExpression>\n  <identifier>-p&O</identifier>\n</AllocationExpression>\n", stringWriter0.toString());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (-1994820626), 68, (-1611522464));
      simpleNode0.toString(">$H(");
      SimpleNode simpleNode1 = new SimpleNode(797);
      String string0 = simpleNode0.toString("(xQ`2%,(>Q5");
      assertEquals("(xQ`2%,(>Q5AllocationExpression : -p&O", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6912719034000063
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      simpleNode0.jjtGetParent();
      simpleNode0.setIdentifier("");
      simpleNode0.jjtOpen();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = null;
      nodeArray0[4] = null;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetParent();
      simpleNode0.toString();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild((Node) null, 5);
      simpleNode0.setIdentifier((String) null);
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      simpleNode0.toString("\">>>=\"");
      simpleNode0.jjtGetNumChildren();
      simpleNode0.setIdentifier((String) null);
      simpleNode0.jjtGetChild(5);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "\">>>=\"");
      simpleNode0.jjtAddChild((Node) null, 5);
      assertEquals(6, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("&&");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParser0.ReInit(javaParserTokenManager0);
      simpleNode0.setIdentifier((String) null);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtClose();
      int int0 = (-1898);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.042632211710285
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[3] = null;
      nodeArray0[4] = null;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.toString();
      simpleNode0.id = (-1075307805);
      // Undeclared exception!
      try { 
        simpleNode0.dump("", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AllocationExpressionAllocationExpression");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.reset();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      SimpleNode simpleNode0 = new SimpleNode(101);
      simpleNode0.setIdentifier(" ^PeB>3%N");
      StringWriter stringWriter1 = new StringWriter(96);
      StringWriter stringWriter2 = new StringWriter(96);
      StringBuffer stringBuffer0 = new StringBuffer(4652);
      stringWriter0.append((CharSequence) "");
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      SystemInUtil.addInputLine("*gt");
      simpleNode0.dump("AllocationExpressionAllocationExpression", stringWriter4);
      assertEquals("<MemberValue>\n  <identifier> ^PeB>3%N</identifier>\n</MemberValue>\n", stringWriter4.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AllocationExpressionAllocationExpression");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.reset();
      JavaParser javaParser1 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, 124);
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('*');
      simpleNode0.dump("AllocationExpressionAllocationExpression", stringWriter1);
      SimpleNode simpleNode1 = new SimpleNode(javaParser1, 0);
      simpleNode0.jjtAddChild(simpleNode1, 124);
      int int0 = (-1462);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1462));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1462
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1813));
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-708));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VariableDeclaratorId");
      SimpleNode simpleNode0 = new SimpleNode((-1225));
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1225));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[3] = null;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(nodeArray0[1], (-406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -406
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VariableDeclaratorId");
      SimpleNode simpleNode0 = new SimpleNode(2000);
      // Undeclared exception!
      try { 
        simpleNode0.toString("xV[{y%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2000
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5350813079469845
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("&&");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParser0.ReInit(javaParserTokenManager0);
      simpleNode0.toString("e#F2}%'&k]io<FJe");
      simpleNode0.toString(" : ");
      simpleNode0.dump("e#F2}%'&k]io<FJe", (Writer) null);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      JavaParser javaParser0 = new JavaParser("qxsYwZ>4VK");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      javaParser0.CompilationUnit();
      Node node0 = simpleNode1.parent;
      simpleNode1.jjtAddChild((Node) null, 1);
      assertEquals(2, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "AllocationExpressionAllocationExpression";
      StringReader stringReader0 = new StringReader("AllocationExpressionAllocationExpression");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.reset();
      JavaCharStream javaCharStream0 = javaParser0.jj_input_stream;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser1 = new JavaParser(stringReader0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, (-1619947538), 797, 1838);
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, (-1));
      // Undeclared exception!
      try { 
        simpleNode0.toString("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
