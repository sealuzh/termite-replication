/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:11:39 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URL;
import java.util.Enumeration;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.NonLazyElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jaxen.SimpleVariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4905526446902004
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)25;
      defaultDocumentFactory0.createElement("YFuy-S=S/&-r/w", "YFuy-S=S/&-r/w");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.isStripWhitespaceText();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader1.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      File file0 = MockFile.createTempFile("Sn=G:A$YcgS<i1wG_", "//tmp/'WeF.euf0Po@K");
      SAXReader sAXReader2 = new SAXReader();
      URL uRL0 = file0.toURL();
      try { 
        sAXReader2.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /tmp/Sn=G:A$YcgS<i1wG_0/tmp/'WeF.euf0Po@K (No such file or directory) Nested exception: /tmp/Sn=G:A$YcgS<i1wG_0/tmp/'WeF.euf0Po@K (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3579626045413535
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " data: ");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, false);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 8);
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3773404846482515
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringReader stringReader0 = new StringReader("6*+)r");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("//tmp/'WeF.euf0Po@K", "@Rj%Zk-&gN>Q7[07ml");
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader1.createDefaultEntityResolver("6*+)r");
      sAXReader1.getXMLFilter();
      sAXReader1.getXMLFilter();
      File file0 = MockFile.createTempFile("//tmp/'WeF.euf0Po@K", "");
      SAXReader sAXReader2 = new SAXReader();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.421284995138365
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2750), (byte) (-111));
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      String string0 = "I^W_n9?ox&_SJw0G^";
      QName qName0 = QName.get("//tmp/Po@K0attributes", "I^W_n9?ox&_SJw0G^");
      qName0.getDocumentFactory();
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3680037472985096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.skippedEntity("//tmp/Error on line 0Po@K");
      sAXReader0.setErrorHandler(defaultHandler0);
      sAXReader0.isStripWhitespaceText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "//tmp/Po@K0atributes");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.pop("3Skyb>EeYqc");
      SAXReader sAXReader1 = new SAXReader(xMLReader0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      xMLFilterImpl0.fatalError((SAXParseException) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/Sn=G:A$YcgS<i1wG_0/tmp/'WeF.euf0Po@K");
      sAXReader_SAXEntityResolver0.resolveEntity("ft(z$*MR'1ruAQ_", (String) null);
      QName.get("l) \"X_", "//tmp/Po@K0attributes");
      SAXReader sAXReader2 = new SAXReader(xMLFilterImpl0, false);
      try { 
        sAXReader2.setXMLReaderClassName("http://xml.org/sax/features/validation");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class http://xml.org/sax/features/validation not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3671693709947967
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.skippedEntity("SnzG:A$YcS<i1wG_");
      sAXReader0.setErrorHandler(defaultHandler0);
      sAXReader0.isStripWhitespaceText();
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string1 = "w_D}";
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "w_D}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2481121986842663
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      String string0 = " data: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " data: ");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" data: ");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string1 = "Validation not supported for XMLReader: ";
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "Validation not supported for XMLReader: ");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2990696902149015
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      String string0 = " data: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " data: ");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      int int0 = (-1);
      StringReader stringReader0 = new StringReader("B@{*V6<NkEp");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4989990056051803
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      locator2Impl1.setLineNumber((-1));
      SAXParseException sAXParseException0 = new SAXParseException(" data: ", locator2Impl1);
      xMLFilterImpl1.fatalError(sAXParseException0);
      DOMDocument dOMDocument0 = new DOMDocument(" data: ");
      xMLFilterImpl0.setErrorHandler(xMLFilterImpl1);
      xMLFilterImpl0.setParent((XMLReader) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.internalEntityDecl("G%%,", "G%%,");
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      QName qName0 = QName.get("G%%,", "h");
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      try { 
        sAXReader0.setXMLReaderClassName("f|\"@M");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class f|\"@M not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      String string0 = "X(PXUf'K?T=Lqz";
      sAXReader0.removeHandler("X(PXUf'K?T=Lqz");
      sAXReader0.isValidating();
      try { 
        sAXReader0.setFeature("G3]6y073E$Zx7?a06P(", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'G3]6y073E$Zx7?a06P(' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.385544868886597
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locatorImpl1.getSystemId();
      locatorImpl0.setSystemId("");
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      SAXParseException sAXParseException0 = new SAXParseException("", locatorImpl1);
      SAXParseException sAXParseException1 = new SAXParseException("", locator2Impl0, sAXParseException0);
      xMLFilterImpl0.fatalError(sAXParseException1);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "#5so*[KF;2q3 ";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String string1 = "6Cf(m{Wq";
      defaultHandler2_0.startPrefixMapping("Ky].KY!zw", "6Cf(m{Wq");
      sAXReader0.addHandler("#5so*[KF;2q3 ", pruningDispatchHandler0);
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      sAXReader0.addHandler("#5so*[KF;2q3 ", pruningDispatchHandler0);
      try { 
        sAXReader0.setXMLReaderClassName("#5so*[KF;2q3 ");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class #5so*[KF;2q3  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.resetHandlers();
      sAXReader0.getXMLReader();
      sAXReader0.setStringInternEnabled(true);
      sAXReader0.isMergeAdjacentText();
      String string0 = "";
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      SAXParseException sAXParseException0 = new SAXParseException("u!o!y5<++[", locatorImpl1);
      xMLFilterImpl0.error(sAXParseException0);
      xMLFilterImpl0.endElement("u!o!y5<++[", "", "");
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.isIncludeInternalDTDDeclarations();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      sAXReader1.getErrorHandler();
      String string0 = " of document ";
      // Undeclared exception!
      try { 
        MockURL.URL(" of document ", "irBe:.TblP055QkqcKk", 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "/z-=5x";
      sAXReader0.setStripWhitespaceText(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[22];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/z-=5x");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)40;
      sAXReader0.isIncludeExternalDTDDeclarations();
      byteArray0[7] = (byte)0;
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3072109573039925
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      String string0 = "3Skyb>EeYqc";
      namespaceStack0.pop("3Skyb>EeYqc");
      BaseElement baseElement0 = new BaseElement("=n%$:WgDY<!R!Dk64g", (Namespace) null);
      sAXReader0.configureReader(xMLReader0, defaultHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      try { 
        sAXReader0.setProperty("3Skyb>EeYqc", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '3Skyb>EeYqc' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException("sum() requires one argument.", locatorImpl0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.fatalError(sAXParseException0);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIgnoreComments(true);
      HandlerBase handlerBase0 = new HandlerBase();
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = 'P';
      handlerBase0.ignorableWhitespace(charArray0, (-808), 0);
      sAXReader0.setEntityResolver(handlerBase0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-60), (byte) (-60));
      StringReader stringReader0 = new StringReader("A9jb8=Q4");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4505078489886594
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader_SAXEntityResolver0.resolveEntity("dqQ\"7c&3bL'#", "7");
      sAXReader0.addHandler((String) null, dispatchHandler0);
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "Invalid path of length: ");
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      try { 
        sAXReader0.setXMLReaderClassName("Invalid path of length: ");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class Invalid path of length:  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.getColumnNumber();
      locator2Impl1.setLineNumber((-1));
      SAXParseException sAXParseException0 = new SAXParseException(" data: ", locator2Impl0);
      xMLFilterImpl1.fatalError((SAXParseException) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/validation", "http://xml.org/sax/features/validation");
      QName.get("FZfdMR})i!a g\"CD<", " data: ");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      try { 
        sAXReader0.setXMLReaderClassName("oUERhCY8-R+Qkj&,");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class oUERhCY8-R+Qkj&, not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3372717988650726
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      String string0 = "X(PXUf'K?T=Lqz";
      sAXReader0.isValidating();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8222426725455083
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sAXReader0.removeHandler("X(PXUf'K?T=Lqz");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[15];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null);
      sAXReader0.isStripWhitespaceText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Jxwd4!gz");
      sAXReader1.getDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("K|OSw");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver("X(PXUf'K?T=Lqz");
      InputSource inputSource0 = sAXReader_SAXEntityResolver2.resolveEntity("K|OSw", "K|OSw");
      inputSource0.getByteStream();
      SAXReader sAXReader2 = new SAXReader((DocumentFactory) null);
      DefaultDocument defaultDocument0 = new DefaultDocument("Jxwd4!gz");
      sAXReader2.getXMLReader();
      // Undeclared exception!
      try { 
        sAXReader1.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      locator2Impl1.setLineNumber((-1));
      SAXParseException sAXParseException0 = new SAXParseException(" data: ", locator2Impl1);
      xMLFilterImpl1.fatalError(sAXParseException0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " data: ";
      stringArray0[1] = " data: ";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity(" data: ", " data: ");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("HqZOanf)yhPJd*QN");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class HqZOanf)yhPJd*QN not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = new QName("", namespace0, "");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      boolean boolean0 = true;
      sAXReader0.setStringInternEnabled(true);
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '0';
      stringReader0.read(charArray0);
      try { 
        sAXReader0.read((Reader) stringReader0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.setStringInternEnabled(true);
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3142845733452577
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)25;
      defaultDocumentFactory0.createElement("YFuy-S=S/&-r/w", "YFuy-S=S/&-r/w");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)60;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.isStripWhitespaceText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Error on line ");
      sAXReader0.getDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver1.resolveEntity("YFuy-S=S/&-r/w", "Error on line ");
      inputSource0.getByteStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/Error on line  (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/Error on line  (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3341012450656087
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createElement("YFuy-S=S/&-r/w", "YFuy-S=S/&-r/w");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.isStripWhitespaceText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader0.getDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver1.resolveEntity("YFuy-S=S/&-r/w", "");
      inputSource0.getByteStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2473399979120656
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " data: ");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      locator2Impl1.setLineNumber((-1));
      SAXParseException sAXParseException0 = new SAXParseException((String) null, (String) null, (String) null, 0, (-1));
      xMLFilterImpl1.fatalError(sAXParseException0);
      String string0 = ",";
      // Undeclared exception!
      try { 
        sAXReader0.read(",");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6796742326465708
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("The argument to the name function must be a node-set");
      DefaultDocumentFactory.getInstance();
      QName qName0 = new QName("//tmp/Sn=G:A$YcgS<i1wG_0/tmp/'WeF.euf0Po@K");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      HandlerBase handlerBase0 = new HandlerBase();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("The argument to the name function must be a node-set");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver("^o$Z#%?>j'1Nc");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver3 = new SAXReader.SAXEntityResolver("6|}|j");
      sAXReader_SAXEntityResolver3.resolveEntity("'M", "The argument to the name function must be a node-set");
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("*\"TyY");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class *\"TyY not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/tmp/'WeF.euf0Po@K0");
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/tmp/'WeF.euf0Po@K0");
      sAXReader_SAXEntityResolver0.uriPrefix = "//tmp/tmp/'WeF.euf0Po@K0";
      sAXReader_SAXEntityResolver0.uriPrefix = "WEq|\u0004xG}7BdSRI?";
      sAXReader_SAXEntityResolver0.uriPrefix = "WEq|\u0004xG}7BdSRI?";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/properties/lexical-handler", "|TijRDlb!+PZLwl_:&");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getXMLFilter();
      String string0 = "=n%$:WgDY<!R!Dk64g";
      sAXReader0.createXMLReader();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      String string1 = "";
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.pop("=n%$:WgDY<!R!Dk64g");
      BaseElement baseElement0 = new BaseElement("", (Namespace) null);
      try { 
        sAXReader0.setProperty("", "=n%$:WgDY<!R!Dk64g");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(false);
      NonLazyElement nonLazyElement0 = new NonLazyElement((QName) null);
      DOMNamespace dOMNamespace0 = new DOMNamespace(nonLazyElement0, "i_nanRChvC1", "|E");
      QName qName0 = new QName("|E", dOMNamespace0);
      dOMNamespace0.equals(sAXReader0);
      nonLazyElement0.selectObject("i_nanRChvC1");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dOMNamespace0.getLastChild();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      
      boolean boolean1 = sAXReader0.isMergeAdjacentText();
      sAXReader0.getXMLFilter();
      boolean boolean2 = sAXReader0.isStringInternEnabled();
      assertFalse(boolean2 == boolean1);
      
      sAXReader0.setIgnoreComments(false);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      String string0 = " data: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " data: ");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" data: ");
      String string1 = "Validation not supported for XMLReader: ";
      sAXReader0.isIncludeExternalDTDDeclarations();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getContentHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "yisNu^Nn>";
      defaultHandler2_0.startDTD("helC~BXKo.", "helC~BXKo.", "yisNu^Nn>");
      sAXReader0.setIgnoreComments(true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("yisNu^Nn>", "yisNu^Nn>");
      DOMNamespace dOMNamespace0 = new DOMNamespace((Element) null, "yisNu^Nn>", (String) null);
      QName.get("yisNu^Nn>", (Namespace) dOMNamespace0, "yisNu^Nn>");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory(documentFactory0);
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@286fe1e0 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3226276345199213
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      locator2Impl1.setLineNumber((-1));
      SAXParseException sAXParseException0 = new SAXParseException(" data: ", locator2Impl1);
      xMLFilterImpl1.fatalError(sAXParseException0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " data: ";
      stringArray0[1] = " data: ";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity(" data: ", " data: ");
      QName qName0 = QName.get("//tmp/'WeF.euf0Po@K", "http://xml.org/sax/features/validation");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLReader();
      StringReader stringReader0 = new StringReader("SN}}:h-zXDO!zl4'0");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4466856169199285
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      String string0 = "3Skyb>EeYqc";
      namespaceStack0.pop("3Skyb>EeYqc");
      BaseElement baseElement0 = new BaseElement("=n%$:WgDY<!R!Dk64g", (Namespace) null);
      SAXReader sAXReader1 = new SAXReader(xMLReader0);
      sAXReader0.configureReader(xMLReader0, defaultHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      try { 
        sAXReader1.setProperty("3Skyb>EeYqc", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '3Skyb>EeYqc' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3502595610634747
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.getColumnNumber();
      locator2Impl1.setLineNumber(7);
      SAXParseException sAXParseException0 = new SAXParseException(" data: ", locator2Impl0);
      xMLFilterImpl1.fatalError((SAXParseException) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName(" data: ", "As_");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      File file0 = MockFile.createTempFile(",TI?B:b$.9f[<QT", "/");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.skippedEntity("SnzG:A$YcS<i1wG_");
      sAXReader0.setErrorHandler(defaultHandler0);
      sAXReader0.isStripWhitespaceText();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.setLineNumber((-1));
      String string0 = "";
      SAXParseException sAXParseException0 = new SAXParseException("", locator2Impl1);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      xMLFilterImpl0.fatalError(sAXParseException0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      StringReader stringReader0 = new StringReader("6*+)r");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIgnoreComments(true);
      HandlerBase handlerBase0 = new HandlerBase();
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      StringReader stringReader0 = new StringReader("(Ct(rf");
      try { 
        sAXReader0.read((Reader) stringReader0, "(Ct(rf");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/(Ct(rf : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "O*NBh";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("O*NBh");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getDispatchHandler();
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)83;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)85;
      sAXReader0.setValidation(true);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      sAXReader0.getDispatchHandler();
      String string0 = "";
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      // Undeclared exception!
      try { 
        dispatchHandler0.onEnd(elementStack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "http://xml.org/sax/properties/lexical-handler";
      stringArray0[1] = "t.z'3'$F|y,#XA";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "http://xml.org/sax/features/validation";
      stringArray0[5] = "COMMENT_NODE";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler("t.z'3'$F|y,#XA");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 1335);
      pruningElementStack0.getPath();
      pruningElementStack0.lastElementIndex = 347;
      DispatchHandler dispatchHandler0 = pruningElementStack0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      assertTrue(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.40640935807259
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.endPrefixMapping("'WeF.euf");
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'd';
      charArray0[2] = '8';
      sAXReader0.setValidation(false);
      charArray0[3] = '4';
      charArray0[4] = '-';
      charArray0[5] = 'P';
      charArray0[6] = '+';
      charArray0[7] = '!';
      parserAdapter0.characters(charArray0, 0, 0);
      sAXReader0.isIgnoreComments();
      try { 
        sAXReader0.read(" PUBLIC \"");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol:  PUBLIC \" Nested exception: no protocol:  PUBLIC \"
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setEncoding("org.dom4j.tree.AbstractDocumentType");
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 11);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 8);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
