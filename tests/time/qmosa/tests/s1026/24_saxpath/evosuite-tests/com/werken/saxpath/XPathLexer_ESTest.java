/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:36:42 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1797724851636153
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.consume((-4854));
      xPathLexer0.dots();
      // Undeclared exception!
      try { 
        xPathLexer1.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.161710685357841
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.setXPath("@e)oK]/G\"p-RA]");
      xPathLexer0.currentPosition();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("@", token0.getTokenText());
      
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.slashes();
      assertEquals("K", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.pipe();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.isIdentifierChar('Y');
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("/", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.rightParen();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("\"", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals("p", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('q');
      assertTrue(boolean0);
      
      Token token7 = xPathLexer0.minus();
      assertEquals("-", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer1.nextToken();
      assertEquals(2, token8.getTokenType());
      assertEquals(")", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer1.whitespace();
      assertEquals((-2), token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer0.pipe();
      assertEquals("", token11.getTokenText());
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer2.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer2.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.487331089559408
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(1877);
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.setXPath("@e)oK]/G\"p-RA]");
      xPathLexer0.currentPosition();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("@", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("e", token1.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("K", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("]", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.isIdentifierChar('Y');
      xPathLexer0.identifier();
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals("/", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("\"", token8.getTokenText());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("p", token9.getTokenText());
      
      xPathLexer0.isIdentifierStartChar('q');
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer2.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.whitespace();
      Token token11 = xPathLexer3.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer1.colon();
      assertEquals(18, token12.getTokenType());
      assertEquals("(", token12.getTokenText());
      
      Token token13 = xPathLexer2.doubleColon();
      assertEquals(19, token13.getTokenType());
      
      Token token14 = xPathLexer2.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4693443502371064
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.setXPath("k(-Fa\"O0^@5UmL[");
      XPathLexer xPathLexer1 = new XPathLexer("k(-Fa\"O0^@5UmL[");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.getPreviousToken();
      Token token0 = xPathLexer1.doubleColon();
      assertEquals("(-", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.pipe();
      Token token2 = xPathLexer1.number();
      assertEquals("", token2.getTokenText());
      
      xPathLexer1.isIdentifierChar('(');
      XPathLexer xPathLexer2 = new XPathLexer("k(-Fa\"O0^@5UmL[");
      Token token3 = xPathLexer2.comma();
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dollar();
      xPathLexer1.div();
      xPathLexer2.mod();
      XPathLexer xPathLexer4 = new XPathLexer("k(-Fa\"O0^@5UmL[");
      Token token4 = xPathLexer4.plus();
      assertEquals("k", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("k(-Fa\"O0^@5UmL[");
      xPathLexer5.mod();
      XPathLexer xPathLexer6 = new XPathLexer("k(-Fa\"O0^@5UmL[");
      Token token5 = xPathLexer6.leftBracket();
      assertEquals("k", token5.getTokenText());
      
      Token token6 = xPathLexer3.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer3.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer4.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token9 = xPathLexer5.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer1.operatorName();
      Token token10 = xPathLexer1.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("a", token10.getTokenText());
      
      Token token11 = xPathLexer4.identifier();
      assertEquals(15, token11.getTokenType());
      assertEquals("-Fa", token11.getTokenText());
      
      xPathLexer2.mod();
      Token token12 = xPathLexer5.equals();
      assertEquals("(", token12.getTokenText());
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1441085911091893
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.setXPath("@e)oK-/G\"phRAl]");
      xPathLexer0.currentPosition();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("e", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      xPathLexer0.slashes();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("K", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("-", token4.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.isIdentifierChar('Y');
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("/", token5.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.plus();
      assertEquals("\"", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer1.mod();
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer1.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      assertEquals("h", token11.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token12 = xPathLexer0.colon();
      assertEquals("", token12.getTokenText());
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer0.doubleColon();
      assertEquals(19, token13.getTokenType());
      assertEquals("RA", token13.getTokenText());
      
      Token token14 = xPathLexer0.nextToken();
      assertEquals("l", token14.getTokenText());
      assertEquals(15, token14.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.21301426380198
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("@e)oK-/G\"phRAl]");
      xPathLexer0.currentPosition();
      Token token1 = xPathLexer0.slashes();
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("e", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(")", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("o", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(12, token6.getTokenType());
      assertEquals("-/", token6.getTokenText());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.number();
      boolean boolean0 = xPathLexer0.isIdentifierChar('Y');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals("p", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      assertEquals("h", token10.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer1.mod();
      Token token12 = xPathLexer1.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
      
      Token token14 = xPathLexer0.dots();
      assertEquals("", token14.getTokenText());
      
      Token token15 = xPathLexer1.minus();
      assertEquals(6, token15.getTokenType());
      
      Token token16 = xPathLexer0.dollar();
      assertEquals(26, token16.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.951928232720618
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("c", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("o", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.dollar();
      assertEquals("w", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("c", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("r", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer1.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("o", token7.getTokenText());
      
      Token token8 = xPathLexer0.minus();
      assertEquals("k", token8.getTokenText());
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals("e", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals("n.", token10.getTokenText());
      assertEquals(14, token10.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-672));
      xPathLexer0.getPreviousToken();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8278567001731845
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.*PathLexer");
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("co", token2.getTokenText());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.*PathLexer");
      xPathLexer1.setXPath("F|U}<");
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer1.hasMoreChars();
      Token token5 = xPathLexer0.literal();
      assertEquals("rk", token5.getTokenText());
      assertEquals(27, token5.getTokenType());
      assertNotNull(token5);
      
      xPathLexer0.getPreviousToken();
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("F|", token6.getTokenText());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0115767965151905
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.operatorName();
      xPathLexer1.and();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer1.or();
      xPathLexer0.mod();
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(" ", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9382528836760868
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer1.setXPath(")");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer0.getPreviousToken();
      xPathLexer0.doubleColon();
      xPathLexer1.at();
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.number();
      xPathLexer0.isIdentifierChar('8');
      xPathLexer0.comma();
      XPathLexer xPathLexer4 = new XPathLexer("H?ATZ U!^HuJ85");
      xPathLexer4.colon();
      xPathLexer2.dollar();
      xPathLexer4.div();
      xPathLexer0.mod();
      xPathLexer4.plus();
      xPathLexer2.mod();
      xPathLexer2.leftBracket();
      xPathLexer3.number();
      xPathLexer3.dots();
      xPathLexer4.minus();
      xPathLexer3.colon();
      xPathLexer1.dots();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-584));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9650797585044586
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.plus();
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.mod();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer1.dots();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer5.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token4 = xPathLexer6.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer2.operatorName();
      Token token5 = xPathLexer1.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token6 = xPathLexer7.identifier();
      assertEquals(15, token6.getTokenType());
      
      int int0 = xPathLexer4.endPosition();
      assertEquals(29, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9913175884844385
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("WKO']ERq^|y;hT(Q");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer2.at();
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer3.minus();
      assertEquals(6, token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token3 = xPathLexer4.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer4.dots();
      assertEquals(13, token4.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5040870397596113
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CP|m");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.dollar();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.consume((-1292));
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.006623756332066
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.hasMoreChars();
      xPathLexer0.comma();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.mod();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.colon();
      xPathLexer1.mod();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer5.leftBracket();
      xPathLexer5.number();
      xPathLexer1.dots();
      xPathLexer3.minus();
      xPathLexer2.slashes();
      xPathLexer5.dots();
      xPathLexer4.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer6.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4673118064308213
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-FSeWb_F");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer0.mod();
      xPathLexer1.mod();
      xPathLexer1.rightBracket();
      xPathLexer1.plus();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer1.minus();
      xPathLexer1.colon();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2295733775985553
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer0.setXPath("k(-Fa\"O0^@5UmL[");
      XPathLexer xPathLexer1 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.rightParen();
      xPathLexer1.setXPath("[ (");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.getXPath();
      xPathLexer1.rightBracket();
      xPathLexer0.or();
      xPathLexer2.comma();
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dollar();
      xPathLexer3.div();
      xPathLexer1.mod();
      xPathLexer2.plus();
      xPathLexer0.mod();
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.number();
      xPathLexer2.dots();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2679158250435196
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      char char0 = xPathLexer0.LA((-1));
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1942924751504287
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer1.mod();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(".", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals("w", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token8 = xPathLexer0.notEquals();
      assertEquals("er", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer2.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2135909717355795
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.setXPath("_%OrL .4IT4c-CB?;4)");
      xPathLexer0.currentPosition();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("_", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("%", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("O", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.slashes();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(" ", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(31, token6.getTokenType());
      
      xPathLexer0.isIdentifierChar('l');
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("I", token7.getTokenText());
      
      Token token8 = xPathLexer0.colon();
      assertEquals("T", token8.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer0.mod();
      Token token10 = xPathLexer0.leftBracket();
      assertEquals("c", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer1.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals("-", token12.getTokenText());
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer1.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer1.star();
      assertEquals(20, token14.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token15 = xPathLexer2.rightBracket();
      assertEquals(4, token15.getTokenType());
      
      Token token16 = xPathLexer1.colon();
      assertEquals(18, token16.getTokenType());
      
      xPathLexer1.doubleColon();
      Token token17 = xPathLexer0.nextToken();
      assertEquals("CB", token17.getTokenText());
      assertEquals(15, token17.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.246262616129982
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer1.mod();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer2.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      Token token10 = xPathLexer1.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer1.identifier();
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.141167378163056
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.slashes();
      assertEquals("m", token1.getTokenText());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
      
      xPathLexer0.whitespace();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer1.number();
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      Token token6 = xPathLexer0.identifier();
      assertEquals(".werken.saxpath.XPathLexer", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      xPathLexer1.star();
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer1.leftBracket();
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.star();
      xPathLexer0.mod();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
      assertEquals("", token11.getTokenText());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer2.minus();
      Token token13 = xPathLexer3.star();
      assertEquals(20, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token14 = xPathLexer3.colon();
      assertEquals(18, token14.getTokenType());
      
      Token token15 = xPathLexer0.doubleColon();
      assertEquals(19, token15.getTokenType());
      
      Token token16 = xPathLexer0.nextToken();
      assertEquals((-1), token16.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9626392950824714
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("bt`jS4/o&2[df(*$ErL");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.or();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7892925198657346
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.plus();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.colon();
      xPathLexer0.dots();
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.notEquals();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.020354373685768
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.div();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("V", token0.getTokenText());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.plus();
      assertEquals("p", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer1.mod();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer1.dots();
      assertEquals("V", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("#", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("q", token5.getTokenText());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.517120016895736
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("VpW#q{xICBu0N");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      xPathLexer2.at();
      xPathLexer0.pipe();
      xPathLexer1.number();
      xPathLexer0.hasMoreChars();
      xPathLexer3.comma();
      xPathLexer3.colon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer4.plus();
      xPathLexer2.mod();
      xPathLexer3.leftBracket();
      xPathLexer1.number();
      xPathLexer0.dots();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.minus();
      xPathLexer3.colon();
      xPathLexer0.dots();
      xPathLexer1.slashes();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4628887168387887
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.mod();
      xPathLexer0.setXPath("");
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.div();
      xPathLexer0.dots();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.setXPath("F|U}<");
      Token token9 = xPathLexer0.leftBracket();
      assertEquals("F", token9.getTokenText());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      assertEquals("", token10.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      xPathLexer0.getPreviousToken();
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer0.at();
      assertEquals(16, token14.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume((-527));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5683473207743495
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      xPathLexer0.consume();
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.hasMoreChars();
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.and();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1741));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9428893202585464
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.operatorName();
      char char0 = xPathLexer0.LA(13);
      assertEquals('\uFFFF', char0);
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.229672384438399
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.consume((-1160));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.323409435027733
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.equals();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      xPathLexer0.slashes();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.and();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.setXPath("");
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token10);
      
      xPathLexer0.endPosition();
      xPathLexer0.identifier();
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3452959838687333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("@e)oK-/G\"phRAl]");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.identifierOrOperatorName();
      assertNotNull(token1);
      
      Token token2 = xPathLexer2.literal();
      assertNull(token2);
      
      xPathLexer2.whitespace();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer1.pipe();
      assertEquals("@", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.identifier();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer4.identifier();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer3.star();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.leftParen();
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals("e", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      boolean boolean0 = xPathLexer4.isIdentifierStartChar('^');
      assertFalse(boolean0);
      
      xPathLexer5.minus();
      XPathLexer xPathLexer6 = new XPathLexer("-Hs2\"LGV28zLtY_%Am");
      xPathLexer6.mod();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token8 = xPathLexer7.star();
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token9 = xPathLexer4.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(")o", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer8.equals();
      assertEquals(21, token11.getTokenType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.949539399858523
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.consume(1);
      xPathLexer0.consume(101);
      xPathLexer0.comma();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.401588010772272
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("@e)oK-/G\"phRAl]");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer1.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.doubleColon();
      xPathLexer0.at();
      xPathLexer2.pipe();
      xPathLexer1.number();
      xPathLexer0.hasMoreChars();
      xPathLexer2.comma();
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer3.relationalOperator();
      xPathLexer1.div();
      xPathLexer0.mod();
      xPathLexer1.plus();
      xPathLexer2.mod();
      xPathLexer1.leftBracket();
      xPathLexer2.number();
      xPathLexer3.dots();
      xPathLexer2.minus();
      xPathLexer2.slashes();
      xPathLexer3.dots();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.61996154414587
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.comma();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.consume(0);
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.and();
      xPathLexer0.consume(0);
      xPathLexer0.consume(0);
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.401747271801098
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("@e)oK-/G\"phRAl]");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer1.mod();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.at();
      Token token3 = xPathLexer1.slashes();
      assertEquals("@", token3.getTokenText());
      
      Token token4 = xPathLexer2.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.number();
      boolean boolean0 = xPathLexer2.isIdentifierChar('9');
      assertTrue(boolean0);
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer2.div();
      xPathLexer2.mod();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.star();
      xPathLexer1.mod();
      Token token7 = xPathLexer3.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer2.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.star();
      assertEquals("e", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals(")", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      xPathLexer2.dots();
      Token token11 = xPathLexer3.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer2.colon();
      assertEquals(18, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      Token token13 = xPathLexer1.dots();
      assertEquals(13, token13.getTokenType());
      assertEquals("o", token13.getTokenText());
      
      Token token14 = xPathLexer2.slashes();
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.401458728290048
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("@e)oK-/G\"phRAl]");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer2.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer1.number();
      boolean boolean0 = xPathLexer2.isIdentifierChar('^');
      assertFalse(boolean0);
      
      Token token5 = xPathLexer2.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer2.div();
      xPathLexer0.mod();
      Token token7 = xPathLexer1.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer2.mod();
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("e", token8.getTokenText());
      
      Token token9 = xPathLexer2.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer3.dots();
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6935753580502166
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.operatorName();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer("VpW#q{xICBu0N");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.204652488245906
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.operatorName();
      xPathLexer1.and();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("BY");
      xPathLexer0.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer2.star();
      assertEquals("B", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token2 = xPathLexer2.colon();
      assertEquals("Y", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer4.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer1.equals();
      assertEquals("[", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.914924643891286
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.number();
      xPathLexer0.number();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer1.mod();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer1.mod();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1715579463204113
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%");
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.at();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.number();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.090384359763139
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("Fi3Kw!_$O");
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0168818390288408
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1784783175614026
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer1.number();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.colon();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer1.div();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      Token token7 = xPathLexer1.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer1.dots();
      xPathLexer1.minus();
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9030514716226012
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("om.werken.saxpath.XPathLexer", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      xPathLexer0.literal();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      xPathLexer1.mod();
      xPathLexer1.mod();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2854875514130413
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("@e)oK-/G\"phRAl]");
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("e", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer1.dots();
      assertEquals(")", token4.getTokenText());
      
      Token token5 = xPathLexer2.minus();
      assertEquals(6, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.colon();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.221324101749276
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.whitespace();
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.and();
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
  }
}
