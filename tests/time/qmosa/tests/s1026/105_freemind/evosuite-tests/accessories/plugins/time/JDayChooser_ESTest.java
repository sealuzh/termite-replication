/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:38:33 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.Month;
import java.time.ZonedDateTime;
import java.time.temporal.TemporalAccessor;
import java.util.Date;
import java.util.Locale;
import javax.help.BackAction;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.MenuElement;
import org.apache.fop.pdf.PDFCIDSystemInfo;
import org.apache.fop.pdf.PDFCMap;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      
      jDayChooser0.getSize();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "q@J^@_nAT_", 3921L, 0);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.251613520929838
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "Windows";
      stringArray0[2] = "n4L";
      stringArray0[3] = "Metal";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 711, false);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters((-1267));
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1338126229071066
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 676, 676, 45, 45, 'J');
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockZonedDateTime.now();
      BackAction backAction0 = new BackAction(jDayChooser0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.096591278091726
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 8869;
      boolean boolean0 = false;
      jDayChooser0.setDecorationBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean1 = true;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      String string0 = null;
      // Undeclared exception!
      try { 
        fileUtil0.openOutputStreamElement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.enableInputMethods(false);
      jDayChooser0.getDayPanel();
      jDayChooser0.getToolTipText();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getSelectedDay();
      // Undeclared exception!
      try { 
        Date.from((Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Metal";
      stringArray0[1] = "Windows";
      stringArray0[2] = "n4L";
      stringArray0[3] = "Metal";
      stringArray0[4] = "9bt;VO=}";
      stringArray0[5] = "14";
      stringArray0[6] = "}vrWxy=dd(35APNf";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0966290068221545
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      jDayChooser0.setMonth((-20));
      jDayChooser0.setDayBordersVisible(true);
      MenuElement[] menuElementArray0 = new MenuElement[9];
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1144386606655545
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDecorationBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = true;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D0.getFontInfo();
      PDFResources pDFResources0 = new PDFResources(16);
      PDFCIDSystemInfo pDFCIDSystemInfo0 = new PDFCIDSystemInfo("//'", "./", 16);
      PDFCMap pDFCMap0 = new PDFCMap("day", pDFCIDSystemInfo0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFCMap0, 29, 16);
      // Undeclared exception!
      try { 
        pDFPage0.getDocumentSafely();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Parent PDFDocument is unavailable
         //
         verifyException("org.apache.fop.pdf.PDFObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.196242832443266
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear((-2985));
      MockDate mockDate0 = new MockDate((-2985), 3185, 3185, 8869, 8869, 206);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      // Undeclared exception!
      try { 
        MockLocalTime.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1608966978625985
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Metal";
      stringArray0[1] = "ZO2@qf";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "n4L";
      stringArray0[3] = "Metal";
      stringArray0[4] = "9bt;VO=}";
      stringArray0[6] = "}vrWxy=dd(35APNf";
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setBounds(0, (-2277), 0, 128);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      int int0 = 3371;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(3371);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3371
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.205589923024807
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.PRC;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 4, 4, 0, 'h');
      KeyEvent.getKeyText(4);
      jDayChooser0.updateUI();
      jDayChooser0.keyTyped(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockZonedDateTime.now();
      jDayChooser0.getPropertyChangeListeners("Unknown keyCode: 0x4");
      jDayChooser0.setWeekOfYearVisible(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 156, "28");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2646963864948226
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.ROOT;
      locale0.getDisplayVariant();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getDay();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setYear(14);
      MockDate mockDate0 = new MockDate(14, 14, 10, 5948, (-5202), 1388);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      Month month0 = Month.JANUARY;
      // Undeclared exception!
      try { 
        MockLocalTime.from(month0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalTime from TemporalAccessor: JANUARY of type java.time.Month
         //
         verifyException("java.time.LocalTime", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1699680061509725
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getDayPanel();
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setMaxSelectableDate(mockDate0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2741506863550462
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      int int0 = 771;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 771);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1337304777448702
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.init();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Metal";
      stringArray0[1] = "Windows";
      stringArray0[2] = "n4L";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      stringArray0[3] = "Metal";
      stringArray0[4] = "9bt;VO=}";
      BackAction backAction0 = new BackAction("n4L");
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2401873239899905
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setAlignmentX((-5807.509F));
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getLocale();
      int int0 = 2293;
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 44, 261L, 2293, 2293, '4', (-3778));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2023159673557595
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JEditorPane jEditorPane0 = new JEditorPane("Windows", ",8*5Gj_");
      Color color0 = jEditorPane0.getCaretColor();
      jDayChooser0.setForeground(color0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, (-2182L), 673, 4, 'C');
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      BackAction backAction0 = new BackAction(zonedDateTime0);
      jDayChooser0.setWeekOfYearVisible(false);
      Color color1 = jDayChooser0.getSundayForeground();
      Color.getColor("day", color1);
      jDayChooser0.setDecorationBackgroundColor(color1);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-6029312), color1.getRGB());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.292745219301661
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.dayBordersVisible = false;
      jDayChooser0.getDecorationBackgroundColor();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setBounds(0, 0, 465, 465);
      jDayChooser0.getWeekdayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 465, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Metal";
      stringArray0[1] = "Windows";
      stringArray0[2] = "n4L";
      stringArray0[3] = "Metal";
      stringArray0[4] = "9bt;VO=}";
      stringArray0[5] = "14";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent("Metal", 48, "oaL}XF.AlbO", 48);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.infoText;
      systemColor0.darker();
      Color.getColor("day", 10054);
      Color.getColor("Ch*&6dY:79pq5ZAE\"", 0);
      jDayChooser0.setDay(228);
      BrowseMode browseMode0 = new BrowseMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }
}
