/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:39:40 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.724940284942268
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setOmitEncoding(true);
      OutputFormat.createPrettyPrint();
      outputFormat0.setNewlines(false);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("-indent");
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-indent";
      stringArray0[2] = "-indent";
      stringArray0[3] = "";
      stringArray0[4] = "-indent";
      stringArray0[5] = "-indent";
      stringArray0[6] = "-indent";
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.001738882389618
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "RpaH=Y[";
      stringArray0[1] = "RpaH=Y[";
      stringArray0[2] = "-padText";
      stringArray0[3] = "RpaH=Y[";
      stringArray0[4] = "-trimText";
      stringArray0[6] = "oR~21f";
      stringArray0[7] = "=&SazIg!%,E$XIV";
      OutputFormat.createCompactFormat();
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertEquals("  ", outputFormat0.getIndent());
      assertTrue(outputFormat0.isTrimText());
      assertEquals(3, int0);
      assertTrue(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertFalse(outputFormat1.isPadText());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isSuppressDeclaration());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3231568780498995
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat("*-pvGeV", true, "@scu)NBBdf5");
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat2.setTrimText(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat.createPrettyPrint();
      outputFormat1.setPadText(false);
      outputFormat2.setTrimText(true);
      String[] stringArray0 = new String[11];
      stringArray0[0] = "@scu)NBBdf5";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "org.dom4j.io.OutputFormat";
      stringArray0[3] = "Fikewq ~C2}'_+";
      stringArray0[4] = "-xhtmlFikewq ~C2}'_+";
      stringArray0[5] = "@scu)NBBdf5";
      stringArray0[6] = "Fikewq ~C2}'_+";
      stringArray0[7] = "org.dom4j.io.OutputFormat";
      stringArray0[8] = "*-pvGeV";
      outputFormat1.parseOptions(stringArray0, 1);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat3.setPadText(false);
      assertFalse(outputFormat3.isPadText());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat4 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat4.isTrimText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3168909106641022
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, (String) null);
      outputFormat0.setEncoding("");
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent((String) null);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndentSize((-1));
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat0.setXHTML(false);
      outputFormat0.setIndent("k6]u$L^N&~HI<");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getLineSeparator();
      outputFormat2.setOmitEncoding(true);
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat3.getLineSeparator();
      outputFormat1.isOmitEncoding();
      OutputFormat outputFormat4 = OutputFormat.createCompactFormat();
      outputFormat4.setTrimText(false);
      outputFormat1.getLineSeparator();
      outputFormat1.isOmitEncoding();
      outputFormat2.isOmitEncoding();
      outputFormat3.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat3.getAttributeQuoteCharacter());
      
      OutputFormat.createCompactFormat();
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.768098443406482
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = new OutputFormat("UCr_lLG", false);
      outputFormat1.setNewLineAfterDeclaration(false);
      OutputFormat.createPrettyPrint();
      outputFormat0.setPadText(false);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setTrimText(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "";
      stringArray0[2] = "luNu>>qXD)R_{M?S [W";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.305663096808308
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, (String) null);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndentSize((-130));
      outputFormat0.getEncoding();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(false);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setLineSeparator("!#BJb7P4]q<");
      outputFormat2.setIndent(false);
      assertEquals("!#BJb7P4]q<", outputFormat2.getLineSeparator());
      
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.setOmitEncoding(false);
      OutputFormat outputFormat4 = OutputFormat.createPrettyPrint();
      outputFormat4.setXHTML(true);
      outputFormat1.getLineSeparator();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = "d@]s*T0H|uaN";
      stringArray0[5] = null;
      stringArray0[6] = null;
      int int0 = outputFormat4.parseOptions(stringArray0, 1196);
      assertEquals(1196, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.107694069091043
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setTrimText(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterNTags((-1834));
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.getLineSeparator();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.getLineSeparator();
      outputFormat0.isExpandEmptyElements();
      outputFormat1.setLineSeparator("");
      OutputFormat.createCompactFormat();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getLineSeparator();
      outputFormat1.isExpandEmptyElements();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setExpandEmptyElements(true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 299);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9325407017555163
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true, "7Oxb^ \"Mi>[S.]u0l");
      String[] stringArray0 = new String[8];
      outputFormat0.setNewlines(false);
      outputFormat0.setIndent(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags((-1));
      outputFormat1.setIndentSize((-1883515445));
      outputFormat1.setIndent("");
      OutputFormat.createPrettyPrint();
      outputFormat0.getNewLineAfterNTags();
      assertEquals((-1), outputFormat0.getNewLineAfterNTags());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5812155340141354
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setAttributeQuoteCharacter('\'');
      outputFormat0.setXHTML(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat1.setXHTML(false);
      outputFormat1.setPadText(true);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('d');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (d)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9906380498271754
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.isNewlines();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmpty";
      stringArray0[1] = "!#BJb7P4]q<!2@j )";
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setLineSeparator("");
      OutputFormat outputFormat1 = new OutputFormat(",AB$({g:0{Vc^!");
      outputFormat1.isNewlines();
      outputFormat0.getLineSeparator();
      assertEquals("", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isExpandEmptyElements());
      
      outputFormat1.setIndent("-expandEmpty");
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1603159682381894
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RpaH=Y[";
      stringArray0[1] = "";
      OutputFormat outputFormat1 = new OutputFormat("", false, "L#Sr*nj");
      outputFormat1.setXHTML(true);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setLineSeparator("L#Sr*nj");
      outputFormat0.setIndent("");
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setNewLineAfterNTags(630);
      assertEquals(630, outputFormat0.getNewLineAfterNTags());
      
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat3.isNewlines();
      outputFormat1.isXHTML();
      boolean boolean0 = outputFormat3.isXHTML();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4545398262671005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(1);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.isNewlines();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmpty";
      stringArray0[1] = "!#BJb7P4]q<!2@j )";
      stringArray0[2] = "L#Sr*nj";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setLineSeparator("Rc1N+en_\"|J?1t1*k");
      outputFormat0.getEncoding();
      outputFormat0.isNewlines();
      outputFormat0.getLineSeparator();
      outputFormat0.getNewLineAfterNTags();
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('|');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (|)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.011015831001672
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RpaH=Y[";
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setIndent("RpaH=Y[");
      OutputFormat outputFormat2 = new OutputFormat("RpaH=Y[", true, "/GgBs");
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat3.setTrimText(true);
      OutputFormat outputFormat4 = new OutputFormat("RpaH=Y[", true);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "/GgBs";
      stringArray1[1] = "$";
      stringArray1[2] = "!#BJb7";
      stringArray1[3] = "!#BJb7";
      outputFormat4.parseOptions(stringArray1, 681);
      outputFormat3.isNewlines();
      outputFormat0.parseOptions(stringArray1, 681);
      outputFormat2.setIndent("r~LueMV'YJ4\"*#");
      assertEquals("r~LueMV'YJ4\"*#", outputFormat2.getIndent());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1163756543112897
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true, "7Oxb^ \"Mi>[S.]u0l");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray0[5] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray0[6] = "-trimText";
      stringArray0[7] = "-trimText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isTrimText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.755739480438498
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("7Oxb^ \"Mi>[S.]u0l", true, "7Oxb^ \"Mi>[S.]u0l");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray0[1] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray0[2] = "-trimText";
      outputFormat0.parseOptions(stringArray0, 374);
      assertFalse(outputFormat0.isPadText());
      assertEquals("7Oxb^ \"Mi>[S.]u0l", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("7Oxb^ \"Mi>[S.]u0l", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isTrimText());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray1[1] = "-trimText";
      stringArray1[2] = "-trimText";
      stringArray1[3] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray1[4] = "7Oxb^ \"Mi>[S.]u0l";
      outputFormat2.parseOptions(stringArray1, 2800);
      int int0 = outputFormat2.parseOptions(stringArray0, 3);
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertFalse(outputFormat2.isNewlines());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isTrimText());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertFalse(outputFormat2.isPadText());
      assertFalse(outputFormat2.isOmitEncoding());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isXHTML());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9720190126080097
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText");
      outputFormat0.setIndent("-trimText");
      OutputFormat outputFormat1 = new OutputFormat("?B", true, "!#BJb7");
      outputFormat1.setPadText(true);
      outputFormat0.isPadText();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setTrimText(false);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setIndent("");
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat2.setSuppressDeclaration(false);
      outputFormat3.setSuppressDeclaration(false);
      outputFormat3.setXHTML(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Td_O7)X42n-8vf[";
      stringArray0[1] = "?B";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "?B";
      stringArray0[4] = "Td_O7)X42n-8vf[";
      stringArray0[5] = "-trimText";
      stringArray0[6] = "Td_O7)X42n-8vf[";
      stringArray0[7] = "N1T:27Qu~$zUf";
      outputFormat0.parseOptions(stringArray0, 12);
      OutputFormat outputFormat4 = OutputFormat.createPrettyPrint();
      outputFormat4.setXHTML(true);
      assertTrue(outputFormat4.isXHTML());
      
      outputFormat3.setTrimText(true);
      assertFalse(outputFormat3.isXHTML());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7403440760878386
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-xhtml-xhtml@scu)NBBdf5";
      stringArray0[1] = "-indent";
      stringArray0[2] = "IN3b";
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat0.getIndent());
      assertTrue(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent("-expandEmpty");
      boolean boolean0 = outputFormat1.isOmitEncoding();
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertEquals("-expandEmpty", outputFormat1.getIndent());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isXHTML());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(boolean0);
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2597682094192684
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setXHTML(false);
      OutputFormat outputFormat1 = new OutputFormat("");
      outputFormat1.setOmitEncoding(true);
      assertTrue(outputFormat1.isOmitEncoding());
      
      outputFormat0.setEncoding((String) null);
      outputFormat0.isXHTML();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat2.isNewlines();
      outputFormat2.getLineSeparator();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.070678437337223
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(1186);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T4TY5";
      stringArray0[1] = "";
      stringArray0[2] = "jd";
      boolean boolean0 = true;
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.parseOptions(stringArray0, 39);
      outputFormat0.setIndent("JPr >kM");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat0.setIndentSize(39);
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.isXHTML();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setIndent("-xhtml");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('6');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (6)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.36443386453374
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setPadText(false);
      outputFormat0.setPadText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.getIndent();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setXHTML(false);
      outputFormat0.isExpandEmptyElements();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat0.getEncoding();
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat2.setIndentSize(34);
      outputFormat3.setPadText(false);
      outputFormat0.setIndent(false);
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat3.getNewLineAfterNTags();
      outputFormat2.isOmitEncoding();
      outputFormat2.getIndent();
      outputFormat2.getIndent();
      outputFormat1.getIndent();
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0413203841951786
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "RpaH=Y[";
      stringArray0[1] = "RpaH=Y[";
      stringArray0[2] = "-padText";
      outputFormat0.setIndentSize(4001);
      stringArray0[3] = "RpaH=Y[";
      stringArray0[4] = "-trimText";
      stringArray0[6] = "oR~21f";
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertEquals(0, int0);
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isXHTML());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.965136021871922
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "ruKMi`FXeEr@~&d";
      outputFormat0.parseOptions(stringArray0, 34);
      stringArray0[2] = "#";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "y^:*-pRDa{J$~9h";
      outputFormat0.getIndent();
      outputFormat0.setIndent("");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndentSize(34);
      outputFormat0.setPadText(false);
      outputFormat0.isPadText();
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("-xhtml78:loteeo-oI!k");
      outputFormat1.isPadText();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('x');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (x)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.516554290945506
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(true);
      assertEquals("  ", outputFormat0.getIndent());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isPadText());
      
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*r~Cp;k,{X\"7";
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertFalse(outputFormat2.isPadText());
      assertFalse(outputFormat2.isXHTML());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertFalse(outputFormat2.isNewlines());
      assertFalse(outputFormat2.isExpandEmptyElements());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.420152259120603
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.getEncoding();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndentSize(644);
      outputFormat1.setEncoding("");
      outputFormat1.getNewLineAfterNTags();
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat2.setXHTML(false);
      outputFormat0.setTrimText(false);
      outputFormat1.setPadText(false);
      outputFormat2.setTrimText(false);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(true);
      outputFormat2.setOmitEncoding(true);
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat1.getEncoding();
      outputFormat2.setIndent("$Oqh^yjs-A83");
      outputFormat1.setXHTML(false);
      outputFormat0.isExpandEmptyElements();
      outputFormat1.getIndent();
      outputFormat1.isTrimText();
      outputFormat2.setOmitEncoding(false);
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat3.setLineSeparator("  ");
      // Undeclared exception!
      try { 
        outputFormat2.setAttributeQuoteCharacter('h');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (h)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.265927000561859
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RpaH=Y[";
      stringArray0[1] = "";
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isPadText());
      
      OutputFormat outputFormat2 = new OutputFormat("oR~21f", false, "=&SazIg!%,E$XIV");
      assertEquals("=&SazIg!%,E$XIV", outputFormat2.getEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertFalse(outputFormat2.isTrimText());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertEquals("oR~21f", outputFormat2.getIndent());
      assertFalse(outputFormat2.isNewlines());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertFalse(outputFormat2.isExpandEmptyElements());
      
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      int int1 = outputFormat0.getNewLineAfterNTags();
      assertTrue(int1 == int0);
      
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat3.isNewLineAfterDeclaration());
      assertFalse(outputFormat3.isSuppressDeclaration());
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat3.getEncoding());
      assertEquals("\n", outputFormat3.getLineSeparator());
      assertFalse(outputFormat3.isOmitEncoding());
      assertFalse(outputFormat3.isExpandEmptyElements());
      assertTrue(outputFormat3.isTrimText());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.882201011863413
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "ruKMi`FXeEr@~&d";
      outputFormat0.setIndent("\n");
      stringArray0[2] = "#";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "y^:*-pRDa{J$~9h";
      outputFormat0.getIndent();
      outputFormat0.setIndent("");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndentSize(34);
      outputFormat0.setPadText(true);
      outputFormat0.isPadText();
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("-xhtml78:loteeo-oI!k");
      outputFormat1.isPadText();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('x');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (x)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0137769906887404
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("78:loteeo-oI!k", true, "78:loteeo-oI!k");
      outputFormat0.setTrimText(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndentSize(0);
      outputFormat1.setPadText(true);
      outputFormat1.isPadText();
      outputFormat0.getIndent();
      outputFormat0.setTrimText(false);
      outputFormat1.setIndent("Td_O7)X42n-8vf[");
      OutputFormat.createPrettyPrint();
      outputFormat1.setSuppressDeclaration(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setXHTML(true);
      outputFormat1.setXHTML(false);
      outputFormat0.setTrimText(false);
      assertEquals("", outputFormat0.getIndent());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4470616671435974
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("78:loteeo-oI!k", true, "78:loteeo-oI!k");
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "78:loteeo-oI!k";
      outputFormat0.setIndent("ZR_y~(R*\";7pyP_");
      stringArray0[1] = "78:loteeo-oI!k";
      stringArray0[2] = "78:loteeo-oI!k";
      stringArray0[3] = "78:loteeo-oI!k";
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndentSize(0);
      outputFormat1.setPadText(true);
      outputFormat1.isPadText();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setTrimText(false);
      outputFormat1.setIndent("Td_O7)X42n-8vf[");
      outputFormat1.setSuppressDeclaration(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setXHTML(true);
      outputFormat0.parseOptions(stringArray0, 1002);
      outputFormat1.setXHTML(false);
      outputFormat0.setTrimText(false);
      assertTrue(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true, "7Oxb^ \"Mi>[S.]u0l");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimText";
      outputFormat0.setNewLineAfterDeclaration(true);
      stringArray0[1] = "-trimText";
      stringArray0[2] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray0[5] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray0[6] = "-trimText";
      stringArray0[7] = "-trimText";
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertEquals("7Oxb^ \"Mi>[S.]u0l", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-trimText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("P:PAOi8`wMyz.78AQA", false);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("P:PAOi8`wMyz.78AQA", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2261289670319746
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setXHTML(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setXHTML(false);
      outputFormat0.setPadText(false);
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("-trimText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.404019827059865
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat1.setPadText(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setEncoding("yt2E+s:cqLLO?x");
      outputFormat0.getIndent();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent("yt2E+s:cqLLO?x");
      outputFormat1.setPadText(false);
      outputFormat1.setNewLineAfterNTags((-666));
      outputFormat0.isXHTML();
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setSuppressDeclaration(false);
      String[] stringArray0 = new String[0];
      outputFormat1.parseOptions(stringArray0, 449);
      outputFormat1.setExpandEmptyElements(false);
      outputFormat0.getLineSeparator();
      outputFormat0.setIndentSize(449);
      assertEquals("yt2E+s:cqLLO?x", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2615061340720266
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", false, "-trimText");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-xhtml5*hgbeJ+x7o%";
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4054521498099244
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat1.setIndent("tWch'-0(X61vbtMENB");
      outputFormat2.setLineSeparator("tWch'-0(X61vbtMENB");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setXHTML(true);
      outputFormat0.getLineSeparator();
      outputFormat1.setTrimText(true);
      outputFormat2.setExpandEmptyElements(true);
      outputFormat2.setOmitEncoding(true);
      outputFormat1.setTrimText(false);
      outputFormat0.setPadText(false);
      outputFormat0.getLineSeparator();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat1.isTrimText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n";
      stringArray0[1] = "tWch'-0(X61vbtMENB";
      outputFormat2.parseOptions(stringArray0, 1925);
      outputFormat1.getLineSeparator();
      boolean boolean0 = outputFormat1.isSuppressDeclaration();
      assertEquals("tWch'-0(X61vbtMENB", outputFormat1.getIndent());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("RgsADi3nK|:O", false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('X');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (X)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7436535079686992
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RpaH=Y[";
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewlines());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      boolean boolean0 = outputFormat2.isExpandEmptyElements();
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertFalse(outputFormat2.isPadText());
      assertFalse(outputFormat2.isXHTML());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isOmitEncoding());
      assertFalse(boolean0);
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertFalse(outputFormat2.isNewlines());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.isNewlines();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmpty";
      stringArray0[1] = "!#BJb7P4]q<!2@j )";
      outputFormat0.setNewLineAfterNTags((-1529));
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1465723465));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1465723465
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5015166969605436
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = new OutputFormat("WBhWV!!cv8s 1n", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "WBhWV!!cv8s 1n";
      outputFormat0.parseOptions(stringArray0, 28);
      outputFormat0.parseOptions(stringArray0, 28);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1968526675));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1968526675
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("@scu)NBBdf5", false, "5*hgbeJ+x7o%");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setIndent("WBhWV!!cv8s ");
      assertEquals("WBhWV!!cv8s ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1591119326368067
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "t4x9{Zm]D'<6U";
      outputFormat1.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "t4x9{Zm]D'<6U";
      stringArray1[1] = "t4x9{Zm]D'<6U";
      stringArray1[2] = "t4x9{Zm]D'<6U";
      stringArray1[3] = "t4x9{Zm]D'<6U";
      stringArray1[4] = "t4x9{Zm]D'<6U";
      stringArray1[5] = "t4x9{Zm]D'<6U";
      stringArray1[6] = "t4x9{Zm]D'<6U";
      outputFormat0.parseOptions(stringArray1, 0);
      int int0 = outputFormat1.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
      assertEquals("  ", outputFormat1.getIndent());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat2.isNewlines());
      assertTrue(outputFormat2.isTrimText());
      
      outputFormat0.setIndentSize(0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      
      outputFormat1.setIndent((String) null);
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isNewlines());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isXHTML());
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isPadText());
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "-trimText";
      stringArray0[5] = "-trimText";
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true, "uU^hy`");
      outputFormat0.setPadText(true);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (M)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7410370767808394
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RpaH=YK";
      stringArray0[1] = "";
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setExpandEmptyElements(false);
      assertEquals("  ", outputFormat1.getIndent());
      
      outputFormat1.setIndent("");
      assertFalse(outputFormat1.isExpandEmptyElements());
      
      String[] stringArray1 = new String[6];
      stringArray1[0] = "L#Sr*nj";
      stringArray1[1] = "";
      stringArray1[3] = "L#Sr*nj";
      stringArray1[0] = "L#Sr*nj";
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertTrue(outputFormat2.isTrimText());
      assertTrue(outputFormat2.isPadText());
      assertFalse(outputFormat2.isXHTML());
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertTrue(outputFormat2.isNewlines());
      assertEquals("\n", outputFormat2.getLineSeparator());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6467142775717116
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8434765805931557
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true, "7Oxb^ \"Mi>[S.]u0l");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "7Oxb^ \"Mi>[S.]u0l";
      stringArray0[3] = "-trimText";
      outputFormat0.setIndent(")");
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndentSize((-3871));
      outputFormat0.parseOptions(stringArray0, 1938);
      assertEquals(")", outputFormat0.getIndent());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("43+[t:9^kbvtaF-E");
      outputFormat0.setPadText(false);
      boolean boolean0 = outputFormat0.isTrimText();
      assertEquals("43+[t:9^kbvtaF-E", outputFormat0.getLineSeparator());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.112646050581686
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "bk7Ujo%Cmy<;";
      stringArray0[1] = "-expandEmptyRpaH=Y[";
      stringArray0[2] = "5*hgbeJ+n7o%";
      stringArray0[3] = "@scu)NBBdf5";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 2);
      assertTrue(outputFormat0.isExpandEmptyElements());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.788336980067754
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[1];
      outputFormat0.setEncoding("4oEwXG%p-V=DwX");
      outputFormat0.setEncoding("@");
      outputFormat0.setPadText(true);
      outputFormat0.setNewlines(true);
      stringArray0[0] = "@";
      outputFormat0.setEncoding((String) null);
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.setIndent("@");
      outputFormat0.getEncoding();
      outputFormat0.setIndent("");
      assertEquals("@", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("");
      outputFormat0.setIndent("-expandEmpty!q&r9Qh}%.5");
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("-expandEmpty!q&r9Qh}%.5", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
  }
}
