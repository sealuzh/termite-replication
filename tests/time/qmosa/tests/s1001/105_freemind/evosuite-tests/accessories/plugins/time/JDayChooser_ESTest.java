/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:15:03 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.main.Resources;
import freemind.modes.Mode;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.filemode.FileController;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.image.ImageObserver;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URL;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPasswordField;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.LabelView;
import org.apache.batik.css.parser.Parser;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2402929788741806
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Graphics graphics0 = null;
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Locale locale0 = Locale.TAIWAN;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isDecorationBordersVisible();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-8));
      focusEvent0.paramString();
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMonth((-8));
      SystemColor systemColor0 = SystemColor.textHighlightText;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-8);
      floatArray0[1] = (float) (-8);
      // Undeclared exception!
      try { 
        systemColor0.getComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.271014817456565
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(486);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, 61445, 0L, (-535), (-535), 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent0.setKeyCode(61445);
      jDayChooser0.keyTyped(menuKeyEvent0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, 486, true, jDayChooser0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4671287524201273
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(486);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(38);
      jDayChooser0.getSundayForeground();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setSundayForeground(color0);
      Date date1 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMaxSelectableDate(date1);
      Color.getColor("Windows");
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.447422995297363
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getAutoscrolls();
      jDayChooser_DecoratorButton0.removeNotify();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(2503);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(10);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getDayPanel();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1509776724370013
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.getDefaultLocale();
      int int0 = ImageObserver.FRAMEBITS;
      jDayChooser0.setMaxDayCharacters((-1599));
      jDayChooser0.setFocus();
      Parser parser0 = new Parser();
      parser0.getLocale();
      Properties properties0 = FreeMindApplet.defaultProps;
      HsqlProperties hsqlProperties0 = new HsqlProperties((Properties) null);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3502041493447887
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(486);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 486, 0L, 61445, (-3000), 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent0.setKeyCode((-1390));
      jDayChooser0.keyTyped(menuKeyEvent0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDecorationBordersVisible(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(28, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3642393903664254
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(486);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 486, 0L, 61445, (-3000), 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent0.setKeyCode((-1390));
      jDayChooser0.keyTyped(menuKeyEvent0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      focusEvent0.setSource(integer0);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3642393903664263
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(486);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 486, 0L, 61445, (-3000), 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent0.setKeyCode((-1390));
      jDayChooser0.keyTyped(menuKeyEvent0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      focusEvent0.setSource(integer0);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2083377530546424
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMouseMotionListeners();
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      jDayChooser0.setYear(151);
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JMenu jMenu0 = new JMenu();
      menuElementArray0[0] = (MenuElement) jMenu0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-1);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "#document");
      JMenuItem jMenuItem0 = new JMenuItem("day", imageIcon0);
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem0;
      JMenuItem jMenuItem1 = jMenu0.add("day");
      menuElementArray0[3] = (MenuElement) jMenuItem1;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 14, 151, 151, 151, 'C', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1700989912782065
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-911));
      jDayChooser0.getMaxDayCharacters();
      long long0 = (-589L);
      int int0 = (-2321);
      char char0 = '[';
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      jDayChooser0.setMonth(0);
      jDayChooser0.drawDays();
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      FileController fileController0 = null;
      try {
        fileController0 = new FileController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.05861803958271
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      jDayChooser0.init();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 418);
      BrowseMode browseMode0 = new BrowseMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.232006862512265
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 0;
      int int0 = 8501;
      jDayChooser0.setMonth(8501);
      jDayChooser0.setEnabled(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3568654595201144
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(486);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 486, 0L, 61445, (-3000), 'K', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.paramString();
      menuKeyEvent0.setKeyCode((-1390));
      jDayChooser0.keyTyped(menuKeyEvent0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setSundayForeground((Color) null);
      Date date1 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setAlwaysFireDayProperty(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxSelectableDate(date1);
      jDayChooser0.setForeground((Color) null);
      assertEquals(28, jDayChooser0.getDay());
      
      Locale locale0 = Locale.FRENCH;
      jDayChooser1.setLocale(locale0);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2032440985336783
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.removeNotify();
      jDayChooser0.setMaxDayCharacters((-1182));
      jDayChooser0.setFocus();
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      File file0 = MockFile.createTempFile("1D(_28#WWLJC1N;R$pE", "day");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(true);
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "day", (Object[]) null);
      jDayChooser0.list(printStream0);
      assertEquals(23399L, file0.length());
      
      jDayChooser0.drawDays();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getSelectedDay();
      Color color0 = jDayChooser0.sundayForeground;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1965.433F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 12356;
      floatArray0[3] = (float) (-1925);
      floatArray0[4] = (float) 12356;
      floatArray0[5] = (float) 12356;
      floatArray0[6] = (float) (-1925);
      floatArray0[7] = (float) 0;
      Color.RGBtoHSB(12356, (-1925), 0, floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2308216109542167
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.getDefaultLocale();
      int int0 = ImageObserver.FRAMEBITS;
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDay(16);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(16);
      jDayChooser0.getSundayForeground();
      String string0 = "4s3{CgD=-@;^%";
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      String string1 = "log4j.factory";
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "log4j.factory", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.128690880730071
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.removeNotify();
      jDayChooser_DecoratorButton0.isFocusable();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      AWTEventMulticaster.add((FocusListener) metalComboBoxEditor_UIResource0, (FocusListener) jDayChooser0);
      jDayChooser0.setDay(450);
      jDayChooser0.getMaxDayCharacters();
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      jDayChooser0.addFocusListener(metalComboBoxEditor_UIResource0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      int int0 = 4554;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-2454), "28", (-2454));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.302866536406494
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(486);
      MenuElement[] menuElementArray0 = null;
      MenuSelectionManager.defaultManager();
      String string0 = AbstractButton.ICON_CHANGED_PROPERTY;
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      String string1 = "";
      fopImage_ImageInfo0.mimeType = "";
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "icon";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-911));
      MenuElement[] menuElementArray0 = new MenuElement[4];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      jDayChooser0.getSelectedDay();
      FileController fileController0 = null;
      try {
        fileController0 = new FileController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.169968006150972
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.205589923024807
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setAlignmentY(644.4308F);
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      JButton[] jButtonArray0 = new JButton[9];
      JButton jButton0 = new JButton("day");
      jButtonArray0[0] = jButton0;
      jDayChooser0.getSelectedDay();
      jButtonArray0[1] = null;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jButtonArray0[2] = (JButton) jDayChooser_DecoratorButton0;
      jButtonArray0[3] = (JButton) jDayChooser_DecoratorButton0;
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 195, 195);
      actionMap0.get(mockGregorianCalendar0);
      JButton jButton1 = new JButton((Action) null);
      jButtonArray0[4] = jButton1;
      JButton jButton2 = new JButton();
      jButtonArray0[5] = jButton2;
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("!A]", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getContainerListeners();
      jDayChooser0.isWeekOfYearVisible();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      String string0 = "";
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "day", (-1084));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0540989150393463
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-1056));
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Object object0 = jDayChooser0.getTreeLock();
      defaultStyledDocument0.getProperty(object0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      AbstractDocument.LeafElement abstractDocument_LeafElement0 = (AbstractDocument.LeafElement)defaultStyledDocument0.getCharacterElement(3473);
      abstractDocument_LeafElement0.copyAttributes();
      LabelView labelView0 = new LabelView(abstractDocument_LeafElement0);
      defaultStyledDocument0.createPosition(3473);
      JPasswordField jPasswordField0 = null;
      try {
        jPasswordField0 = new JPasswordField("day", (-1056));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // columns less than zero.
         //
         verifyException("javax.swing.JTextField", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      jDayChooser0.setAlwaysFireDayProperty(true);
      Resources resources0 = Resources.getInstance();
      resources0.getResource("day");
      JEditorPane jEditorPane0 = null;
      try {
        jEditorPane0 = new JEditorPane((URL) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // invalid url
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }
}
