/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:39:14 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      TheClient theClient0 = new TheClient();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("vD_i|", (byte)0);
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      Proxy proxy1 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy1);
      theClient0.setSocket(mockSocket0);
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.26315475997563
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.getServer();
      System.setCurrentTimeMillis((-1L));
      theClient0.getClientBinaryHandler();
      theClient0.setTrusted(true);
      theClient0.getClientBinaryHandler();
      theClient0.getClientEventHandler();
      theClient0.setTimeout(1198);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientBinaryHandler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      theClient0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      System.setCurrentTimeMillis(0L);
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      theClient0.getTimeoutMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      theClient0.getTimeoutMsg();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(0L);
      theClient0.getSocketChannel();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      assertEquals(1198, theClient0.getTimeout());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      data0.setUsername("u8v[~W*Rk-}*t5H}?");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      data0.setPassword(byteArray0);
      data0.setUsername("client-thread-pool-info");
      theClient0.setClientData(data0);
      theClient0.getClientData();
      theClient0.getClientWriteHandler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getTimeoutMsg();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.260960815263037
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      TheClient theClient1 = new TheClient();
      theClient1.setTimeout((-2139));
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      theClient1.setMaxAuthTryMsg("i&5kB(RX>.:x.7be0p%");
      QuickServer quickServer0 = new QuickServer();
      quickServer0.setClientExtendedEventHandler("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient1.getClientCommandHandler();
      quickServer0.setMaxConnection(0L);
      defaultClientEventHandler0.setClientCommandHandler((ClientCommandHandler) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient1.setServer(quickServer0);
      theClient1.getServer();
      theClient0.getTrusted();
      theClient0.getTimeout();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient1.getMaxAuthTry();
      theClient1.getTimeoutMsg();
      theClient0.getClientObjectHandler();
      theClient1.getAuthenticator();
      theClient1.toString();
      theClient1.getClientObjectHandler();
      assertEquals((-2139), theClient1.getTimeout());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4859283519853634
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getSocket();
      theClient0.getServer();
      theClient0.toString();
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      TheClient theClient1 = new TheClient();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.setMaxAuthTry((-711));
      theClient0.getClientAuthenticationHandler();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient1.setTimeout((-711));
      theClient1.setMaxAuthTryMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.getClientData();
      theClient0.getClientCommandHandler();
      theClient0.getClientData();
      theClient1.getClientEvent();
      theClient0.setMaxConnectionMsg("} J($;{];sDF<+P!P");
      theClient0.getServer();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient1.setClientCommandHandler(commandHandler0);
      theClient1.getClientCommandHandler();
      assertEquals((-711), theClient1.getTimeout());
      
      theClient0.getServer();
      theClient0.getAuthenticator();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientObjectHandler();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getTimeoutMsg();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: null}", string0);
      
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getTimeoutMsg();
      theClient0.getClientEvent();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.435005016902289
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getSocket();
      theClient0.getServer();
      theClient0.toString();
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      TheClient theClient1 = new TheClient();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.setMaxAuthTry((-711));
      theClient1.setTimeout((-711));
      theClient0.setTrusted(true);
      theClient1.getClientEventHandler();
      theClient0.getClientEvent();
      theClient0.toString();
      theClient1.setMaxConnectionMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient1.getClientData();
      TheClient theClient2 = new TheClient();
      theClient2.getClientCommandHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getTrusted();
      theClient0.getClientBinaryHandler();
      theClient2.toString();
      theClient1.getClientObjectHandler();
      theClient1.getSocket();
      assertEquals((-711), theClient1.getTimeout());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.102117063514037
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getClientExtendedEventHandler();
      TheClient theClient2 = new TheClient();
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient2.getClientEventHandler();
      theClient1.getClientAuthenticationHandler();
      theClient2.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      TheClient theClient3 = new TheClient();
      theClient3.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.toString();
      theClient3.getAuthenticator();
      theClient3.getMaxAuthTryMsg();
      MockSocket mockSocket0 = new MockSocket();
      theClient3.setSocket(mockSocket0);
      theClient2.setMaxAuthTry((-1753));
      assertEquals((-1753), theClient2.getMaxAuthTry());
      
      theClient1.getClientObjectHandler();
      String string0 = theClient3.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.197846119469557
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getServer();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxAuthTryMsg("");
      TheClient theClient1 = new TheClient();
      theClient1.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient1.getClientAuthenticationHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Close Connection)}", string0);
      
      TheClient theClient2 = new TheClient();
      theClient2.setClientEvent(clientEvent0);
      theClient1.getClientAuthenticationHandler();
      theClient0.getMaxConnectionMsg();
      theClient2.setMaxAuthTryMsg("64:)y");
      TheClient theClient3 = new TheClient();
      theClient3.getMaxConnectionMsg();
      theClient1.getClientEventHandler();
      theClient0.getClientEventHandler();
      theClient2.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      theClient0.setTimeout(264);
      CommandHandler commandHandler0 = new CommandHandler();
      int int0 = theClient0.getTimeout();
      assertEquals(264, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setTimeout((-2139));
      theClient0.getClientObjectHandler();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.toString();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getTimeout();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      assertEquals((-2139), theClient0.getTimeout());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getServer();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxAuthTryMsg("");
      TheClient theClient1 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient1.getClientAuthenticationHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient1.toString();
      theClient1.setClientEvent(clientEvent0);
      theClient0.getClientAuthenticationHandler();
      theClient0.getMaxConnectionMsg();
      theClient1.setMaxAuthTryMsg((String) null);
      TheClient theClient2 = new TheClient();
      theClient2.getMaxConnectionMsg();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Close Connection)}", string0);
      
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getClientExtendedEventHandler();
      TheClient theClient2 = new TheClient();
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient2.getClientEventHandler();
      theClient2.getClientObjectHandler();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      ClientEvent clientEvent1 = ClientEvent.READ;
      theClient1.setClientEvent(clientEvent1);
      theClient1.setMaxConnectionMsg("@(:0|Y*1F-w=1m^}K<");
      theClient0.getClientData();
      TheClient theClient3 = new TheClient();
      theClient1.getClientCommandHandler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient1.getMaxConnectionMsg();
      boolean boolean0 = theClient2.getTrusted();
      assertFalse(boolean0);
      assertTrue(theClient2.getCommunicationLogging());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      TheClient theClient1 = new TheClient();
      theClient1.getClientEventHandler();
      theClient0.getClientEvent();
      String string0 = theClient1.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.getClientData();
      QuickServer quickServer0 = new QuickServer("U&0\"6tQFEtV*Qu");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TheClient theClient0 = new TheClient();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      theClient0.setMaxAuthTryMsg((String) null);
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      theClient0.setMaxAuthTryMsg((String) null);
      QuickServer quickServer0 = new QuickServer();
      quickServer0.setClientExtendedEventHandler("</default-data-mode>\n");
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getClientCommandHandler();
      quickServer0.setMaxConnection(830L);
      defaultClientEventHandler0.setClientCommandHandler((ClientCommandHandler) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getTrusted();
      theClient0.getTimeout();
      theClient0.getAuthenticator();
      theClient0.getClientAuthenticationHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(0);
      try { 
        commandHandler0.handleCommand(nonBlockingClientHandler0, (String) null);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TheClient theClient0 = new TheClient();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      QuickServer quickServer0 = new QuickServer("t?GkdK/UC4");
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getAuthenticator();
      theClient0.getClientData();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.750633851454319
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.toString();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getSocketChannel();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientBinaryHandler();
      theClient0.setCommunicationLogging(false);
      theClient0.getClientBinaryHandler();
      theClient0.toString();
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTry((-711));
      theClient0.setTimeout(883);
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.getClientData();
      theClient0.getClientCommandHandler();
      theClient0.setTimeoutMsg("EJ}Dr5+C'?:_S(.");
      theClient0.getClientData();
      theClient0.getClientEvent();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientData((ClientData) null);
      theClient0.setTrusted(true);
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      theClient0.getCommunicationLogging();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      assertEquals((-711), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeoutMsg("</backlog>\n");
      theClient0.getClientEventHandler();
      theClient0.getClientObjectHandler();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getTimeoutMsg();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      TheClient theClient1 = new TheClient();
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setTimeout(60000);
      theClient1.getClientData();
      theClient1.getCommunicationLogging();
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      theClient1.setClientAuthenticationHandler(clientAuthenticationHandler0);
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [93, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 125);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",@&|:Y*MJb$O+");
      CommandHandler commandHandler0 = new CommandHandler();
      TheClient theClient0 = new TheClient();
      theClient0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      int int0 = theClient0.getTimeout();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTryMsg("StackTrace {0}: {1}");
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.setClientAuthenticationHandler("StackTrace {0}: {1}");
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      // Undeclared exception!
      try { 
        quickServer0.getSSLSocketFactory("wb7j'_k/]o]Vg");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Secure setting is not yet enabled for loading!
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.670591143780782
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.toString();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getSocketChannel();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.toString();
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTry((-711));
      theClient0.setTimeout(883);
      theClient0.getClientData();
      theClient0.getClientCommandHandler();
      theClient0.setTimeoutMsg("EJ}Dr5+C'?:_S(.");
      theClient0.getClientData();
      theClient0.getClientEvent();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientData((ClientData) null);
      theClient0.setTrusted(true);
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      theClient0.getCommunicationLogging();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      assertEquals((-711), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.toString();
      theClient0.setCommunicationLogging(true);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEventHandler();
      TheClient theClient1 = new TheClient();
      TheClient theClient2 = new TheClient();
      String string0 = theClient2.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1945366875886965
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getServer();
      theClient0.setServer((QuickServer) null);
      theClient0.getClientObjectHandler();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.setMaxAuthTry(313);
      theClient1.toString();
      theClient1.toString();
      theClient1.getMaxAuthTry();
      assertEquals(313, theClient1.getMaxAuthTry());
      
      theClient0.getMaxAuthTry();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientObjectHandler();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setMaxConnectionMsg(">'9gPZM14");
      theClient0.getClientData();
      QuickServer quickServer0 = new QuickServer("");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeoutMsg("</backlog>\n");
      theClient0.getClientEventHandler();
      theClient0.getClientBinaryHandler();
      TheClient theClient1 = new TheClient();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient1.setClientEvent(clientEvent0);
      theClient0.getClientAuthenticationHandler();
      CommandHandler commandHandler1 = new CommandHandler();
      CommandHandler commandHandler2 = new CommandHandler();
      theClient1.setClientCommandHandler(commandHandler1);
      assertTrue(theClient1.getCommunicationLogging());
      assertFalse(theClient1.getTrusted());
  }
}
