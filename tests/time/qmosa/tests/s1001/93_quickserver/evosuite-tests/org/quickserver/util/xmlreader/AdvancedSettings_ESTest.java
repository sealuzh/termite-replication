/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:52:41 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.438808048849822
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.toXML("");
      advancedSettings0.getByteBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(65536, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7916604055116188
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketReceiveBufferSize((-880));
      advancedSettings0.setClientSocketReceiveBufferSize((-880));
      advancedSettings0.setClientSocketTrafficClass("\t<debug-non-blocking-mode>");
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setPerformancePreferencesLatency((-2901));
      advancedSettings0.setPerformancePreferencesBandwidth((-2901));
      advancedSettings0.setSocketLinger(981);
      advancedSettings0.setClientSocketReceiveBufferSize((-880));
      advancedSettings0.getBacklog();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog((-880));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setCharset("");
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setPerformancePreferencesBandwidth((-2901));
      advancedSettings0.setPerformancePreferencesConnectionTime((-2901));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.toXML("PE");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier("</use-direct-byte-buffer>\n");
      assertEquals((-2901), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.8074681950781804
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setSocketLinger(1698);
      advancedSettings0.setClientSocketReceiveBufferSize(1698);
      advancedSettings0.setPerformancePreferencesConnectionTime((-14));
      advancedSettings0.setClientIdentifier("]EhW[Z");
      advancedSettings0.setClientSocketReceiveBufferSize(1698);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(2223);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth((-947));
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog((-14));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesBandwidth(1698);
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals("]EhW[Z", advancedSettings0.getClientIdentifier());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.704062225864339
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-3384));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-3384));
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getBacklog();
      advancedSettings1.getByteBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getPerformancePreferencesBandwidth();
      advancedSettings1.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-906));
      advancedSettings0.setSocketLinger((-3262));
      advancedSettings2.setPerformancePreferencesLatency((-906));
      advancedSettings2.setUseDirectByteBuffer(false);
      advancedSettings2.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings1.toXML("ISO-8859-1");
      assertEquals((-1), advancedSettings1.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.007081920694827
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1399);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setBacklog(65536);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("lN[G]4`Pqx.&-");
      advancedSettings0.setPerformancePreferencesConnectionTime((-289));
      advancedSettings0.setBacklog(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getDebugNonBlockingMode();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("lN[G]4`Pqx.&-");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // lN[G]4`Pqx.&-
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.326793811203479
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-14));
      advancedSettings0.toXML("YvM2U25~");
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-14), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3348524791581227
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setSocketLinger(1698);
      advancedSettings0.setClientSocketReceiveBufferSize(1698);
      advancedSettings0.setPerformancePreferencesConnectionTime((-14));
      advancedSettings0.setClientIdentifier("]EhW[Z");
      advancedSettings0.setClientSocketReceiveBufferSize(1698);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(2223);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth((-947));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.setCharset("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientIdentifier();
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.596137513593678
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("2ma");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>false</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>1</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker></qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.getClientIdentifier();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>false</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>1</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker></qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         // \t<charset>ISO-8859-1</charset>
         // \t<use-direct-byte-buffer>false</use-direct-byte-buffer>
         // \t<byte-buffer-size>65536</byte-buffer-size>
         // \t<backlog>0</backlog>
         // \t<socket-linger>1</socket-linger>
         // \t<debug-non-blocking-mode>true</debug-non-blocking-mode>
         // \t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>
         // \t<qsobject-pool-maker></qsobject-pool-maker>
         // \t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<performance-preferences-connection-time>0</performance-preferences-connection-time>
         // \t<performance-preferences-latency>0</performance-preferences-latency>
         // \t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>
         // \t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>
         // </advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.847642989259894
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-486));
      advancedSettings0.setQSObjectPoolMaker("4;pT");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier("+");
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals("+", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.663299006407013
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(6);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("+XC TIs1cr;2ZboMy9H");
      advancedSettings0.setClientSocketReceiveBufferSize(6);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getClientIdentifier();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setSocketLinger(4408);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setSocketLinger(0);
      advancedSettings1.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.setQSObjectPoolMaker("%$#e");
      advancedSettings1.setClientSocketTrafficClass("E9I|p] y");
      advancedSettings0.toXML("?cG{RTK{|AL=Q\"WxY=");
      advancedSettings1.getClientSocketTrafficClass();
      advancedSettings2.setSocketLinger((-2958));
      assertEquals((-2958), advancedSettings2.getSocketLinger());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6644338115696575
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-3384));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-3384));
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-3384));
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketSendBufferSize(2206);
      advancedSettings0.setPerformancePreferencesBandwidth((-3384));
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency((-3384));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>-3384</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>65536</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-receive-buffer-size>-3384</client-socket-receive-buffer-size>\n\t<client-socket-send-buffer-size>-3384</client-socket-send-buffer-size>\n</advanced-settings>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         // \t<charset>ISO-8859-1</charset>
         // \t<use-direct-byte-buffer>true</use-direct-byte-buffer>
         // \t<byte-buffer-size>65536</byte-buffer-size>
         // \t<backlog>0</backlog>
         // \t<socket-linger>-1</socket-linger>
         // \t<debug-non-blocking-mode>false</debug-non-blocking-mode>
         // \t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>
         // \t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>
         // \t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<performance-preferences-connection-time>-3384</performance-preferences-connection-time>
         // \t<performance-preferences-latency>0</performance-preferences-latency>
         // \t<performance-preferences-bandwidth>65536</performance-preferences-bandwidth>
         // \t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>
         // \t<client-socket-receive-buffer-size>-3384</client-socket-receive-buffer-size>
         // \t<client-socket-send-buffer-size>-3384</client-socket-send-buffer-size>
         // </advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.6949824346617635
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setQSObjectPoolMaker("iP'_Jq$");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientIdentifier("N}sJ");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      boolean boolean0 = false;
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.toXML("|(q#&Z*2*c]6Ej9f}d");
      advancedSettings0.getClientSocketSendBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("D&`Ft.N&y/G");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // D&`Ft.N&y/G
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.156606376293304
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(4111);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker("Z{qU(jAjY+J#VnjMAD7");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesBandwidth((-1070));
      advancedSettings0.setClientSocketSendBufferSize((-1070));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1070));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize(4111);
      advancedSettings0.setMaxThreadsForNioWrite((-1754));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime(4);
      advancedSettings0.setClientIdentifier("K{vum[");
      advancedSettings0.setDebugNonBlockingMode(true);
      assertEquals((-1754), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5729899170928663
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(823);
      advancedSettings0.setClientSocketReceiveBufferSize(823);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("\t<performance-preferences-latency>");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setBacklog(10);
      advancedSettings0.setByteBufferSize(10);
      String string0 = "org.quickserver.util.xmlreader.AdvancedSettings";
      advancedSettings0.setClientIdentifier("org.quickserver.util.xmlreader.AdvancedSettings");
      advancedSettings0.setClientSocketSendBufferSize((-1014));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Sml<ASPJ~f2!!^=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Sml<ASPJ~f2!!^=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.704062225864339
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-3384));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-3384));
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getBacklog();
      advancedSettings1.getByteBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getPerformancePreferencesBandwidth();
      advancedSettings1.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-906));
      advancedSettings0.setSocketLinger((-3262));
      advancedSettings2.setPerformancePreferencesLatency((-906));
      advancedSettings2.setUseDirectByteBuffer(false);
      advancedSettings2.getPerformancePreferencesBandwidth();
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings1.toXML("ISO-8859-1");
      assertEquals((-1), advancedSettings1.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-2057));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(927);
      advancedSettings0.setBacklog(927);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency(65536);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(65536, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(927, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.702928653221226
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1021));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(66);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesBandwidth(66);
      advancedSettings0.setClientSocketTrafficClass("BS]!Vulgf<h`;s`U");
      advancedSettings0.setPerformancePreferencesConnectionTime(58);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger(676);
      advancedSettings0.toXML("FI*5-5d");
      advancedSettings0.setByteBufferSize((-228));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientIdentifier("BS]!Vulgf<h`;s`U");
      assertEquals(66, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setBacklog(1);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      assertEquals(1, advancedSettings0.getBacklog());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("");
      assertEquals(0, advancedSettings1.getBacklog());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.124771615329544
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesConnectionTime((-980));
      advancedSettings0.setPerformancePreferencesBandwidth((-578));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency((-980));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketSendBufferSize();
      int int0 = advancedSettings0.getByteBufferSize();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings2.setCharset("org.quickserver.net.server.impl.OptimisticClientIdentifier");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.net.server.impl.OptimisticClientIdentifier
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.6644338115696575
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-3394));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-3394));
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-3394));
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketSendBufferSize(2206);
      advancedSettings0.setPerformancePreferencesBandwidth((-3394));
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency((-3394));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>-3394</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>65536</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>true</client-socket-tcp-no-delay>\n\t<client-socket-receive-buffer-size>-3394</client-socket-receive-buffer-size>\n\t<client-socket-send-buffer-size>-3394</client-socket-send-buffer-size>\n</advanced-settings>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         // \t<charset>ISO-8859-1</charset>
         // \t<use-direct-byte-buffer>true</use-direct-byte-buffer>
         // \t<byte-buffer-size>65536</byte-buffer-size>
         // \t<backlog>0</backlog>
         // \t<socket-linger>-1</socket-linger>
         // \t<debug-non-blocking-mode>false</debug-non-blocking-mode>
         // \t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>
         // \t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>
         // \t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<performance-preferences-connection-time>-3394</performance-preferences-connection-time>
         // \t<performance-preferences-latency>0</performance-preferences-latency>
         // \t<performance-preferences-bandwidth>65536</performance-preferences-bandwidth>
         // \t<client-socket-tcp-no-delay>true</client-socket-tcp-no-delay>
         // \t<client-socket-receive-buffer-size>-3394</client-socket-receive-buffer-size>
         // \t<client-socket-send-buffer-size>-3394</client-socket-send-buffer-size>
         // </advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals(65536, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-3235));
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      
      advancedSettings0.setPerformancePreferencesLatency(1);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(1, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2183004874823533
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8946741381361325
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("40SmXM5b+");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency(2279);
      advancedSettings0.getCharset();
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      assertEquals(2279, advancedSettings0.getPerformancePreferencesLatency());
  }
}
