/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:07:41 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.188118820046292
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.backquote = (int) '2';
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("(\"ytJI)\"");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1384844707380135
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\"<");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      stringReader0.mark(2);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.clonePF();
      jSPredicateForm2.remove((Object) null);
      streamTokenizer0.ordinaryChars(2, (-366172151));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm3.sort(comparator1);
      Object object0 = new Object();
      jSPredicateForm2.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm3.sort((Comparator) null);
      JSSubstitution jSSubstitution2 = jSPredicateForm4.matches(jSPredicateForm2, jSSubstitution1);
      assertFalse(jSSubstitution2.fail());
      
      jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm2.clonePF();
      StringBuffer stringBuffer0 = jSPredicateForm2.toStr();
      assertFalse(jSPredicateForm1.equals((Object)jSPredicateForm5));
      assertEquals(9, stringBuffer0.length());
      
      JSPredicateForm jSPredicateForm6 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm6.clonePF();
      jSPredicateForm7.applySubstitutionPF(jSSubstitution0);
      assertFalse(jSPredicateForm6.equals((Object)jSPredicateForm4));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0855478351259564
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\"<");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.clonePF();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSPredicateForm2.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm3.sort((Comparator) null);
      jSPredicateForm4.matches(jSPredicateForm2, jSSubstitution1);
      jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm2.clonePF();
      jSPredicateForm5.equals(jSPredicateForm4);
      jSPredicateForm5.remove((Object) jSSubstitution1);
      JSPredicateForm jSPredicateForm6 = new JSPredicateForm();
      jSPredicateForm5.clonePF();
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        jSPredicateForm6.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.028086915443419
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i^)UvMViF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      stringReader0.mark(3532);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      Integer integer0 = new Integer(3532);
      jSTerm1.add((Object) null);
      jSTerm0.clonePF();
      jSTerm0.matches(jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3817375327500185
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%Qn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("%Qn");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.equals(jSPredicateForm0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.firstElement();
      jSTerm2.add((Object) "%Qn");
      StringReader stringReader2 = new StringReader("%Qn");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      jSPredicateForm0.equals(" ");
      jSTerm2.clonePF();
      jSTerm2.clonePF();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer2);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm3);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.431182803802068
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Qn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      stringReader0.mark(2);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      jSPredicateForm2.clonePF();
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '2';
      charArray0[2] = '}';
      charArray0[3] = ',';
      stringReader0.read(charArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      Object object0 = new Object();
      jSPredicateForm2.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.clonePF();
      JSJshopVars.greaterT = (-2);
      jSTerm0.matches(jSPredicateForm2);
      jSPredicateForm3.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm2.print();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.224893787652144
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\"<");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      stringReader0.mark(2);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.clonePF();
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '2';
      charArray0[2] = '}';
      charArray0[3] = ',';
      stringReader0.read(charArray0);
      jSPredicateForm2.remove((Object) null);
      streamTokenizer0.ordinaryChars(2, (-366172151));
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      Object object0 = new Object();
      jSPredicateForm2.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm2);
      jSPredicateForm3.sort((Comparator) null);
      JSSubstitution jSSubstitution2 = jSPredicateForm4.matches(jSPredicateForm2, jSSubstitution1);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm2.clonePF();
      boolean boolean0 = jSPredicateForm6.equals(jSPredicateForm4);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm4.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm7.applySubstitutionPF(jSSubstitution2);
      assertFalse(jSPredicateForm8.equals((Object)jSPredicateForm5));
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSSubstitution2.fail());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.113825570469535
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Qn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      stringReader0.mark(2);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      jSPredicateForm2.clonePF();
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '2';
      charArray0[2] = '}';
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSPredicateForm2);
      jSPredicateForm1.add((Object) stringReader0);
      JSPredicateForm jSPredicateForm3 = jSTerm1.clonePF();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm2);
      jSPredicateForm3.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      jSPredicateForm0.clonePF();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-316615619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.805851825045234
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%Qn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars((-4), 193);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.firstElement();
      jSTerm2.add((Object) "%Qn");
      StringReader stringReader1 = new StringReader("ij0^<)X{x4|xFg=");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm1.add((Object) stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.clonePF();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.525508403280262
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Qn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("7Qn");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.clonePF();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.firstElement();
      jSTerm1.add((Object) jSTerm2);
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'm';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader("~|AJ,*!ny*62Ls`X");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      StringReader stringReader1 = new StringReader("XS");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8079222184199755
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%Qn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("%Qn");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.equals((JSPredicateForm) null);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.firstElement();
      jSTerm2.add((Object) "%Qn");
      StringReader stringReader2 = new StringReader("%Qn");
      jSPredicateForm0.iterator();
      stringReader2.mark(2046);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      Integer integer0 = new Integer(2046);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm0.clonePF();
      streamTokenizer1.ordinaryChars((-247926847), (-3));
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm2 = jSTerm1.standarizerPredicateForm();
      assertEquals(10, jSPredicateForm2.capacity());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      streamTokenizer0.slashSlashComments(true);
      StringReader stringReader1 = new StringReader("XS");
      jSTerm0.add((Object) streamTokenizer0);
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "i^)UvMViF";
      StringReader stringReader0 = new StringReader("i^)UvMViF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) 41;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.mark(41);
      jSTerm0.add((Object) "i^)UvMViF");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i^)UvMViF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      stringReader0.mark(3532);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSSubstitution1);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8008883431493221
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i^)UvMViF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      stringReader0.mark(3532);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.clonePF();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution2);
      jSPredicateForm0.addAll(1, (Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0277013333517635
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Qn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm2.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm2.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0290018112854749
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Qn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("7Qn");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.clonePF();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.firstElement();
      jSTerm2.add((Object) "7.0");
      StringReader stringReader2 = new StringReader("ij0^<*)X{x4|xOg=");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      jSTerm1.add((Object) stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) stringReader0);
      StringReader stringReader1 = new StringReader("XS");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator0);
      jSPredicateForm0.ensureCapacity(1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.isEmpty();
      jSSubstitution0.assignFailure();
      String string0 = "not";
      jSTerm0.isEmpty();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ij0^<*)X{x4|xOg=");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XS");
      StringReader stringReader1 = new StringReader("AW@inXbfnv'A");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.216607938444404
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "7Qn";
      StringReader stringReader0 = new StringReader("7Qn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSPredicateForm2);
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      Predicate<Integer> predicate3 = predicate2.and(predicate0);
      Object object0 = jSPredicateForm1.clone();
      Predicate<Integer> predicate4 = Predicate.isEqual(object0);
      predicate3.and(predicate4);
      Predicate<Integer> predicate5 = predicate3.negate();
      jSPredicateForm2.removeIf(predicate5);
      jSPredicateForm0.iterator();
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm0.matches(jSPredicateForm2);
      Integer integer0 = new Integer((-148559416));
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSPredicateForm2.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.220742069276705
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Qn");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSPredicateForm3);
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      Predicate<Integer> predicate3 = predicate2.and(predicate0);
      Predicate<Integer> predicate4 = predicate3.negate();
      jSPredicateForm3.removeIf(predicate4);
      jSPredicateForm0.iterator();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSPredicateForm3;
      objectArray0[2] = (Object) jSSubstitution0;
      jSPredicateForm3.toArray(objectArray0);
      jSTerm0.stream();
      jSPredicateForm1.print();
      Object object0 = new Object();
      Integer integer0 = new Integer((-2));
      jSPredicateForm3.removeElement(integer0);
      jSPredicateForm1.ensureCapacity((-366172151));
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSPredicateForm0);
      StringBuffer stringBuffer0 = jSPredicateForm2.toStr();
      assertEquals("(7.0)", stringBuffer0.toString());
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
      
      JSPredicateForm jSPredicateForm5 = jSPredicateForm0.clonePF();
      assertTrue(jSPredicateForm5.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(true);
      stringReader0.reset();
      streamTokenizer0.slashSlashComments(false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = 'z';
      stringReader0.read(charArray0, 0, 1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.407822800452438
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Integer> predicate1 = predicate0.and(predicate0);
      predicate1.negate();
      Predicate<Integer> predicate2 = predicate0.and(predicate1);
      Predicate<Integer> predicate3 = predicate2.negate();
      Predicate<Integer> predicate4 = predicate3.negate();
      jSPredicateForm0.removeIf(predicate4);
      Object[] objectArray0 = new Object[2];
      Iterator iterator0 = jSPredicateForm0.iterator();
      objectArray0[1] = (Object) jSPredicateForm0;
      jSPredicateForm0.remove((Object) iterator0);
      StringReader stringReader0 = new StringReader("1f'RCR.FM##{N7");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-366172151), (-366172151));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator0);
      Object object0 = new Object();
      jSPredicateForm0.add((Object) "J@\"o");
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      jSPredicateForm0.sort((Comparator) null);
      jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals(jSPredicateForm2);
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = null;
      try {
        jSPredicateForm3 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.226761361065526
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7\"<");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.clonePF();
      streamTokenizer0.ordinaryChars((-366172151), (-320713728));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm3.sort(comparator0);
      Integer integer0 = new Integer((-2));
      jSPredicateForm0.add((Object) integer0);
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
      
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm3.sort((Comparator) null);
      JSSubstitution jSSubstitution2 = jSPredicateForm4.matches(jSPredicateForm0, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
      
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.clonePF();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm1.clonePF();
      boolean boolean0 = jSPredicateForm1.equals(jSPredicateForm0);
      jSPredicateForm5.remove((Object) "7\"<");
      JSPredicateForm jSPredicateForm7 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm6.clonePF();
      System.setCurrentTimeMillis(1945L);
      jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm3.iterator();
      boolean boolean1 = jSTerm0.equals(jSPredicateForm5);
      assertFalse(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution3 = jSPredicateForm3.matches(jSPredicateForm8);
      assertFalse(jSSubstitution3.fail());
      assertNotSame(jSPredicateForm2, jSPredicateForm1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6105981585090818
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%Qn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("%Qn");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.firstElement();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = '\u001A';
      charArray0[1] = 'i';
      stringReader1.read(charArray0);
      streamTokenizer1.eolIsSignificant(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashStarComments(true);
      StringReader stringReader2 = new StringReader("Qn");
      stringReader2.read();
      StringReader stringReader3 = new StringReader("7.0");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader3);
      streamTokenizer2.wordChars(516, (-373551227));
      streamTokenizer0.whitespaceChars((-1614856102), (-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i^)UvMViF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.mark(3338);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[8];
      stringReader0.read(charArray0);
      StringReader stringReader1 = new StringReader("XS");
      StringReader stringReader2 = new StringReader("a6cU:#Z`h8myCFY/%A");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StringReader stringReader3 = new StringReader("XS");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.read(charArray0);
      StringReader stringReader4 = new StringReader("not");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader4);
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis((-1));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0332653667861926
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      stringReader0.mark(2);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm1.sort(comparator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm0.add((Object) "iQ=n");
      jSTerm0.retainAll(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '2';
      charArray0[1] = '}';
      charArray0[3] = ',';
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.backquote = (int) '2';
      JSJshopVars.whiteSpace = (-1912);
      System.setCurrentTimeMillis(50);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '2';
      charArray0[2] = '}';
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(",WbHk");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSPredicateForm0);
      Predicate<Integer> predicate1 = predicate0.and(predicate0);
      Predicate<Integer> predicate2 = predicate0.and(predicate1);
      Predicate<Integer> predicate3 = predicate2.negate();
      Predicate<Integer> predicate4 = predicate3.negate();
      jSPredicateForm0.removeIf(predicate4);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSPredicateForm0;
      jSPredicateForm0.iterator();
      objectArray0[1] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray(objectArray0);
      jSPredicateForm0.stream();
      jSPredicateForm0.print();
      Object object0 = new Object();
      jSPredicateForm0.removeElement(object0);
      jSPredicateForm0.ensureCapacity(1435);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      jSSubstitution0.add(objectArray0[1]);
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm2 = null;
      try {
        jSPredicateForm2 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
