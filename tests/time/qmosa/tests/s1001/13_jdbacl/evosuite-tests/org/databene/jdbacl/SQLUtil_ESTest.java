/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:53:39 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.h2.engine.ConnectionInfo;
import org.h2.jdbc.JdbcConnection;
import org.h2.jdbc.JdbcSQLException;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.ValueLob;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(157);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("M$S.v/@", stringBuilder1);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      stringBuilder2.append(charArray0);
      StringBuilder stringBuilder3 = stringBuilder1.appendCodePoint(2225);
      stringBuilder3.append((double) 967);
      String string0 = ">I!6=kFb/^4oE";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      boolean boolean0 = false;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("M$S.v/@", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(">I!6=kFb/^4oE");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">I!6=kFb/^4oE";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("M$S.v/@", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2, nameSpec0);
      JdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new JdbcConnection((ConnectionInfo) null, false);
        fail("Expecting exception: JdbcSQLException");
      
      } catch(Throwable e) {
         //
         // General error: \"java.lang.NullPointerException\" [50000-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "l";
      DBSequence dBSequence0 = new DBSequence("l", "l", "l");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      dBSequence0.setMinValue(bigInteger0);
      SQLUtil.typeAndName(dBSequence0);
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "l";
      String string1 = null;
      String[] stringArray1 = new String[5];
      String string2 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("N^EjypV$@iSc", "inner", stringArray1, (String) null, (String) null, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "truncate";
      SQLUtil.parseColumnTypeAndSize("truncate");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2670824025440988
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringWriter stringWriter0 = new StringWriter(759);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = '*';
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[e4N:s";
      stringArray0[1] = "[e4N:s";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[e4N:s", true, stringArray0);
      defaultDBTable0.equals(dBPrimaryKeyConstraint0);
      stringWriter1.write(charArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("[e4N:s", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("null]Vg)*[e4N:screate table null (,\n\tCONSTRAINT [e4N:s PRIMARY KEY ([e4N:s, [e4N:s)\n)", stringWriter1.toString());
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = "[e4N:s";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      ValueLob valueLob0 = ValueLob.createSmallLob(3475, byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      boolean boolean0 = SQLUtil.isDDL("[e4N:s");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = '*';
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[2] = object0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[e4N:s";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      ValueLob valueLob0 = ValueLob.createSmallLob(3475, byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderValue("[e4N:s");
      assertEquals("'[e4N:s'", string0);
      
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9581417463438022
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.or(bigInteger1);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.setResultSetHoldability(true);
      constantActionActivation0.getContextManager();
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[5];
      stringArray1[2] = "inner";
      stringArray1[4] = " ]`@]6e6:lmy}$e\"";
      SQLUtil.join("fg~eK", (String) null, stringArray0, "inner", stringArray0[0], stringArray1);
      String[] stringArray2 = new String[0];
      SQLUtil.leftJoin(stringArray0[0], stringArray2, "inner", "org.h2.engine.SessionWithState", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = new PipedWriter();
      SQLUtil.isDML(" ]`@]6e6:lmy}$e\"");
      SQLUtil.renderColumnNames(stringArray2);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("inner", ")2S=tvv", (String[]) null, ")2S=tvv", " copy: ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter(759);
      stringWriter0.append('!');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter1.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[e4N:s";
      stringArray0[1] = "[e4N:s";
      stringArray0[2] = "[e4N:s";
      stringArray0[3] = "[e4N:s";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[e4N:s", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(759);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = '*';
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " SET  ", false, (String[]) null);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance(759, "execyi{bj^lvcr!a5w,a4");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O23;WOu", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String string0 = SQLUtil.normalize(" F,bzjIOg/", false);
      assertEquals("F,  bzjIOg /", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3260886280590363
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("yi{bj^LvCR!a5W,a4", stringBuilder0);
      DBCatalog dBCatalog0 = new DBCatalog("yi{bj^LvCR!a5W,a4");
      dBCatalog0.setDoc("3%t9z1P");
      SQLUtil.ownerDotComponent(dBCatalog0);
      SQLUtil.mutatesStructure("Bind Exception");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dBCatalog0.getSchema("yi{bj^LvCR!a5W,a4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":Cf|lyDJLWz`@_x@", (DBSchema) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "yi{bj^LvCR!a5W,a4";
      stringArray0[1] = "Bind Exception";
      stringArray0[2] = "F${m";
      SQLUtil.join("Kk[/?[S\"?|", "getStatementExecutionPlanText", stringArray0, " ]`@]6e6:lmy}$e\"", "PbA L<]9-p", stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Kk[/?[S\"?| join  ]`@]6e6:lmy}$e\" as PbA L<]9-p on getStatementExecutionPlanText.yi{bj^LvCR!a5W,a4 = PbA L<]9-p.yi{bj^LvCR!a5W,a4 and getStatementExecutionPlanText.Bind Exception = PbA L<]9-p.Bind Exception and getStatementExecutionPlanText.F${m = PbA L<]9-p.F${m";
      stringArray1[1] = "PbA L<]9-p";
      stringArray1[2] = "iL]C_F";
      stringArray1[3] = " ]`@]6e6:lmy}$e\"";
      stringArray1[4] = "3%t9z1P";
      stringArray1[5] = "/*";
      stringArray1[6] = ":Cf|lyDJLWz`@_x@";
      stringArray1[7] = "Kk[/?[S\"?|";
      String[] stringArray2 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("QgQ-tD%xV 1s~F", stringArray0, " ]`@]6e6:lmy}$e\"", " ]`@]6e6:lmy}$e\"", stringArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.isProcedureCall("y#kO;eY;Er!C");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("y#kO;eY;Er!C", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "y#kO;eY;\\Er!C";
      SQLUtil.isProcedureCall("y#kO;eY;Er!C");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("y#kO;eY;Er!C", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      int int0 = (-2054114791);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2054114791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3628433742803376
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(759);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      mockPrintWriter0.println(759);
      charArray0[3] = ')';
      charArray0[4] = '*';
      mockPrintWriter0.flush();
      stringWriter1.write(charArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " SET  ", false, (String[]) null);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance(759, "execyi{bj^lvcr!a5w,a4");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O23;WOu", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7005853692344166
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "`M^(o%VQ7|");
      SQLUtil.removeComments("~JTm~VKB_)FLWNiDxj/");
      dBDataType0.isAlpha();
      Character character0 = new Character('x');
      Character.lowSurrogate(0);
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "`M^(o%VQ7|";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "~JTm~VKB_)FLWNiDxj/";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE `M^(o%VQ7| = '`M^(o%VQ7|' AND  = '' AND  = '' AND  = '' AND  = '' AND  = '' AND ~JTm~VKB_)FLWNiDxj/ = '~JTm~VKB_)FLWNiDxj/'", string0);
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "~JTm~VKB_)FLWNiDxj/";
      stringArray1[3] = ",$s)O-Cfw+^&;{-ftn";
      String string1 = SQLUtil.join("DATE", "", stringArray1, "", "", stringArray1);
      assertEquals("DATE join  as  on . = . and .~JTm~VKB_)FLWNiDxj/ = .~JTm~VKB_)FLWNiDxj/ and .null = .null and .,$s)O-Cfw+^&;{-ftn = .,$s)O-Cfw+^&;{-ftn and .null = .null", string1);
      
      boolean boolean0 = SQLUtil.isDML("g<IiM");
      assertFalse(boolean0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (`M^(o%VQ7|, , , , , , ~JTm~VKB_)FLWNiDxj/) REFERENCES null(`M^(o%VQ7|, , , , , , ~JTm~VKB_)FLWNiDxj/)", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9198576840028094
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.isProcedureCall("y#kO;eY;Er!C");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "y#kO;eY;Er!C";
      stringArray0[1] = "y#kO;eY;Er!C";
      stringArray0[2] = "y#kO;eY;Er!C";
      stringArray0[3] = "y#kO;eY;Er!C";
      stringArray0[4] = "y#kO;eY;Er!C";
      stringArray0[5] = "y#kO;eY;Er!C";
      stringArray0[6] = "y#kO;eY;Er!C";
      stringArray0[7] = "y#kO;eY;Er!C";
      SQLUtil.renderColumnListWithTableName("y#kO;eY;Er!C", stringArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "y#kO;eY;Er!C";
      objectArray0[1] = (Object) "y#kO;eY;Er!C.y#kO;eY;Er!C, y#kO;eY;Er!C.y#kO;eY;Er!C, y#kO;eY;Er!C.y#kO;eY;Er!C, y#kO;eY;Er!C.y#kO;eY;Er!C, y#kO;eY;Er!C.y#kO;eY;Er!C, y#kO;eY;Er!C.y#kO;eY;Er!C, y#kO;eY;Er!C.y#kO;eY;Er!C, y#kO;eY;Er!C.y#kO;eY;Er!C";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Unknown constraint type: ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unknown constraint type: ");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType.getInstance(7, "String");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(48, 7);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      String[] stringArray0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "drop materialized viewn 7dlxbz");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("org.h2.engine.SessionWithState", (String[]) null, "KaO", "BINARY_DOUBLE", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.7983071138052842
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(759);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = '*';
      mockPrintWriter0.flush();
      stringWriter1.write(charArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " SET  ", false, (String[]) null);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      SQLUtil.normalize("create unique index", false);
      // Undeclared exception!
      try { 
        SQLUtil.join("alter tablereferences", "create unique index", (String[]) null, "alter tablereferences", "alter tablereferences", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("'}Yz!ou=m$");
      tableContainer0.getTable("drop table");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*MCN|<YIO(Ae'Yu", (DBTable) null, 10240, "drop table");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop table", false, "weightedLiteralList", "execute");
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBColumn0.setDoc((String) null);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 'C';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      StringBuilder stringBuilder2 = stringBuilder0.append(charArray0);
      stringBuilder0.appendCodePoint(648);
      stringBuilder0.append(4577.8);
      stringBuilder2.append(4660);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "*MCN|<YIO(Ae'Yu", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " F,bzjIOg/";
      stringArray0[1] = "select";
      stringArray0[2] = " F,bzjIOg/";
      stringArray0[3] = "select";
      stringArray0[4] = "select";
      stringArray0[5] = " F,bzjIOg/";
      stringArray0[6] = " F,bzjIOg/";
      stringArray0[7] = "select";
      stringArray0[8] = "select";
      SQLUtil.leftJoin("select", stringArray0, "drop index", "{e", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.normalize("<*>YT^F.VJ*e", true);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionExecute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getResultDescription();
      constantActionActivation0.getContextManager();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.249036161304013
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringWriter stringWriter0 = new StringWriter(759);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = '*';
      stringWriter1.write(charArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("[e4N:s", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("null]Vg)*[e4N:screate table null (\n)", stringWriter1.toString());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[e4N:s";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[e4N:s", true, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition("[e4N:s", stringBuilder0);
      SQLUtil.renderColumnNames(stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec1);
      assertEquals("CONSTRAINT [e4N:s PRIMARY KEY ([e4N:s)", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.401311666981295
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jM$S.v/@", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jM$S.v/@", defaultDBTable0, 355, "bind exception");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("jM$S.v/@", defaultDBTable0, (DBDataType) null, integer0, integer1);
      defaultDBColumn1.setNullable(false);
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn1.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("jM$S.v/@ NOT NULL", string0);
      
      SQLUtil.parseColumnTypeAndSize("k>TdDZ3/!Qw\"y");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("U", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBColumn1.getForeignKeyConstraint();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT U FOREIGN KEY (jM$S.v/@, , ) REFERENCES jM$S.v/@(jM$S.v/@, , )", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter(759);
      stringWriter0.append('!');
      stringWriter0.append((CharSequence) null);
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("");
      Object object0 = new Object();
      tableContainer0.equals((Object) null);
      String string0 = "VARP";
      SQLUtil.removeComments("");
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-1294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(759);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      stringWriter0.write(66541);
      charArray0[2] = 'g';
      mockPrintWriter0.println(759);
      charArray0[3] = ')';
      charArray0[4] = '*';
      mockPrintWriter0.flush();
      String string0 = SQLUtil.normalize("~5L7<rfkI({5^", false);
      assertEquals("~ 5L7 < rfkI ({ 5 ^", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4387424672740172
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("yi{bj^LvCR!a5W,a4");
      dBCatalog0.setDoc("3%t9z1P");
      SQLUtil.ownerDotComponent(dBCatalog0);
      SQLUtil.mutatesDataOrStructure("yi{bj^LvCR!a5W,a4");
      dBCatalog0.getSchema("3%t9z1P");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("yi{bj^LvCR!a5W,a4", (DBSchema) null);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.setDescription("yi{bj^LvCR!a5W,a4");
      jdbcDataSource0.getLogWriter();
      assertEquals(61, jdbcDataSource0.getTraceId());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3%t9z1P");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("L/o", (DBSchema) null);
      boolean boolean0 = SQLUtil.isQuery("insertreferences");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "W>zLIN,@6_+Fl%@q";
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7560836273833573
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "U";
      stringArray0[2] = "parseSqlInfo ended";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isDML("insert");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("s5Rf}", " or ", versionNumber0);
      assertNull(defaultDatabase0.getDoc());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "y#kO;eY;\\Er!C";
      SQLUtil.isProcedureCall("y#kO;eY;Er!C");
      DBSchema dBSchema0 = null;
      String string1 = "updateg<iim";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updateg<iim", (DBSchema) null);
      String string2 = " REFERENCES ";
      SQLUtil.mutatesDataOrStructure("updateg<iim");
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = false;
      StringWriter stringWriter0 = new StringWriter(761);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = '*';
      mockPrintWriter0.flush();
      stringWriter1.write(charArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[e4N:s";
      stringArray0[1] = "[e4N:s";
      PrintWriter printWriter0 = mockPrintWriter0.printf(";5BZ,o>", (Object[]) stringArray0);
      DBSchema dBSchema0 = new DBSchema("[e4N:s");
      dBSchema0.getTable("[e4N:s");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">";
      SQLUtil.removeComments(">");
      String string0 = null;
      SQLUtil.join((String) null, (String) null, stringArray0, ">", ">", stringArray0);
      String string1 = null;
      String[] stringArray1 = new String[4];
      stringArray1[0] = ">";
      stringArray1[1] = null;
      stringArray1[2] = null;
      stringArray1[3] = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("'", stringArray1, "~", "j>`$!", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = ">";
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">";
      SQLUtil.renderColumnListWithTableName(">", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = 1628L;
      System.setCurrentTimeMillis(1628L);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 759;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter(759);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      String string0 = "lF";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("lF", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "1io\":TVwVOMaDKGc#KC";
      String string1 = "";
      DBDataType dBDataType0 = DBDataType.getInstance(0, "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string2 = "bind except\"on";
      TableContainer tableContainer0 = new TableContainer("1io\":TVwVOMaDKGc#KC");
      tableContainer0.getTable(" ADD ");
      String string3 = "alter index";
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" ADD ", (DBTable) null, dBDataType0, integer3, integer4);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.394993443200781
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 157;
      StringBuilder stringBuilder0 = new StringBuilder(157);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      SQLUtil.addOptionalCondition("M$S.v/@", stringBuilder1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(>E|AJ[E3i#kQ{uIe%";
      stringArray0[1] = "-c";
      stringArray0[2] = "(>E|AJ[E3i#kQ{uIe%";
      stringArray0[3] = "-c";
      SQLUtil.join((String) null, "-c", stringArray0, "(>E|AJ[E3i#kQ{uIe%", (String) null, stringArray0);
      String string0 = "gzk";
      SQLUtil.leftJoin(", ", stringArray0, "M$S.v/@", "(>E|AJ[E3i#kQ{uIe% as null on -c.(>E|AJ[E3i#kQ{uIe% = null.(>E|AJ[E3i#kQ{uIe% and -c.-c = null.-c and -c.(>E|AJ[E3i#kQ{uIe% = null.(>E|AJ[E3i#kQ{uIe% and -c.-c = null.-c", stringArray0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("uP]\";6tP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("`M^(o%VQ7|", compositeDBObject0);
      tableContainer0.getTable("`M^(o%VQ7|");
      tableContainer0.equals("`M^(o%VQ7|");
      DBDataType.getInstance(0, "`M^(o%VQ7|");
      String string0 = SQLUtil.normalize("~JTm~VKB_)FLWNiDxj/", false);
      assertEquals("~ JTm ~ VKB_) FLWNiDxj /", string0);
      
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String string1 = SQLUtil.normalize("create materialized view", false);
      assertEquals("create materialized view", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBDataType.getInstance(0, "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(0, 1279);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("", "1io\":TVwVOMaDKGc#KC", "pjk.iYJv");
      jdbcConnectionPool0.getLogWriter();
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "r^60o,J<";
      String[] stringArray0 = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "r^60o,J<", true, (String[]) null);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1io\":TVwVOMaDKGc#KC", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "F$|:6uk=zeM m";
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F$|:6uk=zeM m", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      stringBuilder1.append(charArray0);
      int int0 = (-822);
      int int1 = 5;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1754, '\\');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      DBDataType dBDataType0 = DBDataType.getInstance((-1086), "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(0, 1279);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("WaJ", (DBTable) null, dBDataType0, integer2, integer3);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("(3,1)", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "(,el1h", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 759;
      StringWriter stringWriter0 = new StringWriter(759);
      stringWriter0.append('!');
      char[] charArray0 = new char[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[e4N:s";
      stringArray0[1] = "[e4N:s";
      stringArray0[2] = "[e4N:s";
      stringArray0[3] = "[e4N:s";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[e4N:s", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F$|:6uk=zeM m");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F$|:6uk=zeM m", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[17];
      stringArray0[0] = "";
      stringArray0[1] = "]Mw;DlKK,8";
      stringArray0[2] = "]Mw;DlKK,8";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.TransactionStatementNode";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "]Mw;DlKK,8";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.TransactionStatementNode";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = SQLUtil.normalize("1io\":TVwVOMaDKGc#KC", true);
      assertEquals("1io \":TVwVOMaDKGc#KC\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      DBCatalog dBCatalog0 = new DBCatalog("xxzY]6gI,lB");
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xxzY]6gI,lB", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "08<J-I8l6>nry";
      stringArray0[2] = "08<J-I8l6>nry";
      String string0 = "!#BJb7\\P4]q<!2@j )";
      SQLUtil.join("08<J-I8l6>nry", (String) null, stringArray0, "!#BJb7P4]q<!2@j )", "org.apache.derby.impl.sql.compile.WindowList", stringArray0);
      SQLUtil.innerJoin("", stringArray0, "", (String) null, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("M$S.v/@");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("M$S.v/@", stringBuilder1);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      stringBuilder2.append(charArray0);
      StringBuilder stringBuilder3 = stringBuilder1.appendCodePoint(2225);
      stringBuilder3.append((double) 967);
      // Undeclared exception!
      try { 
        stringBuilder1.delete(967, ':');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(157);
      SQLUtil.addRequiredCondition("", stringBuilder0);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      SQLUtil.renderColumnNames(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter();
      SQLUtil.renderColumnNames(stringArray0);
      PipedWriter pipedWriter1 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(0, 1279);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("", "1io\":TVwVOMaDKGc#KC", "pjk.iYJv");
      jdbcConnectionPool0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "r^60o,J<", true, (String[]) null);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      ValueLob.createSmallLob((byte)43, byteArray0);
      ValueLob valueLob0 = ValueLob.createSmallLob(21, byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderValue(valueLob0);
      FBClob fBClob0 = new FBClob();
      try { 
        fBClob0.getCharacterStream(0L, 1000000000L);
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.FBClob", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6212787629061696
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(157);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("M$S.v/@", stringBuilder1);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      stringBuilder2.append(charArray0);
      SQLUtil.normalize("Njcg", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " (";
      stringArray0[1] = "M$S.v/@";
      stringArray0[2] = "Truncation of large objects is only implemented in 8.3 and later servers.";
      stringArray0[3] = "y'9jC";
      stringArray0[5] = " (";
      stringArray0[6] = "Truncation of large objects is only implemented in 8.3 and later servers.";
      SQLUtil.join("Truncation of large objects is only implemented in 8.3 and later servers.", "Njcg", stringArray0, "drop materialized view", "org.databene.commons.filter.NamedObjectByPatternFilter", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.428860207414804
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jM$S.v/@";
      stringArray0[1] = "U";
      stringArray0[2] = "parseSqlInfo ended";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("jM$S.v/@ = 'jM$S.v/@' AND U = 'U' AND parseSqlInfo ended = 'parseSqlInfo ended'", string0);
      
      String string1 = SQLUtil.normalize("//", true);
      assertEquals("", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[e4N:s";
      stringArray0[2] = "[e4N:s";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = "[e4N:s";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[e4N:s", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[e4N:s", defaultDBTable0, 1351, "select into");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("SELECT INTO", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.31860166520681
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "`M^(o%VQ7|");
      SQLUtil.removeComments("~JTm~VKB_)FLWNiDxj/");
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
      
      dBDataType0.isAlpha();
      Character character0 = new Character('x');
      Character.lowSurrogate(0);
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'x'", string0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "~JTm~VKB_)FLWNiDxj/";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XrW`");
      stringArray0[2] = "";
      stringArray0[3] = ",$s)O-Cfw+^&;{-ftn";
      String string1 = SQLUtil.join("DATE", "", stringArray0, "", "", stringArray0);
      assertEquals("DATE join  as  on . = . and .~JTm~VKB_)FLWNiDxj/ = .~JTm~VKB_)FLWNiDxj/ and . = . and .,$s)O-Cfw+^&;{-ftn = .,$s)O-Cfw+^&;{-ftn and .null = .null", string1);
      
      boolean boolean1 = SQLUtil.isDML("g<IiM");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      Boolean boolean2 = SQLUtil.mutatesStructure("rename");
      assertFalse(boolean2.equals((Object)boolean1));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLUtil.normalize("LS/%Ed", false);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      assertFalse(slaveDatabase0.isActive());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter(759);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = '*';
      mockPrintWriter0.flush();
      stringWriter1.write(charArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[e4N:s";
      stringArray0[1] = "[e4N:s";
      stringArray0[2] = "[e4N:s";
      stringArray0[3] = "[e4N:s";
      stringArray0[4] = "[e4N:s";
      stringArray0[5] = "[e4N:s";
      String string0 = SQLUtil.innerJoin("\"7mE\"", stringArray0, "[e4N:s", "[e4N:s", stringArray0);
      assertEquals("[e4N:s as [e4N:s on \"7mE\".[e4N:s = [e4N:s.[e4N:s and \"7mE\".[e4N:s = [e4N:s.[e4N:s and \"7mE\".[e4N:s = [e4N:s.[e4N:s and \"7mE\".[e4N:s = [e4N:s.[e4N:s and \"7mE\".[e4N:s = [e4N:s.[e4N:s and \"7mE\".[e4N:s = [e4N:s.[e4N:s and \"7mE\".null = [e4N:s.null and \"7mE\".null = [e4N:s.null", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance(7, "String");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(48, 7);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      Integer.remainderUnsigned(48, (-53));
      Integer.compareUnsigned((-53), 5802);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'PARTITIONS'", (DBTable) null, dBDataType0, integer2, (Integer) null);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("STRING(0)", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "~JTm~VKB_)FLWNiDxj/";
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("`M^(o%VQ7|", compositeDBObject0);
      tableContainer0.getTable("`M^(o%VQ7|");
      tableContainer0.equals("`M^(o%VQ7|");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "`M^(o%VQ7|");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~JTm~VKB_)FLWNiDxj/", (DBTable) null, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = "executereferences";
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      String string2 = "execute";
      String string3 = "1io\":tvwvomadkgc#kc";
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(" REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42X65");
      Locale locale0 = new Locale("42X65", " REFERENCES ", "42X65");
      locale0.hasExtensions();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("42X65");
      boolean boolean0 = new Boolean(false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "bind");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      int int0 = 420;
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[0] = 'E';
      charArray0[2] = '/';
      charArray0[3] = 't';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(420, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 420
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.143652409619771
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(759);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'V';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      mockPrintWriter0.append((CharSequence) null);
      charArray0[4] = '*';
      mockPrintWriter0.flush();
      stringWriter1.write(charArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " SET  ", false, (String[]) null);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      mockPrintWriter0.printf(" SET  ", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("nullnull]Vg)* SET  create table null (,\n\tCONSTRAINT \" SET  \" UNIQUE ()\n)", stringWriter1.toString());
      
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " SET  ", false, (String[]) null);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      SQLUtil.addOptionalCondition("'{}|B", stringBuilder0);
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "";
      DBSequence dBSequence0 = new DBSequence("", "", "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      dBSequence0.setMinValue(bigInteger0);
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.2627985789354035
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      dBSequence0.setMinValue(bigInteger0);
      SQLUtil.typeAndName(dBSequence0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "sequence ";
      stringArray0[2] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.normalize("y'9jC", true);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
