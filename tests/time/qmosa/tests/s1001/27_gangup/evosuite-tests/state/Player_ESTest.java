/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:13:01 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.SyncFailedException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Player player0 = new Player((-4227));
      player0.unpack(byteArray0);
      player0.getStrength();
      player0.getSubparty();
      player0.setDead(2485L);
      Player player1 = new Player((short)4919, "", "a9&E~{>tF\"", (short)4919, (-10980));
      player0.getTimeOfDeath();
      player1.getSubparty();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(829);
      byteArrayInputStream0.reset();
      player0.getIP();
      assertEquals(2485L, player0.getTimeOfDeath());
      
      player1.getStrength();
      float float0 = player1.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1), 29440);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      byteArrayInputStream2.reset();
      Player player0 = new Player((-1), "", "", (byte) (-9));
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.171659610384074
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte)103;
      Player player0 = new Player((-2376), "qD", 1);
      player0.getMoney();
      player0.pack();
      player0.setDead((long) (byte)103);
      player0.setMoney((byte)5);
      player0.getX();
      player0.setY((byte) (-9));
      int int0 = Packable.PLAYER;
      player0.gangStrength();
      player0.unpack(byteArray0);
      Player player1 = new Player((byte)5, (String) null, (-1552));
      player1.isJoinOK(player0, true);
      assertEquals((-9.0F), player0.getY(), 0.01F);
      
      player1.getName();
      assertEquals(0.0F, player1.getMoney(), 0.01F);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-9);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      byteArrayInputStream1.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (byte)103, (byte)103);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray1, (-1), (-1192));
      byteArrayInputStream2.skip((byte)3);
      byteArrayInputStream3.markSupported();
      byteArrayInputStream2.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream2);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream3.read();
      byteArrayInputStream2.read(byteArray1);
      Player player0 = new Player();
      Player player1 = new Player((-1), "", "Ip|U&!:FEy-VV9~#:M", 27, 44);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertFalse(boolean0);
      
      player0.isBoss();
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.getName());
      assertEquals(0, player0.getPictureId());
      
      String string0 = player1.getIP();
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertTrue(player1.isConnected());
      assertEquals(44, player1.getStrength());
      assertFalse(player1.isDead());
      assertEquals(27, player1.getPictureId());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1545;
      Player player0 = new Player(1545, "&yga", (String) null, 1545, (-1319));
      player0.getX();
      player0.toString();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1239058144637433
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      player0.setY((byte)27);
      player0.setMoney(1748.076F);
      player0.pack();
      player0.setDead();
      Player player1 = new Player(0, "7X<=BpV", 527);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      linkedList1.add(locale0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale locale1 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale_FilteringMode1;
      PrintStream printStream0 = mockPrintStream0.format(locale1, "Player.unpack(): *** WARNING *** data is not of proper type!", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      player1.pack(dataOutputStream0);
      player1.getX();
      player0.getY();
      player0.getZ();
      player0.getMoney();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      
      boolean boolean0 = player1.isConnected();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((short)4919);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      filterOutputStream0.flush();
      filterOutputStream0.flush();
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      player0.pack(dataOutputStream0);
      Player player1 = new Player(1174, "~FmNv^):4u9+t+6s0", "~FmNv^):4u9+t+6s0", (-1855), 4919);
      player0.getZ();
      player1.gangBoss();
      player0.getY();
      Player player2 = new Player(980, "!{", "module.ModuleBrowserDialog$ModuleFilter", (short)4919, (-1855));
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      player0.isJoinOK(player1, false);
      int int0 = player0.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((byte)27, "", 3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList2, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "7X<=BpV";
      objectArray0[1] = (Object) player0;
      objectArray0[2] = (Object) "Player.unpack(): *** WARNING *** data is not of proper type!";
      objectArray0[3] = (Object) linkedList0;
      mockPrintStream0.format(locale0, "7X<=BpV", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      player0.setY((byte)27);
      assertEquals(27.0F, player0.getY(), 0.01F);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "statj.Part ");
      Player player1 = new Player();
      Player player2 = new Player((byte)27, "0.0.0.0", "", (short)4919, (-1855));
      int int0 = player2.gangStrength();
      assertEquals((-1855), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2381531034180027
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)49;
      player0.gangStrength();
      player0.setY((-621.02F));
      player0.gangStrength();
      player0.unpack(byteArray0);
      player0.getStrength();
      player0.getSubparty();
      player0.getTimeOfDeath();
      int int0 = Packable.TEXT_MESSAGE;
      player0.setMoney(1);
      player0.pack();
      player0.setDead();
      Player player1 = new Player(1883, "", (short)4919);
      player0.getX();
      float float0 = player0.getY();
      assertEquals((-621.02F), float0, 0.01F);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((-976), "ZC[JrJ7hA*j'Wz;L{<", (-976));
      player0.id = (-976);
      player0.gangStrength();
      player0.getY();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.getMoney();
      player0.getZ();
      Player player1 = new Player();
      // Undeclared exception!
      try { 
        player1.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1), 29440);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream2.read();
      byteArrayInputStream0.read(byteArray0);
      Player player0 = new Player(1283, "module.ModuleBrowserDialog$ModuleFilter", "DZv|[I]sK", (byte)103, 11008);
      int int0 = player0.getStrength();
      assertEquals(11008, int0);
      
      player0.pack();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("module.ModuleBrowserDialog$ModuleFilter", player0.getIP());
      assertEquals(103, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Player player0 = new Player((byte)5, "", 17694);
      Player player1 = new Player((byte)3, (String) null, (short)4919);
      // Undeclared exception!
      try { 
        player1.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(1);
      player0.id = 6912;
      player0.setZ(1);
      Player player1 = new Player(12544);
      player1.id = 5;
      player0.boss = (Party) player1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player1.next = player0.boss;
      player0.gangStrength();
      System.setCurrentTimeMillis((-428L));
      player0.getName();
      player0.getX();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)5;
      player0.unpack(byteArray0);
      player0.getZ();
      float float0 = player0.getMoney();
      assertEquals(1.0F, player0.getZ(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(1, "", (-5888));
      player0.setConnected(true);
      int int0 = player0.getPictureId();
      assertEquals((-5888), int0);
      
      int int1 = player0.getStrength();
      assertEquals(1, int1);
      
      System.setCurrentTimeMillis(1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)49, (-2068));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(1);
      Player player1 = new Player((short)4919, " ", "", 1);
      player0.head = (Party) player1;
      player0.pack();
      player0.setDead((long) 1);
      player0.remove(player1);
      player1.setZ((-1027.665F));
      player1.setDead();
      player1.getPictureId();
      player0.getPictureId();
      player0.setDead();
      player1.getTimeOfDeath();
      player0.reset(true);
      float float0 = player1.getZ();
      assertEquals((-1027.665F), float0, 0.01F);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.301160282549396
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player();
      player0.getY();
      player0.isConnected();
      player0.getX();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)0;
      player0.unpack(byteArray0);
      byteArrayOutputStream0.flush();
      byteArrayOutputStream0.write((-3494));
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      dataOutputStream0.writeFloat((-3771.0F));
      dataOutputStream0.writeLong((-3348L));
      dataOutputStream0.writeLong((-3348L));
      player0.pack(dataOutputStream0);
      player0.getStrength();
      player0.setX((byte)0);
      player0.setY(1659.031F);
      player0.getZ();
      player0.getZ();
      player0.gangStrength();
      player0.pack();
      player0.setDead();
      float float0 = player0.getX();
      assertTrue(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(1, "", " ", 1, 1);
      Player player1 = new Player((short)4919, " ", "", 1);
      player0.head = (Party) player1;
      player0.pack();
      player0.setDead(1L);
      player0.setConnected(true);
      player0.head.getSubparty();
      player1.setConnected(true);
      player0.setMoney(0.0F);
      player0.setX(0.0F);
      player1.add(player0.head);
      player0.setDead(885L);
      player1.setY((short)4919);
      player0.type();
      player0.toString();
      player0.isDead();
      player1.setDead(0L, false);
      assertEquals(4919.0F, player1.getY(), 0.01F);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&ZJ]MG8'|NbHu");
      Player player0 = new Player();
      Party party0 = new Party();
      player0.add(party0);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((-3328));
      player0.setZ((-1041.37F));
      player0.setY((-3328));
      player0.setDead((long) (-3328));
      player0.getTimeOfDeath();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (short)4919);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player((-895), "HFDF96.", " qWU?#h\",gm", (short)4919);
      assertEquals("HFDF96.", player1.getIP());
      assertEquals(4919, player1.getPictureId());
      
      boolean boolean0 = player0.isDead();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals("Player0", player0.getName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(4919, "C|g", "", 4919, 4919);
      player0.getSubparty();
      player0.setZ(4919);
      player0.getX();
      player0.getName();
      player0.setDead(0L, true);
      Player player1 = new Player(1);
      player0.remove(player1);
      player0.setY(767.9F);
      Player player2 = new Player(600, "", "", 600);
      player2.add(player1);
      player2.boss = (Party) player0;
      player2.setConnected(false);
      player0.isJoinOK(player2, false);
      player2.setDead((-2998L));
      player0.setConnected(false);
      Player player3 = new Player(4919, (String) null, "", (short)4919, (short)4919);
      player3.setDead(818L, false);
      assertEquals(818L, player3.getTimeOfDeath());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      Player player1 = new Player(1174, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (short)4919, 2678);
      player1.getZ();
      Player player2 = new Player((byte)27, "y3Kt0~-B.jpH!WJqR", (short)4919);
      player2.gangBoss();
      player1.getY();
      Player player3 = new Player((short)4919, "", "y3Kt0~-B.jpH!WJqR", 4096, 4919);
      byte[] byteArray1 = player3.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)5;
      Player player0 = new Player((byte)3, "gui.ModuleBrowserDialog$ModuleFilter", "", 4806, 1804);
      int int0 = player0.gangStrength();
      assertTrue(player0.isConnected());
      assertEquals(1804, int0);
      assertEquals(4806, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("gui.ModuleBrowserDialog$ModuleFilter", player0.getIP());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)5;
      Player player0 = new Player(1534);
      player0.id = 444;
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)16;
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Object[] objectArray0 = new Object[0];
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)27;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      player0.setY((byte)27);
      int int0 = Packable.ACTION;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B{X})MaXgD/");
      float float0 = Player.TOLERANCE;
      player0.getZ();
      player0.getY();
      player0.isJoinOK(player0, true);
      float float1 = player0.getX();
      assertEquals(27.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, float1, 0.01F);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&ZJ]MG8'|NbHu");
      float float0 = Player.TOLERANCE;
      Player player0 = new Player(746, "y3Kt0~-B.jpH!WJqR", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 1174, 746);
      Player player1 = new Player((-2651), "", 1174);
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      
      player0.getName();
      assertEquals(1174, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(746, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals("y3Kt0~-B.jpH!WJqR", player0.getIP());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis((-3204L));
      Player player0 = new Player(4, "Nh)oJa,/YFhw", "H4CQ=P>=Mcx", 4);
      String string0 = player0.getIP();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(4, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals("Nh)oJa,/YFhw", string0);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.436242257854965
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(5, " ", " ", 5, 5);
      Player player1 = new Player((-157), " ", "ZC[JrJ7hA*j'Wz;L{<", (short)4919);
      player1.pack();
      player1.setDead(1L);
      Player player2 = new Player();
      player2.setConnected(true);
      player2.getSubparty();
      player2.setConnected(true);
      player0.setMoney(0.1F);
      player2.setX(0.2F);
      player0.add(player2);
      player2.setDead(885L);
      player1.setY(0.2F);
      player2.type();
      player0.toString();
      Player player3 = new Player(5, " ", "ZC[JrJ7hA*j'Wz;L{<", (-1));
      player3.isDead();
      player1.getX();
      player2.getY();
      player0.getZ();
      assertEquals(0.1F, player0.getMoney(), 0.01F);
      
      float float0 = player1.getZ();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)27;
      byteArray0[1] = (byte)46;
      int int0 = Packable.GAME_EVENT;
      player0.setY((byte)46);
      int int1 = Packable.TEXT_MESSAGE;
      int int2 = Packable.TEXT_MESSAGE;
      Player player1 = new Player((byte)27, "", (byte)0);
      Player player2 = new Player();
      player2.getZ();
      float float0 = Player.TOLERANCE;
      Player player3 = new Player((byte)0, "", "module.ModuleBrowserDialog$ModuleFilter", (short)4919, (-1379));
      int int3 = Packable.TEXT_MESSAGE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.setMoney(0.0F);
      int int4 = Packable.PLAYER;
      player0.unpack(byteArray0);
      Player player4 = new Player((byte)0, "} m>$w#AkoDk8s", (short)4919);
      player1.setZ((-1379));
      player1.unpack(byteArray0);
      player1.toString();
      assertEquals((-1379.0F), player1.getZ(), 0.01F);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Player player0 = new Player(0);
      player0.getSubparty();
      Player player1 = new Player(1014, " qWU?#h\",gm", "%^#8/.Ska$f:=^yC", 4, (byte)27);
      player1.setDead((-1817L));
      Player player2 = new Player(5, " qWU?#h\",gm", " qWU?#h\",gm", (short)4919, 4919);
      player0.getTimeOfDeath();
      player0.getSubparty();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte)103;
      byteArray0[4] = (byte) (-9);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (byte)103, (byte)103);
      byteArrayInputStream0.skip((byte)103);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray1, (-1), (-1192));
      byteArrayInputStream2.skip((byte)3);
      byteArrayInputStream3.markSupported();
      byteArrayInputStream3.read();
      byteArrayInputStream2.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream2);
      byteArrayInputStream3.read();
      byteArrayInputStream2.read(byteArray1);
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player((byte)27, "", "", (byte)27);
      player0.getMoney();
      player0.pack();
      Player player1 = new Player((short)4919, "kAj?wnT5-^7;$u^Ys", (short)4919);
      player1.setDead((long) (short)4919);
      player0.setMoney(0.2F);
      player0.getX();
      Player player2 = new Player(8453, (String) null, 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((-4580), "", "", (-4580), 4554);
      Player player1 = new Player((-733), (String) null, "/K+a-uN\"AD]+1w^<6", 2247, 0);
      player1.setDead((-886L));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      player0.setZ(10.0F);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream0.mark(0);
      sequenceInputStream1.close();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      player1.unpack(dataInputStream0);
      player0.setJoinOK(player1, true);
      player0.setMoney((-4580));
      player1.setY((-733));
      assertEquals((-886L), player1.getTimeOfDeath());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)3;
      Player player0 = new Player(1100, "h}8`$7U'", "", (byte)3, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(3, player0.getPictureId());
      assertFalse(boolean0);
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals("h}8`$7U'", player0.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getStrength());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      player0.setY((byte)27);
      player0.setMoney((-1061.13F));
      player0.head = null;
      int int0 = Packable.PLAYER;
      player0.unpack(byteArray0);
      Player player1 = new Player(3, "y", (short)4919);
      player1.setZ(0.0F);
      player0.unpack(byteArray0);
      assertEquals((-1061.13F), player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1), 29440);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream2.read();
      byteArrayInputStream0.read(byteArray0);
      Player player0 = new Player(1, "module.ModuleBrowserDialog$ModuleFilter", (byte)65);
      Player player1 = new Player((-2837), "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", (-587));
      player0.boss = (Party) player1;
      int int0 = player0.type();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertEquals(65, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(5, int0);
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-9);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      byteArrayInputStream1.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (byte)103, (byte)103);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray1, (-1), (-1192));
      byteArrayInputStream2.skip((byte)3);
      byteArrayInputStream3.markSupported();
      byteArrayInputStream2.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream2);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream3.read();
      byteArrayInputStream2.read(byteArray1);
      Player player0 = new Player((-2383), "Ip|U&!:FEy-VV9~#:M", (byte)65);
      player0.pack();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(65, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((-1292), "", "", (-1292), (-1292));
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      player0.getX();
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertEquals(0, player1.getPictureId());
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(1, player1.getStrength());
      assertEquals("Player-1", player1.getName());
      
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      System.setCurrentTimeMillis((short)4919);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player0.getX();
      int int0 = player0.type();
      assertEquals(5, int0);
      
      float float1 = player0.getX();
      assertEquals((-1292), player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-1292), player0.getPictureId());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(10.0F, float1, 0.01F);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2745180899177098
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&ZJ]MG8'|NbHu");
      float float0 = Player.TOLERANCE;
      Player player0 = new Player(746, "&ZJ]MG8'|NbHu", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 1174, 4919);
      float float1 = player0.getZ();
      assertEquals(0.0F, float1, 0.01F);
      
      Player player1 = (Player)player0.gangBoss();
      player1.getY();
      Player player2 = new Player((-452), "", "0.0.0.0", 4919, 10);
      Player player3 = new Player((-452), "w27erHv STy#", "", (short)4919);
      assertEquals(1, player3.getStrength());
      
      float float2 = player0.getY();
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(4919, player0.getStrength());
      assertEquals("&ZJ]MG8'|NbHu", player0.getIP());
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(1174, player0.getPictureId());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player();
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)0;
      Player player1 = new Player((byte)5, "'1", "YLO~xZ2hZ{X5tJ(^ic", 0, 1281);
      assertEquals(1281, player1.getStrength());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.755739480438498
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)49;
      player0.gangStrength();
      player0.setY((byte)49);
      int int0 = Packable.TEXT_MESSAGE;
      player0.gangStrength();
      player0.setX(10.0F);
      Player player1 = new Player((byte)27, "", (byte)0);
      Player player2 = new Player();
      player2.getZ();
      float float0 = Player.TOLERANCE;
      player2.setJoinOK(player0, true);
      assertEquals(49.0F, player0.getY(), 0.01F);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player2.reset(false);
      Player player3 = new Player((byte)0, "aF<nC[B*5iIx66woIA", 1);
      player3.isBoss();
      assertEquals(0L, player3.getTimeOfDeath());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(6912, "", "", 1280);
      player0.getSubparty();
      player0.setDead(0L, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      player0.setZ(380.99347F);
      player0.getY();
      player0.toString();
      assertEquals(380.99347F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-9);
      int int0 = Packable.PLAYER;
      Player player0 = new Player();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)4;
      player0.unpack(byteArray1);
      Player player1 = new Player((-2966), "", 793);
      assertEquals(793, player1.getPictureId());
      
      player0.unpack(byteArray0);
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("Player-1", player0.getName());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player(829, "gui.ModuleBrowserDialog$ModuleFilter", "gui.ModuleBrowserDialog$ModuleFilter", 0);
      player0.getTimeOfDeath();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)5;
      player0.getPictureId();
      player0.setDead();
      player0.getTimeOfDeath();
      player0.getTimeOfDeath();
      player0.reset(false);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      player0.setY((byte)27);
      player0.setMoney((-1061.13F));
      player0.head = null;
      player0.pack();
      player0.setDead();
      Player player1 = new Player(996, "7X<=BpV", 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[4];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) player1;
      objectArray0[2] = (Object) (byte)27;
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "Player.unpack(): *** WARNING *** data is not of proper type!", objectArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      player0.pack(dataOutputStream0);
      player0.getX();
      player0.getY();
      float float0 = player0.getZ();
      assertEquals((-1061.13F), player0.getMoney(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&ZJ]MG8'|NbHu");
      float float0 = Player.TOLERANCE;
      Player player0 = new Player(746, "y3Kt0~-B.jpH!WJqR", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 1174, 4919);
      player0.getZ();
      Player player1 = (Player)player0.gangBoss();
      player0.getY();
      Player player2 = new Player((-452), "", "", 4919, 10);
      Player player3 = new Player((-195), "", (-452));
      Player player4 = new Player();
      player4.setConnected(false);
      player4.getX();
      assertFalse(player4.isConnected());
      
      player3.getY();
      Player player5 = new Player((short)4919, "YD/9^iP$^D yk?Ea<", (-3332));
      player5.isJoinOK(player1, false);
      float float1 = player3.getX();
      assertTrue(player3.isConnected());
      assertEquals(10.0F, float1, 0.01F);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-9);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      byteArrayInputStream1.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (byte)103, (byte)103);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray0);
      Player player0 = new Player(4919, "", "", 55, (byte) (-9));
      player0.reset(true);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-9), player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      
      Player player1 = new Player(2024, "", (-1));
      player1.isBoss();
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals((-1), player1.getPictureId());
      assertEquals(1, player1.getStrength());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertTrue(player1.isConnected());
  }
}
