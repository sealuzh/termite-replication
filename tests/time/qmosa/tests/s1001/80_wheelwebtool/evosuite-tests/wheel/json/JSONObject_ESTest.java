/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:03:37 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2675632284814613
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.658396838547533
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.valueToString("Null key.", 612, (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", "\"java.lang.String@0000000001\"");
      jSONObject1.optBoolean("\"java.lang.String@0000000001\"", true);
      jSONObject0.has("\"java.lang.String@0000000001\"");
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.String@0000000001\"", (Map) hashMap0);
      int int0 = new Integer(612);
      jSONObject0.toString((-4895));
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      hashMap1.clone();
      String string0 = "'xd9PS7boF>{\"l8.";
      jSONObject2.optString(">7zYg$", "'xd9PS7boF>{\"l8.");
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7433655074616246
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      int int0 = 0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.put("istoLowerCase", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      jSONObject1.toString(0);
      JSONObject.quote("iscopyValueOf");
      JSONTokener jSONTokener0 = new JSONTokener("istoLowerCase");
      try { 
        jSONObject2.getJSONObject("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1123103344201821
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      JSONObject.doubleToString((-446.71));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0235102564045175
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.keys();
      jSONObject0.names();
      Byte.valueOf((byte)42);
      String string0 = "JSON does not allow non-finite numbers.";
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>((byte)42, (byte)42);
      hashMap1.put(jSONObject0, (String) null);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7090474693801871
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(Double.NaN);
      JSONObject.quote("xm$]");
      Float float1 = new Float(272.6);
      hashMap0.put(float1, "{}");
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8010864011755308
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{6+";
      JSONObject jSONObject0 = new JSONObject("8^", stringArray0);
      jSONObject0.optLong("");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      jSONObject1.optJSONArray("\f");
      jSONObject0.toString(3075);
      JSONObject.quote("JSONArray initial value should be a string or collection or array.");
      JSONTokener jSONTokener0 = new JSONTokener("{6+");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {6+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7991590592395394
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.put("-%\"C(_F{MZtsz`", (Object) boolean0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.optLong("}AF");
      Object object0 = JSONObject.NULL;
      String string0 = "istoLowerCase";
      JSONObject jSONObject2 = jSONObject1.put("va", (Collection) linkedList0);
      jSONObject0.optBoolean("va", true);
      jSONObject2.optJSONArray("-%\"C(_F{MZtsz`");
      jSONObject0.toString(8);
      JSONObject.quote("{\n        \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n        \"java.lang.String@0000000006\": []\n}");
      String string1 = "N#w^z\"&Dt:L-\\.";
      JSONTokener jSONTokener0 = new JSONTokener("N#w^z\"&Dt:L-.");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of N#w^z\"&Dt:L-.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0254950707589163
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      hashMap0.remove((Object) "4");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte.toUnsignedInt((byte) (-10));
      Byte byte0 = new Byte((byte)93);
      Byte.toUnsignedInt((byte)10);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Byte.toUnsignedLong((byte) (-10));
      String string0 = "U 7a;?+o";
      JSONObject jSONObject1 = jSONObject0.put("U 7a;?+o", (double) 10);
      linkedList0.add((Object) "4");
      linkedList0.listIterator();
      String string1 = "\\f";
      jSONObject1.append("\f", hashMap0);
      jSONObject1.get("U 7a;?+o");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1059043078848685
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(4203L);
      String[] stringArray0 = new String[5];
      Long.compare(0L, (-1L));
      stringArray0[0] = "] not found.";
      stringArray0[1] = "bWsLT.R&Z=(L8";
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(0.0);
      JSONObject.quote("] is not a JSONObject.");
      hashMap0.put(float0, "~9X-KUZ^(t@c*;e");
      JSONObject.numberToString(long0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject0.optString("] not found.", "H\"'");
      try { 
        jSONObject1.get("K=//+`i9Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K=//+`i9Q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.46922219190274
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.logicalOr(true, true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(3);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = "gD?i5LD\\b;=~!jo`\"";
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)5);
      JSONObject jSONObject2 = jSONObject1.append("gD?i5LD\b;=~!jo`\"", object0);
      StringWriter stringWriter0 = new StringWriter(786);
      stringWriter0.close();
      stringWriter0.append((CharSequence) "gD?i5LD\b;=~!jo`\"");
      jSONObject2.write(stringWriter0);
      try { 
        jSONObject1.getLong("gD?i5LD\b;=~!jo`\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gD?i5LD\\b;=~!jo`\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8811164148443824
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject.getNames(jSONObject0);
      Integer integer0 = new Integer(125);
      Integer.getInteger("", integer0);
      jSONObject0.put("{}", false);
      jSONObject0.remove(",(M&S(jF)");
      Short short0 = new Short((short)101);
      JSONObject jSONObject1 = jSONObject0.append("", (Object) null);
      jSONObject1.toString((int) (short)101, 125);
      StringWriter stringWriter0 = new StringWriter(60);
      stringWriter0.append((CharSequence) "{\n                                                                                                                                                                                                                                  \"java.lang.String@0000000007\": [null],\n                                                                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005\n                                                                                                                             }");
      try { 
        jSONObject1.getInt(",(M&S(jF)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",(M&S(jF)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "FB]{3Lq?";
      try { 
        jSONObject0.getString("FB]{3Lq?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FB]{3Lq?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.453204513483138
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3);
      JSONObject.quote("{}");
      JSONTokener jSONTokener0 = new JSONTokener("B6<I(H,e*k4Z|");
      JSONObject.quote("\"{}\"");
      JSONTokener jSONTokener1 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{}";
      stringArray0[1] = "\"{}\"";
      stringArray0[2] = "B6<I(H,e*k4Z|";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      stringArray0[5] = "{}";
      stringArray0[6] = "\"\"{}\"\"";
      stringArray0[7] = "wheel.json.JSONObject";
      stringArray0[8] = "B6<I(H,e*k4Z|";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject("\"\"{}\"\"", stringArray0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject4 = jSONObject3.put("zD8vq'Bfm>sUH)R}", (Collection) linkedList0);
      assertNotSame(jSONObject4, jSONObject1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3704674350320656
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = new Boolean(false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1L));
      jSONObject1.optDouble("gD?i5LD\b;=~!jo`\"", (-1.9790171127685992));
      jSONObject1.isNull("<,Bv+~f{+BQ:FPK0\"7");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.put("/Xp:u-21sH4", (Object) null);
      jSONObject1.optString("<,Bv+~f{+BQ:FPK0\"7");
      try { 
        jSONObject1.getJSONObject("/Xp:u-21sH4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/Xp:u-21sH4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.161333047314143
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`vn4");
      jSONTokener0.nextTo('f');
      jSONTokener0.nextClean();
      jSONTokener0.next();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      jSONObject0.optLong("] not found/.", (long) '\u0000');
      Short short0 = new Short((short)2);
      long long0 = jSONObject0.optLong("[]");
      assertEquals(0L, long0);
      
      Short short1 = new Short((short)32);
      jSONObject0.put("R2@90sPBLtW", (Object) null);
      String string0 = jSONObject0.optString("L(-MQ}<s1W^JhGe[`g");
      assertEquals("", string0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8354858672782965
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "max";
      stringArray0[1] = "Null key.";
      stringArray0[2] = "Null key.";
      stringArray0[3] = "Null key.";
      stringArray0[4] = "Null key.";
      stringArray0[5] = "iscopyValueOf";
      stringArray0[6] = "Null key.";
      stringArray0[7] = "Null key.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("getsplit", (-905L));
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject2, 3, 3);
      JSONObject.quote((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("Null key.");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Null key.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0333695750477134
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("*");
      jSONObject0.toString(3);
      JSONObject.quote("{}");
      JSONTokener jSONTokener0 = new JSONTokener("B6<I(H,e*k4Z|");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of B6<I(H,e*k4Z|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.108335652604384
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("max", 0L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      String string0 = "tri";
      jSONObject1.optLong("tri", 0L);
      jSONObject1.getDouble("max");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.730441437025541
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      int int0 = 0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      jSONObject1.put("istoLowerCase", (Collection) linkedList0);
      String string0 = null;
      jSONObject1.optJSONArray((String) null);
      jSONObject1.toString(0);
      String string1 = "+9y[#5";
      JSONTokener jSONTokener0 = new JSONTokener("+9y[#5");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of +9y[#5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3899979513291667
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("max", 0L);
      String string0 = "Klq1c\"^2D/It";
      jSONObject0.putOpt("Klq1c\"^2D/It", jSONObject1);
      // Undeclared exception!
      jSONObject0.toString(3);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6104277828382263
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("(zZ'^pYwD:@%8I~\"n", (Map) hashMap0);
      jSONObject0.names();
      jSONObject0.toString(4549);
      JSONObject.quote("&!IR$O:zs9/K+a-uN\"A");
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      jSONObject0.optLong("{\"java.lang.String@0000000004\": {}}", 0L);
      jSONObject1.toString(4549);
      try { 
        jSONObject0.getDouble("joi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"joi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.575318144587253
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = new Boolean(false);
      Boolean.compare(true, true);
      Boolean.getBoolean("ma");
      Boolean.logicalOr(false, false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "gD?i5LD\\b;=~!jo`\"";
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      Short short0 = new Short((short)1826);
      JSONObject jSONObject1 = jSONObject0.append("gD?i5LD\b;=~!jo`\"", short0);
      jSONObject1.toString(0, 747);
      StringWriter stringWriter0 = new StringWriter((short)1826);
      stringWriter0.append((CharSequence) "gD?i5LD\b;=~!jo`\"");
      try { 
        jSONObject1.getInt("gD?i5LD\b;=~!jo`\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gD?i5LD\\b;=~!jo`\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.637525016918062
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = new Boolean(false);
      Boolean.compare(false, false);
      Boolean.logicalOr(false, false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "gD?i5LD\\b;=~!jo`\"";
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1L));
      jSONObject0.toString(87);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      hashMap1.clone();
      String string1 = "E>778:l";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("gD?i5LD\b;=~!jo`\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of gD?i5LD\b;=~!jo`\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7540298966049588
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      jSONTokener0.next();
      String string0 = "ZZ%@cOEP";
      JSONObject jSONObject0 = new JSONObject((Object) "`n|4");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2002025435261348
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "J(";
      stringArray0[1] = "Vz#M+1uL";
      stringArray0[2] = "000";
      stringArray0[3] = "co";
      stringArray0[4] = "htw:O0PaAoc*MF";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("htw:O0PaAoc*MF", (Map) hashMap0);
      jSONObject1.optDouble("Vz#M+1uL", 892.773694161667);
      try { 
        jSONObject0.getBoolean("Vz#M+1uL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Vz#M+1uL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.642643240864123
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "Null key.";
      int int0 = (-4895);
      JSONObject.valueToString("Null key.", 612, (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", (Object) null);
      jSONObject1.optBoolean("\"java.lang.String@0000000001\"", true);
      jSONObject0.has("\"java.lang.String@0000000001\"");
      String string1 = "";
      String string2 = "ZZ%@cOEP";
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.String@0000000001\"", (Map) hashMap0);
      jSONObject2.optLong("ZZ%@cOEP");
      try { 
        jSONObject0.getDouble("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9042552998214495
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "OntIO>n,?w";
      int int0 = 121;
      Integer integer0 = new Integer(121);
      jSONObject0.accumulate("OntIO>n,?w", integer0);
      try { 
        jSONObject0.getJSONArray("OntIO>n,?w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OntIO>n,?w\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1123579782134505
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      int int0 = 87;
      Integer integer0 = new Integer(87);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "gD?i5LD\\b;=~!jo`\"";
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      Short short0 = new Short((short)1826);
      jSONObject0.append("gD?i5LD\b;=~!jo`\"", short0);
      JSONObject.getNames((Object) null);
      String string1 = "<,Bv+~f{+BQ:FPK0\"7";
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1L));
      jSONObject1.optDouble("gD?i5LD\b;=~!jo`\"", (-1.0));
      jSONObject1.isNull("<,Bv+~f{+BQ:FPK0\"7");
      jSONObject0.optDouble("Missing value");
      jSONObject0.remove("isforEach");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.150258414113405
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(974.15F);
      hashMap0.put(float0, "id:C\"/e");
      Float.isFinite(974.15F);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      hashMap0.put(float0, ",s|");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Short short0 = new Short((short) (-1823));
      Integer integer0 = new Integer(92);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      String string0 = jSONObject0.optString("gettoUpperCase");
      assertEquals("", string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8428538591110257
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K%VmS$iKrXB!@";
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.put("istoLowerCase", (Collection) linkedList0);
      jSONObject1.optJSONArray((String) null);
      jSONObject1.toString(0);
      JSONObject.valueToString(jSONObject2);
      JSONTokener jSONTokener0 = new JSONTokener("istoLowerCase");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of istoLowerCase
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2483520001785187
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 612;
      JSONObject.valueToString("Null key.", 612, (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.replace(boolean0, (Integer) null, (Integer) null);
      jSONObject0.accumulate("Null key.", "\"java.lang.String@0000000001\"");
      JSONObject.getNames(jSONObject0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      // Undeclared exception!
      try { 
        function2.andThen((Function<? super String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2050510283746196
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("(IuN.j:V]%`", "");
      jSONObject0.optBoolean("re", true);
      jSONObject1.has("(IuN.j:V]%`");
      try { 
        jSONObject0.getJSONArray("44J-<?4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"44J-<?4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0885413054769146
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("istoLowerCase", (Collection) linkedList0);
      jSONObject1.optJSONArray("istoLowerCase");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.sort((Comparator<? super Object>) null);
      jSONObject0.optLong(",\n", 1323L);
      try { 
        jSONObject0.getDouble(".xr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".xr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2684032265548564
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "MiO7>/i>@";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      String string0 = "{6+";
      stringArray0[3] = "{6+";
      stringArray0[4] = "8^";
      stringArray0[5] = "42J0bY>hM<=2E+4u";
      stringArray0[6] = "\t";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      jSONObject0.optLong("000");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("CNHi1&\"*JJo?V", (Collection) linkedList0);
      jSONObject1.optJSONArray("MiO7>/i>@");
      JSONObject.quote("MiO7>/i>@");
      JSONTokener jSONTokener0 = new JSONTokener("42J0bY>hM<=2E+4u");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 42J0bY>hM<=2E+4u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4052875356303094
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "Null key.";
      int int0 = 609;
      int int1 = (-4895);
      JSONObject.valueToString("Null key.", 609, (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", "\"java.lang.String@0000000001\"");
      jSONObject1.optBoolean("\"java.lang.String@0000000001\"", true);
      jSONObject0.has("\"java.lang.String@0000000001\"");
      String string1 = "";
      hashMap0.clone();
      jSONObject1.optString("wL.(YJ)\"}");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8811868923448203
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K%VmS$iKrXB!@";
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.putOpt("K%VmS$iKrXB!@", integer0);
      Integer.compare((-1253), (-1253));
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer1 = new Integer(0);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(integer1, boolean0);
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject1.remove("Expected '");
      JSONObject jSONObject4 = jSONObject2.put("gD?i5LD\b;=~!jo`\"", (long) (-1253));
      String[] stringArray0 = new String[11];
      stringArray0[0] = "<,Bv+~f{+BQ:FPK0\"7";
      JSONObject jSONObject5 = new JSONObject((Object) jSONObject4, stringArray0);
      jSONObject5.optDouble("jO9X8oHrj\"aNXjmg(K", 0.0);
      jSONObject4.isNull("C\"GWk~:?AJf~");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "Expected '", 45, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "isisNaN";
      stringArray0[1] = "5<ESOh>jh2";
      stringArray0[2] = "] is not a JSONArray.";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.put("] is not a JSONArray.", 45);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4633638455031264
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-4895);
      JSONObject.valueToString("Null key.", 612, (-4895));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", "\"java.lang.String@0000000001\"");
      jSONObject1.optBoolean("\"java.lang.String@0000000001\"", false);
      jSONObject0.has("\"java.lang.String@0000000001\"");
      jSONObject0.put("\"java.lang.String@0000000001\"", (Map) hashMap0);
      try { 
        jSONObject1.getInt("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0265468870610652
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject("] is not a Boolean.", stringArray0);
      jSONObject0.toString(13, 13);
      jSONObject0.optLong((String) null, 0L);
      jSONObject0.put("", true);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      String string1 = "";
      String string2 = "] is not a Boolean.";
      String[] stringArray0 = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2674732802492175
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "K%VmS$iKrXB!@";
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      int int0 = 0;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("K%VmS$iKrXB!@");
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      JSONObject jSONObject2 = jSONObject1.put("istoLowerCase", (Collection) linkedList0);
      String string1 = null;
      jSONObject1.optJSONArray((String) null);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      jSONObject0.optLong(",\n", 0L);
      try { 
        jSONObject2.getDouble("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4854314599954828
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalOr(false, false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "gD?i5LD\\b;=~!jo`\"";
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)59);
      JSONObject jSONObject1 = jSONObject0.append("gD?i5LD\b;=~!jo`\"", short0);
      StringWriter stringWriter0 = new StringWriter((short)59);
      stringWriter0.append((CharSequence) "gD?i5LD\b;=~!jo`\"");
      jSONObject1.write(stringWriter0);
      try { 
        jSONObject1.getLong("=c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=c\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.991744575772164
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "Jonr=r9lke0:";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte.toUnsignedInt((byte)5);
      Byte.toUnsignedInt((byte)5);
      Byte byte0 = new Byte((byte)5);
      Byte.toUnsignedInt((byte)10);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedLong((byte)14);
      JSONObject jSONObject1 = jSONObject0.put("Jonr=r9lke0:", (double) (byte)5);
      try { 
        jSONObject1.append("Jonr=r9lke0:", "Jonr=r9lke0:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Jonr=r9lke0:] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1020198631306997
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "] is not a Boolean.";
      String string0 = "\\u";
      stringArray0[5] = string0;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("", true);
      try { 
        jSONObject0.getInt("'<?j<~y.,>hgVWO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'<?j<~y.,>hgVWO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Object object0 = new Object();
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4678926265684122
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      HashMap<Short, Byte> hashMap1 = new HashMap<Short, Byte>(2160);
      jSONObject1.put("8%hmOXyel(", (Map) hashMap0);
      int int0 = jSONObject1.optInt("8%hmOXyel(", 1);
      assertEquals(3, jSONObject0.length());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "`n|4";
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      jSONTokener0.nextClean();
      jSONTokener0.next();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 3 of `n|4
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.16000987417804
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer(23);
      Integer.getInteger("gD?i5LD\b;=~!jo`\"", (Integer) null);
      JSONObject jSONObject1 = jSONObject0.put("gD?i5LD\b;=~!jo`\"", false);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>(2984);
      hashMap1.put(jSONObject1, (Integer) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Map) hashMap0);
      jSONObject1.optLong("A JSONArray text must start with '['");
      Short short0 = new Short((short) (-776));
      jSONObject0.put("getclear", (Object) "R2@90sPBLtW");
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Byte byte0 = Byte.valueOf((byte)124);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      String string0 = "2G/,";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7213192226263727
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 3;
      JSONObject.valueToString(jSONObject0, 3, 3);
      try { 
        jSONObject0.get("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8878803926846093
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter(0);
      Long long0 = new Long((-377L));
      String string0 = JSONObject.valueToString(long0, 0, (-558));
      Object object1 = new Object();
      String string1 = JSONObject.valueToString("java.lang.Long@0000000001");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4791512914597686
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(4203L);
      Float float0 = new Float((double) 4203L);
      String[] stringArray0 = new String[5];
      Float.max((-1070.57F), (-1070.57F));
      stringArray0[0] = "] not found.";
      stringArray0[1] = "getvalueOf";
      stringArray0[2] = "\r";
      stringArray0[3] = "7.;7x{6a0";
      stringArray0[4] = "getjoin";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.putOpt("sum", "getvalueOf");
      jSONObject2.optJSONObject("Expected '");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1571704053558287
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "y^:*-pRDa{J\\$~9h";
      jSONObject0.optJSONArray("y^:*-pRDa{J$~9h");
      jSONObject0.optInt("y^:*-pRDa{J$~9h", (-1349));
      jSONObject0.optInt("z_{B2SNq*},jAj");
      jSONObject0.length();
      jSONObject0.optBoolean("z_{B2SNq*},jAj", true);
      String string1 = "t\\N__*\"`?f";
      jSONObject0.has("tN__*\"`?f");
      String string2 = "";
      try { 
        jSONObject0.getJSONArray("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.8388421358918872
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = "\\u";
      JSONObject.quote(string0);
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("istoUnsignedInt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of istoUnsignedInt
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(3655);
      JSONTokener jSONTokener0 = new JSONTokener("wIq3Q0)B(k");
      jSONTokener0.next();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(Double.NaN);
      Float float1 = new Float(2046.5F);
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      String string0 = "getshortValue";
      hashMap1.put((Float) null, "getshortValue");
      Float float2 = new Float((double) 3655);
      hashMap0.put(float2, (String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6377484057048801
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Float float0 = new Float(2969.1F);
      hashMap0.put(float0, "( 4s%g");
      Byte byte0 = Byte.valueOf((byte)124);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function2 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function2);
      hashMap0.computeIfAbsent(hashMap0, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.146037960447758
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte.toUnsignedInt((byte)5);
      Byte.toUnsignedInt((byte)5);
      Byte byte0 = new Byte((byte)5);
      Byte.toUnsignedInt((byte)10);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedLong((byte)14);
      jSONObject0.remove("Jonr=r9lke0:");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Jonr=r9lke0:";
      stringArray0[1] = "Jonr=r9lke0:";
      stringArray0[2] = "Jonr=r9lke0:";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.510578142901468
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "";
      jSONObject0.optDouble("");
      jSONObject0.toString();
      jSONObject0.opt("{}");
      jSONObject0.remove("");
      jSONObject0.optLong("{}", (-1557L));
      jSONObject0.optInt("");
      int int0 = 3224;
      String string1 = "] not found.";
      try { 
        jSONObject0.getJSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.921709372124786
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      StringWriter stringWriter0 = new StringWriter(12);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getInt(")vx:)\"wd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")vx:)\\\"wd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9590960964240387
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getBoolean("T<?QD8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"T<?QD8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.2535606103408536
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(121);
      jSONObject0.accumulate("OntIO>n,?w", integer0);
      assertEquals(1, jSONObject0.length());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      Double double0 = new Double((-1.0));
      JSONObject jSONObject1 = new JSONObject(object0);
      int int0 = jSONObject1.optInt("true");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      hashMap1.put((Float) null, "\"\"");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap1.replaceAll(biFunction0);
      HashMap<Float, String> hashMap2 = new HashMap<Float, String>();
      Float float0 = new Float(0.0);
      hashMap2.put(float0, "{");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((byte)124);
      jSONObject0.putOpt("\"\"", short0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6849977135014758
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`vn4");
      jSONTokener0.nextTo('f');
      jSONTokener0.nextClean();
      jSONTokener0.next();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optLong("] not found.", (long) '\u0000');
      Short short0 = new Short((short)2);
      try { 
        jSONObject0.get("`vn4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`vn4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Short short0 = new Short((short) (-236));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XHmK|n$4$P$kAWhLUm_";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.getDouble("q{vI5)`hn-.n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q{vI5)`hn-.n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.950089105224377
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.getBoolean("Unterminated string");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.logicalXor(false, false);
      Boolean.logicalXor(false, true);
      try { 
        jSONObject0.getJSONArray("g+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Integer integer0 = new Integer(3667);
      Integer.min(3667, (-1208));
      JSONObject.numberToString(integer0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("java.lang.Integer@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of java.lang.Integer@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.9678021271224706
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      Float.min(3373.7324F, (-821.927F));
      JSONObject.testValidity(float0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      hashMap0.put((Float) null, "id:C\"/e");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      hashMap0.put(float0, ",s|");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("Bs`/k|g^I", float0);
      jSONObject0.keys();
      String string0 = JSONObject.valueToString(",s|");
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`n|4");
      jSONTokener0.nextClean();
      jSONTokener0.next();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.7915172102530157
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.keys();
      jSONObject0.names();
      Boolean.logicalOr(false, false);
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap1.forEach(biConsumer0);
      Integer integer0 = new Integer(985);
      Boolean boolean0 = Boolean.valueOf("is");
      hashMap1.put(integer0, boolean0);
      HashMap<JSONObject, Double> hashMap2 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      jSONObject1.remove("gD?i5LD\b;=~!jo`\"");
      jSONObject0.put("is", 0L);
      jSONObject1.optDouble("<,Bv+~f{+BQ:FPK0\"7", 2535.6228759877);
      jSONObject0.isNull("is");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = stringWriter2.append('Y');
      // Undeclared exception!
      try { 
        stringWriter3.append((CharSequence) "<,Bv+~f{+BQ:FPK0\"7", (int) (byte)42, 38);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.3128868859883
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      hashMap1.put((Float) null, "\"\"");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap1.replaceAll(biFunction0);
      HashMap<Float, String> hashMap2 = new HashMap<Float, String>();
      Float float0 = new Float(0.0);
      hashMap2.put(float0, "{");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter((byte)124);
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject0.write(writer0);
      Short short0 = new Short((byte)124);
      jSONObject0.putOpt("\"\"", short0);
      String[] stringArray0 = new String[16];
      stringArray0[0] = "\"\"";
      stringArray0[1] = "\"\"";
      stringArray0[2] = "\"\"";
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.159479161922104
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Jonr=r9lke-:";
      JSONObject jSONObject1 = jSONObject0.put("Jonr=r9lke-:", (Object) "Jonr=r9lke-:");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.optLong("");
      linkedList0.add((Object) jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("*", (Collection) linkedList0);
      jSONObject1.optJSONArray("Jonr=r9lke-:");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      jSONObject2.optLong(",\n", (-1171L));
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.9576699287932238
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Byte byte0 = Byte.valueOf((byte)124);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function2 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function3);
      function1.compose((Function<? super Integer, ?>) function2);
      hashMap0.computeIfAbsent((Object) null, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("IwT0`x%+KG})ZH%A", (Map) hashMap0);
      HashMap<JSONObject, JSONArray> hashMap1 = new HashMap<JSONObject, JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      hashMap1.put(jSONObject0, jSONArray0);
      jSONObject1.remove("Bad value from toJSONString: ");
      try { 
        jSONObject0.getJSONObject("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.1197089110687943
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`vn4");
      jSONTokener0.nextTo('f');
      jSONTokener0.nextClean();
      jSONTokener0.next();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1.0));
      Integer integer0 = new Integer(3012);
      JSONObject jSONObject1 = new JSONObject(integer0);
      assertEquals(1, jSONObject1.length());
      
      int int0 = jSONObject0.optInt("true");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.4431516528919306
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.keys();
      jSONObject0.names();
      String string0 = "&!IR$O:zs9/K+a-uN\"A";
      jSONObject0.optDouble("&!IR$O:zs9/K+a-uN\"A");
      JSONObject.doubleToString(Double.NaN);
      String string1 = "";
      jSONObject0.optLong("", 0L);
      jSONObject0.optInt("null");
      int int0 = 3224;
      String string2 = "] not found.";
      try { 
        jSONObject0.getJSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getdecode";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
