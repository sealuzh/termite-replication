/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:39:20 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7845297317975346
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("WS+");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "WS+");
      mockFile1.setExecutable(true);
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder4.build();
      boolean boolean0 = fileIterator0.hasNext();
      assertFalse(boolean0);
      
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder4.build();
      fileIterator1.getNextFile();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder3.build();
      fileIterator2.updateFileIterator(mockFile0);
      fileIterator1.iterator();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.71940386828107
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vWS+");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "vWS+");
      mockFile1.setExecutable(true);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      File file1 = MockFile.createTempFile("vWS+", "org.jcvi.jillion.core.util.MultipleFileFilter", (File) null);
      file0.setReadable(false, true);
      FileIterator.createBreadthFirstFileIteratorBuilder(file1);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      linkedList0.iterator();
      multipleFileFilter0.accept(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.spliterator();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      fileIterator2.next();
      fileIterator0.setUpInitialState(file1);
      assertFalse(file1.isHidden());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.523032636568047
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vWS+");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "vWS+");
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.updateFileIterator(mockFile1);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile2 = new MockFile(mockFile1, "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter");
      fileIterator0.setUpInitialState(mockFile2);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile2);
      fileIterator1.getNextFile();
      URI uRI0 = MockURI.URI("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter");
      MockFile mockFile3 = null;
      try {
        mockFile3 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.8024086582803833
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      mockFile0.getAbsolutePath();
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      MockFile mockFile2 = new MockFile(mockFile1, "");
      fileIterator1.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder3.build();
      fileIterator2.hasNext();
      fileIterator1.getNextFile();
      fileIterator_FileIteratorBuilder2.build();
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder2.build();
      // Undeclared exception!
      try { 
        fileIterator3.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.573661542340761
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      MockFile mockFile1 = new MockFile(">T!QrUR");
      fileIterator1.getNextFile();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.updateFileIterator(mockFile1);
      fileIterator1.iterator();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5502100577274933
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      boolean boolean0 = true;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      boolean boolean1 = false;
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.build();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4719476941754683
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setExecutable(false);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator0.hasNext();
      MockFile mockFile2 = new MockFile(mockFile0, "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter");
      String string0 = "";
      fileIterator0.getNextFile();
      fileIterator0.next();
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.384942945080901
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.setUpInitialState(mockFile0);
      String string0 = "xs\"5zU51s!s)lVa|(";
      String string1 = "rn-<s-mmc!a`%8";
      try { 
        MockURI.URI("#|J }+", "", "rn-<s-mmc!a`%8", "xs\"5zU51s!s)lVa|(", "#|J }+");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: #|J }+://rn-%3Cs-mm%7Fc!a%60%258?xs%225zU51s!s)lVa%7C(#%23%7CJ%20%7D+
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4998725736231178
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vWS+");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "vWS+");
      mockFile1.setExecutable(true);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile1);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter2);
      fileIterator_FileIteratorBuilder2.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter4.accept(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter0);
      assertSame(fileIterator_FileIteratorBuilder3, fileIterator_FileIteratorBuilder0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.566272112128248
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vWS+", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "vWS+");
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      multipleFileFilter0.accept(mockFile1);
      mockFile0.setExecutable(true);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      multipleFileFilter0.accept(mockFile1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter2);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.iterator();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.628729508714239
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.hasNext();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      mockFile0.toURL();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      fileIterator0.getNextFile();
      fileIterator_FileIteratorBuilder3.includeHiddenFiles(false);
      fileIterator0.iterator();
      fileIterator1.hasNext();
      fileIterator0.getNextFile();
      FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.472941222955972
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFixeFilter");
      MockFile mockFile1 = new MockFile(mockFile0, "org.jcvi.jillion.core.util.FileIterator$NonHiddenFixeFilter");
      mockFile1.mkdirs();
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFixeFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFixeFilter", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      try { 
        MockURI.URI("iy\"F$$irR", "", "", 2, "org.jcvi.jillion.core.util.FileIterator$NonHiddenFixeFilter", "iy\"F$$irR", "e|F|d$w(v)I#w}\"}9vL");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: iy\"F$$irR://@:2org.jcvi.jillion.core.util.FileIterator$NonHiddenFixeFilter?iy%22F$$irR#e%7CF%7Cd$w(v)I%23w%7D%22%7D9vL
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5204422646565736
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vWS+");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "vWS+");
      mockFile1.setExecutable(true);
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      fileIterator0.hasNext();
      fileIterator0.getNextFile();
      fileIterator0.next();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      assertTrue(fileIterator1.hasNext());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3877285158408132
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile((File) null, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.449191882584089
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileFilter fileFilter0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.46978469314811
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter";
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter");
      mockFile0.mkdirs();
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (String) null, (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      String string1 = "";
      String string2 = "";
      int int0 = 2;
      try { 
        MockURI.URI("iy\"F$$irR", "", "", 2, "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "iy\"F$$irR", "e|F|d$w(v)I#w}\"}9vL");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: iy\"F$$irR://@:2org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter?iy%22F$$irR#e%7CF%7Cd$w(v)I%23w%7D%22%7D9vL
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1548152736248642
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vWS+");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "vWS+");
      MockFile.createTempFile(",].YW", ".", (File) mockFile0);
      mockFile1.mkdirs();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("vWS+/vWS+");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      multipleFileFilter0.accept(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile2 = null;
      try {
        mockFile2 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3912056362296994
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter";
      String string1 = "vWS+";
      MockFile mockFile0 = new MockFile("vWS+");
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>(linkedList0);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder1.build();
      String string2 = "org.jcvi.jillion.core.util.FileIterator$NullFileFilter";
      String string3 = "w}sWsgPn+ s}`7j";
      String string4 = "";
      try { 
        MockURI.URI("vWS+", "org.jcvi.jillion.core.util.FileIterator$NullFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (-1), "", "w}sWsgPn+ s}`7j", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in hostname at index 101: vWS+://org.jcvi.jillion.core.util.FileIterator$NullFileFilter@org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter?w%7DsWsgPn+%20s%7D%607j#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "y*`+(I!$V]~2ZR";
      MockFile mockFile0 = new MockFile("vWS+");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "vWS+");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.412169815397479
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.hasNext();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      fileIterator1.hasNext();
      fileIterator0.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.574464215715726
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileFilter fileFilter0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.fileFilter((FileFilter) null);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4242123291251714
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter");
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.build();
      String string0 = null;
      String string1 = "iy\"F$$irR";
      int int0 = 2;
      try { 
        MockURI.URI("iy\"F$$irR", "", "", 2, "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "iy\"F$$irR", "e|F|d$w(v)I#w}\"}9vL");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: iy\"F$$irR://@:2org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter?iy%22F$$irR#e%7CF%7Cd$w(v)I%23w%7D%22%7D9vL
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.692145995017427
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.hasNext();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.build();
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2743627145740812
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.cre.utilFileIterato$NonHiddenFileFilter");
      mockFile0.deleteOnExit();
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.336079193021304
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("vWS+");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "vWS+");
      String string0 = "X9$G>~WrR0<uSBd22q)";
      String string1 = "";
      MockFile.createTempFile("X9$G>~WrR0<uSBd22q)", "", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.build();
      String string2 = "";
      String string3 = "!;Xf:2@G']HTy6";
      try { 
        MockURI.URI("19y M", "", "", (-1025), "", "V]", "!;Xf:2@G']HTy6");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 19y M://@:-1025?V]#!;Xf:2@G']HTy6
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter";
      MockFile mockFile0 = new MockFile("vWS+");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "vWS+");
      mockFile1.setExecutable(true);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3360791930213036
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter";
      MockFile mockFile0 = new MockFile("vWS+");
      mockFile0.deleteOnExit();
      MockFile mockFile1 = new MockFile(mockFile0, "vWS+");
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", (File) mockFile1);
      mockFile1.toURI();
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter", "org.jcvi.jillion.core.util.FileIterator$NonHiddenFileFilter");
      file0.setExecutable(false);
      mockFile1.getAbsolutePath();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.build();
      MultipleFileFilter multipleFileFilter0 = null;
      try {
        multipleFileFilter0 = new MultipleFileFilter((FileFilter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      boolean boolean0 = false;
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }
}
