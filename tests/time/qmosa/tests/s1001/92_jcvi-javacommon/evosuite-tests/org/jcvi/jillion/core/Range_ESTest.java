/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:03:08 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8604848037787267
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-18L), 0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.isEmpty();
      boolean boolean0 = range1.isEmpty();
      assertFalse(boolean0);
      
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range3 = Range.of((-18L));
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.expandEnd((-18L));
      Range.CoordinateSystem.values();
      List<Range> list0 = range3.complement(range2);
      assertTrue(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 1L, 0L);
      boolean boolean1 = range2.intersects(range4);
      assertTrue(range4.isEmpty());
      
      boolean boolean2 = range3.intersects(range2);
      assertFalse(range2.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertSame(range3, range0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.866408370469375
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range.Builder range_Builder0 = new Range.Builder(1L, 65535L);
      range_Builder0.expandBegin(1L);
      Range range2 = Range.of(65535L);
      Range.Builder range_Builder1 = new Range.Builder(1L);
      range_Builder0.expandEnd((-20L));
      Range.CoordinateSystem.values();
      List<Range> list0 = range1.complement(range2);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(1L, 65535L);
      assertNotSame(range3, range0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.913583924261175
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range.of((-4639L), (-4639L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4639L), (-4639L));
      range1.toString();
      range0.split(6953L);
      Range range2 = range0.intersection(range1);
      range2.getEnd();
      range2.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(0L, (-2021L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.005782628314336
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-78L), (-78L));
      Range range0 = Range.of(range_CoordinateSystem0, 777L, 777L);
      range0.toString();
      Range range1 = Range.of((-78L));
      Range range2 = range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-130L), 9223372034707292163L);
      // Undeclared exception!
      try { 
        Range.of(797L, (-181L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.9167250563294584
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range_Builder1.expandBegin(210L);
      range0.split(210L);
      Long long0 = new Long((-132L));
      Range.of((-760L));
      range0.equals((Object) null);
      range0.getEnd();
      Range range1 = Range.ofLength(0L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.099528064602127
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of((-4639L), (-4639L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-4639L), 2147483647L);
      range1.toString();
      range2.split(2147480197L);
      long long0 = 3581L;
      Range range3 = range0.intersection(range1);
      Range.of(16L);
      Range.of(9223372036854768855L);
      range2.equals(range3);
      // Undeclared exception!
      try { 
        Range.of(2147480197L, 16L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.298155571027304
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-78L);
      Range range0 = Range.of(range_CoordinateSystem0, (-78L), (-78L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.7353394876411743
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of(6953L, 65535L);
      long long0 = new Long(65535L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      range1.equals(range0);
      long long1 = range1.getEnd();
      assertEquals(65535L, long1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 6953L, 65535L);
      long long2 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(6954L, long2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.6910774322823006
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.of((-128L), 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2962L;
      Range.ofLength(1354L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65535L, 606L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.857271380517377
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-78L), (-78L));
      Range range0 = Range.of(range_CoordinateSystem0, 740L, 740L);
      String string0 = range0.toString();
      assertEquals("[ 739 .. 739 ]/0B", string0);
      
      Range range1 = Range.of((-78L));
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(740L);
      range3.getBegin(range_CoordinateSystem1);
      range0.equals(range3);
      List<Range> list0 = range2.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.66985117274504
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range_Builder1.expandBegin(210L);
      Range range1 = Range.of(210L);
      range1.intersection(range0);
      long long0 = 2147483777L;
      long long1 = 8L;
      Range.of(8L);
      // Undeclared exception!
      try { 
        Range.parseRange("|R8Y)oQX]qYr]D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse |R8Y)oQX]qYr]D into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6939731270167493
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-129L), (-3L));
      Range range0 = Range.of((-1185L));
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(32767L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(6950L, 1567L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.780741139238784
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-18L), (-18L));
      List<Range> list0 = range1.complement(range0);
      range1.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of((-18L));
      long long0 = range2.getBegin(range_CoordinateSystem0);
      assertEquals((-17L), long0);
      
      Range range3 = Range.of((-18L));
      long long1 = range3.getEnd();
      assertEquals((-18L), long1);
      
      range2.equals(list0);
      List<Range> list1 = range3.complement(range2);
      assertFalse(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      
      Range range4 = Range.of((-18L), (-17L));
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.7195789070509453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-18L), 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-18L), 1L);
      Long long0 = new Long((-18L));
      Range range2 = Range.of(32767L);
      Long long1 = new Long(32767L);
      Object object0 = new Object();
      range0.equals(object0);
      long long2 = range2.getEnd();
      assertEquals(32767L, long2);
      
      Range range3 = Range.of((-216L), 32767L);
      boolean boolean0 = range1.equals(range3);
      assertFalse(boolean0);
      
      Range range4 = Range.of(602L, 32767L);
      assertNotSame(range4, range2);
      
      long long3 = range0.getEnd();
      assertSame(range0, range1);
      assertEquals(1L, long3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7621110331030176
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-18L), 0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.isEmpty();
      range1.isEmpty();
      Long long0 = new Long((-18L));
      Range range2 = Range.of(0L);
      Long long1 = new Long((-18L));
      boolean boolean0 = range0.equals(long1);
      long long2 = range1.getEnd();
      assertEquals((-1L), long2);
      
      range0.equals(range1);
      range1.spliterator();
      boolean boolean1 = range0.intersects(range2);
      assertFalse(range2.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.191366869237816
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2251L);
      range0.intersects(range0);
      List<Range> list0 = range0.split(2251L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("AW9hFnzNAP,\"XRo6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse AW9hFnzNAP,\"XRo6 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7189866545160295
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-3L), 255L);
      Range range1 = Range.of(6953L);
      range1.equals((Object) null);
      Range range2 = Range.of((-129L), 1L);
      range2.intersects(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.722012561229513
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Long long0 = new Long(7L);
      Range range1 = Range.of(0L, 7L);
      range1.intersects(range0);
      range1.getBegin();
      range0.getBegin();
      Range.of(1L, 0L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      Range.CoordinateSystem.values();
      Range range2 = range0.asRange();
      boolean boolean1 = range0.isSubRangeOf(range2);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=4.003148126275777
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range.of(6953L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4639L), (-4639L));
      String string0 = range1.toString();
      assertEquals("[ -4639 .. -4640 ]/0B", string0);
      
      range0.split(6953L);
      Range range2 = Range.of(3581L);
      Range range3 = range0.intersection(range2);
      Range range4 = Range.of(8L);
      range3.equals(range4);
      Range range5 = Range.of(3581L, 2147483777L);
      range3.intersects(range5);
      assertTrue(range3.isEmpty());
      
      Range range6 = Range.of(3581L, 3581L);
      assertFalse(range6.isEmpty());
      assertSame(range6, range2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6943841701600677
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of((-4639L), (-4639L));
      Range range1 = Range.of(3581L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.split((-4639L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.000043166990926
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of((-4639L), (-4639L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      range2.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(6953L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.41732603307715
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 15L;
      Range range0 = Range.ofLength(15L);
      Range range1 = Range.of(2093L);
      range0.intersects(range1);
      range1.asRange();
      Range.ofLength(2093L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("unable to mkdirs for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.unable to mkdirs for 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3648817275638465
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(209L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(764L);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("end of file reached before entire block was skipped");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse end of file reached before entire block was skipped into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.921781102462034
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Long long0 = new Long(7L);
      Range range1 = Range.of((-694L), 7L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      long long1 = range1.getBegin();
      assertEquals((-694L), long1);
      
      range0.getBegin();
      boolean boolean1 = range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = range0.getBegin(range_CoordinateSystem2);
      assertEquals((-1L), long2);
      
      long long3 = range0.getEnd();
      assertEquals(0L, long3);
      
      boolean boolean2 = range1.equals(range0);
      assertFalse(boolean2 == boolean1);
      
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.146513219163214
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of((-4639L), (-4639L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-4639L), (-4639L));
      range1.complement(range2);
      range2.toString();
      List<Range> list0 = range0.split(6953L);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.endsBefore(range1);
      Range range3 = range0.intersection(range2);
      Range range4 = Range.of(8L);
      boolean boolean1 = range3.equals(range4);
      Range range5 = Range.of(3581L, 2147483777L);
      range3.intersects(range5);
      Range.CoordinateSystem.values();
      boolean boolean2 = range3.startsBefore(range4);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = range2.isSubRangeOf(range5);
      assertTrue(range2.isEmpty());
      assertFalse(range5.isEmpty());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.607278303569296
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      range_Builder0.copy();
      range_Builder1.shift(0L);
      range_Builder0.shift(0L);
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.664840243295652
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Long long0 = new Long(65535L);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.isEmpty();
      range0.equals(range0);
      long long1 = range0.getEnd();
      assertEquals(6953L, long1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 6953L, 65535L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      
      long long2 = new Long(6953L);
      assertTrue(long2 == long1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.1266743359800415
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1 .. 0 ]/SB", string0);
      
      Range range1 = Range.ofLength(2147483777L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      range0.spliterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.isEmpty();
      range0.equals("[ -1 .. 0 ]/SB");
      range1.getEnd();
      List<Range> list0 = range1.split(2147483776L);
      Range.of(2147483777L);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list0.contains(range1));
      assertTrue(list1.contains(range1));
      assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.762296386876893
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2251L);
      Range range1 = Range.ofLength(2251L);
      range0.endsBefore(range1);
      range0.spliterator();
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.050220138619765
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2251L);
      range0.startsBefore(range0);
      Range range1 = Range.ofLength(0L);
      range0.isEmpty();
      Range range2 = Range.of(2251L);
      Range range3 = range1.intersection(range2);
      Range.of(8L);
      boolean boolean0 = range0.equals("LI");
      Range.of(739L, 2147483777L);
      boolean boolean1 = range2.intersects(range0);
      assertTrue(boolean1 == boolean0);
      
      Range range4 = Range.of((-677L), 740L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.8746501674029825
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.ofLength(6953L);
      Range range1 = Range.of(6953L, 6953L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        range0.complement(range1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=4.110211586801635
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.ofLength(6953L);
      Range range1 = Range.of(6953L, 6953L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        range0.complement(range1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6433628033775403
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = (-329L);
      range_Builder1.expandEnd((-2056L));
      Range.of((-691L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-111L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.719915297606176
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Long long0 = new Long(7L);
      Range range1 = Range.of(0L, 7L);
      range1.intersects(range0);
      range1.getBegin();
      range0.getBegin();
      Range.of(1L, 0L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.550398200151205
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-1527L));
      Range.CoordinateSystem range_CoordinateSystem1 = null;
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.590703463115222
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.getBegin();
      range0.spliterator();
      range0.getLength();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.isEmpty();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.082980153546667
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of((-4639L), (-4639L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of((-4639L), (-4639L));
      range0.split(6953L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(17L);
      Range range3 = Range.of(330L, 6953L);
      Range range4 = range2.intersection(range3);
      assertTrue(range4.isEmpty());
      
      List<Range> list0 = range3.complement(range1);
      long long0 = range3.getBegin(range_CoordinateSystem0);
      assertEquals(330L, long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.equals(list0);
      range2.getEnd();
      assertFalse(range2.isEmpty());
      
      Range range5 = range_Builder1.build();
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.571809042209274
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      Range range1 = Range.ofLength(0L);
      range1.iterator();
      range1.endsBefore(range0);
      range1.spliterator();
      range0.getLength();
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(197L);
      // Undeclared exception!
      try { 
        Range.of(197L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = (-3L);
      long long1 = (-743L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-288L), (-288L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.91522707601798
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range_Builder1.expandBegin(210L);
      List<Range> list0 = range0.split(210L);
      range0.complementFrom(list0);
      Long long0 = new Long(210L);
      range_Builder0.contractBegin(210L);
      Range.of(210L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, 3229L, 210L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.152424073242272
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getLength();
      long long0 = 1L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.547670460558613
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = range0.getBegin();
      assertEquals(2147483647L, long0);
      
      Spliterator<Long> spliterator0 = range0.spliterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(spliterator0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.9273331563628955
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Long long0 = new Long(7L);
      Range range1 = Range.of(0L, 7L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      range1.getBegin();
      long long1 = range0.getBegin();
      assertEquals((-1L), long1);
      
      Range range2 = Range.of(9223372036854775807L);
      Range range3 = range2.intersection(range0);
      Range.CoordinateSystem.values();
      List<Range> list0 = range3.complement(range0);
      assertTrue(list0.contains(range3));
      assertTrue(range3.isEmpty());
      
      Range range4 = Range.ofLength(0L);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.672317411095656
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(2147483647L);
      long long0 = range1.getBegin();
      assertEquals(0L, long0);
      
      range1.spliterator();
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(1189L);
      Range.CoordinateSystem.values();
      Range range2 = range_Builder0.build();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=4.091248217071184
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range range1 = Range.of((-4639L), (-4639L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of((-4639L), (-4639L));
      List<Range> list0 = range0.split(6953L);
      assertTrue(list0.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(17L);
      Range range3 = Range.of(330L, 6953L);
      Range range4 = range2.intersection(range3);
      List<Range> list1 = range3.complement(range1);
      assertTrue(list1.contains(range3));
      
      long long0 = range3.getBegin(range_CoordinateSystem0);
      assertEquals(330L, long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      Range range5 = Range.of(330L, 330L);
      range5.asRange();
      boolean boolean0 = range4.isSubRangeOf(range5);
      assertFalse(boolean0);
      assertTrue(range4.isEmpty());
      assertNotSame(range5, range3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.9639372190587734
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      long long1 = 0L;
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(0L, 0L);
      Range range2 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B");
      range2.toString(range_CoordinateSystem0);
      range0.complement(range1);
      Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.07320776770688
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-4639L), 6953L);
      range0.toString();
      Range range1 = Range.of((-2595L));
      Range range2 = range0.intersection(range1);
      range1.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range.of((-2595L));
      Range range3 = Range.ofLength(548L);
      range3.getBegin(range_CoordinateSystem0);
      range2.getEnd();
      Long long0 = new Long(2319L);
      Range range4 = Range.parseRange("[ 6953 .. 6953 ]/0B");
      range0.endsBefore(range4);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-8L), (-269L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.8854343205400466
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.ofLength(6953L);
      long long0 = 2147483647L;
      Range range1 = Range.of(6953L, 2147483647L);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(679L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.84411874782732
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-129L), 2147483647L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(1366L);
      range_Builder0.expandEnd(1366L);
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.678898263884924
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.intersects(range0);
      Range.ofLength(0L);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.53711350836393
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of(6953L, 6953L);
      Long long0 = new Long(65535L);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.isEmpty();
      long long1 = range0.getEnd();
      assertEquals(6953L, long1);
      
      Long long2 = new Long(6953L);
      assertTrue(long2.equals((Object)long1));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.976133018847098
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      range_Builder0.copy();
      range_Builder1.shift(0L);
      range_Builder0.shift(0L);
      range_Builder1.copy();
      Range range0 = range_Builder0.build();
      range_Builder1.contractEnd(0L);
      Range range1 = Range.of(0L, 0L);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      boolean boolean0 = range1.isEmpty();
      boolean boolean1 = range2.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.84447273038865
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-18L), 0L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(2, list1.size());
      assertEquals(2, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=4.061436288073044
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(6953L);
      Range.of((-4639L), (-4639L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-4639L), (-4639L));
      range0.split(6953L);
      Range range1 = Range.of(3581L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(3581L, 2147483777L);
      range2.intersects(range3);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3390309450565465
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getEnd(range_CoordinateSystem0);
      Long long0 = new Long((-2699L));
      range0.equals(long0);
      String string0 = "r3V)lpENeGx";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.9030487816843955
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Long long0 = new Long(7L);
      Range range1 = Range.of(7L, 32767L);
      Range range2 = range0.intersection(range1);
      range2.intersection(range1);
      Range range3 = Range.of((-13L));
      range1.equals(range_CoordinateSystem0);
      Range range4 = Range.of(2147483777L, 4294967295L);
      range3.intersects(range4);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.4892821270007954
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Long long0 = new Long(7L);
      Long long1 = new Long((-448L));
      range0.equals(long1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(7L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.2121313682031465
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Long long0 = new Long(0L);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      Long long1 = new Long(1L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder1.contractBegin((-1L));
      range0.asRange();
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("The second parameter in the comparison is null.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.The second parameter in the comparison is null.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.326365577667674
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      Range range1 = Range.ofLength(0L);
      range1.iterator();
      range0.intersects(range1);
      Range range2 = Range.ofLength(0L);
      range2.isEmpty();
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=4.04301561620368
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-78L), (-78L));
      Range range1 = Range.of(range_CoordinateSystem0, 777L, 777L);
      range1.toString();
      Range range2 = Range.of((-78L));
      range2.toString(range_CoordinateSystem0);
      range1.endsBefore(range0);
      Range range3 = range2.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range4 = Range.of(range_CoordinateSystem0, (-78L), 777L);
      range3.intersects(range4);
      Range.CoordinateSystem.values();
      range2.asRange();
      // Undeclared exception!
      try { 
        Range.ofLength((-78L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5254266763528364
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.shift(0L);
      range_Builder0.shift(0L);
      range_Builder2.copy();
      range_Builder0.build();
      range_Builder1.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1335L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.26428401275716
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      range0.forEach(consumer0);
      range0.isEmpty();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.5064389543400076
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-1366L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1507L), 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long long0 = (-78L);
      Range.Builder range_Builder0 = new Range.Builder((-78L), (-78L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-78L));
      // Undeclared exception!
      try { 
        range_Builder1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.842782170474537
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long long0 = 3581L;
      Range range0 = Range.ofLength(3581L);
      range0.startsBefore(range0);
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-2246L);
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        range0.split((-2246L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.9676947325486824
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range_Builder1.expandBegin(210L);
      List<Range> list0 = range0.split(210L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertEquals(0, list1.size());
      assertEquals(1, list0.size());
      
      Long long0 = new Long(210L);
      range_Builder0.contractBegin(210L);
      Range range1 = Range.of(210L);
      range1.asRange();
      Range range2 = Range.ofLength(210L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.5750868763998445
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.ofLength(3581L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3L), 1509L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.353627401079457
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 0L);
      Long long0 = new Long(7L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.6120735441810696
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.of((-18L), 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-18L), 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-2761L), 81L);
      Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.expandEnd((-2761L));
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(1296L, (-2L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long long0 = 255L;
      Range range0 = Range.of(255L, 255L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.9721806012191068
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range_Builder1.expandBegin(210L);
      List<Range> list0 = range0.split(210L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertTrue(list1.isEmpty());
      
      Long long0 = new Long(210L);
      range_Builder0.contractBegin(210L);
      Range range1 = Range.of(210L);
      range1.asRange();
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range range0 = Range.of(12L, 12L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.4381454225800563
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.of((-9223372036854775807L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775807L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.604970532739131
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      range_Builder0.copy();
      range_Builder1.shift(0L);
      range_Builder0.shift(0L);
      range_Builder1.copy();
      Range range0 = range_Builder0.build();
      range_Builder1.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1335L, 3581L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2032L), 127L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }
}
