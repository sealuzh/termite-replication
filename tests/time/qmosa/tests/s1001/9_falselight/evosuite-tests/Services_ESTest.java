/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:01:20 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.525950491234776
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://N!=s`:1");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "R:K ");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      EvoSuiteURL evoSuiteURL1 = new EvoSuiteURL("http://:1");
      NetworkHandling.createRemoteTextFile(evoSuiteURL1, "");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("", 1);
      assertTrue(services_HTTP_Result0.works);
      
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("?=B EF", 3746);
      services_HTTP_Result1.time = (long) 3746;
      services_HTTP_Result1.reset();
      assertEquals(0L, services_HTTP_Result1.time);
      assertFalse(services_HTTP_Result1.works);
      assertEquals(0, services_HTTP_Result1.code);
      assertEquals(0, services_HTTP_Result1.page_weight);
      
      Services.testSMTP("", 937);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("?=B EF", 0);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
      
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTPS("N!=s`", 1);
      assertEquals(5, services_HTTP_Result2.page_weight);
      assertTrue(services_HTTP_Result2.works);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1802);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 1802);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.testPOP3("", 1802);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6528445457709453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://iurnKG;2':1710");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "2*qf]");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("iurnKG;2'", 1710);
      services_HTTP_Result0.toString();
      assertEquals((-1), services_HTTP_Result0.code);
      
      Services.testHTTPS("7)Vq~FNj8kq+Z", (-1));
      services_HTTP_Result0.reset();
      Services.testSMTP("iurnKG;2'", (-1350));
      Services.testPOP3("", (-1350));
      Services.testHTTP("**Erreur d'E/S** (", 0);
      Services.testHTTP("", 0);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **", 0);
      assertEquals(0, services_HTTP_Result1.page_weight);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-417L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-417L));
      Services.testPOP3("Xfaaw~umM>`", 0);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis((-800L));
      System.setCurrentTimeMillis((-2292L));
      System.setCurrentTimeMillis((-800L));
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 2616);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      System.setCurrentTimeMillis((-3802L));
      System.setCurrentTimeMillis(2332L);
      System.setCurrentTimeMillis((-2080L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2862L);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", 2616);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "R0g");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP((String) null, (-3335));
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("F8%qlQ(uRCA#:", (-1));
      services_HTTP_Result0.Error = "F8%qlQ(uRCA#:";
      services_HTTP_Result0.code = (-1);
      services_HTTP_Result0.Error = "cTK!rUOUc`l~2BK|mHV";
      services_HTTP_Result0.page_weight = 1;
      services_HTTP_Result0.toString();
      assertFalse(services_HTTP_Result0.works);
      
      services_HTTP_Result0.code = 1963;
      services_HTTP_Result0.code = (-896);
      services_HTTP_Result0.works = false;
      services_HTTP_Result0.works = true;
      services_HTTP_Result0.works = true;
      services_HTTP_Result0.time = (-1425L);
      services_HTTP_Result0.toString();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("Er!Cc$<*6unpkC", (-1));
      services_HTTP_Result1.time = 5234L;
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTPS((String) null, (-1));
      services_HTTP_Result2.reset();
      services_HTTP_Result2.reset();
      services_HTTP_Result1.reset();
      services_HTTP_Result1.reset();
      Services.HTTP_Result services_HTTP_Result3 = new Services.HTTP_Result();
      Services.HTTP_Result services_HTTP_Result4 = Services.testHTTPS("", 0);
      assertEquals(0, services_HTTP_Result4.page_weight);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Services services0 = new Services();
      Services.testPOP3("", 2223);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 1675);
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 40000);
      NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, "");
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.testSMTP("", 2223);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "**Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@50187675) **");
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("JZEe", 3000);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      String string1 = services_SIMPLE_Result0.Error;
      services_SIMPLE_Result0.reset();
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
      
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("", (-1416));
      services_HTTP_Result0.reset();
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      services_SIMPLE_Result0.reset();
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
      
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("", (-1416));
      services_HTTP_Result0.reset();
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4286687697449683
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("^Ez?6/-(Fb'++?T>", (-1416));
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **URL Mal Form\u00E9** (java.net.MalformedURLException: Invalid port number :-1416) **.\n****", string0);
      
      services_HTTP_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result0.reset();
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
      
      Services.testHTTP("g>?", (-1));
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("g>?", 0);
      assertEquals(0, services_HTTP_Result1.page_weight);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("Xm6l#el\r\"\"Zf?nG@=", (-1027));
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
  }
}
