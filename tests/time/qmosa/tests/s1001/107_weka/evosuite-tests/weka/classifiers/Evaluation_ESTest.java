/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:49:20 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.supportVector.PolyKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.HierarchicalClusterer;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.CSVLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5104226154839506
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PolyKernel polyKernel0 = new PolyKernel();
      Capabilities capabilities0 = polyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(779);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance.main(testInstances0.DEFAULT_WORDS);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(6);
      evaluation0.trueNegativeRate(48);
      MockRandom mockRandom0 = new MockRandom();
      instances1.resample(mockRandom0);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      System.setCurrentTimeMillis(0L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2033.4417);
      doubleArray0[1] = 6.0;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      sVMLightLoader0.reset();
      try { 
        sVMLightLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "man");
      int int0 = 65;
      testInstances0.setNumNominalValues(65);
      Instances instances0 = testInstances0.generate("    getCapabilities().testWithFail(i);\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      Instances instances1 = null;
      evaluation0.m_CoverageStatisticsAvailable = false;
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4528207411578578
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(25);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.trueNegativeRate(14);
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.getGlobalInfo(multiScheme0);
      evaluation0.setPriors(instances0);
      evaluation0.errorRate();
      Instances instances1 = evaluation0.getHeader();
      assertFalse(instances1.equals((Object)instances0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CSVLoader cSVLoader0 = new CSVLoader();
      textDirectoryLoader0.getOptions();
      int[] intArray0 = new int[2];
      intArray0[0] = (-252);
      Evaluation.handleCostOption("", 1003);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-252);
      doubleArray0[1] = (double) (-252);
      LinearRegression linearRegression0 = new LinearRegression();
      MockRandom mockRandom0 = new MockRandom((-252));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.falsePositiveRate((-882));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.695211813336824
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.setDiscardPredictions(true);
      double double0 = 1.0E-75;
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3323168038382422
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(25);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.trueNegativeRate(14);
      Instance instance0 = null;
      try { 
        evaluation0.evaluateModelOnce((double) (-1), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8604950329827328
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CSVLoader cSVLoader0 = new CSVLoader();
      textDirectoryLoader0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      textDirectoryLoader0.setDirectory(file0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-252));
      double double0 = evaluation0.m_SumClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.KBRelativeInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.areaUnderROC(1);
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.0, double2, 0.01);
      
      evaluation1.areaUnderPRC(22);
      double double3 = evaluation0.recall(2138441992);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8484873406768627
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      IBk iBk0 = new IBk();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.falsePositiveRate(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      evaluation0.weightedTruePositiveRate();
      SMO sMO0 = new SMO();
      double double0 = evaluation0.m_ConfLevel;
      SMOreg sMOreg0 = new SMOreg();
      String[] stringArray0 = new String[5];
      evaluation0.m_SumPriorEntropy = (double) (-1);
      stringArray0[0] = "@relation";
      evaluation0.m_SumAbsErr = (double) 1;
      stringArray0[1] = ".arff";
      stringArray0[3] = "@data";
      evaluation0.setDiscardPredictions(true);
      evaluation0.addNumericTrainClass(1.0, 1.0);
      evaluation0.toSummaryString();
      evaluation0.pctCorrect();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.451565216408904
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PolyKernel polyKernel0 = new PolyKernel();
      Capabilities capabilities0 = polyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(779);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance.main(testInstances0.DEFAULT_WORDS);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(6);
      double double0 = evaluation0.trueNegativeRate(48);
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      instances1.resample(mockRandom0);
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double2, double1, 0.01);
      
      System.setCurrentTimeMillis(0L);
      evaluation0.avgCost();
      double double3 = evaluation0.numTrueNegatives(6);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      textDirectoryLoader0.setCharSet("Classifier not incremental, or no test file provided: can't use both train and model file.");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.361145246685684
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setDiscardPredictions(true);
      CostMatrix costMatrix0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel("\n", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name 
         // .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5775311676724026
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      testInstances0.setNumNominalValues(25);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      int[] intArray0 = new int[6];
      evaluation0.setPriors(instances0);
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      PriorityQueue<MultilayerPerceptron> priorityQueue0 = new PriorityQueue<MultilayerPerceptron>();
      SMO sMO0 = new SMO();
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (-1268.8744098);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-2);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CSVLoader cSVLoader0 = new CSVLoader();
      textDirectoryLoader0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      textDirectoryLoader0.setDirectory(file0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1127281206);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 477.93926084335;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      int[] intArray0 = new int[9];
      intArray0[0] = (-252);
      intArray0[1] = (-1127281206);
      intArray0[2] = (-163);
      intArray0[3] = (-122);
      intArray0[4] = 108;
      intArray0[5] = (-252);
      intArray0[6] = 8;
      intArray0[7] = (-122);
      intArray0[8] = (-1127281206);
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0, intArray0, (-163));
      try { 
        evaluation0.updateStatsForPredictor(477.93926084335, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3112881430321695
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CSVLoader cSVLoader0 = new CSVLoader();
      textDirectoryLoader0.getOptions();
      int[] intArray0 = new int[2];
      intArray0[0] = (-252);
      Evaluation.handleCostOption("", 1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-252);
      doubleArray0[1] = (double) (-252);
      doubleArray0[2] = (double) (-252);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-252));
      double double0 = evaluation0.m_SumClass;
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      RandomTree randomTree0 = new RandomTree();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.getDiscardPredictions();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2098053933410795
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setDiscardPredictions(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1104);
      instances0.add((Instance) binarySparseInstance0);
      double double0 = 1.0E-75;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5492024658203625
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CSVLoader cSVLoader0 = new CSVLoader();
      textDirectoryLoader0.getOptions();
      Evaluation.handleCostOption((String) null, (-252));
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 453.47006014890746);
      double double0 = evaluation0.m_SumClass;
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.recall(1003);
      assertEquals(0.0, double2, 0.01);
      
      evaluation1.getHeader();
      assertEquals(Double.NaN, evaluation1.SFMeanSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4168265826094393
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unweightedMicroFmeasure();
      evaluation0.falseNegativeRate((-781));
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.44403333966278
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.falsePositiveRate(1);
      evaluation0.weightedTruePositiveRate();
      SMO sMO0 = new SMO();
      double double0 = evaluation0.m_ConfLevel;
      double[] doubleArray0 = new double[2];
      SMOreg sMOreg0 = new SMOreg();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      doubleArray0[0] = (double) 0;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8559289933656546
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setDiscardPredictions(true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      evaluation0.trueNegativeRate(14);
      MultiScheme multiScheme0 = new MultiScheme();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.getGlobalInfo(multiScheme0);
      evaluation0.weightedFalsePositiveRate();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) textDirectoryLoader0;
      objectArray0[1] = (Object) Double.NaN;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) textDirectoryLoader0;
      evaluation0.KBInformation();
      try { 
        evaluation0.crossValidateModel((Classifier) multiScheme0, instances0, 14, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.converters.TextDirectoryLoader cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.745999105406748
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      intArray0[0] = (-1);
      IBk iBk0 = new IBk();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.falsePositiveRate(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      evaluation0.weightedTruePositiveRate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, (-1.0));
      double double0 = evaluation0.m_SumClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBRelativeInformation();
      evaluation0.areaUnderROC(1);
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation1.recall(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.976396073555464
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      double double0 = evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setDiscardPredictions(true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      double double1 = evaluation0.trueNegativeRate(14);
      MultiScheme multiScheme0 = new MultiScheme();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.getGlobalInfo(multiScheme0);
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) textDirectoryLoader1;
      objectArray0[1] = (Object) Double.NaN;
      Object object0 = new Object();
      objectArray0[2] = object0;
      double double3 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.recall(14);
      assertEquals(double4, double1, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.SFMeanPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.450769963731343
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      IBk iBk0 = new IBk();
      AbstractClassifier.runClassifier((Classifier) null, testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = 1.0E-6;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-510.87390819619));
      double double0 = evaluation0.m_SumClass;
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.451920750018101
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setDiscardPredictions(true);
      evaluation0.trueNegativeRate(131);
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.getGlobalInfo(multiScheme0);
      evaluation0.weightedFalsePositiveRate();
      MockRandom mockRandom0 = new MockRandom(14);
      Object object0 = new Object();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      MockRandom mockRandom1 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) multiScheme0, (Instances) null, (-2), (Random) mockRandom1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3429075491130043
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      int int0 = 50;
      testInstances0.setNumNominalValues(50);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int int1 = 1065;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = 1065;
      Instance instance0 = BallNode.calcCentroidPivot(1065, 17, intArray0, instances0);
      evaluation0.unweightedMicroFmeasure();
      try { 
        evaluation0.updatePriors(instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8756296699050443
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[15];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      databaseLoader2.getCustomPropsFile();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      File file0 = textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.setSource(file0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (-1);
      Instance instance0 = null;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray1, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9128646770098026
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PolyKernel polyKernel0 = new PolyKernel();
      Capabilities capabilities0 = polyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(779);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 6;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1592720529128537
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CSVLoader cSVLoader0 = new CSVLoader();
      int int0 = (-252);
      int[] intArray0 = new int[2];
      intArray0[0] = (-252);
      Evaluation.handleCostOption("", (-252));
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-252);
      doubleArray0[1] = (double) (-252);
      doubleArray0[2] = (double) (-252);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-252), doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.757941590246896
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setDiscardPredictions(true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      evaluation0.trueNegativeRate((-1911242037));
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.getGlobalInfo(multiScheme0);
      evaluation0.weightedFalsePositiveRate();
      MockRandom mockRandom0 = new MockRandom((-1911242037));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) textDirectoryLoader1;
      objectArray0[2] = (Object) evaluation0;
      try { 
        evaluation0.crossValidateModel((Classifier) multiScheme0, instances0, (-1911242037), (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.828488497716806
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      textDirectoryLoader0.setDebug(true);
      textDirectoryLoader0.setRetrieval(1395);
      textDirectoryLoader0.setCharSet("\n=== Predictions on test data ===\n\n");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.setNumericPriorsFromBuffer();
      int[] intArray0 = new int[9];
      intArray0[0] = 1395;
      String[] stringArray0 = new String[0];
      textDirectoryLoader0.setOptions(stringArray0);
      intArray0[1] = 1395;
      intArray0[2] = 1395;
      intArray0[3] = 1395;
      intArray0[4] = 1395;
      evaluation0.addNumericTrainClass(4.9E-324, 1395);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1387488857272077
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(82);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      evaluation0.setPriors(instances0);
      PriorityQueue<MultilayerPerceptron> priorityQueue0 = new PriorityQueue<MultilayerPerceptron>();
      instances0.containsAll(priorityQueue0);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      double double2 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.equals(priorityQueue0);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4104464784046917
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CSVLoader cSVLoader0 = new CSVLoader();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      int[] intArray0 = new int[2];
      intArray0[0] = (-252);
      Evaluation.handleCostOption("", 1003);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-252);
      doubleArray0[1] = (double) (-252);
      LinearRegression linearRegression0 = new LinearRegression();
      MockRandom mockRandom0 = new MockRandom((-252));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassNames = stringArray0;
      evaluation0.relativeAbsoluteError();
      evaluation0.falsePositiveRate((-882));
      try { 
        Evaluation.evaluateModel((Classifier) linearRegression0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.LinearRegression:
         // 
         // -D
         // \tProduce debugging output.
         // \t(default no debugging output)
         // -S <number of selection method>
         // \tSet the attribute selection method to use. 1 = None, 2 = Greedy.
         // \t(default 0 = M5' method)
         // -C
         // \tDo not try to eliminate colinear attributes.
         // 
         // -R <double>
         // \tSet ridge parameter (default 1.0e-8).
         // 
         // -minimal
         // \tConserve memory, don't keep dataset header and means/stdevs.
         // \tModel cannot be printed out if this option is enabled.\t(default: keep data)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7091845998318753
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      textDirectoryLoader0.setRetrieval(1395);
      textDirectoryLoader0.setCharSet("Classifier not incremental, or no test file provided: can't use both train and model file.");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[9];
      intArray0[0] = 1395;
      intArray0[1] = 1395;
      intArray0[2] = 1395;
      intArray0[3] = 1395;
      LogitBoost logitBoost0 = new LogitBoost();
      AbstractClassifier.runClassifier(logitBoost0, (String[]) null);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 99.0);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4123288314850018
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(25);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = 1065;
      intArray0[4] = 1065;
      evaluation0.unweightedMicroFmeasure();
      evaluation0.falseNegativeRate(2);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 25;
      doubleArray0[3] = (double) 1065;
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.722577656107831
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[15];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      evaluation0.m_SumAbsErr = (double) (-1);
      double[] doubleArray0 = new double[9];
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      evaluation0.falseNegativeRate(2);
      CSVLoader cSVLoader0 = new CSVLoader();
      CSVLoader cSVLoader1 = new CSVLoader();
      try { 
        cSVLoader1.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.166868295635109
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.getCapabilities();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Instances instances2 = new Instances(instances1, (-2));
      Evaluation evaluation1 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      double double0 = evaluation1.trueNegativeRate(1);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = Evaluation.getGlobalInfo(costSensitiveClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.CostSensitiveClassifier:\n\nA metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(1);
      instances0.resample(mockRandom1);
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation1.coverageOfTestCasesByPredictedRegions();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.693666544602024
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setDiscardPredictions(true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4283038329016424
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      IBk iBk0 = new IBk();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.falsePositiveRate(1);
      evaluation0.weightedTruePositiveRate();
      SMO sMO0 = new SMO();
      double double0 = evaluation0.m_ConfLevel;
      double[] doubleArray0 = new double[2];
      SMOreg sMOreg0 = new SMOreg();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      AbstractClassifier.runClassifier(sMOreg0, stringArray0);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 4;
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.501730978302286
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(6);
      double double0 = evaluation0.trueNegativeRate(1790);
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      System.setCurrentTimeMillis(163L);
      double double3 = evaluation0.avgCost();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 109;
      Instances instances0 = new Instances("seedTipText", arrayList0, 109);
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("@data");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5377864712140332
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      intArray0[0] = (-1);
      IBk iBk0 = new IBk();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.falsePositiveRate(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      double double0 = evaluation0.weightedTruePositiveRate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      double double1 = evaluation0.trueNegativeRate((-320));
      assertEquals(0.0, double1, 0.01);
      
      MultiScheme multiScheme0 = new MultiScheme();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Evaluation.getGlobalInfo(multiScheme0);
      assertEquals("\nSynopsis for weka.classifiers.meta.MultiScheme:\n\nClass for selecting a classifier from among several using cross validation on the training data or the performance on the training data. Performance is measured based on percent correct (classification) or mean-squared error (regression).", string0);
      
      evaluation0.setPriors(instances0);
      double double2 = evaluation0.errorRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.286688699520378
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      IBk iBk0 = new IBk();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double double0 = evaluation0.falsePositiveRate(1);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.m_TotalCost = 0.0;
      evaluation0.trueNegativeRate(779);
      String string0 = Evaluation.getGlobalInfo(costSensitiveClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.CostSensitiveClassifier:\n\nA metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", string0);
      
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      IBk iBk0 = new IBk();
      instances0.compactify();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, (-562));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-562), intArray0, (-527));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 912.5085917253812;
      doubleArray0[1] = (double) 6;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.364587762068977
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = (-2.0);
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = (-2.0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7659767920186922
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      IBk iBk0 = new IBk();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9451679744774717
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Instances instances1 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation2.addNumericTrainClass(0.0, (-1));
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      UnaryOperator.identity();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      Capabilities capabilities0 = hierarchicalClusterer0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("_'-S7G");
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances1.replaceAll(unaryOperator0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 4.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (-739.07045929);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.516439819575087
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".{ct[r");
      PolyKernel polyKernel0 = new PolyKernel();
      Capabilities capabilities0 = polyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(779);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 6;
      evaluation0.unweightedMacroFmeasure();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.rootRelativeSquaredError();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance2, (-2918.6));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.035754728630011
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 4.0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-2);
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, (double[]) null, (-1390.56712));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8207043021146563
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CSVLoader cSVLoader0 = new CSVLoader();
      textDirectoryLoader0.getOptions();
      int[] intArray0 = new int[2];
      intArray0[0] = (-252);
      Evaluation.handleCostOption("", 1003);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.falseNegativeRate((-252));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0788314809085016
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 4.0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0);
      evaluation0.trueNegativeRate(1418);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution((-3363.03107));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3363
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.682651306013591
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      PolyKernel polyKernel0 = new PolyKernel();
      Capabilities capabilities0 = polyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(779);
      DenseInstance denseInstance0 = new DenseInstance(779);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (-3733.7392111391446);
      evaluation0.trueNegativeRate(6);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      binarySparseInstance0.dataset();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.399974139254715
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass(1.0, 4.0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.SFSchemeEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1013290910454328
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier0.getCostMatrix();
      double double0 = evaluation0.falsePositiveRate((-1733));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7957643164646115
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
      
      evaluation0.setDiscardPredictions(false);
      evaluation0.addNumericTrainClass((-2033.4417), Double.NaN);
      evaluation0.toSummaryString();
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, (String) null);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7598412495271805
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setDiscardPredictions(false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      evaluation0.trueNegativeRate(14);
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.getGlobalInfo(multiScheme0);
      evaluation0.weightedFalsePositiveRate();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) textDirectoryLoader1;
      objectArray0[1] = (Object) Double.NaN;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) textDirectoryLoader1;
      try { 
        evaluation0.crossValidateModel((Classifier) multiScheme0, instances0, 14, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.converters.TextDirectoryLoader cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1223183232745
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PolyKernel polyKernel0 = new PolyKernel();
      Capabilities capabilities0 = polyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      int int0 = 779;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(779);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 20.0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 779;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-2), doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.addNumericTrainClass(654.3172688246, 2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 69;
      evaluation0.precision(69);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.107423683728942
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanPriorEntropy();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.setDiscardPredictions(true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      textDirectoryLoader1.setDirectory(file0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      double double0 = evaluation0.m_SumClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation1.areaUnderROC(1802);
      evaluation0.priorEntropy();
      evaluation0.recall(324);
      evaluation0.areaUnderPRC(120);
      evaluation1.recall(2147483645);
      double double1 = evaluation0.numInstances();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Instances instances0 = null;
      String string0 = "weka.core.neighboursearch.NearestNeighbourSearch";
      int int0 = 5;
      try { 
        Evaluation.handleCostOption("weka.core.neighboursearch.NearestNeighbourSearch", 5);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Instances instances0 = null;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("weka.core.neighboursearch.NearestNeighbourSearch");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Pop on empty queue correctly gave exception.");
      String string0 = "weka.core.neighboursearch.NearestNeighbourSearch";
      int int0 = 5;
      try { 
        Evaluation.handleCostOption("weka.core.neighboursearch.NearestNeighbourSearch", 5);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Pop\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8148657896913192
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1297.4;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0221696122054715
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      PolyKernel polyKernel0 = new PolyKernel();
      Capabilities capabilities0 = polyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(779);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      int[] intArray0 = new int[4];
      intArray0[0] = 779;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 6;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray1, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
