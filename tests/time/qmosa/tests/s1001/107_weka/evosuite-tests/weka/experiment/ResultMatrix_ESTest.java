/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:20:54 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.798486763685906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.toArray();
      resultMatrixHTML0.getEnumerateRowNames();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.globalInfo();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      int[] intArray1 = new int[0];
      resultMatrixHTML0.setRowOrder(intArray1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixGnuPlot0.assign(resultMatrixLatex0);
      resultMatrixCSV0.getPrintColNames();
      resultMatrixCSV0.assign(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot1.getRowHidden((-2931));
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV1.getDefaultShowStdDev();
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV();
      resultMatrixCSV2.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV3 = new ResultMatrixCSV();
      int[][] intArray2 = new int[9][4];
      intArray2[0] = intArray0;
      int[] intArray3 = new int[1];
      intArray3[0] = 0;
      intArray2[1] = intArray3;
      intArray2[2] = intArray1;
      intArray2[3] = intArray0;
      int[] intArray4 = new int[5];
      intArray4[0] = 2;
      intArray4[1] = 2;
      intArray4[2] = 5547;
      intArray4[3] = 1;
      intArray4[4] = 0;
      intArray2[4] = intArray4;
      intArray2[5] = intArray1;
      int[] intArray5 = new int[2];
      intArray5[0] = 2;
      intArray5[1] = 1;
      intArray2[6] = intArray5;
      intArray2[7] = intArray1;
      intArray2[8] = intArray0;
      resultMatrixCSV3.setRanking(intArray2);
      resultMatrixCSV3.toStringKey();
      resultMatrixCSV3.setPrintRowNames(false);
      // Undeclared exception!
      try { 
        resultMatrixCSV2.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2831315324725328
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      resultMatrixPlainText0.clearSummary();
      resultMatrixPlainText0.setRowOrder(intArray0);
      resultMatrixPlainText0.getStdDevWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.removeFilterName("v");
      resultMatrixLatex0.getRevision();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((-105), (-105));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6619548330626177
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColNameWidth(1);
      resultMatrixLatex0.toStringRanking();
      resultMatrixCSV0.setPrintRowNames(false);
      resultMatrixCSV0.toStringMatrix();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      resultMatrixCSV0.removeFilterName("eQ:$");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2394034474317026
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[][] intArray0 = new int[7][7];
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2;
      intArray2[1] = 2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.isSignificance(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(2, 3633);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8059539767157293
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.setColNameWidth(0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.printColNamesTipText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText1.globalInfo();
      resultMatrixPlainText0.getDefaultShowStdDev();
      resultMatrixPlainText1.getDefaultStdDevWidth();
      resultMatrixPlainText0.setColName((-792), " ");
      resultMatrixPlainText1.setPrintColNames(false);
      resultMatrixPlainText1.countWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = null;
      try {
        resultMatrixHTML1 = new ResultMatrixHTML(2, (-792));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3419177324522935
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 3);
      resultMatrixLatex0.m_StdDevWidth = 0;
      resultMatrixLatex0.setRemoveFilterName(false);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.setCountWidth((-1));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.910824872944305
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.clearSummary();
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      resultMatrixHTML0.m_SignificanceWidth = (-2307);
      booleanArray0[1] = false;
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      resultMatrixHTML0.setMeanPrec((-2307));
      resultMatrixHTML0.getStdDev(3951, 3951);
      resultMatrixHTML0.getDefaultMeanWidth();
      resultMatrixHTML0.getDefaultMeanPrec();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "v";
      stringArray0[2] = ")";
      stringArray0[3] = " ";
      stringArray0[4] = ")";
      stringArray0[5] = ")";
      stringArray0[6] = ")";
      stringArray0[7] = ")";
      ResultMatrixCSV.main(stringArray0);
      resultMatrixHTML0.getPrintRowNames();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.toStringSummary();
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(8, 3);
      resultMatrixCSV0.toStringRanking();
      String[][] stringArray1 = new String[4][7];
      stringArray1[0] = stringArray0;
      stringArray1[1] = stringArray0;
      String[] stringArray2 = new String[3];
      stringArray2[0] = "*";
      stringArray2[1] = ")";
      stringArray2[2] = "*";
      stringArray1[2] = stringArray2;
      String[] stringArray3 = new String[7];
      stringArray3[0] = "v";
      stringArray3[1] = " ";
      stringArray3[2] = "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n";
      stringArray3[3] = "[";
      stringArray3[4] = "-ranking data not set-";
      stringArray3[5] = ")";
      stringArray3[6] = "v";
      stringArray1[3] = stringArray3;
      resultMatrixHTML0.getColSize(stringArray1, 0);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4881100769941407
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.LEFT_PARENTHESES = "aa`F";
      resultMatrixPlainText0.setRowNameWidth(2269);
      resultMatrixPlainText0.setStdDevWidth(2269);
      resultMatrixPlainText0.meanPrecTipText();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.094921899696183
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(5, 564);
      resultMatrixCSV0.m_StdDevWidth = 5;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      resultMatrixPlainText0.setSignificanceWidth(564);
      resultMatrixPlainText0.m_RankingDiff = null;
      resultMatrixPlainText0.getColName(1527);
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.m_RankingDiff = null;
      resultMatrixPlainText0.toStringKey();
      resultMatrixCSV0.getOptions();
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.enumerateColNamesTipText();
      resultMatrixCSV0.setCount(0, 0.0);
      // Undeclared exception!
      resultMatrixCSV0.assign(resultMatrixPlainText0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.613913607717414
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      resultMatrixCSV0.setStdDevPrec(0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 0;
      resultMatrixHTML0.setRowOrder(intArray0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultRowNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(7, 0);
      resultMatrixGnuPlot0.assign(resultMatrixHTML0);
      resultMatrixCSV1.getPrintColNames();
      resultMatrixCSV1.assign(resultMatrixHTML0);
      resultMatrixGnuPlot0.getRowHidden(4846);
      resultMatrixCSV0.getDefaultShowStdDev();
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6986903541071743
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.padString("", 3);
      assertEquals("   ", string0);
      
      resultMatrixLatex0.setCountWidth(0);
      resultMatrixLatex0.m_PrintColNames = false;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      String[][] stringArray0 = resultMatrixHTML0.toArray();
      assertEquals(3, stringArray0.length);
      
      resultMatrixHTML0.toStringSummary();
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.337588728123289
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      boolean boolean0 = true;
      resultMatrixCSV0.setRemoveFilterName(true);
      int int0 = 1562;
      resultMatrixCSV0.setRowNameWidth(1562);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSummary((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.7496392094975755
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.toStringRanking();
      resultMatrixGnuPlot0.getOptions();
      resultMatrixGnuPlot0.setColHidden((-247), false);
      resultMatrixGnuPlot0.rowNameWidthTipText();
      int[][] intArray0 = new int[5][1];
      int[] intArray1 = new int[9];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 2;
      intArray1[6] = 0;
      intArray1[7] = 2;
      intArray1[8] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = (-247);
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray3[2] = 1;
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 97;
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.284121533462533
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.setMeanWidth(1);
      resultMatrixPlainText0.m_MeanWidth = 793;
      resultMatrixPlainText0.m_ShowAverage = true;
      assertEquals(1, resultMatrixGnuPlot0.getMeanWidth());
      
      resultMatrixGnuPlot0.m_MeanWidth = 0;
      resultMatrixPlainText0.m_EnumerateRowNames = true;
      resultMatrixPlainText0.setEnumerateRowNames(true);
      resultMatrixPlainText0.m_StdDev = null;
      resultMatrixGnuPlot0.getDisplayName();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setColNameWidth(3344);
      resultMatrixCSV0.WIN_STRING = "v";
      resultMatrixCSV0.m_MeanWidth = 1917;
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.getDefaultRemoveFilterName();
      resultMatrixPlainText0.countWidthTipText();
      resultMatrixCSV0.getRowHidden(2);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixPlainText0.setRemoveFilterName(false);
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.301724126210874
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean boolean0 = resultMatrixLatex0.isSignificance(1317);
      assertTrue(boolean0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixLatex0.getSignificance(3, 1317);
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.301724126210874
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 3);
      resultMatrixLatex0.m_StdDevWidth = 0;
      resultMatrixLatex0.isSignificance(2813);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      resultMatrixGnuPlot0.m_RowHidden = booleanArray0;
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixLatex0.getSignificance(0, 0);
      assertEquals(3, resultMatrixLatex0.getRowCount());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.RIGHT_PARENTHESES = "";
      String string0 = resultMatrixSignificance0.meanWidthTipText();
      assertEquals("The width of the mean (0 = optimal).", string0);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.489264544784489
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 833;
      int int0 = (-2089);
      intArray0[5] = (-2089);
      intArray0[6] = 0;
      intArray0[7] = 2;
      intArray0[8] = 1;
      resultMatrixPlainText0.m_RankingLosses = intArray0;
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultShowStdDev();
      resultMatrixPlainText0.getDefaultStdDevWidth();
      resultMatrixPlainText0.setColName(567, "Generates the output as plain text (for fixed width fonts).");
      resultMatrixPlainText0.setPrintColNames(false);
      resultMatrixPlainText0.countWidthTipText();
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML((-1), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5819493215675293
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      resultMatrixPlainText0.m_ColHidden = booleanArray0;
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.showAverageTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.doubleToString(1, 0);
      resultMatrixCSV0.setEnumerateColNames(false);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixCSV0.m_HeaderValues = vector0;
      resultMatrixCSV0.toStringSummary();
      int int0 = resultMatrixCSV0.getDisplayRow(6);
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.738516559213301
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.removeFilterName((String) null);
      resultMatrixGnuPlot0.headerKeys();
      resultMatrixGnuPlot0.padString("J;770>t$DsEmJ$", (-1));
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setPrintColNames(false);
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 2;
      doubleArray2[8] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) (-1);
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 2;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = (double) 2;
      doubleArray0[5] = doubleArray6;
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.m_CountWidth = (-1);
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixPlainText0.toArray();
      assertFalse(resultMatrixPlainText0.getPrintColNames());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.958678478927377
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.setSignificanceWidth(2);
      resultMatrixPlainText0.getColName(1527);
      resultMatrixHTML0.getRevision();
      resultMatrixPlainText0.toStringKey();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.clearRanking();
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.enumerateColNamesTipText();
      resultMatrixCSV0.setCount(1, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.setRowNameWidth(0);
      resultMatrixCSV0.getDefaultMeanPrec();
      ResultMatrixHTML resultMatrixHTML1 = null;
      try {
        resultMatrixHTML1 = new ResultMatrixHTML(1, (-3177));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.816917007576133
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixLatex0.clearRanking();
      resultMatrixHTML0.doubleToString(1, 2);
      resultMatrixHTML0.addHeader(")", "row-name-width");
      resultMatrixHTML0.toStringMatrix();
      resultMatrixPlainText0.RIGHT_PARENTHESES = " ";
      resultMatrixHTML0.setRemoveFilterName(true);
      resultMatrixPlainText0.getPrintRowNames();
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.stdDevPrecTipText();
      resultMatrixPlainText0.setSignificance(0, 2, 0);
      assertTrue(resultMatrixHTML0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.394253411374514
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 3;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 3);
      resultMatrixCSV0.m_ShowStdDev = true;
      int[] intArray0 = new int[8];
      resultMatrixCSV0.clearHeader();
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixCSV0.setSize(0, 853);
      intArray0[3] = 3;
      intArray0[4] = 3;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 0);
      resultMatrixCSV0.assign(resultMatrixGnuPlot0);
      resultMatrixCSV0.setSignificanceWidth(0);
      intArray0[5] = 2;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.7265873897440462
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.getRowHidden(5);
      resultMatrixLatex0.setStdDevWidth((-95));
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 1);
      resultMatrixPlainText0.setSignificanceWidth(3235);
      resultMatrixPlainText0.setShowStdDev(true);
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.338205060943012
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.setCountWidth(0);
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML(3, (-1451));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.726034184462148
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.setColNameWidth(0);
      resultMatrixCSV0.getDisplayName();
      resultMatrixCSV0.setPrintRowNames(true);
      String string1 = resultMatrixCSV0.toStringMatrix();
      assertEquals("Dataset,(1)\nrow0,''\n'(v/ /*)',''\n", string1);
      
      resultMatrixHTML0.getVisibleColCount();
      resultMatrixCSV0.removeFilterName("`vBa");
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.7253439286804495
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_StdDevWidth = 0;
      resultMatrixHTML0.setStdDevWidth(541);
      resultMatrixHTML0.globalInfo();
      resultMatrixHTML0.setShowStdDev(false);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      resultMatrixHTML0.toStringRanking();
      resultMatrixHTML0.toStringMatrix();
      intArray0[1] = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1790.0);
      doubleArray0[5] = (double) 541;
      doubleArray0[6] = (double) 0;
      resultMatrixHTML0.m_Counts = doubleArray0;
      resultMatrixCSV0.getDefaultMeanPrec();
      resultMatrixHTML0.getDefaultEnumerateColNames();
      assertEquals(541, resultMatrixHTML0.getStdDevWidth());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7272985579603573
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.setColNameWidth(0);
      resultMatrixHTML0.m_EnumerateColNames = false;
      resultMatrixCSV0.getDisplayName();
      resultMatrixCSV0.setPrintRowNames(true);
      String string1 = resultMatrixCSV0.toStringMatrix();
      assertEquals("Dataset,(1)\nrow0,''\n'(v/ /*)',''\n", string1);
      
      resultMatrixHTML0.getVisibleColCount();
      resultMatrixHTML0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.toStringKey();
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5373331372970567
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.getRowHidden(5);
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.headerKeys();
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.getColOrder();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 2);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixSignificance0.getColCount());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.983448313002893
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixCSV0.m_StdDevWidth = 5;
      resultMatrixPlainText0.setSignificanceWidth(564);
      resultMatrixPlainText0.m_RankingDiff = null;
      resultMatrixPlainText0.getColName(1527);
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.m_RankingDiff = null;
      resultMatrixPlainText0.toStringKey();
      resultMatrixCSV0.getOptions();
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.enumerateColNamesTipText();
      resultMatrixCSV0.setCount(0, 0.0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.setRowNameWidth(0);
      assertTrue(resultMatrixPlainText0.getEnumerateRowNames());
      
      resultMatrixCSV0.getDefaultMeanPrec();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(95, 0);
      resultMatrixHTML0.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.6420418025039427
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(5, 564);
      resultMatrixPlainText0.setStdDevPrec(1488);
      resultMatrixPlainText0.toStringKey();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 832);
      resultMatrixHTML0.getVisibleRowCount();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 5);
      resultMatrixLatex0.getColNameWidth();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(808, 0);
      resultMatrixCSV1.getDefaultPrintColNames();
      resultMatrixLatex0.setEnumerateRowNames(true);
      resultMatrixPlainText0.headerKeys();
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(4716, 26);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3932248978079724
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")";
      resultMatrixPlainText0.m_RowNames = stringArray0;
      resultMatrixPlainText0.clearRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 0);
      resultMatrixCSV0.listOptions();
      int int0 = 97;
      resultMatrixPlainText0.setSignificanceWidth(0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSize(97, (-3016));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.394253411374514
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 3;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 3);
      boolean boolean0 = true;
      resultMatrixCSV0.m_ShowStdDev = true;
      int[] intArray0 = new int[8];
      resultMatrixCSV0.clearHeader();
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixCSV0.setSize(0, 853);
      intArray0[3] = 3;
      intArray0[4] = 3;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 0);
      resultMatrixCSV0.assign(resultMatrixGnuPlot0);
      resultMatrixCSV0.setSignificanceWidth(0);
      intArray0[5] = 2;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2533345648543914
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.getDefaultRowNameWidth();
      resultMatrixPlainText0.toStringRanking();
      boolean boolean0 = resultMatrixPlainText0.getPrintRowNames();
      assertTrue(boolean0);
      
      resultMatrixPlainText0.setRowHidden(3, true);
      resultMatrixPlainText0.getRevision();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n1 & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.966153171731902
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.getEnumerateRowNames();
      resultMatrixLatex0.getStdDev(581, 2);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.setRowHidden(183, true);
      resultMatrixLatex0.setRowNameWidth(0);
      resultMatrixLatex0.getRowHidden(5);
      resultMatrixPlainText0.setMeanPrec(581);
      resultMatrixLatex0.getMeanPrec();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1002, 2);
      int[][] intArray0 = new int[25][7];
      int[] intArray1 = new int[2];
      intArray1[0] = 2;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 2;
      intArray2[3] = 1;
      intArray2[4] = 2;
      intArray2[5] = 5;
      intArray2[6] = 5;
      intArray2[7] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = 183;
      intArray3[1] = 581;
      intArray3[2] = 1002;
      intArray3[3] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 1;
      intArray4[1] = (-211);
      intArray4[2] = 2;
      intArray4[3] = 2;
      intArray4[4] = 5;
      intArray4[5] = 2;
      intArray4[6] = (-1);
      intArray4[7] = 581;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      intArray5[0] = 1;
      intArray5[1] = 4333;
      intArray5[2] = 1;
      intArray5[3] = 1002;
      intArray5[4] = 1002;
      intArray5[5] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = 581;
      intArray6[1] = (-364);
      intArray6[2] = 0;
      intArray6[3] = 183;
      intArray6[4] = 1;
      intArray6[5] = 5;
      intArray6[6] = 0;
      intArray6[7] = 0;
      intArray6[8] = 1002;
      intArray0[5] = intArray6;
      resultMatrixSignificance0.m_Significance = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringKey();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.7313862102891324
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 3);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixCSV0.assign(resultMatrixPlainText0);
      resultMatrixCSV0.m_ShowStdDev = true;
      int[] intArray0 = new int[8];
      resultMatrixCSV0.clearHeader();
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.toArray();
      resultMatrixCSV0.getDefaultColNameWidth();
      assertEquals(1, resultMatrixCSV0.getColCount());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.359166775997555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.padString("", 7);
      resultMatrixLatex0.setCountWidth(2);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.getRevision();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getHeader(" ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.837889219955842
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      resultMatrixCSV0.setStdDevPrec(0);
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.m_ColNameWidth = 1334;
      resultMatrixCSV0.getOptions();
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=4.036410708199911
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.m_ColOrder = null;
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.setRowOrder((int[]) null);
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      String[] stringArray0 = new String[0];
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixPlainText0.m_Mean = doubleArray0;
      resultMatrixPlainText0.toStringRanking();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.setSize(1, 2);
      assertEquals(2, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.019103080705076
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[0];
      ResultMatrixHTML.main(stringArray0);
      int int0 = 3139;
      resultMatrixHTML0.padString("mean-width", 3139);
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.getDefaultSignificanceWidth();
      resultMatrixHTML0.setShowAverage(false);
      resultMatrixHTML0.toArray();
      resultMatrixHTML0.setCount(0, 1.0);
      resultMatrixHTML0.printRowNamesTipText();
      resultMatrixHTML0.isStdDev(3139);
      int int1 = 4554;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(4554, 4554);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      boolean boolean0 = resultMatrixHTML0.isRowName(97);
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(boolean0);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.966153171731902
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.getEnumerateRowNames();
      resultMatrixLatex0.getStdDev(581, 2);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.setRowHidden(183, true);
      resultMatrixLatex0.setRowNameWidth(0);
      resultMatrixLatex0.getRowHidden(5);
      resultMatrixPlainText0.setMeanPrec(581);
      resultMatrixLatex0.getMeanPrec();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1002, 2);
      int[][] intArray0 = new int[6][7];
      int[] intArray1 = new int[2];
      intArray1[0] = 2;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray2[2] = 2;
      intArray2[3] = 1;
      intArray2[4] = 2;
      intArray2[5] = 5;
      intArray2[6] = 5;
      intArray2[7] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = 183;
      intArray3[1] = 581;
      intArray3[2] = 1002;
      intArray3[3] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 1;
      intArray4[1] = (-211);
      intArray4[2] = 2;
      intArray4[3] = 2;
      intArray4[4] = 5;
      intArray4[5] = 2;
      intArray4[6] = (-1);
      intArray4[7] = 581;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      intArray5[0] = 1;
      intArray5[1] = 4333;
      intArray5[2] = 1;
      intArray5[3] = 1002;
      intArray5[4] = 1002;
      intArray5[5] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = 581;
      intArray6[1] = (-364);
      intArray6[2] = 0;
      intArray6[3] = 183;
      intArray6[4] = 1;
      intArray6[5] = 5;
      intArray6[6] = 0;
      intArray6[7] = 0;
      intArray6[8] = 1002;
      intArray0[5] = intArray6;
      resultMatrixSignificance0.m_Significance = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringKey();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.49313800934915
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1227, 3);
      resultMatrixPlainText0.printRowNamesTipText();
      resultMatrixPlainText0.toStringSummary();
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 3032;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 3032;
      doubleArray2[4] = (double) 1227;
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 3032;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      resultMatrixPlainText0.m_Mean = doubleArray0;
      resultMatrixPlainText0.m_RemoveFilterName = false;
      resultMatrixPlainText0.setColName(3032, "");
      resultMatrixPlainText0.setPrintColNames(false);
      resultMatrixPlainText0.setColHidden(3032, false);
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertTrue(resultMatrixPlainText0.getDefaultPrintColNames());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.043756823382211
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_StdDevPrec = 97;
      resultMatrixCSV0.setColNameWidth(50);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.m_ColNameWidth = 0;
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getCountWidth();
      resultMatrixCSV0.getMeanWidth();
      resultMatrixCSV0.getRowOrder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      ResultMatrixLatex.main(stringArray0);
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.getPrintRowNames();
      assertEquals(97, resultMatrixCSV0.getStdDevPrec());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringKey();
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.804621960926285
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      resultMatrixHTML0.m_RowOrder = intArray0;
      resultMatrixHTML0.m_Wins = null;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.967341049653181
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_ShowStdDev = true;
      resultMatrixPlainText0.RIGHT_PARENTHESES = "";
      resultMatrixPlainText0.m_EnumerateRowNames = false;
      resultMatrixPlainText0.stdDevPrecTipText();
      resultMatrixPlainText0.getDefaultPrintRowNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.setSignificanceWidth((-644));
      resultMatrixSignificance0.m_RowOrder = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.141958879445162
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 1;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 2;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 4522.2910446;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = (double) 1;
      doubleArray5[6] = (double) 1;
      doubleArray5[7] = (double) 1;
      doubleArray5[8] = (double) 1;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (double) 0;
      doubleArray7[3] = (double) 1;
      doubleArray7[4] = (double) 0;
      doubleArray7[5] = (double) 1;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = 4522.2910446;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (double) 2;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 0.0;
      doubleArray0[7] = doubleArray8;
      resultMatrixGnuPlot0.m_StdDev = doubleArray0;
      resultMatrixLatex0.getDefaultPrintColNames();
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n1 & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.1983771378020642
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = (-388);
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray0[0] = intArray1;
      resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.124365809783805
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.setMeanWidth(1);
      resultMatrixPlainText0.m_MeanWidth = 793;
      resultMatrixGnuPlot0.setStdDevWidth(2);
      resultMatrixPlainText0.m_ShowAverage = true;
      resultMatrixGnuPlot0.m_MeanWidth = 0;
      resultMatrixPlainText0.m_EnumerateRowNames = true;
      resultMatrixPlainText0.setEnumerateRowNames(true);
      resultMatrixPlainText0.m_StdDev = null;
      resultMatrixGnuPlot0.getDisplayName();
      assertEquals(2, resultMatrixGnuPlot0.getStdDevWidth());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.338205060943012
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 833;
      intArray0[5] = (-2089);
      intArray0[6] = 0;
      intArray0[7] = 2;
      intArray0[8] = 1;
      resultMatrixPlainText0.m_RankingLosses = intArray0;
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultShowStdDev();
      resultMatrixPlainText0.getDefaultStdDevWidth();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getHeader("~b:yd{Uop&lqRW,s");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=4.009514756008863
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 2);
      resultMatrixCSV0.m_PrintRowNames = false;
      resultMatrixCSV0.getColName((-47));
      resultMatrixCSV0.getDefaultPrintRowNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixCSV0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixHTML0.m_RowOrder = intArray0;
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.showStdDevTipText();
      resultMatrixCSV0.setShowStdDev(true);
      resultMatrixHTML0.doubleToString(Double.NaN, 25);
      resultMatrixHTML0.setCount(1698, 2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 1);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.doubleToString(2, 0);
      resultMatrixHTML0.setEnumerateRowNames(true);
      resultMatrixCSV0.toStringSummary();
      assertTrue(resultMatrixCSV0.getShowStdDev());
      
      resultMatrixHTML0.setMeanPrec((-2130));
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.meanWidthTipText();
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.6951953879003776
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toString();
      resultMatrixHTML0.setColNameWidth(1295);
      resultMatrixHTML0.m_MeanWidth = 1;
      resultMatrixHTML0.toStringMatrix();
      assertEquals(1295, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.9752273371481874
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "x)9D";
      stringArray0[1] = "--";
      stringArray0[2] = ")";
      stringArray0[3] = "$circ$";
      stringArray0[4] = ")";
      stringArray0[5] = "$\bullet$";
      stringArray0[6] = "(";
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.getDisplayName();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColNameWidth(2);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.setCountWidth(813);
      assertEquals(813, resultMatrixGnuPlot0.getCountWidth());
      
      resultMatrixLatex0.setMeanWidth(0);
      assertEquals(1, resultMatrixLatex0.getColCount());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=4.1448515541662685
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(5, 564);
      resultMatrixCSV0.m_StdDevWidth = 5;
      resultMatrixPlainText0.setSignificanceWidth(564);
      resultMatrixPlainText0.m_RankingDiff = null;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 1;
      resultMatrixCSV0.getRowName(125);
      doubleArray0[2] = (double) 564;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      resultMatrixCSV0.m_Counts = doubleArray0;
      resultMatrixPlainText0.getColName(1527);
      resultMatrixPlainText0.toStringKey();
      resultMatrixCSV0.getOptions();
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.enumerateColNamesTipText();
      resultMatrixCSV0.setCount(0, 0.0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
  }
}
