/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 15:41:14 GMT 2020
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7127291374784415
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.padString(")", (-68), false);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3221);
      intArray0[2] = (-3221);
      intArray0[3] = (-4668);
      intArray0[4] = (-3221);
      resultMatrixGnuPlot0.setShowStdDev(true);
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixHTML0.m_PrintColNames = false;
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixHTML0.globalInfo();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.173017964509815
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.m_ColOrder = null;
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.setRowOrder((int[]) null);
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 1592);
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.setRowHidden(1592, false);
      resultMatrixLatex0.setRowNameWidth(69);
      resultMatrixLatex0.getRowHidden(2);
      resultMatrixPlainText0.setMeanPrec(97);
      resultMatrixLatex0.getMeanPrec();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(69, 21);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2328418319953345
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.m_EnumerateRowNames = true;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixHTML0.listOptions();
      int[][] intArray0 = new int[0][0];
      resultMatrixHTML0.setRanking(intArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.setCountWidth(11);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSize((-1881), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.256956497820631
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 25);
      int[] intArray0 = new int[7];
      int[][] intArray1 = new int[7][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 1;
      intArray2[2] = 0;
      intArray1[3] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 25;
      intArray3[1] = 25;
      resultMatrixHTML0.getRowName(0);
      intArray3[2] = 25;
      intArray3[3] = 2;
      intArray3[4] = 97;
      intArray3[5] = 0;
      intArray3[6] = 1;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      int[] intArray4 = new int[2];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray1[6] = intArray4;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0967875911748934
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(5, 564);
      resultMatrixCSV0.m_StdDevWidth = 1;
      resultMatrixPlainText0.setSignificanceWidth(564);
      resultMatrixPlainText0.m_RankingDiff = null;
      resultMatrixPlainText0.getColName(1527);
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.m_RankingDiff = null;
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.enumerateColNamesTipText();
      resultMatrixCSV0.setCount(0, 0.0);
      resultMatrixCSV0.setCountWidth(851);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultPrintColNames();
      String[][] stringArray0 = new String[1][6];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.getDefaultCountWidth();
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4847805433267096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.padString(" & $pm$ & ", 49, true);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot1);
      resultMatrixLatex0.getStdDev((-256), 2);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixLatex0.setEnumerateColNames(true);
      int int0 = 307;
      resultMatrixLatex0.setRowHidden(307, true);
      resultMatrixLatex0.setRowNameWidth(1);
      resultMatrixPlainText0.setMeanPrec(18);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.getMeanPrec();
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance((-1), 1998);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6663758259158366
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.padString(" & $pm$ & ", 49, true);
      int[][] intArray0 = new int[6][5];
      int[] intArray1 = new int[4];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 1;
      intArray1[3] = 49;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 1;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray2[6] = (-3221);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 49;
      intArray4[1] = 1;
      intArray4[2] = 0;
      intArray4[3] = 1;
      intArray4[4] = 2;
      intArray4[5] = 49;
      intArray4[6] = 0;
      intArray4[7] = 49;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = (-3221);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[5];
      intArray6[0] = 2;
      intArray6[1] = (-3221);
      intArray6[2] = 2;
      intArray6[3] = 49;
      intArray6[4] = 2;
      intArray0[5] = intArray6;
      resultMatrixGnuPlot0.m_Significance = intArray0;
      resultMatrixGnuPlot0.m_EnumerateRowNames = true;
      int[] intArray7 = new int[1];
      intArray7[0] = 49;
      resultMatrixGnuPlot0.setRowOrder(intArray7);
      resultMatrixGnuPlot0.m_MeanPrec = 49;
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      
      resultMatrixGnuPlot0.m_StdDevWidth = 1;
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixHTML0.globalInfo();
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5364644427512277
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.m_ColOrder = null;
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.setRowOrder((int[]) null);
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      String[] stringArray0 = new String[0];
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixPlainText0.m_Mean = doubleArray0;
      resultMatrixPlainText0.toStringRanking();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.m_ColNames = stringArray0;
      resultMatrixLatex0.toStringSummary();
      assertEquals(0, resultMatrixLatex0.getRowCount());
      
      resultMatrixLatex0.setSize(1, 2);
      resultMatrixGnuPlot0.clear();
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8997571011430585
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(5, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(1, 2);
      resultMatrixLatex1.isSignificance((-3214));
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixLatex1.getSignificance(2, 0);
      assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
      
      int int0 = resultMatrixGnuPlot0.getSignificanceCount(3, (-3214));
      assertEquals(0, int0);
      
      resultMatrixGnuPlot0.toStringSummary();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1417070364814803
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[1];
      resultMatrixCSV0.LEFT_PARENTHESES = "-stddev-width";
      intArray1[0] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      intArray0[1] = intArray2;
      resultMatrixCSV1.m_NonSigWins = intArray0;
      resultMatrixCSV0.setMeanWidth(0);
      resultMatrixCSV0.setEnumerateColNames(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixCSV1.getDefaultPrintColNames();
      resultMatrixGnuPlot0.listOptions();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixCSV1.getDefaultMeanWidth();
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1737308471617354
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.19055349530931
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.padString("", 0);
      resultMatrixLatex0.m_EnumerateColNames = true;
      resultMatrixLatex0.setCountWidth(1197);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.toArray();
      assertEquals(1197, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9283508907252958
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setColNameWidth(50);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 3);
      resultMatrixLatex0.padString("", 2);
      int[] intArray0 = new int[6];
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 2;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.setColName(3, "0");
      resultMatrixPlainText0.setPrintColNames(false);
      resultMatrixPlainText0.setColHidden(44, true);
      assertEquals(50, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2862300994995204
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      
      resultMatrixHTML0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 25);
      int[] intArray0 = new int[7];
      int[][] intArray1 = new int[7][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 1;
      intArray2[2] = 0;
      intArray1[3] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 25;
      intArray3[1] = 25;
      intArray3[2] = 0;
      intArray3[3] = 2;
      intArray3[4] = 97;
      intArray3[5] = 0;
      intArray3[6] = 1;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      int[] intArray4 = new int[2];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray1[6] = intArray4;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.setColName(0, " ");
      resultMatrixPlainText0.setPrintColNames(true);
      resultMatrixPlainText0.setColHidden(0, true);
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8673238775744068
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setColNameWidth(50);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 3);
      resultMatrixLatex0.padString("", 2);
      int[][] intArray0 = new int[9][2];
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.setRanking(intArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.setColName(803, "*");
      resultMatrixPlainText0.setPrintColNames(true);
      resultMatrixPlainText0.setColHidden(1, true);
      assertEquals(50, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.26506530009311
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 2);
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixHTML0.m_HeaderKeys = vector0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 25);
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[7];
      intArray1[0] = 97;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 2;
      resultMatrixGnuPlot0.toStringKey();
      intArray1[6] = 1;
      intArray0[0] = intArray1;
      resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
      resultMatrixCSV0.getDefaultShowAverage();
      resultMatrixGnuPlot0.globalInfo();
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowCount());
      
      resultMatrixHTML0.showStdDevTipText();
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8526379562735795
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getEnumerateRowNames();
      int int0 = 581;
      resultMatrixLatex0.getStdDev(1403, (-3380));
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-3746), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2770082047340865
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.m_EnumerateRowNames = true;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      int[][] intArray0 = new int[0][0];
      resultMatrixCSV0.setColNameWidth(0);
      resultMatrixCSV0.getDisplayName();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.toStringMatrix();
      resultMatrixCSV1.setPrintRowNames(true);
      // Undeclared exception!
      try { 
        resultMatrixCSV1.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2005085359253562
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.padString("", 3);
      assertEquals("   ", string0);
      
      resultMatrixLatex0.setCountWidth(0);
      resultMatrixLatex0.m_PrintColNames = false;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.m_ShowStdDev = false;
      String[][] stringArray0 = resultMatrixHTML0.toArray();
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(3, stringArray0.length);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      
      resultMatrixLatex0.getDefaultStdDevPrec();
      assertFalse(resultMatrixLatex0.getPrintColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1977619866876243
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearSummary();
      String string0 = resultMatrixLatex0.padString("", 3);
      assertEquals("   ", string0);
      
      resultMatrixLatex0.setCountWidth(0);
      resultMatrixLatex0.m_PrintColNames = false;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 1;
      resultMatrixHTML0.m_RowOrder = intArray0;
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      
      String[][] stringArray0 = resultMatrixHTML0.toArray();
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(3, stringArray0.length);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2509410406676764
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_RemoveFilterName = false;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setMeanWidth((-373));
      resultMatrixCSV0.setEnumerateColNames(true);
      resultMatrixCSV0.m_SignificanceWidth = 1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixCSV0.LOSS_STRING = null;
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[][] stringArray1 = new String[0][0];
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize(stringArray1, 592);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0777424019060398
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.padString("", 3);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setCount((-4210), 1186.3670738473215);
      resultMatrixCSV0.setCountWidth(23);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultPrintColNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[][] stringArray0 = new String[0][2];
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize(stringArray0, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.236652045608728
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.clearSummary();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      resultMatrixHTML0.m_SignificanceWidth = (-2307);
      booleanArray0[0] = false;
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[0];
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(1, 2);
      resultMatrixGnuPlot1.toStringSummary();
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      
      resultMatrixHTML0.globalInfo();
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9101319299993302
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 3);
      resultMatrixLatex0.m_StdDevWidth = 0;
      resultMatrixLatex0.isSignificance(2813);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixGnuPlot0.stdDevWidthTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      resultMatrixHTML0.setRowOrder(intArray0);
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(1, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.385917486474305
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultShowStdDev();
      resultMatrixPlainText0.getDefaultStdDevWidth();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      resultMatrixPlainText1.setColName(2, "Whether to output column names or just numbers representing them.");
      resultMatrixPlainText1.setPrintColNames(false);
      assertFalse(resultMatrixPlainText1.getPrintColNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[2][6];
      int[] intArray1 = new int[1];
      intArray1[0] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 0;
      intArray2[1] = 1;
      intArray0[1] = intArray2;
      resultMatrixCSV0.setRanking(intArray0);
      resultMatrixPlainText0.getRevision();
      resultMatrixCSV0.setColNameWidth((-1));
      resultMatrixCSV0.getDefaultMeanPrec();
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixCSV0.showStdDevTipText();
      String string1 = resultMatrixCSV0.padString(" ", 2, false);
      assertEquals("  ", string1);
      
      resultMatrixPlainText0.getDefaultMeanWidth();
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2062651007397753
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      resultMatrixHTML0.m_EnumerateRowNames = true;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(1, 0);
      resultMatrixHTML1.toStringRanking();
      int int0 = resultMatrixCSV0.getStdDevWidth();
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, int0);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.26506530009311
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 25);
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[7];
      intArray1[0] = 97;
      intArray1[1] = 2;
      intArray1[2] = 2;
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 97;
      doubleArray1[1] = (double) 2;
      doubleArray0[0] = doubleArray1;
      resultMatrixCSV0.m_Mean = doubleArray0;
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 2;
      intArray1[6] = 1;
      intArray0[0] = intArray1;
      resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
      resultMatrixGnuPlot0.colNameWidthTipText();
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.266344401956241
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      resultMatrixHTML0.toStringMatrix();
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      resultMatrixHTML0.m_EnumerateRowNames = true;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.setColName(0, ")");
      resultMatrixPlainText0.setPrintColNames(true);
      resultMatrixPlainText0.setColHidden(67, false);
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.489795679964292
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.getEnumerateRowNames();
      resultMatrixLatex0.getStdDev(581, 2);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.setRowHidden(183, true);
      resultMatrixLatex0.setRowNameWidth(0);
      resultMatrixLatex0.getRowHidden(5);
      resultMatrixPlainText0.setMeanPrec(581);
      resultMatrixLatex0.getMeanPrec();
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1002, 2);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 1;
      String string0 = resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.setColName(1, string0);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8466796372141983
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = new String[6];
      stringArray0[0] = " ";
      stringArray0[1] = "v";
      stringArray0[2] = "*";
      stringArray0[3] = " ";
      stringArray0[4] = "*";
      stringArray0[5] = "[";
      resultMatrixCSV0.m_ColNames = stringArray0;
      resultMatrixCSV0.m_ColNameWidth = 1025;
      resultMatrixCSV0.m_RemoveFilterName = false;
      resultMatrixCSV0.setStdDevPrec(1025);
      resultMatrixCSV0.m_CountWidth = 1710;
      resultMatrixCSV0.getSummaryTitle(1);
      resultMatrixCSV0.meanPrecTipText();
      int int0 = resultMatrixCSV0.getRowCount();
      assertEquals(1025, resultMatrixCSV0.getStdDevPrec());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.004740163971579
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setColNameWidth(50);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 3);
      resultMatrixLatex0.padString("", 2);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      resultMatrixLatex0.isSignificance(9);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixLatex0.getSignificance(975, (-265));
      resultMatrixGnuPlot0.getSignificanceCount((-2442), 204);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixHTML0.listOptions();
      assertEquals(50, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.834737490139163
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 0);
      boolean boolean0 = resultMatrixLatex0.isSignificance(2813);
      assertTrue(boolean0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      
      resultMatrixLatex0.getSignificance((-1892), (-1892));
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(1, resultMatrixLatex0.getColCount());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.151973518533872
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getEnumerateRowNames();
      int int0 = 581;
      resultMatrixLatex0.getStdDev(0, 1);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 581);
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4802019318013695
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getStdDev(0, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixLatex0.setEnumerateColNames(false);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.setRowHidden(0, false);
      resultMatrixLatex0.setRowNameWidth(1);
      resultMatrixLatex0.getRowHidden(279);
      resultMatrixPlainText0.setMeanPrec(4538);
      resultMatrixLatex1.getMeanPrec();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(26, 2);
      ResultMatrixSignificance resultMatrixSignificance1 = null;
      try {
        resultMatrixSignificance1 = new ResultMatrixSignificance((-2805), (-811));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2716827438452745
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      resultMatrixHTML0.toStringMatrix();
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      resultMatrixHTML0.m_EnumerateRowNames = true;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      int[][] intArray0 = new int[0][0];
      resultMatrixCSV0.setRanking(intArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.setColName(1, "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n");
      resultMatrixPlainText0.setPrintColNames(true);
      resultMatrixPlainText0.setColHidden(0, true);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3079332192044304
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      resultMatrixHTML0.m_RowOrder = intArray0;
      resultMatrixHTML0.m_Wins = null;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8466796372141983
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      boolean boolean0 = true;
      resultMatrixCSV0.setRemoveFilterName(true);
      resultMatrixCSV0.setRowNameWidth(1562);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSummary((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.950391601025311
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2);
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.setRowHidden((-748), true);
      resultMatrixLatex0.setRowNameWidth(1);
      resultMatrixLatex0.getRowHidden(1);
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-3787), 515);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2544935784296145
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.toStringRanking();
      resultMatrixGnuPlot0.getOptions();
      resultMatrixGnuPlot0.setColHidden((-247), false);
      resultMatrixGnuPlot0.rowNameWidthTipText();
      int[][] intArray0 = new int[5][1];
      int[] intArray1 = new int[9];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 2;
      intArray1[6] = 0;
      intArray1[7] = 2;
      intArray1[8] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = (-247);
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray3[2] = 1;
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 97;
      intArray5[1] = 0;
      intArray5[2] = 0;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.788626037967038
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.setMeanWidth(1);
      resultMatrixPlainText0.m_MeanWidth = 793;
      resultMatrixPlainText0.m_ShowAverage = true;
      assertEquals(1, resultMatrixGnuPlot0.getMeanWidth());
      
      resultMatrixGnuPlot0.m_MeanWidth = 0;
      resultMatrixPlainText0.m_EnumerateRowNames = true;
      resultMatrixPlainText0.setEnumerateRowNames(true);
      resultMatrixPlainText0.m_StdDev = null;
      resultMatrixGnuPlot0.getDisplayName();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setColNameWidth(3344);
      resultMatrixCSV0.WIN_STRING = "v";
      resultMatrixCSV0.m_MeanWidth = 1917;
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.getDefaultRemoveFilterName();
      resultMatrixPlainText0.countWidthTipText();
      resultMatrixCSV0.getRowHidden(2);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixPlainText0.setRemoveFilterName(false);
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.5438172463429365
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_StdDevPrec = 97;
      resultMatrixCSV0.setColNameWidth(50);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.m_ColNameWidth = 0;
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getCountWidth();
      resultMatrixCSV0.getMeanWidth();
      resultMatrixCSV0.getRowOrder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      ResultMatrixLatex.main(stringArray0);
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.getPrintRowNames();
      assertEquals(97, resultMatrixCSV0.getStdDevPrec());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringKey();
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.RIGHT_PARENTHESES = "";
      resultMatrixSignificance0.meanWidthTipText();
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.996306798305616
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 833;
      intArray0[5] = (-2089);
      intArray0[6] = 0;
      intArray0[7] = 2;
      intArray0[8] = 1;
      resultMatrixPlainText0.m_RankingLosses = intArray0;
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultShowStdDev();
      resultMatrixPlainText0.getDefaultStdDevWidth();
      resultMatrixPlainText0.setColName(567, "Generates the output as plain text (for fixed width fonts).");
      resultMatrixPlainText0.setPrintColNames(false);
      resultMatrixPlainText0.countWidthTipText();
      ResultMatrixPlainText resultMatrixPlainText1 = null;
      try {
        resultMatrixPlainText1 = new ResultMatrixPlainText((-900), 26);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.34030467889304
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      resultMatrixCSV0.setStdDevPrec(0);
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.m_ColNameWidth = 1334;
      resultMatrixCSV0.getOptions();
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0863741003285914
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      resultMatrixPlainText0.m_ColHidden = booleanArray0;
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.showAverageTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.doubleToString(1, 0);
      resultMatrixCSV0.setEnumerateColNames(false);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixCSV0.m_HeaderValues = vector0;
      resultMatrixCSV0.toStringSummary();
      int int0 = resultMatrixCSV0.getDisplayRow(6);
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.267702965736289
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.setColNameWidth(0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getHeader("*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.173730847161735
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toString();
      resultMatrixCSV0.LEFT_PARENTHESES = "";
      resultMatrixCSV0.clearRanking();
      resultMatrixCSV0.setStdDevPrec(1544);
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixCSV0.m_RowNameWidth = 5773;
      resultMatrixCSV0.m_ColNameWidth = 2;
      resultMatrixCSV0.doubleToString((-2203.1079158849), 2);
      resultMatrixCSV0.isRowName(2);
      assertEquals(1544, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.892526676634873
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 3);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.listOptions();
      resultMatrixHTML0.addHeader("(", "tJjRbj^/h@V");
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9154793492940043
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      resultMatrixPlainText0.setEnumerateRowNames(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDisplayName();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.setColNameWidth(1901);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(1, 1);
      resultMatrixPlainText1.getDefaultRemoveFilterName();
      resultMatrixPlainText1.countWidthTipText();
      resultMatrixCSV0.getRowHidden(0);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixPlainText0.setRemoveFilterName(true);
      resultMatrixCSV0.getDefaultRowNameWidth();
      assertEquals(1901, resultMatrixCSV0.getColNameWidth());
      
      resultMatrixGnuPlot0.getPrintRowNames();
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.318436764415039
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixLatex0.clearRanking();
      resultMatrixHTML0.doubleToString(1, 2);
      resultMatrixHTML0.addHeader(")", "row-name-width");
      resultMatrixHTML0.toStringMatrix();
      resultMatrixPlainText0.RIGHT_PARENTHESES = " ";
      resultMatrixHTML0.setRemoveFilterName(true);
      resultMatrixPlainText0.getPrintRowNames();
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.stdDevPrecTipText();
      resultMatrixPlainText0.setSignificance(0, 2, 0);
      assertTrue(resultMatrixHTML0.getRemoveFilterName());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.setMeanWidth(1);
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getHeader("-row-name-width");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.631612186595399
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_RemoveFilterName = false;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setMeanWidth((-373));
      resultMatrixCSV0.setEnumerateColNames(true);
      resultMatrixCSV0.m_ShowStdDev = false;
      resultMatrixCSV0.m_SignificanceWidth = 1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      resultMatrixCSV0.getDefaultPrintColNames();
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      resultMatrixGnuPlot1.assign(resultMatrixGnuPlot0);
      resultMatrixGnuPlot1.listOptions();
      assertTrue(resultMatrixGnuPlot1.getPrintColNames());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.4108946955947728
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.clearSummary();
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      resultMatrixHTML0.m_SignificanceWidth = (-2307);
      booleanArray0[1] = false;
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      resultMatrixHTML0.setMeanPrec((-2307));
      resultMatrixHTML0.getStdDev(3951, 3951);
      resultMatrixHTML0.getDefaultMeanWidth();
      resultMatrixHTML0.getDefaultMeanPrec();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "v";
      stringArray0[2] = ")";
      stringArray0[3] = " ";
      stringArray0[4] = ")";
      stringArray0[5] = ")";
      stringArray0[6] = ")";
      stringArray0[7] = ")";
      ResultMatrixCSV.main(stringArray0);
      resultMatrixHTML0.getPrintRowNames();
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0179577292336344
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setColNameWidth(50);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 3);
      resultMatrixLatex0.padString("", 2);
      int[][] intArray0 = new int[9][2];
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 2;
      intArray3[3] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray4[2] = 2;
      intArray4[3] = 0;
      intArray4[4] = 2;
      intArray4[5] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 50;
      intArray5[1] = 50;
      intArray5[2] = 50;
      intArray5[3] = 1;
      intArray5[4] = 50;
      intArray5[5] = 11;
      intArray5[6] = 2;
      intArray5[7] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      intArray6[0] = 11;
      intArray6[1] = 0;
      intArray6[2] = 50;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[1];
      intArray7[0] = 11;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = 50;
      intArray8[1] = 1;
      intArray8[2] = 1;
      intArray8[3] = 1;
      intArray8[4] = 11;
      intArray8[5] = 50;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[8];
      intArray9[0] = 2;
      intArray9[1] = 11;
      intArray9[2] = 0;
      intArray9[3] = 0;
      intArray9[4] = 1;
      intArray9[5] = 8;
      intArray9[6] = 2;
      intArray9[7] = 2;
      intArray0[8] = intArray9;
      resultMatrixHTML0.setRanking(intArray0);
      resultMatrixLatex0.setCountWidth((-708));
      ResultMatrixHTML resultMatrixHTML1 = null;
      try {
        resultMatrixHTML1 = new ResultMatrixHTML((ResultMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2776090594889515
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(5, 564);
      resultMatrixCSV0.m_StdDevWidth = 5;
      resultMatrixPlainText0.setSignificanceWidth(564);
      resultMatrixPlainText0.m_RankingDiff = null;
      resultMatrixPlainText0.getColName(1527);
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.m_RankingDiff = null;
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.enumerateColNamesTipText();
      resultMatrixCSV0.setCount(0, 0.0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.1723890084633672
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.getRowHidden(5);
      resultMatrixLatex0.setStdDevWidth((-95));
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 1);
      resultMatrixPlainText0.RIGHT_PARENTHESES = "!*3.F>Ir&81PR&N4u)B";
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.0863741003285914
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1227, 3);
      resultMatrixPlainText0.printRowNamesTipText();
      resultMatrixPlainText0.toStringSummary();
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 3032;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 3032;
      doubleArray2[4] = (double) 1227;
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 3032;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      resultMatrixPlainText0.m_Mean = doubleArray0;
      resultMatrixPlainText0.m_RemoveFilterName = false;
      resultMatrixPlainText0.setColName(3032, "");
      resultMatrixPlainText0.setPrintColNames(false);
      resultMatrixPlainText0.setColHidden(3032, false);
      resultMatrixPlainText0.removeFilterName("\tThe width of the significance indicator (0 = optimal).\n\t(default: ");
      assertFalse(resultMatrixPlainText0.getPrintColNames());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2659132320951225
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.m_EnumerateRowNames = true;
      resultMatrixHTML0.toStringMatrix();
      int[][] intArray0 = new int[0][0];
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixHTML0.setStdDevWidth(2974);
      int[] intArray1 = new int[1];
      resultMatrixGnuPlot0.setRowOrder(intArray1);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixHTML0.globalInfo();
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.242412251448059
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_StdDevWidth = 0;
      resultMatrixHTML0.setStdDevWidth(576);
      resultMatrixHTML0.globalInfo();
      resultMatrixHTML0.setShowStdDev(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      resultMatrixHTML0.toStringRanking();
      resultMatrixHTML0.toStringMatrix();
      intArray0[1] = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1790.0);
      doubleArray0[5] = (double) 576;
      doubleArray0[6] = (double) 0;
      resultMatrixHTML0.m_Counts = doubleArray0;
      resultMatrixCSV0.setPrintRowNames(true);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 2;
      resultMatrixCSV0.m_ColNameWidth = 0;
      intArray0[6] = 0;
      resultMatrixCSV0.m_RankingDiff = intArray0;
      resultMatrixCSV0.toStringMatrix();
      resultMatrixHTML0.getVisibleColCount();
      String string0 = resultMatrixCSV0.removeFilterName("v");
      assertTrue(resultMatrixHTML0.getShowStdDev());
      assertEquals("v", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8588959059829886
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.setPrintRowNames(true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.m_StdDevPrec = 1;
      resultMatrixPlainText0.globalInfo();
      resultMatrixGnuPlot0.toStringRanking();
      resultMatrixHTML0.trimString("v", 1);
      resultMatrixHTML0.getAverage(2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      int int0 = (-24);
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(0, (-24));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.setMeanWidth(1);
      resultMatrixPlainText0.m_MeanWidth = 793;
      resultMatrixPlainText0.m_ShowAverage = true;
      assertEquals(1, resultMatrixGnuPlot0.getMeanWidth());
      
      resultMatrixGnuPlot0.m_MeanWidth = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setColNameWidth(1);
      resultMatrixCSV0.getDisplayName();
      resultMatrixCSV0.getDefaultMeanPrec();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.getDefaultEnumerateColNames();
      assertTrue(resultMatrixHTML0.getPrintRowNames());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0874438743219548
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixHTML0.m_PrintColNames = false;
      resultMatrixPlainText0.setStdDevPrec(1488);
      resultMatrixPlainText0.toStringKey();
      resultMatrixHTML0.getVisibleRowCount();
      resultMatrixLatex0.getColNameWidth();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixLatex0.setEnumerateRowNames(false);
      resultMatrixPlainText0.headerKeys();
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.getColOrder();
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance((-558), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.536679082246238
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearSummary();
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 2;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 98);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixPlainText0.toStringRanking();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.toStringSummary();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSize(98, (-234));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.897799510665294
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 3;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 3);
      resultMatrixCSV0.m_ShowStdDev = true;
      int[] intArray0 = new int[8];
      resultMatrixCSV0.clearHeader();
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixCSV0.setSize(0, 853);
      intArray0[3] = 3;
      intArray0[4] = 3;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 0);
      resultMatrixCSV0.assign(resultMatrixGnuPlot0);
      resultMatrixCSV0.setSignificanceWidth(0);
      intArray0[5] = 2;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1824451341194315
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_RemoveFilterName = false;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setMeanWidth((-373));
      resultMatrixCSV0.setEnumerateColNames(true);
      resultMatrixCSV0.m_SignificanceWidth = 1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixCSV0.LOSS_STRING = null;
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixGnuPlot0.listOptions();
      resultMatrixCSV0.getDefaultMeanWidth();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 37);
      resultMatrixHTML0.getDefaultRowNameWidth();
      assertEquals(37, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3302192402770427
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.m_ColOrder = null;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setMeanWidth(1);
      resultMatrixCSV0.setEnumerateColNames(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixGnuPlot0.listOptions();
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.758489204029649
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.getDefaultRowNameWidth();
      resultMatrixPlainText0.toStringRanking();
      boolean boolean0 = resultMatrixPlainText0.getPrintRowNames();
      assertTrue(boolean0);
      
      resultMatrixPlainText0.setRowHidden(3, true);
      resultMatrixPlainText0.getRevision();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n1 & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.372853219399881
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_StdDevPrec = 87;
      resultMatrixCSV0.setColNameWidth(50);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.m_ColNameWidth = 0;
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getCountWidth();
      resultMatrixCSV0.getMeanWidth();
      resultMatrixCSV0.getRowOrder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(874, 0);
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixCSV0.getDefaultPrintColNames();
      assertTrue(resultMatrixCSV0.getShowAverage());
      
      resultMatrixGnuPlot0.listOptions();
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.2401140033027582
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.removeFilterName((String) null);
      resultMatrixGnuPlot0.headerKeys();
      String string0 = resultMatrixGnuPlot0.padString("J;770>t$DsEmJ$", (-1));
      assertEquals("J;770>t$DsEmJ$", string0);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setPrintColNames(false);
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 2;
      doubleArray2[8] = (double) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) (-1);
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 2;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = (double) 2;
      doubleArray0[5] = doubleArray6;
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.m_CountWidth = (-1);
      resultMatrixPlainText0.getDefaultCountWidth();
      String[][] stringArray0 = resultMatrixPlainText0.toArray();
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(3, stringArray0.length);
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6808649498588037
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[][] intArray0 = new int[7][7];
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray2[2] = 0;
      resultMatrixPlainText0.setShowAverage(false);
      intArray2[3] = 26;
      intArray2[4] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      intArray3[1] = (-150);
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray3[4] = 1;
      intArray3[5] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = 0;
      intArray4[1] = 26;
      intArray4[2] = 0;
      intArray4[3] = 1;
      intArray4[4] = 2;
      intArray4[5] = (-150);
      intArray4[6] = 26;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.getDisplayName();
      resultMatrixCSV0.getDefaultMeanPrec();
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 0);
      resultMatrixHTML0.getDefaultEnumerateColNames();
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.4970930175741586
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getColCount());
      
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.m_EnumerateRowNames = true;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.setMeanWidth(1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2311, 0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n";
      resultMatrixGnuPlot0.m_CountWidth = (-5134);
      stringArray0[1] = "u8NlSr[)3=";
      stringArray0[2] = "*";
      stringArray0[3] = ")";
      stringArray0[4] = "v";
      stringArray0[5] = "v";
      stringArray0[6] = "v";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getDefaultStdDevWidth();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.5489290447603805
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.m_ColOrder = null;
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.setRowOrder((int[]) null);
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      String[] stringArray0 = new String[0];
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixPlainText0.m_Mean = doubleArray0;
      resultMatrixPlainText0.toStringRanking();
      int[][] intArray0 = new int[4][5];
      intArray0[0] = null;
      intArray0[1] = null;
      intArray0[2] = null;
      intArray0[3] = null;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.9060599619359384
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 3);
      resultMatrixLatex0.m_StdDevWidth = 0;
      resultMatrixLatex0.isSignificance(2813);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      resultMatrixGnuPlot0.m_RowHidden = booleanArray0;
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixLatex0.getSignificance(0, 0);
      resultMatrixGnuPlot0.getSignificanceCount(0, 0);
      resultMatrixGnuPlot0.toStringSummary();
      assertEquals(0, resultMatrixGnuPlot0.getVisibleRowCount());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.519158642434157
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[0];
      ResultMatrixHTML.main(stringArray0);
      int int0 = 3139;
      resultMatrixHTML0.padString("mean-width", 3139);
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.getDefaultSignificanceWidth();
      resultMatrixHTML0.setShowAverage(false);
      resultMatrixHTML0.toArray();
      resultMatrixHTML0.setCount(0, 1.0);
      resultMatrixHTML0.printRowNamesTipText();
      resultMatrixHTML0.isStdDev(3139);
      int int1 = 4554;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(4554, 4554);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.8884873040760866
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setColNameWidth(50);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 3);
      resultMatrixLatex0.padString("", 2);
      int[][] intArray0 = new int[9][2];
      int[] intArray1 = new int[6];
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 2;
      intArray1[5] = 2;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[17];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 2;
      intArray3[3] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray4[2] = 2;
      intArray4[3] = 0;
      intArray4[4] = 2;
      intArray4[5] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 50;
      intArray5[2] = 50;
      intArray5[3] = 1;
      intArray5[4] = 50;
      intArray5[5] = 11;
      intArray5[6] = 2;
      intArray5[7] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      intArray6[0] = 11;
      intArray6[1] = 0;
      intArray6[2] = 50;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[1];
      intArray7[0] = 11;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = 50;
      intArray8[1] = 1;
      intArray8[2] = 1;
      intArray8[3] = 1;
      intArray8[4] = 11;
      intArray8[5] = 50;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[8];
      intArray9[0] = 2;
      intArray9[1] = 11;
      intArray9[2] = 0;
      intArray9[3] = 0;
      intArray9[4] = 1;
      intArray9[5] = 8;
      intArray9[6] = 2;
      intArray9[7] = 2;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8720839929340602
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.m_CountWidth = 0;
      int[][] intArray0 = new int[9][2];
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 1;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 1;
      intArray3[5] = 1;
      intArray3[6] = 0;
      intArray3[7] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 0;
      intArray4[3] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 830;
      intArray5[1] = 1;
      intArray5[2] = 1;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      intArray6[0] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = 2;
      intArray7[1] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      intArray8[0] = 0;
      intArray8[1] = 0;
      intArray8[2] = 1;
      intArray8[3] = 0;
      intArray8[4] = 0;
      intArray8[5] = 0;
      intArray8[6] = 1;
      intArray8[7] = 2;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[5];
      intArray9[0] = 0;
      intArray9[1] = 2;
      intArray9[2] = 1;
      intArray9[3] = 0;
      intArray9[4] = 2;
      intArray0[8] = intArray9;
      resultMatrixSignificance0.m_Significance = intArray0;
      int int1 = 1;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.470165908410243
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_ShowStdDev = true;
      resultMatrixPlainText0.RIGHT_PARENTHESES = "";
      resultMatrixPlainText0.m_EnumerateRowNames = false;
      resultMatrixPlainText0.stdDevPrecTipText();
      resultMatrixPlainText0.getDefaultPrintRowNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.setSignificanceWidth((-644));
      resultMatrixSignificance0.m_RowOrder = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.227782071551611
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(17, 2);
      resultMatrixCSV0.setStdDevPrec(17);
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.m_ColNameWidth = 1328;
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.toArray();
      resultMatrixCSV0.getDefaultColNameWidth();
      resultMatrixCSV0.getDefaultMeanWidth();
      assertEquals(17, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.6486255461118287
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 1;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 2;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 4522.2910446;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = (double) 1;
      doubleArray5[6] = (double) 1;
      doubleArray5[7] = (double) 1;
      doubleArray5[8] = (double) 1;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (double) 0;
      doubleArray7[3] = (double) 1;
      doubleArray7[4] = (double) 0;
      doubleArray7[5] = (double) 1;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = 4522.2910446;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (double) 2;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = 0.0;
      doubleArray0[7] = doubleArray8;
      resultMatrixGnuPlot0.m_StdDev = doubleArray0;
      resultMatrixLatex0.getDefaultPrintColNames();
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n1 & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertTrue(resultMatrixLatex0.getPrintColNames());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3766390631005447
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "sig-width";
      stringArray0[1] = "K^";
      stringArray0[2] = "pG4_8]DrYN-~9)3 ";
      ResultMatrixCSV.main(stringArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setEnumerateRowNames(false);
      resultMatrixLatex0.padString("", 597);
      String[][] stringArray1 = resultMatrixLatex0.toArray();
      assertEquals(3, stringArray1.length);
      
      resultMatrixLatex0.LOSS_STRING = "pG4_8]DrYN-~9)3 ";
      resultMatrixLatex0.getColHidden(102);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      String string0 = resultMatrixCSV0.toStringKey();
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("Key,\n(1),col0\n", string0);
      
      resultMatrixLatex0.clear();
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.20639120287996
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(5, 564);
      resultMatrixCSV0.m_StdDevWidth = 5;
      resultMatrixPlainText0.setSignificanceWidth(564);
      resultMatrixPlainText0.m_RankingDiff = null;
      resultMatrixPlainText0.getColName(1527);
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.m_RankingDiff = null;
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.enumerateColNamesTipText();
      resultMatrixCSV0.setCount(0, 0.0);
      resultMatrixCSV0.setCountWidth(851);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultPrintColNames();
      String[][] stringArray0 = new String[1][6];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getHeader("(\"mk bBeyP!A");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.1536817275549054
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.setMeanWidth(1);
      resultMatrixPlainText0.m_StdDevWidth = 1;
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      
      resultMatrixPlainText0.m_MeanWidth = 793;
      resultMatrixPlainText0.m_ShowAverage = true;
      resultMatrixPlainText0.m_EnumerateRowNames = true;
      resultMatrixPlainText0.setEnumerateRowNames(true);
      resultMatrixPlainText0.m_StdDev = null;
      resultMatrixGnuPlot0.getDisplayName();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex0.setCountWidth(10);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toArray();
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.611255343674654
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevPrec(17);
      resultMatrixCSV0.m_RemoveFilterName = true;
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixCSV0.m_RowOrder = intArray0;
      resultMatrixCSV0.m_ColNameWidth = 1347;
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.setShowStdDev(true);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.259519702930618
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevPrec((-24));
      int[] intArray0 = new int[1];
      resultMatrixCSV0.m_RowOrder = intArray0;
      resultMatrixCSV0.m_ColNameWidth = 1347;
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.toArray();
      resultMatrixCSV0.getDefaultColNameWidth();
      resultMatrixCSV0.getDefaultMeanWidth();
      resultMatrixCSV0.getColOrder();
      assertEquals(1347, resultMatrixCSV0.getColNameWidth());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.1070735891433388
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.getRevision();
      Vector<String> vector0 = new Vector<String>();
      resultMatrixCSV0.m_HeaderKeys = vector0;
      resultMatrixLatex0.m_RowNameWidth = 554;
      String string0 = resultMatrixCSV0.doubleToString(0.0, 554);
      assertEqualsstring0);
      
      Vector<String> vector1 = new Vector<String>();
      resultMatrixCSV0.m_HeaderValues = vector1;
      resultMatrixCSV0.setCount(1, 1);
      resultMatrixLatex0.getPrintColNames();
      resultMatrixLatex0.getColHidden(1);
      resultMatrixLatex0.isStdDev(26);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      boolean boolean0 = resultMatrixGnuPlot0.isRowName(574);
      assertFalse(boolean0);
      
      resultMatrixGnuPlot0.clear();
      resultMatrixCSV0.getRowName(26);
      String[][] stringArray0 = new String[2][2];
      String[] stringArray1 = new String[3];
      stringArray1[0] = " ";
      stringArray1[1] = "$\bullet$";
      stringArray1[2] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[8];
      stringArray2[0] = "$\bullet$";
      stringArray2[1] = "*";
      stringArray2[2] = "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      stringArray2[3] = "";
      stringArray2[4] = "8:y'`?: W8Pp~rx";
      stringArray2[5] = "v";
      stringArray2[6] = "0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
      stringArray2[7] = " ";
      stringArray0[1] = stringArray2;
      int int0 = resultMatrixCSV0.getColSize(stringArray0, 574);
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, int0);
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.5120273188229336
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 2);
      resultMatrixCSV0.m_PrintRowNames = false;
      resultMatrixCSV0.getColName((-47));
      resultMatrixCSV0.getDefaultPrintRowNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixCSV0.getOptions();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixHTML0.m_RowOrder = intArray0;
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.showStdDevTipText();
      resultMatrixCSV0.setShowStdDev(true);
      resultMatrixHTML0.doubleToString(Double.NaN, 25);
      resultMatrixHTML0.setCount(1698, 2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 1);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.doubleToString(2, 0);
      resultMatrixHTML0.setEnumerateRowNames(true);
      resultMatrixCSV0.toStringSummary();
      assertTrue(resultMatrixCSV0.getShowStdDev());
      
      resultMatrixHTML0.setMeanPrec((-2130));
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.0871950491506825
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setMeanWidth((-373));
      String[] stringArray0 = new String[0];
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getDefaultStdDevWidth();
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.679706038839934
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "value2";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = "";
      stringArray0[5] = "";
      try { 
        resultMatrixGnuPlot0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
