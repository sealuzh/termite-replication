/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:53:10 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.DataMode;
import org.quickserver.net.server.DataType;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.QSAdminServerConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(0);
      nonBlockingClientHandler0.getSocketChannel();
      assertEquals("<ClientHandler-Pool#0-ID:1>", nonBlockingClientHandler0.getName());
      
      theClient0.setSocketChannel((SocketChannel) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setMaxAuthTry(0);
      theClient0.getClientAuthenticationHandler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kf-pw&%,n7#8xktKdy6");
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      theClient0.getServer();
      theClient0.getAuthenticator();
      theClient0.getServer();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2597682094192684
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.setMaxConnectionMsg("2@V `~[b:");
      theClient0.setTimeout(0);
      theClient0.getClientExtendedEventHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: null}", string0);
      
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientData();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientWriteHandler();
      TheClient theClient1 = new TheClient();
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      theClient1.getAuthenticator();
      TheClient theClient2 = new TheClient();
      theClient2.getClientBinaryHandler();
      theClient0.setMaxAuthTryMsg("Key is Writable, removing OP_WRITE from interestOps for ");
      theClient0.getClientEvent();
      assertEquals(0, theClient0.getTimeout());
      
      theClient1.getClientData();
      theClient1.getSocketChannel();
      assertTrue(theClient1.getCommunicationLogging());
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.toString();
      theClient0.toString();
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.getClientCommandHandler();
      String string0 = theClient1.toString();
      assertTrue(theClient1.getCommunicationLogging());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientData();
      theClient0.getSocket();
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1239058144637433
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setMaxConnectionMsg("");
      theClient0.setCommunicationLogging(false);
      TheClient theClient1 = new TheClient();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient1.getClientObjectHandler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.toString();
      theClient0.getMaxAuthTryMsg();
      theClient1.setCommunicationLogging(true);
      theClient0.getClientBinaryHandler();
      theClient1.getClientCommandHandler();
      assertTrue(theClient1.getCommunicationLogging());
      
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getTimeout();
      theClient0.getMaxConnectionMsg();
      theClient0.getServer();
      theClient0.setCommunicationLogging(false);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      ClientHandler clientHandler0 = null;
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientEventHandler();
      theClient0.getClientData();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      String string0 = null;
      // Undeclared exception!
      try { 
        authenticator0.handleAuthentication((ClientHandler) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // String/Byte mode not implemented!
         //
         verifyException("org.quickserver.net.server.QuickAuthenticationHandler", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1945366875886965
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      DataMode dataMode0 = DataMode.OBJECT;
      QSAdminServerConfig qSAdminServerConfig0 = new QSAdminServerConfig();
      quickServer0.configQuickServer(qSAdminServerConfig0);
      DataType dataType0 = DataType.OUT;
      quickServer0.setDefaultDataMode(dataMode0, dataType0);
      theClient0.setServer(quickServer0);
      quickServer0.getQSAdminServer();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.getServerHooks();
      quickServer0.initServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientEventHandler();
      theClient0.setMaxConnectionMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.getAuthenticator();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getSocket();
      theClient0.getClientEvent();
      theClient0.getMaxConnectionMsg();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      theClient0.getClientAuthenticationHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      theClient0.getClientCommandHandler();
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4875355522425155
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientObjectHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientCommandHandler();
      theClient0.getSocket();
      theClient0.setTimeoutMsg((String) null);
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setTimeoutMsg("");
      theClient0.getMaxAuthTryMsg();
      theClient0.getAuthenticator();
      theClient0.getClientCommandHandler();
      theClient0.getServer();
      theClient0.getClientAuthenticationHandler();
      theClient0.getTimeoutMsg();
      theClient0.getTimeoutMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      theClient0.getClientData();
      theClient0.toString();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      theClient0.getClientData();
      theClient0.getSocket();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientData();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTryMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.setMaxAuthTryMsg("");
      theClient0.getClientEvent();
      theClient0.getClientData();
      theClient0.getClientCommandHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      theClient0.toString();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3787438509194208
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("org.quickserver.net.server.TheClient");
      theClient0.setMaxAuthTryMsg("yJY");
      theClient0.getClientCommandHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getTimeoutMsg();
      theClient0.getMaxAuthTryMsg();
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientData();
      theClient0.getSocket();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setCommunicationLogging(true);
      theClient0.getClientEvent();
      theClient0.setTimeoutMsg("yJY");
      theClient0.setCommunicationLogging(true);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Close Connection)}", string0);
      
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      QuickServer quickServer0 = new QuickServer("p}{^e=0&0");
      theClient0.setServer(quickServer0);
      Data data0 = new Data();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-52);
      data0.setPassword(byteArray0);
      theClient0.setClientData(data0);
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      theClient0.setMaxAuthTry(101);
      theClient0.getMaxAuthTry();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getSocketChannel();
      theClient0.setTimeout(101);
      theClient0.getClientEvent();
      theClient0.setMaxAuthTry(0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTry(167);
      assertEquals(101, theClient0.getTimeout());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout((-34));
      theClient0.getClientExtendedEventHandler();
      theClient0.getTimeoutMsg();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientData();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getTimeout();
      theClient0.getMaxConnectionMsg();
      assertEquals((-34), theClient0.getTimeout());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getServer();
      theClient0.setServer((QuickServer) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.toString();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-1));
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      blockingClientHandler0.closeConnection();
      theClient0.setTrusted(true);
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxAuthTry((-1));
      theClient0.getSocket();
      theClient0.getTrusted();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient1.setClientData((ClientData) null);
      theClient0.getTrusted();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      assertEquals((-1), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      theClient0.setTimeoutMsg("*f8gBY");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.getClientCommandHandler();
      theClient0.setMaxConnectionMsg("");
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientObjectHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTrusted(true);
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getClientData();
      assertFalse(theClient1.getTrusted());
      
      theClient0.toString();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "+8;f@:|A#z;");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      theClient0.getSocket();
      theClient0.setSocket((Socket) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(60);
      theClient0.setTimeout(60);
      theClient0.getTimeout();
      theClient0.getClientExtendedEventHandler();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((InetAddress) null, (-1418), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getTimeout();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      QuickServer quickServer0 = new QuickServer();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.setMaxAuthTryMsg("+8;f@:|A#z;");
      theClient0.getClientEvent();
      theClient0.getClientData();
      theClient0.getClientCommandHandler();
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-1));
      theClient0.setMaxAuthTryMsg("~ Y4{");
      theClient0.getMaxConnectionMsg();
      theClient0.getMaxAuthTry();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Data data0 = new Data();
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(false);
      theClient0.setTimeout((-1));
      theClient0.getMaxAuthTry();
      theClient0.getTimeoutMsg();
      theClient0.getCommunicationLogging();
      theClient0.toString();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((String) null, 2284, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@d384947
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }
}
