/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:48:50 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2257007532327258
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(274);
      advancedSettings0.setPerformancePreferencesLatency(2724);
      advancedSettings0.setMaxThreadsForNioWrite(2724);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setCharset("");
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.getBacklog();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketSendBufferSize(487);
      advancedSettings0.setClientIdentifier(" m/");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTrafficClass(" m/");
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("$_&]U2@uN");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getBacklog();
      advancedSettings0.setCharset("");
      assertEquals(2724, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth((-1333));
      advancedSettings0.setClientIdentifier("|6r&U/l33A7&Et;,");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientIdentifier();
      assertEquals("|6r&U/l33A7&Et;,", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1333));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth((-1333));
      advancedSettings0.setClientIdentifier("|6r&U/l33A7&Et;,");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1333));
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals("|6r&U/l33A7&Et;,", advancedSettings0.getClientIdentifier());
      assertEquals((-1333), int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1333));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth((-1333));
      advancedSettings0.setClientIdentifier("|6r&U/l33A7&Et;,");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1333));
      assertEquals("|6r&U/l33A7&Et;,", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(65536, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2636337223330907
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML("2GN]\"\"-d");
      assertEquals("2GN]\"\"-d<advanced-settings>\n2GN]\"\"-d\t<charset>ISO-8859-1</charset>\n2GN]\"\"-d\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n2GN]\"\"-d\t<byte-buffer-size>65536</byte-buffer-size>\n2GN]\"\"-d\t<backlog>0</backlog>\n2GN]\"\"-d\t<socket-linger>-1</socket-linger>\n2GN]\"\"-d\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n2GN]\"\"-d\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n2GN]\"\"-d\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n2GN]\"\"-d\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n2GN]\"\"-d\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n2GN]\"\"-d\t<performance-preferences-latency>0</performance-preferences-latency>\n2GN]\"\"-d\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n2GN]\"\"-d\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n2GN]\"\"-d</advanced-settings>\n", string0);
      
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setCharset("");
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0763780407308983
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setBacklog((-2063));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize((-2063));
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setMaxThreadsForNioWrite((-2063));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setBacklog((-2063));
      advancedSettings0.setPerformancePreferencesBandwidth(2072);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientIdentifier("L/**#rAc>:VU.x");
      advancedSettings0.setClientIdentifier("ja");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesLatency(2072);
      advancedSettings0.getClientSocketTrafficClass();
      int int0 = advancedSettings0.getBacklog();
      assertEquals("ja", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.437913861070388
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-47));
      advancedSettings0.setClientSocketReceiveBufferSize((-47));
      advancedSettings0.setByteBufferSize((-47));
      advancedSettings0.toXML("-1tbjgwYU4");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize((-47));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings1.setPerformancePreferencesBandwidth(1);
      assertEquals((-47), advancedSettings1.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("", string0);
      
      advancedSettings0.setClientIdentifier("");
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      assertEquals((-1), advancedSettings1.getSocketLinger());
      assertEquals(0, advancedSettings1.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings1.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings1.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings1.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings1.getCharset());
      assertEquals(65536, advancedSettings1.getByteBufferSize());
      assertEquals(0, advancedSettings1.getPerformancePreferencesLatency());
      assertTrue(advancedSettings1.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings1.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1343);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(1343);
      advancedSettings0.setBacklog(1343);
      advancedSettings1.getClientIdentifier();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(1343, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(1343, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5272049248558623
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("2O");
      advancedSettings0.setClientSocketSendBufferSize(576);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getBacklog();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesLatency(281);
      advancedSettings0.toXML("2O");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertEquals("2O", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0289251927098695
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesLatency((-870));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketTrafficClass("cBJnp3F<vTDNRHynd7z");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth(2287);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setBacklog((-1701));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(2287, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-870), int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.446219330593583
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("vTT5]cm#C[k!v<A,P=");
      advancedSettings0.setClientSocketTrafficClass("R*now32N~s13");
      advancedSettings0.setClientSocketSendBufferSize(25);
      advancedSettings0.setClientSocketReceiveBufferSize(25);
      advancedSettings0.toXML("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setMaxThreadsForNioWrite(1436);
      advancedSettings0.getCharset();
      advancedSettings0.toXML("m,=N-Q$-mw&");
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(1436, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1333));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth((-1333));
      advancedSettings0.setClientIdentifier("|6r&U/l33A7&Et;,");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setDebugNonBlockingMode(true);
      boolean boolean0 = advancedSettings1.getDebugNonBlockingMode();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("kw");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // kw
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(3250);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(3250, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1539908575487527
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setMaxThreadsForNioWrite(65536);
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth((-1469));
      advancedSettings0.setPerformancePreferencesLatency(851);
      advancedSettings0.setClientIdentifier("cxwQ-");
      advancedSettings0.setBacklog((-1087));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize((-1469));
      advancedSettings0.getCharset();
      assertEquals("cxwQ-", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.322497969578516
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.getClientIdentifier();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("R*now32N~s13");
      advancedSettings0.setClientSocketSendBufferSize(35);
      advancedSettings0.setBacklog(35);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.getBacklog();
      advancedSettings2.setClientSocketReceiveBufferSize((-265));
      assertEquals((-265), advancedSettings2.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.384595622861411
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-47));
      advancedSettings0.setClientSocketReceiveBufferSize((-47));
      advancedSettings0.setByteBufferSize((-47));
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(65536, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      assertEquals(10, advancedSettings0.getPerformancePreferencesBandwidth());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getPerformancePreferencesBandwidth();
      advancedSettings1.setPerformancePreferencesBandwidth(0);
      advancedSettings2.setClientIdentifier("");
      advancedSettings1.setClientIdentifier("");
      assertEquals(10, advancedSettings1.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.483564960638842
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(576);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesLatency(281);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getCharset();
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      int int0 = advancedSettings0.getBacklog();
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.6642659685343295
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime((-5549));
      advancedSettings0.setClientSocketSendBufferSize(314);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-2196));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-2196));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.toXML("");
      assertEquals((-2196), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("</charset>\n");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      assertEquals("</charset>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getDebugNonBlockingMode();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.503587090335285
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-166));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings1.setClientSocketSendBufferSize((-166));
      advancedSettings1.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog(0);
      advancedSettings1.setClientIdentifier("</client-socket-tcp-no-delay>\n");
      advancedSettings1.setCharset("");
      advancedSettings0.setClientIdentifier("DKT^n=m(B:i_du\"");
      assertEquals((-166), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Sa#QG &_jg^pc\"");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Sa#QG &_jg^pc\"
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(931);
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(931, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3234094224875887
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime((-5549));
      advancedSettings0.setClientSocketSendBufferSize(314);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-2196));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-2196));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setSocketLinger((-1396));
      advancedSettings0.setUseDirectByteBuffer(false);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("MvBIBf6z");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("3l{yGC]>.p'#9JQ");
      advancedSettings0.getClientIdentifier();
      assertEquals("3l{yGC]>.p'#9JQ", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7911998103932194
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("}xJb|'j%");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("}xJb|'j%");
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals("}xJb|'j%", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.323009262423563
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime((-5549));
      advancedSettings0.setClientSocketSendBufferSize(314);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-406));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-406));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setSocketLinger((-1396));
      advancedSettings0.setUseDirectByteBuffer(false);
      assertEquals((-406), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(3005);
      advancedSettings0.setByteBufferSize(3005);
      advancedSettings0.setClientSocketReceiveBufferSize(3005);
      advancedSettings0.setUseDirectByteBuffer(false);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(3005, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(3005, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-1));
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }
}
