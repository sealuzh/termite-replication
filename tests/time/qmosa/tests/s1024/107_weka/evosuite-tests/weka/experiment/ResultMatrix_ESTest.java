/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 10:19:21 GMT 2020
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9066635494413338
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-2352);
      resultMatrixCSV0.m_ColOrder = intArray0;
      resultMatrixCSV0.m_ShowAverage = true;
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.isAverage((-1));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDisplayName();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5974234029908354
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 1051);
      resultMatrixSignificance0.setRowOrder(intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 2;
      intArray1[1] = 1;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray1[4] = 25;
      intArray1[5] = 0;
      intArray1[6] = 0;
      resultMatrixSignificance0.setColOrder(intArray1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = "]";
      stringArray0[2] = "(";
      stringArray0[3] = "H924O1+ddC|z@<O";
      stringArray0[4] = "v";
      stringArray0[5] = "*";
      stringArray0[6] = ")";
      ResultMatrixHTML.main(stringArray0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7272317149671808
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 25;
      intArray1[4] = 25;
      intArray1[5] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 1;
      intArray2[1] = 25;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.padString("(", 28);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(2, 5);
      ResultMatrixHTML.main(stringArray0);
      String[] stringArray1 = resultMatrixHTML1.getOptions();
      resultMatrixHTML1.getCountWidth();
      resultMatrixHTML1.toStringSummary();
      resultMatrixHTML1.clearHeader();
      resultMatrixSignificance0.setSignificance(2, 0, 0);
      resultMatrixHTML0.setOptions(stringArray1);
      resultMatrixSignificance0.getDefaultPrintColNames();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5556150834128486
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(428, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixSignificance1.setRowOrder(intArray0);
      resultMatrixSignificance0.setColOrder(intArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = "*";
      ResultMatrixHTML.main(stringArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3966578329737884
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.setSignificanceWidth(0);
      resultMatrixSignificance0.LEFT_PARENTHESES = "weka.experiment.ResultMatrix";
      resultMatrixLatex0.toStringMatrix();
      resultMatrixSignificance0.m_StdDevPrec = (-1066);
      resultMatrixLatex0.setCount(1, 0.0);
      resultMatrixLatex0.setRowName(2, "weka.experiment.ResultMatrix");
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getSummaryTitle(0);
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.getDefaultShowStdDev();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColOrder((int[]) null);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      int[][] intArray0 = new int[2][3];
      intArray0[0] = null;
      intArray0[1] = null;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSummary(intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.296443877498017
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(921, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(2);
      int[][] intArray0 = new int[8][0];
      intArray0[1] = null;
      intArray0[4] = null;
      resultMatrixGnuPlot0.m_NonSigWins = intArray0;
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixCSV0.setSummary(intArray0, resultMatrixGnuPlot0.m_NonSigWins);
      resultMatrixCSV0.setColOrder(intArray0[7]);
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.812061056240725
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[6];
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.isSignificance(25);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixCSV0.setRowNameWidth(0);
      resultMatrixSignificance0.setCountWidth((-2263));
      resultMatrixSignificance1.getDefaultShowStdDev();
      resultMatrixCSV0.setColOrder(intArray1);
      resultMatrixSignificance1.getDefaultRowNameWidth();
      resultMatrixCSV0.setSummary(intArray0, intArray0);
      resultMatrixCSV0.setColOrder((int[]) null);
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance1.showStdDevTipText();
      resultMatrixSignificance2.getShowStdDev();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.347472477671274
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][6];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance1.setPrintRowNames(true);
      resultMatrixSignificance0.setColHidden((-2552), true);
      resultMatrixLatex0.setSummary(intArray0, intArray0);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getHeader(")");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3125284573173617
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.setStdDevWidth((-1866));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(97, 812);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4615073722477936
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.setMeanPrec((-2278));
      resultMatrixLatex0.WIN_STRING = " ";
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.setStdDevWidth(1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(47, 0);
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.getCountWidth();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4976244859585344
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringSummary();
      int int0 = 1;
      resultMatrixLatex0.setSignificanceWidth(0);
      int[][] intArray0 = new int[0][1];
      resultMatrixSignificance0.setRanking(intArray0);
      resultMatrixSignificance0.LEFT_PARENTHESES = "weka.experiment.ResultMatrix";
      resultMatrixLatex0.toStringMatrix();
      resultMatrixSignificance0.m_StdDevPrec = (-1066);
      resultMatrixLatex0.setCount(1, 0.0);
      resultMatrixLatex0.setRowName(2, "weka.experiment.ResultMatrix");
      String[] stringArray0 = new String[0];
      ResultMatrixLatex.main(stringArray0);
      int int1 = 493;
      int int2 = (-530);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(493, (-530));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3773317895660053
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.setStdDevWidth(2);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(97, 2);
      resultMatrixHTML0.getOptions();
      resultMatrixHTML1.getCountWidth();
      resultMatrixHTML0.setSignificance(1635, 2, 1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.7435001513164012
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 25;
      intArray1[4] = 25;
      intArray1[5] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 1;
      intArray2[1] = 25;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(32, 2);
      resultMatrixCSV0.padString(")", 673);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(1, 673);
      ResultMatrixHTML.main(stringArray0);
      resultMatrixHTML1.getOptions();
      resultMatrixCSV0.setColName(0, "");
      resultMatrixHTML0.getCountWidth();
      resultMatrixHTML0.toStringSummary();
      resultMatrixSignificance0.setSignificance((-3534), (-1634), 838);
      resultMatrixHTML1.setOptions(stringArray0);
      assertEquals(0, resultMatrixHTML1.getStdDevPrec());
      
      resultMatrixSignificance0.getDefaultPrintColNames();
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.620652975899434
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.setStdDevWidth(0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      resultMatrixHTML0.rowNameWidthTipText();
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      
      ResultMatrixHTML.main(stringArray0);
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(18, stringArray0.length);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.732691321051014
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.WIN_STRING = " ";
      resultMatrixPlainText0.toString();
      resultMatrixSignificance0.toArray();
      int int0 = (-18);
      resultMatrixSignificance0.setStdDevWidth((-18));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      String[] stringArray0 = new String[2];
      resultMatrixHTML0.padString("v", 0, false);
      stringArray0[0] = " ";
      stringArray0[1] = "(";
      resultMatrixHTML0.setOptions(stringArray0);
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = null;
      try {
        resultMatrixHTML1 = new ResultMatrixHTML((-1812), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7942650843444437
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[4] = 1;
      resultMatrixSignificance0.setRowOrder(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      resultMatrixSignificance0.setStdDevWidth(0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.padString(" ", 1934, false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")";
      stringArray0[1] = "$";
      stringArray0[2] = "v";
      stringArray0[3] = " ";
      resultMatrixPlainText0.TIE_STRING = "v";
      stringArray0[5] = "Indices from sort (ints): ";
      stringArray0[6] = "(";
      try { 
        resultMatrixHTML0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.6470895291688503
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 1;
      intArray2[1] = 2;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.padString(")", 673);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(1, 673);
      resultMatrixHTML1.getOptions();
      resultMatrixCSV0.setColName(0, "");
      resultMatrixHTML0.getCountWidth();
      resultMatrixHTML0.toStringSummary();
      resultMatrixSignificance0.setSignificance((-3534), 2, 838);
      resultMatrixHTML1.setOptions(stringArray0);
      assertEquals(0, resultMatrixHTML1.getStdDevPrec());
      
      resultMatrixSignificance0.getDefaultPrintColNames();
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6808649498588037
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getHeader(" ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5556150834128486
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "3~J";
      stringArray0[2] = "Key:\n";
      stringArray0[3] = "!~:wL";
      stringArray0[4] = "Rk.$s>=6}8pZc&B.H";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(428, 2);
      int[][] intArray1 = new int[2][6];
      resultMatrixSignificance0.setRowOrder(intArray0);
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      resultMatrixSignificance0.m_Significance = intArray1;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixHTML.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.368882607483627
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixSignificance0.toArray();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.setStdDevWidth(92);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance1);
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(0, 34);
      resultMatrixHTML1.setEnumerateColNames(true);
      resultMatrixHTML1.m_StdDevWidth = 1;
      resultMatrixHTML0.getOptions();
      int int0 = resultMatrixHTML1.getCountWidth();
      assertEquals(1, resultMatrixHTML1.getStdDevWidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5626210340924285
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixSignificance1.setRowOrder(intArray0);
      resultMatrixSignificance0.setColOrder(intArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = "*";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.261633440907004
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      boolean[] booleanArray0 = new boolean[1];
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixGnuPlot0.setPrintRowNames(true);
      resultMatrixCSV0.setColNameWidth(1);
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = resultMatrixGnuPlot0.m_RankingWins;
      resultMatrixGnuPlot0.m_NonSigWins = intArray1;
      resultMatrixGnuPlot0.toStringMatrix();
      booleanArray0[0] = false;
      resultMatrixGnuPlot0.m_ColHidden = booleanArray0;
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.getDefaultMeanPrec();
      resultMatrixGnuPlot0.setRemoveFilterName(true);
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(1, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.261633440907004
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      boolean[] booleanArray0 = new boolean[1];
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixGnuPlot0.setPrintRowNames(true);
      resultMatrixCSV0.setColNameWidth(1);
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = resultMatrixGnuPlot0.m_RankingWins;
      resultMatrixGnuPlot0.m_NonSigWins = intArray1;
      resultMatrixGnuPlot0.toStringMatrix();
      booleanArray0[0] = false;
      resultMatrixGnuPlot0.m_ColHidden = booleanArray0;
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.getDefaultMeanPrec();
      resultMatrixGnuPlot0.setRemoveFilterName(false);
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(1, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3471979938861347
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 25;
      intArray1[4] = 25;
      intArray1[5] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 1;
      intArray2[1] = 25;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 1;
      intArray3[1] = 0;
      intArray3[2] = 25;
      intArray3[3] = 2;
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.setStdDevWidth(2);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(1, 25);
      resultMatrixHTML1.m_Significance = intArray0;
      resultMatrixHTML1.setEnumerateColNames(false);
      resultMatrixHTML1.getOptions();
      int int0 = resultMatrixHTML0.getCountWidth();
      assertEquals(2, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.294618800071365
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(40, 97);
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 40;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 40;
      // Undeclared exception!
      resultMatrixSignificance0.toArray();
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.288295569763252
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      
      resultMatrixSignificance0.setCountWidth(2);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(2);
      resultMatrixGnuPlot0.setMeanPrec(2);
      resultMatrixGnuPlot0.setCountWidth(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColNameWidth(0);
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.getDefaultMeanPrec();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 2);
      resultMatrixCSV0.getMean(0, 111);
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.897357129212931
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      resultMatrixSignificance0.setCountWidth(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = 32;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 39);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.padString((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.24020326046825
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(1);
      assertEquals(1, resultMatrixCSV0.getColNameWidth());
      
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingWins;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.setColNameWidth(1);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(0, false);
      resultMatrixSignificance0.stdDevPrecTipText();
      resultMatrixSignificance0.printColNamesTipText();
      resultMatrixSignificance0.setStdDevPrec(26);
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9025538185947704
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "3~J";
      stringArray0[2] = "Key:\n";
      stringArray0[3] = "!~:wL";
      stringArray0[4] = "Rk.$s>=6}8pZc&B.H";
      stringArray0[5] = "/GsHf3#;";
      stringArray0[6] = "}S'hNgl}\"$`e*Wh";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setRowHidden(3879, false);
      resultMatrixSignificance0.stdDevPrecTipText();
      resultMatrixSignificance0.printColNamesTipText();
      resultMatrixSignificance0.setStdDevPrec(3879);
      assertEquals(3879, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2873481785640757
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevWidth(5388);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 1);
      resultMatrixCSV1.padString("[", 0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getOptions();
      resultMatrixCSV1.getDefaultPrintColNames();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(32, 1361);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0676370740801473
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.setSignificanceWidth(0);
      resultMatrixSignificance0.LEFT_PARENTHESES = "weka.experiment.ResultMatrix";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(0, 2);
      resultMatrixGnuPlot1.setRowNameWidth(0);
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot1.setCountWidth(1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColNameWidth(0);
      resultMatrixCSV0.toStringKey();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot1.getDefaultMeanPrec();
      resultMatrixCSV0.setColOrder((int[]) null);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      assertEquals(0, resultMatrixGnuPlot0.getMeanPrec());
      
      resultMatrixSignificance0.showStdDevTipText();
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.539070027724939
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(1, resultMatrixPlainText0.getColCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.addHeader("(", "(");
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.setMeanPrec((-2278));
      resultMatrixLatex0.WIN_STRING = " ";
      resultMatrixPlainText0.toString();
      resultMatrixSignificance0.setPrintRowNames(true);
      double[] doubleArray0 = new double[0];
      resultMatrixLatex0.m_Counts = doubleArray0;
      String[] stringArray0 = new String[2];
      resultMatrixSignificance0.toStringKey();
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      resultMatrixPlainText0.clear();
      ResultMatrixLatex.main(stringArray0);
      resultMatrixSignificance0.setMeanWidth(2);
      resultMatrixSignificance0.getRowName((-2279));
      resultMatrixSignificance0.toStringHeader();
      resultMatrixLatex0.setMeanWidth((-281));
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3506613578133364
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      resultMatrixCSV0.setPrintRowNames(true);
      String string0 = resultMatrixCSV0.padString("Inf", (-302));
      assertEquals("Inf", string0);
      
      resultMatrixCSV0.m_Wins = null;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.addHeader("[", "Hr/%I");
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setMeanWidth(0);
      resultMatrixHTML0.assign(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.getDefaultPrintColNames();
      String string1 = resultMatrixHTML0.trimString(")", 2);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(")", string1);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4620123818890542
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      double[] doubleArray0 = new double[0];
      int[][] intArray0 = new int[0][9];
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.toStringKey();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*";
      resultMatrixPlainText0.clear();
      ResultMatrixLatex.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8482173724367725
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      int int1 = 1;
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV1.padString("v", 1, false);
      resultMatrixCSV0.setSignificanceWidth(0);
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV2.clearRanking();
      String[][] stringArray0 = new String[0][6];
      // Undeclared exception!
      try { 
        resultMatrixCSV2.getColSize(stringArray0, 3, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7679236265028853
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 2;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[][] stringArray0 = new String[1][0];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "[";
      stringArray1[1] = "v";
      stringArray1[2] = "";
      stringArray1[3] = "(";
      stringArray1[4] = "v";
      stringArray0[0] = stringArray1;
      resultMatrixCSV0.getColSize(stringArray0, 0, true, true);
      resultMatrixCSV0.getDefaultRemoveFilterName();
      resultMatrixCSV0.getDefaultStdDevPrec();
      resultMatrixCSV0.headerKeys();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDisplayName();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2714434396150396
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setSignificanceWidth((-954));
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.WIN_STRING = " ";
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSize(0, (-2120));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1010196663833227
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      resultMatrixCSV0.setPrintRowNames(true);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1680, 0);
      resultMatrixSignificance0.setMeanWidth(0);
      resultMatrixSignificance0.getRowName(0);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9154793492940043
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.getShowStdDev();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      resultMatrixLatex0.m_ColHidden = booleanArray0;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.stdDevWidthTipText();
      assertTrue(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0048866731278956
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      resultMatrixSignificance0.setCountWidth(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      resultMatrixSignificance0.setRanking(intArray1);
      intArray0[6] = 1;
      intArray0[7] = 26;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.setColNameWidth(0);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.RIGHT_PARENTHESES = "-enum-col-names";
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(0, false);
      String string0 = resultMatrixSignificance0.stdDevPrecTipText();
      assertEquals("The number of decimals after the decimal point for the standard deviation.", string0);
      
      String string1 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n(1-enum-col-names col0\n", string1);
      
      resultMatrixSignificance0.setStdDevPrec((-2076));
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0271671474095863
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixPlainText0.clearRanking();
      resultMatrixSignificance0.setPrintRowNames(true);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixPlainText0.m_Wins = intArray1;
      intArray0[2] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.setShowAverage(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 1);
      resultMatrixCSV0.toStringKey();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking(resultMatrixPlainText0.m_Wins);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1496492155137936
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clearRanking();
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.getEnumerateRowNames();
      resultMatrixCSV0.LOSS_STRING = "qtUgXx}N)S<]Njz$B{";
      resultMatrixCSV0.m_RankingWins = null;
      resultMatrixCSV0.getColNameWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2);
      resultMatrixLatex0.setEnumerateRowNames(true);
      resultMatrixCSV0.toStringKey();
      resultMatrixLatex0.assign(resultMatrixCSV0);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixCSV0.getRowName(0);
      resultMatrixLatex0.getDisplayCol(0);
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      
      resultMatrixCSV0.isAverage(0);
      resultMatrixCSV0.toStringKey();
      int int0 = resultMatrixCSV0.getSignificanceCount((-4442), 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.5278004144033517
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      boolean[] booleanArray0 = new boolean[1];
      resultMatrixCSV0.m_MeanWidth = 1353;
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(1);
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = resultMatrixGnuPlot0.m_RankingWins;
      resultMatrixGnuPlot0.m_NonSigWins = intArray1;
      resultMatrixGnuPlot0.toStringMatrix();
      booleanArray0[0] = false;
      ResultMatrixPlainText.main((String[]) null);
      resultMatrixCSV0.getDefaultStdDevWidth();
      resultMatrixCSV0.getRowName(70);
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.56035995297573
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.setRowOrder((int[]) null);
      resultMatrixSignificance0.setColOrder((int[]) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = "*";
      stringArray0[4] = "(";
      stringArray0[5] = "";
      stringArray0[6] = ")";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.5702642404446494
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevWidth(5388);
      resultMatrixCSV0.isSignificance(475);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixCSV0.setRowNameWidth(0);
      resultMatrixSignificance0.setCountWidth(2);
      resultMatrixSignificance0.getSummaryTitle(25);
      resultMatrixSignificance0.m_RemoveFilterName = true;
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.m_RankingLosses = null;
      resultMatrixCSV0.setColOrder((int[]) null);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixCSV0.getVisibleColCount();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v";
      stringArray0[1] = "*";
      stringArray0[2] = " ";
      stringArray0[3] = "v";
      ResultMatrixPlainText.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.568869192095849
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[6];
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 25;
      intArray1[4] = 25;
      intArray1[5] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 1;
      intArray2[1] = 25;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(32, 2);
      resultMatrixCSV0.padString(")", 673);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixHTML0.rowNameWidthTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clear();
      ResultMatrixLatex.main(stringArray0);
      resultMatrixSignificance0.setMeanWidth(2);
      resultMatrixSignificance0.getRowName(2);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3112596315497718
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = resultMatrixCSV0.getStdDevWidth();
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.setPrintRowNames(true);
      String string0 = resultMatrixCSV0.padString("", 1);
      assertEquals(" ", string0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getOptions();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixHTML0.rowNameWidthTipText();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(18, 18);
      resultMatrixCSV1.setColName(2538, "CtcFOa=ea|$m");
      int int1 = resultMatrixHTML0.getCountWidth();
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(int1 == int0);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, int1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.533330932994557
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      resultMatrixCSV0.setPrintRowNames(true);
      String string0 = resultMatrixCSV0.padString("Inf", (-302));
      assertEquals("Inf", string0);
      
      resultMatrixCSV0.m_Wins = null;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getOptions();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixHTML0.rowNameWidthTipText();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.setColName((-3109), "Inf");
      int int0 = resultMatrixHTML0.getCountWidth();
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, int0);
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.615084813565367
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getEnumerateColNames();
      String[][] stringArray0 = new String[7][7];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "v";
      stringArray1[1] = "b,$H";
      stringArray1[2] = "[";
      stringArray1[3] = "*";
      stringArray1[4] = "v";
      stringArray1[5] = "]";
      stringArray1[6] = "]";
      stringArray1[7] = "*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      stringArray2[0] = "[";
      stringArray2[1] = "W";
      stringArray2[2] = "b,$H";
      stringArray2[3] = "v";
      stringArray2[4] = "*";
      stringArray2[5] = "*";
      stringArray2[6] = "b,$H";
      stringArray2[7] = "*";
      stringArray2[8] = "+IE~`b*n+*\"!";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[2];
      stringArray3[0] = "W";
      stringArray3[1] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[4];
      stringArray4[0] = "eT|g+!+ ";
      stringArray4[1] = "Generates the output as plain text (for fixed width fonts).";
      stringArray4[2] = "";
      stringArray4[3] = "]";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[1];
      stringArray5[0] = " ";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[9];
      stringArray6[0] = " ";
      stringArray6[1] = "*";
      stringArray6[2] = "eT|g+!+ ";
      stringArray6[3] = "v";
      stringArray6[4] = "b,$H";
      stringArray6[5] = "W";
      stringArray6[6] = "[";
      stringArray6[7] = "*";
      stringArray6[8] = "Generates the output as plain text (for fixed width fonts).";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[0];
      stringArray0[6] = stringArray7;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getColSize(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7368184083473874
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 25;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1049550301150894
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      resultMatrixSignificance0.setCountWidth(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      resultMatrixSignificance0.setRanking(intArray1);
      intArray0[6] = 1;
      intArray0[7] = 26;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.setColNameWidth(0);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.RIGHT_PARENTHESES = "-enum-col-names";
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(0, false);
      resultMatrixSignificance0.stdDevPrecTipText();
      resultMatrixSignificance0.printColNamesTipText();
      resultMatrixSignificance0.setStdDevPrec((-2076));
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9683189136218826
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixPlainText0.clearRanking();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.8466796372141983
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(40, 97);
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 40;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 40;
      doubleArray2[2] = 1311.68;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray1;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (double) 2;
      doubleArray5[1] = 1960.026;
      doubleArray1[5] = (double) 2;
      doubleArray5[3] = (double) 40;
      doubleArray5[4] = (double) 0;
      doubleArray0[4] = doubleArray5;
      resultMatrixSignificance0.m_Mean = doubleArray0;
      resultMatrixSignificance0.setMeanWidth(0);
      // Undeclared exception!
      resultMatrixHTML0.assign(resultMatrixSignificance0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.5575732258143975
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[6];
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.isSignificance(25);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixCSV0.setRowNameWidth(0);
      resultMatrixSignificance0.setCountWidth((-2263));
      resultMatrixSignificance0.getSummaryTitle(0);
      resultMatrixSignificance1.toArray();
      resultMatrixSignificance1.setRowOrder(intArray0);
      resultMatrixSignificance1.setColOrder(intArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "The width of the counts (0 = optimal).";
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2729832190128207
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevWidth(5388);
      resultMatrixCSV0.isSignificance(475);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixCSV0.setRowNameWidth(0);
      resultMatrixSignificance0.setCountWidth(2);
      resultMatrixSignificance0.getSummaryTitle(25);
      resultMatrixSignificance0.m_RemoveFilterName = true;
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.m_RankingLosses = null;
      resultMatrixCSV0.setColOrder((int[]) null);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      int[][] intArray0 = new int[0][9];
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3172927623195596
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.WIN_STRING = " ";
      boolean boolean0 = true;
      resultMatrixSignificance0.setPrintRowNames(true);
      double[] doubleArray0 = new double[0];
      int int0 = (-210);
      resultMatrixSignificance0.m_MeanWidth = (-210);
      boolean boolean1 = false;
      resultMatrixSignificance0.setColHidden(0, false);
      int[][] intArray0 = new int[0][9];
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2782549492012323
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(1);
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = resultMatrixGnuPlot0.m_RankingWins;
      resultMatrixGnuPlot0.m_NonSigWins = intArray1;
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixCSV0.setSummary(intArray1, resultMatrixGnuPlot0.m_NonSigWins);
      assertEquals(1, resultMatrixCSV0.getColNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 1315);
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.566779681145525
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(1);
      intArray0[2] = 1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1581, 0);
      resultMatrixSignificance0.setPrintRowNames(true);
      ResultMatrixHTML.main((String[]) null);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.5592644706580483
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1) col0\\\\\n\\hline\nrow0                      &         \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.WIN_STRING = " ";
      resultMatrixPlainText0.toString();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      resultMatrixPlainText0.m_RowOrder = intArray0;
      resultMatrixSignificance0.setPrintRowNames(true);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      resultMatrixPlainText0.LOSS_STRING = "v";
      stringArray0[2] = "*";
      stringArray0[3] = "Whether to remove the classname package prefixes from the filter names in datasets.";
      stringArray0[4] = "v";
      ResultMatrixHTML.main(stringArray0);
      resultMatrixLatex0.toStringMatrix();
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      
      resultMatrixPlainText0.toStringRanking();
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 2);
      resultMatrixLatex0.WIN_STRING = "";
      resultMatrixLatex0.WIN_STRING = "";
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.setSize(3, 2414);
      resultMatrixLatex0.showAverageTipText();
      assertEquals(3, resultMatrixLatex0.getColCount());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.346728683621986
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getStdDevWidth();
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.padString("i.m^J", 26, false);
      resultMatrixCSV0.setSignificanceWidth(0);
      String[][] stringArray0 = new String[0][5];
      resultMatrixCSV0.m_PrintColNames = true;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getColSize(stringArray0, 0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.943817320871004
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int int0 = 25;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(1);
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      int[][] intArray1 = new int[8][0];
      intArray1[1] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      resultMatrixCSV0.padString("", 1, false);
      intArray1[7] = resultMatrixGnuPlot0.m_RankingWins;
      resultMatrixGnuPlot0.m_NonSigWins = intArray1;
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(1569, 982);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.282505620812912
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.setSignificanceWidth(0);
      resultMatrixSignificance0.LEFT_PARENTHESES = "weka.experiment.ResultMatrix";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(0, 2);
      resultMatrixGnuPlot1.setRowNameWidth(0);
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot1.setCountWidth(1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColNameWidth(0);
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot1.getDefaultMeanPrec();
      ResultMatrixLatex resultMatrixLatex1 = null;
      try {
        resultMatrixLatex1 = new ResultMatrixLatex((-21), 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.2450167964005505
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.getSignificance(0, 97);
      resultMatrixSignificance0.getDefaultPrintColNames();
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.560905552496712
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.clearRanking();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      resultMatrixSignificance0.setRowOrder(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 0;
      int[][] intArray2 = new int[4][9];
      intArray2[0] = intArray1;
      resultMatrixSignificance0.setRowOrder(intArray1);
      resultMatrixPlainText0.m_Wins = intArray2;
      intArray1[2] = 2;
      resultMatrixSignificance0.setColOrder(intArray1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The width of the counts (0 = optimal).";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.338553017492444
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearHeader();
      resultMatrixLatex0.setEnumerateRowNames(true);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixLatex0.m_RankingDiff = intArray0;
      resultMatrixLatex0.getDefaultRemoveFilterName();
      resultMatrixLatex0.clearRanking();
      resultMatrixLatex0.getOptions();
      resultMatrixLatex0.toStringSummary();
      assertTrue(resultMatrixLatex0.getEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.2673290673038835
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      resultMatrixLatex0.m_ColHidden = booleanArray0;
      resultMatrixSignificance0.assign(resultMatrixLatex0);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.897357129212931
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(59, 59);
      resultMatrixSignificance0.getRowCount();
      resultMatrixSignificance0.getRowNameWidth();
      resultMatrixSignificance0.getSummaryTitle(2662);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixLatex0.m_HeaderKeys = vector0;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSize((-4515), 59);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.535510527065355
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.setColNameWidth(0);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(";
      stringArray0[1] = "v";
      stringArray0[2] = "(";
      stringArray0[3] = ")";
      stringArray0[4] = "(";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-7);
      intArray0[2] = (-4952);
      intArray0[4] = (-7);
      int[][] intArray1 = new int[9][8];
      intArray1[1] = intArray0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColNameWidth((-4952));
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      int int1 = resultMatrixCSV0.getRowNameWidth();
      assertEquals(25, int1);
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.882005086088324
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "3~J";
      stringArray0[2] = "Key:\n";
      stringArray0[3] = "!~:wL";
      stringArray0[4] = "Rk.$s>=6}8pZc&B.H";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_Wins = null;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(428, 2);
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.setStdDevPrec(0);
      assertEquals(0, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.7743422201948813
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      resultMatrixPlainText1.m_ShowAverage = true;
      resultMatrixPlainText1.setMeanWidth(2);
      resultMatrixPlainText1.setPrintRowNames(true);
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[4];
      resultMatrixPlainText1.m_RowNameWidth = 0;
      intArray1[0] = 405;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray0[0] = intArray1;
      resultMatrixPlainText0.m_Significance = intArray0;
      resultMatrixPlainText1.stdDevPrecTipText();
      resultMatrixPlainText0.significanceWidthTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText1);
      resultMatrixCSV0.toStringRanking();
      assertEquals(2, resultMatrixPlainText1.getMeanWidth());
      
      resultMatrixPlainText0.getDefaultMeanWidth();
      assertEquals(1, resultMatrixPlainText0.getRowCount());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.24020326046825
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(1);
      assertEquals(1, resultMatrixCSV0.getColNameWidth());
      
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[2] = intArray0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(97, 1);
      resultMatrixSignificance0.setColOrder(resultMatrixGnuPlot0.m_RankingWins);
      resultMatrixSignificance0.setColNameWidth(138);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.setCountWidth(23);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(0, false);
      resultMatrixSignificance0.stdDevPrecTipText();
      resultMatrixSignificance0.printColNamesTipText();
      resultMatrixSignificance0.setStdDevPrec((-2934));
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixGnuPlot0.getMeanPrec());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.674643538793329
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 3225);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1959);
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-616);
      intArray0[8] = 3225;
      resultMatrixPlainText0.m_RankingDiff = intArray0;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 3225;
      intArray1[3] = (-3120);
      intArray1[4] = 3225;
      intArray1[5] = (-616);
      intArray1[6] = 0;
      intArray1[7] = 1;
      intArray1[8] = 1;
      resultMatrixPlainText0.m_RankingWins = intArray1;
      resultMatrixPlainText0.setRowHidden((-616), false);
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.5592644706580483
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.WIN_STRING = " ";
      resultMatrixPlainText0.toString();
      resultMatrixSignificance0.setPrintRowNames(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      resultMatrixPlainText0.setShowStdDev(true);
      stringArray0[1] = "(";
      stringArray0[2] = "*";
      stringArray0[3] = "Whether to remove the classname package prefixes from the filter names in datasets.";
      stringArray0[4] = "v";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.774342220194881
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_ShowAverage = false;
      resultMatrixLatex0.setShowStdDev(false);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      resultMatrixLatex0.clearSummary();
      booleanArray0[1] = false;
      resultMatrixLatex0.setMeanPrec((-1985));
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      resultMatrixLatex0.m_ColHidden = booleanArray0;
      resultMatrixLatex0.setCountWidth((-1985));
      resultMatrixLatex0.getDefaultPrintColNames();
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      resultMatrixSignificance0.m_ColOrder = intArray0;
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 2);
      resultMatrixHTML0.globalInfo();
      assertEquals(2, resultMatrixHTML0.getVisibleRowCount());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (-317.080043283981);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (-317.080043283981);
      doubleArray2[2] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (-317.080043283981);
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 1;
      doubleArray4[5] = (-317.080043283981);
      doubleArray4[6] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 2;
      doubleArray0[4] = doubleArray5;
      resultMatrixLatex0.m_StdDev = doubleArray0;
      resultMatrixLatex0.getDefaultPrintRowNames();
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.4535491719079734
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setCountWidth((-1876));
      resultMatrixPlainText0.m_RemoveFilterName = true;
      resultMatrixPlainText0.isMean(0);
      resultMatrixPlainText0.setCountWidth(1268);
      ResultMatrixCSV.main((String[]) null);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3625687231643964
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.setSignificanceWidth(0);
      resultMatrixSignificance0.LEFT_PARENTHESES = "weka.experiment.ResultMatrix";
      assertEquals(1, resultMatrixSignificance0.getColCount());
      
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.setRowNameWidth((-269));
      resultMatrixGnuPlot0.setMeanPrec((-4320));
      resultMatrixGnuPlot0.setCountWidth((-4320));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 2);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.setColNameWidth(2);
      assertEquals(2, resultMatrixCSV1.getColNameWidth());
      
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.getDefaultMeanPrec();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(2, 1);
      assertEquals(2, resultMatrixLatex1.getStdDevPrec());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(26, 26);
      resultMatrixPlainText0.m_MeanPrec = (-1866);
      resultMatrixPlainText0.clearSummary();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setSize(26, (-1517));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.7487333243235232
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.m_EnumerateRowNames = false;
      resultMatrixHTML0.listOptions();
      resultMatrixSignificance0.clearSummary();
      boolean boolean0 = resultMatrixHTML0.getRemoveFilterName();
      assertFalse(boolean0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.getRevision();
      resultMatrixPlainText0.getDisplayName();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(40, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.6127577938173885
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[4] = 1;
      resultMatrixSignificance0.setRowOrder(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 0;
      int[][] intArray2 = new int[9][4];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray1;
      intArray2[5] = intArray1;
      intArray2[6] = intArray0;
      intArray2[8] = intArray1;
      resultMatrixPlainText0.m_Wins = intArray2;
      int[][] intArray3 = new int[4][9];
      resultMatrixSignificance0.setRowOrder(intArray1);
      resultMatrixPlainText0.m_Wins = intArray3;
      intArray1[2] = 2;
      resultMatrixSignificance0.setColOrder(intArray1);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The width of the counts (0 = optimal).";
      ResultMatrixHTML.main(stringArray0);
      ResultMatrixLatex.main(stringArray0);
      resultMatrixSignificance0.meanPrecTipText();
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      
      resultMatrixPlainText0.getColOrder();
      resultMatrixPlainText0.listOptions();
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.417233814768187
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getStdDevWidth();
      resultMatrixCSV0.getOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.setCountWidth(2);
      assertEquals(2, resultMatrixGnuPlot0.getCountWidth());
      
      resultMatrixCSV0.setColNameWidth((-4095));
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.toStringMatrix();
      resultMatrixGnuPlot1.getRevision();
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot2.getDefaultMeanPrec();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 25);
      resultMatrixLatex0.getDefaultPrintColNames();
      resultMatrixLatex0.clearHeader();
      ResultMatrixGnuPlot resultMatrixGnuPlot3 = new ResultMatrixGnuPlot(resultMatrixGnuPlot2);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-4095);
      intArray0[2] = (-1313);
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 1;
      intArray0[7] = 2;
      intArray0[8] = 0;
      resultMatrixGnuPlot3.setRowOrder(intArray0);
      resultMatrixCSV0.getDefaultEnumerateRowNames();
      resultMatrixGnuPlot1.toStringSummary();
      boolean boolean0 = resultMatrixCSV0.isAverage(1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.34237016379862
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[6];
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.isSignificance(25);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixCSV0.setRowNameWidth(0);
      resultMatrixSignificance0.setCountWidth((-2263));
      resultMatrixSignificance0.getSummaryTitle(0);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      resultMatrixSignificance1.toArray();
      resultMatrixSignificance1.getDefaultShowStdDev();
      resultMatrixCSV0.setColOrder(intArray1);
      resultMatrixSignificance1.getDefaultRowNameWidth();
      resultMatrixCSV0.setSummary(intArray0, intArray0);
      resultMatrixCSV0.setColOrder((int[]) null);
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixSignificance1);
      assertEquals(40, resultMatrixSignificance2.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance2.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance2.getMeanPrec());
      assertEquals(0, resultMatrixSignificance2.getCountWidth());
      
      resultMatrixSignificance0.showStdDevTipText();
      resultMatrixSignificance0.getCount((-3233));
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.554460828034794
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/oK<$iVY";
      stringArray0[1] = "";
      stringArray0[2] = "HOUVf-<?Ax?9a)_0 /<";
      stringArray0[3] = "";
      ResultMatrixHTML.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[0];
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      int[][] intArray1 = new int[1][5];
      intArray1[0] = intArray0;
      resultMatrixGnuPlot0.m_Wins = intArray1;
      resultMatrixGnuPlot0.m_RowNameWidth = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot1);
      resultMatrixSignificance0.setCountWidth(2);
      resultMatrixGnuPlot1.meanPrecTipText();
      resultMatrixGnuPlot0.getCount(0);
      resultMatrixGnuPlot1.clearHeader();
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.398115749222675
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka.experiment.ResultMatrixCSV";
      stringArray0[1] = "weka.experiment.ResultMatrixHTML";
      stringArray0[2] = "O ^m- H";
      stringArray0[3] = "|&SfOt$@";
      stringArray0[4] = "";
      stringArray0[5] = "\begin{tabular}{cl}\\\n";
      stringArray0[6] = "au%p\"CTOjE>lk;S";
      stringArray0[7] = "aiWGLi\"h$1-O";
      stringArray0[8] = "8G6";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }
}
