/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:01:44 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3937818887702083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(45, 45);
      resultMatrixCSV0.m_SignificanceWidth = 45;
      resultMatrixCSV0.m_ColNames = null;
      resultMatrixCSV0.m_PrintRowNames = false;
      int[][] intArray0 = new int[8][0];
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 45;
      intArray1[2] = 1;
      intArray1[3] = 45;
      intArray1[4] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 45;
      intArray2[1] = 2;
      intArray2[2] = 45;
      intArray2[3] = 45;
      intArray2[4] = 2;
      intArray2[5] = 1;
      intArray2[6] = 0;
      intArray2[7] = (-2988);
      intArray2[8] = 45;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 2;
      intArray3[1] = 1;
      intArray3[2] = 45;
      intArray3[3] = 0;
      intArray3[4] = 2;
      intArray3[5] = 45;
      intArray3[6] = 45;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = (-2988);
      intArray4[1] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 45;
      intArray5[1] = (-401);
      intArray5[2] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[0];
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = 45;
      intArray7[1] = (-401);
      intArray7[2] = (-401);
      intArray7[3] = 45;
      intArray7[4] = 45;
      intArray7[5] = (-401);
      intArray7[6] = 45;
      intArray7[7] = 47;
      intArray7[8] = 2;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = (-401);
      intArray8[1] = 45;
      intArray8[2] = (-401);
      intArray8[3] = 2;
      intArray8[4] = 2987;
      intArray8[5] = 97;
      intArray0[7] = intArray8;
      resultMatrixCSV0.m_Wins = intArray0;
      resultMatrixCSV0.removeFilterName(")VLP7DkXZ=bq[&9,");
      resultMatrixCSV0.doubleToString((-474.7623), 1);
      resultMatrixCSV0.getRowOrder();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.8895458038944852
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getStdDevWidth();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixSignificance0.setColOrder(intArray0);
      int int0 = 571;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      boolean boolean0 = true;
      resultMatrixLatex0.setColOrder(intArray0);
      String[][] stringArray1 = new String[7][8];
      stringArray1[0] = stringArray0;
      stringArray1[1] = stringArray0;
      stringArray1[2] = stringArray0;
      stringArray1[3] = stringArray0;
      stringArray1[4] = stringArray0;
      stringArray1[5] = stringArray0;
      stringArray1[6] = stringArray0;
      resultMatrixCSV0.getColSize(stringArray1, (-105), true, true);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(62, 571);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.569519771912254
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      resultMatrixSignificance0.m_NonSigWins = intArray1;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixPlainText0.m_Wins = intArray1;
      intArray0[2] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getRowName(86);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDisplayCol(1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "v";
      stringArray0[1] = "[";
      stringArray0[3] = "*";
      stringArray0[4] = "v";
      stringArray0[5] = ")";
      stringArray0[6] = "(";
      stringArray0[7] = "(";
      try { 
        resultMatrixPlainText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3727275109622488
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixPlainText0.setRowNameWidth(1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.clear();
      resultMatrixHTML0.getDefaultRowNameWidth();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      resultMatrixCSV0.m_ShowAverage = true;
      resultMatrixPlainText0.clearHeader();
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.getCountWidth();
      resultMatrixHTML0.clearSummary();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(25, 5);
      resultMatrixLatex0.m_EnumerateColNames = true;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4876330719381734
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixCSV0.setEnumerateColNames(false);
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(1);
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      resultMatrixCSV0.setRanking(intArray1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getDefaultMeanWidth();
      resultMatrixSignificance0.clearSummary();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.toStringKey();
      resultMatrixSignificance0.getSignificanceWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultRowNameWidth();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4695465499154476
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.doubleToString(1, 4024);
      resultMatrixCSV0.setColNameWidth(2);
      int[][] intArray0 = new int[8][0];
      resultMatrixCSV0.setRanking(intArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.toStringKey();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.33845583655607
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 40;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 40;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      doubleArray0[3] = doubleArray1;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = 1960.026;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = (double) 40;
      doubleArray4[4] = (double) 0;
      doubleArray0[4] = doubleArray4;
      resultMatrixSignificance0.m_Mean = doubleArray0;
      resultMatrixSignificance0.setMeanWidth(0);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.assign(resultMatrixSignificance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5139156286166813
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 2);
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixPlainText0.m_Wins = intArray1;
      intArray0[2] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 1);
      resultMatrixLatex0.setEnumerateRowNames(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringKey();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixLatex0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixSignificance1.m_HeaderValues = vector0;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      resultMatrixSignificance1.m_RowHidden = booleanArray0;
      resultMatrixSignificance1.setMeanWidth(1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.assign(resultMatrixSignificance1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.clear();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int int0 = 0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.699299023591845
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[3];
      intArray0[1] = (-1828);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setEnumerateRowNames(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getRowName((-1828));
      resultMatrixLatex0.getDisplayCol((-227));
      resultMatrixCSV0.isAverage(0);
      resultMatrixCSV0.toStringKey();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2831315324725323
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.LOSS_STRING = "";
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixCSV0.assign(resultMatrixGnuPlot0);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixGnuPlot0.setStdDevPrec(0);
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      resultMatrixCSV0.LEFT_PARENTHESES = " ";
      resultMatrixCSV0.LEFT_PARENTHESES = "";
      resultMatrixCSV0.getShowAverage();
      resultMatrixCSV0.meanPrecTipText();
      resultMatrixCSV0.getColName(2180);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5426899223144517
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevWidth(5388);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.setCountWidth(1353);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(2, true);
      resultMatrixSignificance0.stdDevPrecTipText();
      resultMatrixSignificance0.printColNamesTipText();
      resultMatrixSignificance0.setStdDevPrec(1657);
      resultMatrixSignificance0.setCount((-1947), 2);
      resultMatrixSignificance0.getColHidden(5388);
      resultMatrixSignificance0.isMean(2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.062886422567253
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 2;
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixSignificance0.setRemoveFilterName(false);
      resultMatrixSignificance0.m_HeaderKeys = vector0;
      resultMatrixSignificance0.setColOrder(intArray0);
      Integer integer0 = new Integer(0);
      vector0.add(integer0);
      resultMatrixSignificance0.getRowName(1047);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.colNameWidthTipText();
      resultMatrixSignificance0.setStdDevWidth(26);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.getRevision();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ")";
      stringArray0[1] = "-ranking data not set-";
      stringArray0[2] = "(";
      stringArray0[3] = " ";
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = "(";
      stringArray0[7] = ")";
      resultMatrixCSV0.m_ColNames = stringArray0;
      resultMatrixCSV0.meanWidthTipText();
      String[] stringArray1 = new String[2];
      stringArray1[0] = ")";
      stringArray1[1] = "title \"";
      ResultMatrixSignificance.main(stringArray1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2867673019075583
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(40, 97);
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 40;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 40;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (double) 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      resultMatrixCSV0.getDefaultStdDevPrec();
      resultMatrixCSV0.headerKeys();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.getDisplayName();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2405416668606133
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = (-1328);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 3484;
      intArray2[2] = 26;
      intArray0[1] = intArray2;
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV1);
      resultMatrixSignificance0.setMeanWidth(0);
      resultMatrixCSV1.setPrintRowNames(true);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.assign(resultMatrixSignificance0);
      // Undeclared exception!
      try { 
        resultMatrixCSV1.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2691289730272586
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.setMeanWidth(2);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.assign((ResultMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.8475540956513985
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(1);
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      assertEquals(25, resultMatrixGnuPlot0.getCountWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 2);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.getSignificance(3, 1);
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.291697895352307
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_MeanWidth = 491;
      resultMatrixCSV0.m_StdDevWidth = 491;
      resultMatrixCSV0.m_ShowAverage = true;
      resultMatrixCSV0.getColHidden(45);
      assertFalse(resultMatrixCSV0.getShowStdDev());
      
      resultMatrixCSV0.m_ShowStdDev = true;
      resultMatrixCSV0.getDefaultSignificanceWidth();
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixCSV0.showStdDevTipText();
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=4.063926729329082
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.isSignificance((-3487));
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixCSV0.setRowNameWidth(1705);
      resultMatrixSignificance0.setCountWidth(8);
      resultMatrixSignificance0.getSummaryTitle(3);
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixCSV0.setColOrder((int[]) null);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixCSV0.getVisibleColCount();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = "$\bullet$";
      stringArray0[2] = "$\bullet$";
      stringArray0[3] = "(";
      stringArray0[4] = "Q7:";
      stringArray0[5] = "$circ$";
      stringArray0[6] = " ";
      ResultMatrixPlainText.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.068646117467303
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevWidth(5388);
      resultMatrixCSV0.isSignificance(475);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "[";
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      stringArray0[4] = "]";
      stringArray0[5] = "Pl|zI!d\"a@Yb/mCFB";
      resultMatrixCSV0.m_ColNames = stringArray0;
      resultMatrixCSV0.setRowNameWidth(0);
      resultMatrixSignificance0.setCountWidth(2);
      resultMatrixSignificance0.getSummaryTitle(25);
      resultMatrixSignificance0.m_RemoveFilterName = true;
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.m_RankingLosses = null;
      resultMatrixCSV0.setColOrder((int[]) null);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.7312150568733577
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixPlainText0.m_Wins = intArray1;
      intArray0[2] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 571);
      resultMatrixLatex0.setEnumerateRowNames(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringKey();
      resultMatrixLatex0.assign(resultMatrixPlainText0);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixCSV0.getRowName(2);
      resultMatrixLatex0.getDisplayCol(2);
      assertEquals(1, resultMatrixLatex0.getRowCount());
      
      resultMatrixCSV0.isAverage(0);
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getSignificanceCount(0, (-4442));
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9081652636771764
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clearRanking();
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.getEnumerateRowNames();
      resultMatrixCSV0.LOSS_STRING = "qtUgXx}N)S<]Njz$B{";
      resultMatrixCSV0.m_RankingWins = null;
      resultMatrixCSV0.getColNameWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2);
      resultMatrixLatex0.setEnumerateRowNames(true);
      resultMatrixCSV0.toStringKey();
      resultMatrixLatex0.assign(resultMatrixCSV0);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixCSV0.getRowName(0);
      resultMatrixLatex0.getDisplayCol(0);
      resultMatrixCSV0.isAverage(0);
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getSignificanceCount((-4442), 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.addHeader("]", "v");
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixLatex0.getRevision();
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.996175457825816
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getStdDevWidth();
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.setRowNameWidth(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getSummaryTitle(3400);
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixCSV0.setMeanWidth(0);
      resultMatrixSignificance0.getColName(0);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.setCountWidth(26);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(2, false);
      resultMatrixSignificance0.setColNameWidth(26);
      resultMatrixSignificance0.stdDevPrecTipText();
      resultMatrixSignificance0.printColNamesTipText();
      assertEquals(26, resultMatrixSignificance0.getColNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(1, 0);
      resultMatrixSignificance1.setStdDevPrec(26);
      resultMatrixSignificance1.setCount(329, 0);
      resultMatrixSignificance1.getColHidden(1);
      assertEquals(1, resultMatrixSignificance1.getVisibleColCount());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.078538470881948
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getStdDevWidth();
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.setRowNameWidth(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setCountWidth(0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.setCountWidth(26);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(2, false);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.stdDevPrecTipText();
      resultMatrixSignificance1.printColNamesTipText();
      resultMatrixSignificance0.setStdDevPrec(0);
      resultMatrixSignificance1.setCount((-227), (-1821.2));
      resultMatrixSignificance0.getColHidden(0);
      assertEquals(26, resultMatrixSignificance0.getCountWidth());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.8794618033406736
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "3~J";
      stringArray0[2] = "Key:\n";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(26, 0);
      String string0 = resultMatrixCSV0.padString("", 46);
      assertEquals("                                              ", string0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      String[] stringArray1 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray1.length);
      
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      resultMatrixHTML1.rowNameWidthTipText();
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML();
      resultMatrixHTML2.getOptions();
      resultMatrixCSV0.setColName(21, "-?6WekXT ]G");
      int int0 = resultMatrixHTML1.getCountWidth();
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(0, resultMatrixHTML1.getColNameWidth());
      assertEquals(0, int0);
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(0, resultMatrixHTML1.getRowCount());
      assertEquals(26, resultMatrixHTML1.getVisibleColCount());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.409732222857223
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.getShowStdDev();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      resultMatrixLatex0.m_ColHidden = booleanArray0;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.stdDevWidthTipText();
      assertTrue(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixLatex0.getPrintColNames());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.7023834313664583
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixPlainText0.m_Wins = intArray1;
      intArray0[2] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 571);
      resultMatrixLatex0.setEnumerateRowNames(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringKey();
      resultMatrixLatex0.assign(resultMatrixPlainText0);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV1.getRowName((-1384));
      resultMatrixLatex0.getDisplayCol(0);
      resultMatrixCSV0.isAverage(0);
      resultMatrixCSV1.toStringKey();
      int int0 = resultMatrixCSV1.getSignificanceCount(1525, (-1384));
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.025058594030504
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      resultMatrixSignificance0.setCountWidth(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = (-4952);
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.setColNameWidth(0);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.RIGHT_PARENTHESES = "-enum-col-names";
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(0, false);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "-enum-col-names";
      stringArray0[2] = "-enum-col-names";
      stringArray0[3] = "-enum-col-names";
      stringArray0[4] = "-enum-col-names";
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixSignificance0.getSignificanceCount(424, 28);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getShowAverage());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=4.058336736344507
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevWidth(5388);
      resultMatrixCSV0.isSignificance(475);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixCSV0.setRowNameWidth(0);
      resultMatrixSignificance0.setCountWidth(2);
      resultMatrixSignificance0.m_RemoveFilterName = true;
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.m_RankingLosses = null;
      resultMatrixCSV0.setColOrder((int[]) null);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.getVisibleColCount();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v";
      stringArray0[1] = "*";
      stringArray0[2] = " ";
      stringArray0[3] = "v";
      ResultMatrixPlainText.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.143454515261354
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getStdDevWidth();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixCSV0.setRowNameWidth(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getSummaryTitle(3400);
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixCSV0.setMeanWidth(0);
      resultMatrixSignificance0.TIE_STRING = "</tr>\n";
      resultMatrixCSV0.setColOrder((int[]) null);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixCSV0.getVisibleColCount();
      ResultMatrixPlainText.main(stringArray0);
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixCSV0.getDefaultColNameWidth();
      resultMatrixSignificance0.getDefaultRowNameWidth();
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.7461419877312503
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevWidth(5388);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixCSV0.setRowNameWidth(0);
      resultMatrixSignificance0.setCountWidth(2);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.setCountWidth(25);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.setColNameWidth(2);
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.getDefaultMeanPrec();
      assertEquals(5388, resultMatrixCSV0.getStdDevWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(15, 2);
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.838977884710218
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixPlainText0.m_Wins = intArray1;
      intArray0[2] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 571);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(40, 0);
      resultMatrixPlainText1.setSignificanceWidth(40);
      resultMatrixPlainText1.toStringMatrix();
      assertEquals(40, resultMatrixPlainText1.getSignificanceWidth());
      
      resultMatrixHTML0.getDisplayCol(3);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8885795935087044
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.setRowNameWidth(1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setCountWidth(1);
      resultMatrixSignificance0.getSummaryTitle(3400);
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixCSV0.setMeanWidth(0);
      resultMatrixSignificance0.TIE_STRING = "</tr>\n";
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixCSV0.toStringMatrix();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getOptions();
      resultMatrixCSV0.setColName((-3037), (String) null);
      resultMatrixHTML0.getCountWidth();
      assertEquals(1, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.0297848337037765
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      resultMatrixCSV0.setPrintRowNames(true);
      String string0 = resultMatrixCSV0.padString("Inf", (-302));
      assertEquals("Inf", string0);
      
      resultMatrixCSV0.m_Wins = null;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getOptions();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixHTML0.rowNameWidthTipText();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.setColName((-3109), "Inf");
      int int0 = resultMatrixHTML0.getCountWidth();
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, int0);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.10804256004424
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getEnumerateColNames();
      String[][] stringArray0 = new String[7][7];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "v";
      stringArray1[1] = "b,$H";
      stringArray1[2] = "[";
      stringArray1[3] = "*";
      stringArray1[4] = "v";
      stringArray1[5] = "]";
      stringArray1[6] = "]";
      stringArray1[7] = "*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      stringArray2[0] = "[";
      stringArray2[1] = "W";
      stringArray2[2] = "b,$H";
      stringArray2[3] = "v";
      stringArray2[4] = "*";
      stringArray2[5] = "*";
      stringArray2[6] = "b,$H";
      stringArray2[7] = "*";
      stringArray2[8] = "+IE~`b*n+*\"!";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[2];
      stringArray3[0] = "W";
      stringArray3[1] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[4];
      stringArray4[0] = "eT|g+!+ ";
      stringArray4[1] = "Generates the output as plain text (for fixed width fonts).";
      stringArray4[2] = "";
      stringArray4[3] = "]";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[1];
      stringArray5[0] = " ";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[9];
      stringArray6[0] = " ";
      stringArray6[1] = "*";
      stringArray6[2] = "eT|g+!+ ";
      stringArray6[3] = "v";
      stringArray6[4] = "b,$H";
      stringArray6[5] = "W";
      stringArray6[6] = "[";
      stringArray6[7] = "*";
      stringArray6[8] = "Generates the output as plain text (for fixed width fonts).";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[0];
      stringArray0[6] = stringArray7;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getColSize(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0949180933653193
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      int[] intArray0 = new int[4];
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[7];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 2;
      intArray2[6] = 1;
      intArray1[4] = intArray2;
      int[] intArray3 = new int[1];
      intArray1[5] = intArray3;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setRanking(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.072878523195363
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      resultMatrixSignificance0.m_NonSigWins = intArray1;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixPlainText0.m_Wins = intArray1;
      intArray0[2] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getRowName(86);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDisplayCol(1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "v";
      stringArray0[1] = "[";
      stringArray0[2] = " ";
      stringArray0[3] = "*";
      stringArray0[4] = "v";
      stringArray0[5] = ")";
      stringArray0[6] = "(";
      stringArray0[7] = "(";
      resultMatrixPlainText0.setOptions(stringArray0);
      resultMatrixCSV0.isAverage(0);
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getSignificanceCount(0, 0);
      resultMatrixPlainText0.setCount(33, (-1));
      assertFalse(resultMatrixPlainText0.getPrintColNames());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.463164274446625
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixPlainText0.clearRanking();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.8554042166392573
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.LEFT_PARENTHESES = "end{table}\n";
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = (-4952);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.setColNameWidth(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3420067400179367
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(40, 97);
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 40;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 40;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (double) 2;
      doubleArray5[1] = 1960.026;
      doubleArray5[2] = (double) 2;
      doubleArray5[3] = (double) 40;
      doubleArray5[4] = (double) 0;
      doubleArray0[4] = doubleArray5;
      resultMatrixSignificance0.m_Mean = doubleArray0;
      resultMatrixSignificance0.setMeanWidth(0);
      // Undeclared exception!
      resultMatrixHTML0.assign(resultMatrixSignificance0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.716747290440904
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      boolean[] booleanArray0 = new boolean[1];
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(1);
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = resultMatrixGnuPlot0.m_RankingWins;
      resultMatrixGnuPlot0.m_NonSigWins = intArray1;
      resultMatrixCSV0.m_RowHidden = booleanArray0;
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.m_ColHidden = booleanArray0;
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.getDefaultMeanPrec();
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(1, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.8157447747034605
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.WIN_STRING = " ";
      resultMatrixSignificance0.setPrintRowNames(true);
      double[] doubleArray0 = new double[0];
      resultMatrixLatex0.m_Counts = doubleArray0;
      int int0 = (-210);
      resultMatrixSignificance0.m_MeanWidth = (-210);
      boolean boolean0 = false;
      resultMatrixSignificance0.setColHidden(0, false);
      int[][] intArray0 = new int[0][9];
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.7183114933799226
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getStdDevWidth();
      resultMatrixCSV0.getOptions();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[1];
      resultMatrixSignificance0.setPrintRowNames(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray1 = new int[1][6];
      intArray1[0] = intArray0;
      resultMatrixLatex0.setSummary(intArray1, intArray1);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getHeader(" ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2854600626943533
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 2);
      resultMatrixLatex0.WIN_STRING = "";
      resultMatrixLatex0.WIN_STRING = "";
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.setSize(3, 2414);
      resultMatrixLatex0.showAverageTipText();
      assertEquals(2414, resultMatrixLatex0.getRowCount());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.026543474142706
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      resultMatrixSignificance0.setCountWidth(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = (-4952);
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.setColNameWidth(0);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.RIGHT_PARENTHESES = "-enum-col-names";
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(0, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "-enum-col-names";
      stringArray0[2] = "-enum-col-names";
      stringArray0[3] = "-enum-col-names";
      stringArray0[4] = "-enum-col-names";
      ResultMatrixPlainText.main(stringArray0);
      String[][] stringArray1 = new String[8][0];
      stringArray1[0] = stringArray0;
      stringArray1[1] = stringArray0;
      stringArray1[2] = stringArray0;
      stringArray1[3] = stringArray0;
      stringArray1[4] = stringArray0;
      String[] stringArray2 = new String[1];
      stringArray2[0] = "AwHzVb2.P;+!n";
      stringArray1[5] = stringArray2;
      stringArray1[6] = stringArray0;
      stringArray1[7] = stringArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getColSize(stringArray1, 1, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2466552836373004
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSummaryTitle(1796);
      boolean[] booleanArray0 = new boolean[0];
      int[][] intArray0 = new int[0][4];
      int[] intArray1 = new int[1];
      intArray1[0] = 1796;
      resultMatrixGnuPlot0.m_RankingDiff = intArray1;
      resultMatrixGnuPlot0.padString("&[)bO0%a)SQ(", 1796, false);
      resultMatrixGnuPlot0.setRanking(intArray0);
      resultMatrixGnuPlot0.m_RowHidden = booleanArray0;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringSummary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2145400628495775
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.getSignificance(0, 97);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      int[][] intArray0 = new int[2][8];
      int[] intArray1 = new int[6];
      intArray1[0] = 949;
      intArray1[1] = 17;
      intArray1[2] = 2;
      intArray1[3] = 0;
      intArray1[4] = 32;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 17;
      intArray2[1] = 97;
      intArray2[2] = 2;
      intArray2[3] = 17;
      intArray2[4] = 32;
      intArray2[5] = 31;
      intArray2[6] = 949;
      intArray2[7] = 1;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.590247956655728
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevWidth(2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getSignificance(0, 1);
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex0.setEnumerateRowNames(false);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringKey();
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixCSV0.getRowName(1);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.getDisplayCol(2242);
      resultMatrixCSV1.isAverage((-565));
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV2.toStringKey();
      int int0 = resultMatrixCSV2.getSignificanceCount((-1), 86);
      assertEquals(2, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.741645512953017
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clearRanking();
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.getEnumerateRowNames();
      resultMatrixCSV0.LOSS_STRING = "-ranking data not set-";
      resultMatrixCSV0.m_RankingWins = null;
      resultMatrixCSV0.getColNameWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2);
      resultMatrixLatex0.setEnumerateRowNames(true);
      resultMatrixCSV0.toStringKey();
      resultMatrixLatex0.assign(resultMatrixCSV0);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixCSV0.getRowName(0);
      resultMatrixLatex0.getDisplayCol(0);
      resultMatrixCSV0.isAverage(0);
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getDefaultEnumerateRowNames();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixLatex0.getDefaultPrintColNames();
      resultMatrixLatex0.setPrintColNames(false);
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.7172049592854712
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getStdDevWidth();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.setSignificanceWidth(0);
      String[][] stringArray1 = new String[0][5];
      resultMatrixCSV0.m_PrintColNames = false;
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      resultMatrixCSV0.getDefaultRemoveFilterName();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setMeanWidth(0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.assign(resultMatrixCSV0);
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.8862071981002586
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getStdDevWidth();
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.setRowNameWidth(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getSummaryTitle(3400);
      resultMatrixSignificance0.toArray();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.setCountWidth(3400);
      resultMatrixCSV0.setColNameWidth(32);
      int[][] intArray0 = new int[0][4];
      resultMatrixCSV0.setRanking(intArray0);
      assertEquals(32, resultMatrixCSV0.getColNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.getDefaultMeanWidth();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance();
      resultMatrixSignificance2.m_StdDevWidth = 0;
      resultMatrixSignificance1.toStringKey();
      resultMatrixSignificance1.getSignificanceWidth();
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixSignificance2.getColCount();
      assertEquals(2, resultMatrixSignificance2.getStdDevPrec());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.5797074336619246
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      resultMatrixSignificance0.setCountWidth(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 26;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.setColNameWidth(0);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.RIGHT_PARENTHESES = "-enum-col-names";
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(0, false);
      resultMatrixSignificance0.stdDevPrecTipText();
      resultMatrixSignificance0.printColNamesTipText();
      resultMatrixSignificance0.setStdDevPrec((-2076));
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.703675127772708
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_MeanWidth = 0;
      resultMatrixSignificance0.setCountWidth(0);
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      intArray0[2] = (-4952);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[2] = 26;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.getColName((-3628));
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.RIGHT_PARENTHESES = "-enum-col-names";
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(0, false);
      resultMatrixSignificance0.setColNameWidth(21);
      resultMatrixSignificance0.stdDevPrecTipText();
      resultMatrixSignificance0.printColNamesTipText();
      resultMatrixSignificance0.setStdDevPrec(223);
      resultMatrixSignificance0.setCount(0, Double.NaN);
      boolean boolean0 = resultMatrixSignificance0.getColHidden(2);
      assertEquals(21, resultMatrixSignificance0.getColNameWidth());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=4.072624431762066
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setStdDevWidth(2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getSignificance(0, 1);
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex0.setEnumerateRowNames(false);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringKey();
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixSignificance0.setColNameWidth(1);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.setCountWidth(40);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden((-246), false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      stringArray0[1] = "Key,\n[1],col0\n";
      stringArray0[2] = "[";
      stringArray0[3] = "*";
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixLatex0.headerKeys();
      assertEquals(2, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2720591151720497
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_ShowAverage = false;
      resultMatrixLatex0.setShowStdDev(false);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      resultMatrixLatex0.clearSummary();
      booleanArray0[1] = false;
      resultMatrixLatex0.setMeanPrec((-1985));
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      resultMatrixLatex0.m_ColHidden = booleanArray0;
      resultMatrixLatex0.setCountWidth((-1985));
      resultMatrixLatex0.getDefaultPrintColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      resultMatrixSignificance0.m_ColOrder = intArray0;
      resultMatrixSignificance0.toStringRanking();
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 2);
      resultMatrixHTML0.globalInfo();
      assertEquals(2, resultMatrixHTML0.getRowCount());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.029503902444752
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanPrec((-9));
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      resultMatrixGnuPlot0.setCountWidth(25);
      String[] stringArray0 = new String[0];
      ResultMatrixHTML.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.getDisplayName();
      assertEquals(25, resultMatrixGnuPlot0.getCountWidth());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3946173106582624
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 1192);
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals(1192, resultMatrixLatex0.getRowCount());
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3643579955707255
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixCSV0.setMeanWidth(1);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      intArray0[1] = 0;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(0);
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      int[][] intArray1 = new int[5][0];
      intArray1[3] = intArray0;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[2] = intArray0;
      resultMatrixCSV0.setRanking(intArray1);
      resultMatrixCSV0.isMean((-1));
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.9534760831782556
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setCountWidth((-1876));
      resultMatrixPlainText0.m_RemoveFilterName = true;
      resultMatrixPlainText0.isMean(0);
      resultMatrixPlainText0.setCountWidth(1268);
      ResultMatrixCSV.main((String[]) null);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.7657004028087697
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      resultMatrixLatex0.m_ColHidden = booleanArray0;
      resultMatrixSignificance0.assign(resultMatrixLatex0);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2289874463186274
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(26, 26);
      resultMatrixPlainText0.m_MeanPrec = (-1866);
      resultMatrixPlainText0.clearSummary();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setSize(26, (-1517));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2437828292740183
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.m_EnumerateRowNames = false;
      resultMatrixHTML0.listOptions();
      resultMatrixSignificance0.clearSummary();
      boolean boolean0 = resultMatrixHTML0.getRemoveFilterName();
      assertFalse(boolean0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.getDisplayName();
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(40, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.801390432397122
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 1534);
      resultMatrixLatex0.clearHeader();
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixLatex0.m_RankingDiff = intArray0;
      resultMatrixLatex0.getDefaultRemoveFilterName();
      resultMatrixLatex0.m_ShowAverage = false;
      resultMatrixLatex0.clearRanking();
      resultMatrixLatex0.clearSummary();
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixLatex0.toStringSummary();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1534, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=4.054404106537346
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/oK<$iVY";
      stringArray0[1] = "";
      stringArray0[2] = "HOUVf-<?Ax?9a)_0 /<";
      stringArray0[3] = "";
      ResultMatrixHTML.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[0];
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      int[][] intArray1 = new int[1][5];
      intArray1[0] = intArray0;
      resultMatrixGnuPlot0.m_Wins = intArray1;
      resultMatrixGnuPlot0.m_RowNameWidth = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot1);
      resultMatrixSignificance0.setCountWidth(2);
      assertEquals(2, resultMatrixSignificance0.getCountWidth());
      
      resultMatrixGnuPlot1.meanPrecTipText();
      resultMatrixGnuPlot0.getCount(0);
      resultMatrixGnuPlot1.clearHeader();
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=4.071822748919082
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      ResultMatrixGnuPlot.main((String[]) null);
      intArray0[0] = 1;
      intArray0[1] = 0;
      resultMatrixGnuPlot0.setCountWidth(31);
      resultMatrixGnuPlot0.m_EnumerateColNames = true;
      resultMatrixCSV0.setColNameWidth(1);
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      int[][] intArray1 = new int[8][0];
      resultMatrixCSV0.listOptions();
      intArray1[0] = intArray0;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingWins;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.setEnumerateRowNames(true);
      resultMatrixSignificance0.setCountWidth(1467);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.setRowHidden(3, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*";
      ResultMatrixPlainText.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=4.047922574082166
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(3);
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 0;
      resultMatrixGnuPlot0.setCountWidth(25);
      resultMatrixCSV0.setColNameWidth(1);
      intArray0[2] = 1;
      String[] stringArray0 = new String[0];
      ResultMatrixHTML.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.4410096756718835
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 26);
      resultMatrixCSV0.listOptions();
      String string0 = resultMatrixCSV0.getSummaryTitle(0);
      assertEquals("a", string0);
      
      resultMatrixCSV0.meanPrecTipText();
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(26, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=4.004246885285552
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[0];
      resultMatrixCSV0.m_ColOrder = intArray0;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      resultMatrixCSV0.setPrintRowNames(true);
      String[] stringArray0 = new String[0];
      ResultMatrixHTML.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }
}
