/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:50:23 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Properties;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vb1");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)9;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("vb1", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, (byte)0);
      properties0.put("vb1", protectedProperties0);
      Attribute.typeToString((int) (byte)0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.m_UseBinNumbers = false;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) (byte)0;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (byte)9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (byte)0;
      doubleArray2[1] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (double) (byte)0;
      doubleArray4[2] = (double) (byte)9;
      doubleArray4[3] = (double) (byte)0;
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (-1.0);
      doubleArray4[7] = (double) (byte)56;
      doubleArray4[8] = (double) (byte)2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 4;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) (byte)56;
      doubleArray5[3] = (double) (byte)56;
      doubleArray5[4] = (double) 2;
      doubleArray5[5] = (double) (byte)56;
      doubleArray5[6] = (double) 4;
      doubleArray5[7] = (double) (byte)56;
      doubleArray5[8] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = (double) 2;
      doubleArray6[3] = (double) (byte)56;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (double) (byte)2;
      doubleArray7[1] = (double) 0;
      doubleArray7[2] = (double) (byte)56;
      doubleArray7[3] = (double) 1;
      doubleArray7[4] = (double) 0;
      doubleArray7[5] = (double) (byte)2;
      doubleArray7[6] = (double) (byte)2;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.971558425985957
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vb1");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("- ", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 3);
      properties0.put(instances0, protectedProperties0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)56;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getAttributeIndices();
      assertEquals("first-last", string0);
      
      String string1 = discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string1);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9913028344885197
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("vb1", protectedProperties2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, (byte)9);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      byte byte0 = (byte)64;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((byte)125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0377026845903443
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      discretize0.setMakeBinary(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      arrayList0.removeIf(predicate2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.poll();
      discretize0.getFindNumBins();
      linkedList0.spliterator();
      discretize0.getInvertSelection();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-M <n>", protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("OK", arrayList0, 2);
      discretize0.setInputFormat(instances0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)125;
      discretize0.batchFinished();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      discretize0.convertInstance(sparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.04727091411083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      discretize0.setMakeBinary(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.poll();
      discretize0.getFindNumBins();
      linkedList0.spliterator();
      discretize0.getInvertSelection();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("-M <num>", protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("OK", arrayList0, 2);
      discretize0.setInputFormat(instances0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((byte)125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.337343179130308
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vb1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)9;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("vb1", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, (byte)0);
      properties0.put("vb1", protectedProperties0);
      Attribute.typeToString((int) (byte)0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.m_UseBinNumbers = false;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.batchFinished();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "numeric";
      stringArray0[1] = "@data";
      stringArray0[2] = "numeric";
      stringArray0[3] = "vb1";
      stringArray0[4] = ".arff";
      stringArray0[5] = "DoNotLoadIfEnvVarNotSetMessage";
      stringArray0[6] = "@attribute";
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)9;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("vObZ-q1", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, (byte)0);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.invertSelectionTipText();
      discretize0.getCapabilities();
      discretize0.getUseBinNumbers();
      discretize0.getInvertSelection();
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-451));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1961762832549665
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setMakeBinary(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.poll();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1947524579108753
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getFindNumBins());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "vObZ-q1";
      stringArray0[5] = "/:hjn{saI^=-zeN";
      stringArray0[6] = "";
      discretize0.setOptions(stringArray0);
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(4, stringArray1.length);
      
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8198531862850538
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)9;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("vObZ-q1", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      arrayList0.add(attribute0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("real");
      properties0.store((OutputStream) mockPrintStream0, "@end");
      Instances instances0 = new Instances("relational", arrayList0, (byte)0);
      Discretize discretize0 = new Discretize("@end");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "numeric";
      stringArray0[1] = "numeric";
      stringArray0[2] = "@data";
      stringArray0[3] = "@attribute";
      stringArray0[4] = "";
      discretize0.setOptions(stringArray0);
      discretize0.getUseEqualFrequency();
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)38;
      Discretize discretize0 = new Discretize("  public String globalInfo() {\n");
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-67);
      intArray0[1] = (int) (byte)38;
      SparseInstance sparseInstance0 = new SparseInstance((byte) (-67), doubleArray0, intArray0, (byte) (-67));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1875391741350714
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("vObZ-q1", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)125;
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute1 = new Attribute("", protectedProperties0);
      arrayList0.add(attribute1);
      Instances instances1 = new Instances("numeric", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.985572789946291
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)9;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("vObZ-q1", protectedProperties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, (byte)0);
      properties0.put("vObZ-q1", protectedProperties0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = false;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      discretize0.findNumBins((byte)0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = (-1.7976931348623157E308);
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = (-1.7976931348623157E308);
      int[] intArray0 = new int[1];
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.68644405381145
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 985.1671408165128;
      doubleArray0[1] = 985.1671408165128;
      doubleArray0[2] = 985.1671408165128;
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 2811;
      intArray0[2] = 68;
      intArray0[3] = 4;
      intArray0[4] = (-178);
      intArray0[5] = 918;
      intArray0[6] = 19;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "randomize";
      discretize0.getRevision();
      stringArray0[1] = "!M8G~;wjzZ^kzLt2";
      stringArray0[2] = "K.lUbj&}eU7)oRYOc/";
      stringArray0[3] = "mk2Rp/Kf~0[";
      stringArray0[4] = "-B";
      stringArray0[5] = "_[";
      stringArray0[6] = "  protected Object[][] instancesToObjects(Instances data) {\n";
      stringArray0[7] = "";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2689332995826677
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 985.1671408165128;
      doubleArray0[1] = 985.1671408165128;
      doubleArray0[2] = 985.1671408165128;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "R\"ZYGohUg/";
      stringArray0[1] = "";
      stringArray0[2] = "!Aq_C";
      stringArray0[3] = "3z^uy^5z4TiVh_J";
      stringArray0[4] = "1d+RP@$";
      Discretize.main(stringArray0);
      discretize0.getBinRangesString(2);
      Discretize discretize1 = new Discretize("<=");
      discretize1.setAttributeIndices("");
      discretize1.setBins((-132));
      discretize0.getMakeBinary();
      discretize1.setOptions(stringArray0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.binsTipText();
      discretize0.setDesiredWeightOfInstancesPerInterval(2);
      discretize1.globalInfo();
      // Undeclared exception!
      try { 
        discretize1.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      Discretize discretize0 = new Discretize("DoNotLoadIfEnvVarNotSetMessage");
      discretize0.getCapabilities();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      String string1 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = (-1.7976931348623157E308);
      doubleArray0[4] = (-1.7976931348623157E308);
      doubleArray0[5] = 1.7976931348623157E308;
      DenseInstance denseInstance0 = new DenseInstance((-1.7976931348623157E308), doubleArray0);
      // Undeclared exception!
      try { 
        denseInstance0.relationalValue((-1431655763));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "OG7{/X~Z NdtYhgK";
      stringArray0[1] = "";
      discretize0.getRevision();
      stringArray0[2] = "P;";
      stringArray0[3] = "jc*uneZAYT<,";
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1746));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize(")");
      discretize0.getCutPoints(100);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 985.1671408165128;
      doubleArray0[1] = 985.1671408165128;
      doubleArray0[2] = 985.1671408165128;
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = 2811;
      intArray0[2] = 68;
      intArray0[3] = 4;
      intArray0[4] = (-178);
      intArray0[5] = 918;
      intArray0[6] = 19;
      SparseInstance sparseInstance0 = new SparseInstance(985.1671408165128, doubleArray0, intArray0, (-552));
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      
      discretize0.getUseBinNumbers();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      
      String string1 = discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string1);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)38;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("<7XJ-|:");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize("X:l}zzxQpN[.&Za4");
      discretize0.getBins();
      discretize0.toString();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-178);
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) (-178);
      doubleArray0[3] = (double) 16;
      discretize0.m_ClassIndex = 68;
      boolean boolean0 = discretize0.m_IgnoreClass;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 985.1671408165128;
      doubleArray0[1] = 985.1671408165128;
      doubleArray0[2] = 985.1671408165128;
      String[] stringArray0 = new String[4];
      stringArray0[1] = "first-last";
      stringArray0[2] = "first-last";
      stringArray0[3] = "first-last";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.991004276632703
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 3441;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "qg9LxXX";
      stringArray0[1] = "Types differ: ";
      Discretize.main(stringArray0);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(3441);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(false);
      AllFilter allFilter0 = new AllFilter();
      String string0 = "zg$Kep~s";
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5.3;
      doubleArray0[1] = 5.3;
      doubleArray0[2] = 5.3;
      doubleArray0[3] = 5.3;
      doubleArray0[4] = 5.3;
      doubleArray0[5] = 5.3;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2436);
      intArray0[3] = 3172;
      intArray0[4] = 0;
      intArray0[5] = (-975);
      SparseInstance sparseInstance0 = new SparseInstance(5.3, doubleArray0, intArray0, 0);
      Attribute attribute0 = new Attribute("zg$Kep~s", 497);
      // Undeclared exception!
      try { 
        sparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize("Can't ignore class when changing the number of attributes!");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vObZ-q1");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)38;
      String string0 = "$,oX";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$,oX");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      linkedList1.spliterator();
      Discretize discretize0 = new Discretize("-M <num>");
      discretize0.getInvertSelection();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("DoNotLoadIfEnvVarNotSetMessage", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 3);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at -M <num>
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2016318389219833
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[1] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      int[] intArray0 = new int[4];
      intArray0[0] = 70;
      intArray0[1] = 66;
      intArray0[2] = 8;
      intArray0[3] = (-2935);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setIgnoreClass(true);
      discretize0.setIgnoreClass(false);
      stringArray0[2] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[3] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[4] = "oQsp#VU";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getFindNumBins();
      String string1 = discretize0.binsTipText();
      assertEquals("Number of bins.", string1);
      
      discretize0.useBinNumbersTipText();
      String string2 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string2);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.7976931348623157E308);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1.7976931348623157E308);
      doubleArray0[8] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 4183;
      int int1 = 1060;
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1191.6821946643));
      discretize0.setOutputFormat();
      discretize0.getBinRangesString((-4023));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("HEWMz}^2O:>Z)M8'");
      discretize0.m_ClassIndex = 13;
      discretize0.setUseBinNumbers(false);
      discretize0.findNumBinsTipText();
      discretize0.getBinRangesString(10);
      discretize0.setInvertSelection(false);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        sparseInstance0.relationalValue(13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EkLsdT'=Pl");
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      
      discretize0.setBins(0);
      discretize0.getBins();
      discretize0.findNumBinsTipText();
      assertEquals(0, discretize0.getBins());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 19;
      doubleArray0[1] = (double) (byte)38;
      Discretize discretize0 = new Discretize("After pushing command line arguments");
      discretize0.setOutputFormat();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("");
      String string0 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", string0);
  }
}
