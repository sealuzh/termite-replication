/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:12:41 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.SymmetricalUncertAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.REPTree;
import weka.clusterers.Cobweb;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8494918450674254
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      evaluation0.toMatrixString("L");
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 0.125;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-2);
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.getStructure();
      evaluation0.weightedFalseNegativeRate();
      // Undeclared exception!
      try { 
        instances1.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.282697641452146
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      textDirectoryLoader0.getRevision();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.125, doubleArray0);
      binarySparseInstance0.deleteAttributeAt(109);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toSummaryString("+XL", false);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0289349394536544
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      textDirectoryLoader0.getDataSet();
      Instances instances2 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation1.toClassDetailsString("@data");
      Evaluation evaluation2 = new Evaluation(instances1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(101);
      try { 
        evaluation2.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5096825474888216
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.getCapabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.precision(104);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1455.261337968461, doubleArray0);
      binarySparseInstance0.deleteAttributeAt(104);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toSummaryString((String) null, true);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation0.KBInformation();
      evaluation0.numFalsePositives(0);
      double double2 = evaluation0.m_SumSchemeEntropy;
      double double3 = evaluation0.weightedFMeasure();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.meanAbsoluteError();
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3831315522061378
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" QyqbrT");
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[1] = 1.7976931348623157E308;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(109, doubleArray0);
      binarySparseInstance0.deleteAttributeAt(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(".arff");
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.updateStatsForPredictor(2295.8808356906693, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.59928092190985
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-247.11971145);
      doubleArray0[1] = (-247.11971145);
      doubleArray0[2] = 1.7976931348623157E308;
      instances0.enumerateAttributes();
      doubleArray0[3] = (-247.11971145);
      doubleArray0[4] = (-2.0);
      doubleArray0[5] = (-2.0);
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = (-2.0);
      doubleArray1[2] = 1.7976931348623157E308;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.7976931348623157E308), doubleArray1);
      binarySparseInstance0.deleteAttributeAt(63);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = costSensitiveClassifier0.getCapabilities();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.fMeasure(1493);
      evaluation1.weightedAreaUnderPRC();
      boolean boolean0 = evaluation1.equals(capabilities0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7165725044767512
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Logistic logistic1 = new Logistic();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer1);
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numFalsePositives(27);
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.m_SumSchemeEntropy;
      double double4 = evaluation0.weightedFMeasure();
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.318122645858884
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" QyqbrT");
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 723.3610891181663;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[1] = 1.7976931348623157E308;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(109, doubleArray0);
      binarySparseInstance0.deleteAttributeAt(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSchemeEntropy = (-1118.1120331);
      evaluation0.toSummaryString((String) null, false);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.getCapabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.precision(104);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.m_TotalCoverage;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.numTrueNegatives(104);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 104, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 104
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3681983953552463
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Evaluation.handleCostOption("", (-2199));
      Evaluation.handleCostOption("", (-2199));
      Random.setNextRandom((-2199));
      Stacking stacking0 = new Stacking();
      stacking0.getOptions();
      Classifier classifier0 = stacking0.getMetaClassifier();
      Evaluation.makeOptionString(classifier0, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      System.setCurrentTimeMillis((-1L));
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.13767946158713
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      textDirectoryLoader0.getDataSet();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[2] = (-2);
      intArray0[4] = (-1);
      evaluation0.weightedPrecision();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.recall((-1));
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.863323047889854
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      double double0 = new Integer(99);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.m_SumClass;
      evaluation1.toMatrixString();
      evaluation0.matthewsCorrelationCoefficient(5239);
      evaluation0.KBMeanInformation();
      MockRandom mockRandom0 = new MockRandom();
      BayesNet bayesNet0 = new BayesNet();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) instances0;
      objectArray0[1] = (Object) bayesNet0;
      objectArray0[2] = (Object) evaluation1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "=== Confusion Matrix ===\n\n   <-- classified as\n";
      try { 
        evaluation1.crossValidateModel((Classifier) bayesNet0, (Instances) null, (-402), (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4407696753202024
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(".arff");
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 377.7165620527;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      binarySparseInstance0.deleteAttributeAt(2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.fMeasure(119);
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.m_ClassPriorsSum = (double) 2;
      Evaluation evaluation1 = new Evaluation(instances0);
      boolean boolean0 = evaluation1.m_ClassIsNominal;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, ".arff");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "labels");
      assertNotNull(string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate(".bsi");
      Evaluation evaluation1 = new Evaluation(instances0);
      Logistic logistic1 = new Logistic();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer1);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.14057387157424
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.22499999403953552);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.priorEntropy();
      evaluation0.errorRate();
      double double1 = evaluation0.numFalsePositives(113);
      assertEquals(double1, double0, 0.01);
      
      evaluation0.truePositiveRate((-589));
      evaluation0.SFPriorEntropy();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedTruePositiveRate();
      double double2 = evaluation0.weightedPrecision();
      double double3 = evaluation0.meanAbsoluteError();
      assertEquals(double3, double2, 0.01);
      
      evaluation0.getRevision();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9711534898828376
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.precision(99);
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_SumPriorEntropy = (double) 1753;
      textDirectoryLoader0.setRetrieval(99);
      evaluation1.precision(1753);
      double double0 = evaluation1.m_TotalCoverage;
      evaluation0.KBRelativeInformation();
      evaluation0.weightedPrecision();
      evaluation1.KBInformation();
      evaluation1.toSummaryString();
      evaluation0.priorEntropy();
      evaluation0.errorRate();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1753;
      doubleArray0[2] = 0.22499999403953552;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 99;
      KDTree kDTree0 = new KDTree();
      CoverTree coverTree0 = new CoverTree();
      BallNode ballNode0 = new BallNode(0);
      try { 
        BallNode.calcPivot(ballNode0, ballNode0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7726197961795847
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" QyqbrT");
      Evaluation evaluation0 = new Evaluation(instances0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      evaluation0.areaUnderROC((-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.KBInformation();
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8466435205545344
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" QyqbrT");
      Evaluation evaluation0 = new Evaluation(instances0);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      evaluation0.areaUnderROC((-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 723.3610891181663;
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getOptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      double[] doubleArray0 = new double[0];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.pctUnclassified();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7444137137783002
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.precision((-2721));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_TotalCoverage;
      textDirectoryLoader0.setDebug(true);
      double double2 = evaluation1.weightedMatthewsCorrelation();
      Evaluation evaluation2 = new Evaluation(instances1);
      String string0 = evaluation2.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double3 = evaluation2.weightedFalsePositiveRate();
      assertEquals(double3, double2, 0.01);
      
      evaluation0.weightedFalseNegativeRate();
      evaluation0.unweightedMacroFmeasure();
      double double4 = evaluation2.unclassified();
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.694363117656481
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.precision(99);
      evaluation0.areaUnderPRC(1164);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double double2 = evaluation0.weightedPrecision();
      double double3 = evaluation0.weightedPrecision();
      double double4 = evaluation0.KBInformation();
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation0.pctCorrect();
      assertEquals(double5, double3, 0.01);
      
      double double6 = evaluation0.totalCost();
      assertNotEquals(double6, double2, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7436415130060996
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      textDirectoryLoader0.setDebug(false);
      double double0 = evaluation2.weightedMatthewsCorrelation();
      evaluation0.toSummaryString(true);
      double double1 = evaluation2.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      double double3 = evaluation0.falseNegativeRate(2);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Y)");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)95;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        Evaluation.handleCostOption("Y)", (-2191));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"q\u000B\uFFFD\uFFFDrs\u001F_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1922028498547115
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" QyqbrT");
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation1.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      evaluation1.weightedFalsePositiveRate();
      evaluation0.weightedFalseNegativeRate();
      evaluation1.unweightedMacroFmeasure();
      Float float0 = new Float((double) (-1));
      evaluation1.SFPriorEntropy();
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8181746101646823
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = 0.125;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.getStructure();
      evaluation0.weightedFalseNegativeRate();
      // Undeclared exception!
      try { 
        instances1.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7946065751184126
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.toClassDetailsString(".bsi");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.933171331038418
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("DGqH,=\")O+bO[Q)]a");
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      binarySparseInstance0.deleteAttributeAt((-2293));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-2293));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "DGqH,=\")O+bO[Q)]a";
      stringArray0[1] = "k-Le%Z+`,";
      stringArray0[2] = "setNominalToBinaryFilter";
      stringArray0[3] = ".arff";
      stringArray0[4] = " ";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      evaluation0.m_ClassNames = stringArray0;
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(254);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 254
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0988958328212415
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getFilt^rType");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      AbstractClassifier.makeCopy(naiveBayesMultinomialUpdateable0);
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation1.numTruePositives(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5033667580151375
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String string0 = Evaluation.getGlobalInfo(linearRegression0);
      assertEquals("\nSynopsis for weka.classifiers.functions.LinearRegression:\n\nClass for using linear regression for prediction. Uses the Akaike criterion for model selection, and is able to deal with weighted instances.", string0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      evaluation0.toMatrixString();
      double double1 = evaluation0.numFalsePositives(0);
      double double2 = evaluation0.truePositiveRate(2);
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.avgCost();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9021205315906347
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      evaluation0.weightedPrecision();
      evaluation0.KBInformation();
      evaluation0.matthewsCorrelationCoefficient((-1));
      evaluation0.KBMeanInformation();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) logistic0, instances1, (-2), (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8696998892218977
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation.getGlobalInfo(linearRegression0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      evaluation0.toMatrixString();
      evaluation0.matthewsCorrelationCoefficient(1546);
      evaluation0.KBMeanInformation();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) evaluation0;
      objectArray0[1] = (Object) naiveBayesMultinomialUpdateable0;
      objectArray0[2] = (Object) instances0;
      objectArray0[3] = (Object) instances0;
      objectArray0[4] = (Object) textDirectoryLoader0;
      objectArray0[5] = (Object) linearRegression0;
      try { 
        evaluation0.crossValidateModel((Classifier) linearRegression0, instances0, 330, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.Evaluation cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "@data";
      stringArray0[1] = "1xx}]9^zGi_c7K(u-7^";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      try { 
        Evaluation.evaluateModel("1xx}]9^zGi_c7K(u-7^", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name 1xx}]9^zGi_c7K(u-7^.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7085549222046321
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getFilterType");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8556465481342483
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomCommittee randomCommittee0 = new RandomCommittee();
      String string0 = Evaluation.getGlobalInfo(randomCommittee0);
      assertEquals("\nSynopsis for weka.classifiers.meta.RandomCommittee:\n\nClass for building an ensemble of randomizable base classifiers. Each base classifiers is built using a different random number seed (but based one the same data). The final prediction is a straight average of the predictions generated by the individual base classifiers.", string0);
      
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\nSynopsis for weka.classifiers.meta.RandomCommittee:\n\nClass for building an ensemble of randomizable base classifiers. Each base classifiers is built using a different random number seed (but based one the same data). The final prediction is a straight average of the predictions generated by the individual base classifiers.";
      stringArray0[1] = "WWp[>=H&A3.";
      stringArray0[2] = "^h";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      evaluation0.KBInformation();
      double double1 = evaluation0.matthewsCorrelationCoefficient(2376);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.737927227291814
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.precision(1798);
      double double1 = evaluation0.m_SumClass;
      evaluation0.toMatrixString();
      evaluation0.numFalsePositives(1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double double2 = evaluation0.weightedPrecision();
      double double3 = evaluation0.KBInformation();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.numFalsePositives(2);
      double double5 = evaluation0.truePositiveRate(30);
      assertEquals(double5, double4, 0.01);
      
      Random.setNextRandom(30);
      double double6 = evaluation0.pctCorrect();
      assertEquals(double6, double2, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1196016669486317
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("DGqH,=\")O+bO[Q)]a");
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.deleteAttributeAt((-2293));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(33);
      evaluation0.truePositiveRate(1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = (Object) " QyqbrT";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) capabilities0;
      objectArray0[4] = (Object) logistic0;
      objectArray0[5] = (Object) null;
      try { 
        evaluation0.evaluateModel((Classifier) logistic0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.function.Consumer$MockitoMock$722799593 cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.incorrect();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9074169042571496
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      Logistic logistic0 = new Logistic();
      Instances instances2 = new Instances(instances1, (-2186));
      Evaluation evaluation1 = new Evaluation(instances2);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(0.0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertNotNull(doubleArray0);
      assertEquals(4, doubleArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.501730978302286
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = evaluation0.precision(1798);
      double double2 = evaluation0.m_SumClass;
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      double double3 = evaluation0.numFalsePositives(1);
      assertEquals(double3, double1, 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      System.setCurrentTimeMillis(2);
      double double4 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double4, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 285.301802);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7655747492431795
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader2.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(63);
      double double0 = evaluation0.m_TotalCoverage;
      textDirectoryLoader2.setDebug(true);
      double double1 = evaluation0.weightedMatthewsCorrelation();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation0.unweightedMacroFmeasure();
      assertEquals(double4, double1, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance1, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.060287946098786
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setDebug(true);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toSummaryString(true);
      evaluation0.weightedFalsePositiveRate();
      evaluation1.weightedFalseNegativeRate();
      evaluation0.unweightedMacroFmeasure();
      double double0 = new Float((-1.0));
      assertEquals((-1.0F), double0, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0680878912096095
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = evaluation0.m_SumErr;
      double double2 = evaluation0.m_SumClass;
      evaluation0.toMatrixString();
      evaluation0.numFalsePositives((-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.getCapabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.precision(99);
      assertNotEquals(double1, double0, 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double2 = evaluation0.SFMeanSchemeEntropy();
      double double3 = evaluation0.m_TotalCoverage;
      double double4 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation0.numTrueNegatives(99);
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0988958328212415
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      AbstractClassifier.makeCopy(naiveBayesMultinomialUpdateable0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.numTruePositives(16);
      // Undeclared exception!
      try { 
        evaluation1.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.weightedTruePositiveRate();
      double double1 = evaluation0.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.5321601075997595
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" QyqbrT");
      Evaluation evaluation0 = new Evaluation(instances0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      evaluation0.areaUnderROC((-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 723.3610891181663;
      SparseInstance sparseInstance0 = new SparseInstance(1975.67041669, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      evaluation0.numInstances();
      evaluation0.toClassDetailsString();
      evaluation0.numFalseNegatives((-1));
      evaluation0.numInstances();
      // Undeclared exception!
      try { 
        evaluation0.recall(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.16678027408837
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      Logistic logistic0 = new Logistic();
      Evaluation.makeOptionString(logistic0, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation1.areaUnderROC((-2));
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) logistic0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.589119109634138
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" QyqbrT");
      Evaluation evaluation0 = new Evaluation(instances0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      evaluation0.areaUnderROC((-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 723.3610891181663;
      SparseInstance sparseInstance0 = new SparseInstance(1975.67041669, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      evaluation0.numInstances();
      evaluation0.toClassDetailsString();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) gaussianProcesses0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1792441826361872
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.precision(1798);
      double double1 = evaluation0.m_SumClass;
      evaluation0.toMatrixString();
      evaluation0.numFalsePositives(1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6809837858852603
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = evaluation0.m_SumErr;
      double double2 = evaluation0.m_SumClass;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(false);
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution(90.570495);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 90
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0144864535881952
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getFilt^rType");
      Evaluation evaluation0 = new Evaluation(instances0);
      linearRegression0.toString();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation0.areaUnderPRC(1164);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0825436246932783
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getFilt^rType");
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      AbstractClassifier.makeCopy(naiveBayesMultinomialUpdateable0);
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayesMultinomialUpdateable0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.NaiveBayesMultinomialUpdateable:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.640684291953396
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-613.5599119656197), doubleArray0);
      instances0.add((Instance) denseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 2049;
      Instances instances0 = new Instances("R_~\"0@eFdo)BvM", arrayList0, 2049);
      int int1 = 7;
      Evaluation.handleCostOption((String) null, 7);
      Evaluation.handleCostOption((String) null, 1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.precision(99);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)8;
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.m_TotalCoverage;
      double double4 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double4, double0, 0.01);
      
      evaluation0.numFalseNegatives((byte)22);
      double double5 = evaluation0.numInstances();
      assertEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      Logistic logistic0 = new Logistic();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation1.m_TotalSizeOfRegions;
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.4848196591643763
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.toClassDetailsString("@relation");
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has beenspecified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.890369635258679
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      textDirectoryLoader0.getDataSet();
      Instances instances2 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances2);
      String string0 = evaluation1.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Evaluation evaluation2 = new Evaluation(instances1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation1.weightedTruePositiveRate();
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" QyqbrT");
      Logistic logistic0 = new Logistic();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      capabilities0.toSource("&");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 723.3610891181663;
      doubleArray0[1] = 1.7976931348623157E308;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(109, doubleArray0);
      binarySparseInstance0.deleteAttributeAt(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumSchemeEntropy = (-1118.1120331);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-247.11971145);
      doubleArray0[1] = (-247.11971145);
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (-247.11971145);
      doubleArray0[4] = (-2.0);
      doubleArray0[5] = (-2.0);
      doubleArray0[6] = 1.7976931348623157E308;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), doubleArray0);
      int int0 = 4;
      binarySparseInstance0.deleteAttributeAt(4);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance0, 385.25138722856);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0611976639656677
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" QyqbrT");
      Evaluation evaluation0 = new Evaluation(instances0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      evaluation0.areaUnderROC((-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 723.3610891181663;
      evaluation0.numFalsePositives(16);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5823133712725186
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Classifier classifier0 = null;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      Cobweb cobweb0 = new Cobweb();
      Capabilities capabilities0 = cobweb0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(string0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("&", arrayList0, 1851);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      MockRandom mockRandom0 = new MockRandom((-1L));
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      REPTree rEPTree0 = new REPTree();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String[] stringArray0 = new String[4];
      stringArray0[1] = null;
      stringArray0[2] = ".bsi";
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("Y)", (-2191));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("Y)", (-2188));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getKeys();
      databaseLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AbstractClassifier.makeCopy(additiveRegression0);
      double double0 = 1271.8;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch((Instances) null);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      String string0 = Evaluation.makeOptionString(rEPTree0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[0] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
