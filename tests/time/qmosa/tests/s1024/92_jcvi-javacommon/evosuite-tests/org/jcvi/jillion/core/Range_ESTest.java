/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:05:28 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.077211156617918
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854773975L);
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2075);
      linkedList1.add(integer0);
      linkedList1.removeFirstOccurrence(range0);
      linkedList0.removeAll(linkedList1);
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      long long0 = range2.getEnd(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
      
      Range range3 = Range.of(range_CoordinateSystem0, 9223372036854773975L, 9223372036854774909L);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range2));
      
      range1.equals(range3);
      Range.Builder range_Builder0 = new Range.Builder(2147482351L);
      range_Builder0.expandBegin(2147483647L);
      Range range4 = Range.of(2147483647L);
      Range.ofLength(2147482351L);
      boolean boolean1 = range1.endsBefore(range4);
      assertFalse(range4.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.069548766789265
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Comparators.values();
      long long1 = 766L;
      List<Range> list0 = range0.split(766L);
      range0.complementFrom(list0);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(766L);
      Range range1 = Range.of(range_CoordinateSystem0, (-370L), 0L);
      range0.intersects(range1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(3561L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.52585198715022
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2562L));
      range0.equals("");
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.668253949440328
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = range0.asRange();
      range1.getLength();
      range1.split(127L);
      long long0 = (-2399L);
      Range range2 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2399L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.0589976613347725
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1954L), (-1954L));
      Range.Comparators.values();
      Range range0 = Range.of(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder2.shift(4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      range_Builder3.shift(643931L);
      range_Builder4.copy();
      Range.Builder range_Builder5 = new Range.Builder(range0);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-3288L), 4294967295L);
      range2.getEnd(range_CoordinateSystem0);
      Range.of((-1954L), 643931L);
      List<Range> list0 = range1.complement(range2);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1281L, (-1954L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.055343077958604
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of((-30L));
      Range range1 = range0.asRange();
      range1.getLength();
      range0.split(2153L);
      Range range2 = Range.of((-871L));
      range0.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      range2.iterator();
      Range.ofLength(9223372036854775807L);
      range1.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 3582002721529L, 9223368461294505217L);
      // Undeclared exception!
      try { 
        range0.split((-3691L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.140106093761428
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of((-30L));
      Range range1 = range0.asRange();
      range1.getLength();
      range0.split(2153L);
      Range range2 = Range.of((-871L));
      range0.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      range2.iterator();
      Range.ofLength(9223372036854775807L);
      range1.complement(range2);
      Range.of(1L, 1L);
      Range range3 = Range.of((-370L));
      range3.getLength();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("file can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.file can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.067009310196955
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(2757L);
      range0.complement(range1);
      Range range2 = range0.asRange();
      range2.split(127L);
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(127L);
      range_Builder0.expandBegin(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      range0.iterator();
      Range.of(range_CoordinateSystem0, 127L, 127L);
      range2.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("can not add null range to cache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse can not add null range to cache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.0215942913394445
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      range0.split(2147483647L);
      Range range1 = Range.of(2147483647L);
      range1.complement(range0);
      range1.startsBefore(range0);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.parseRange(".RHvcM+a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse .RHvcM+a into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.9399070162382825
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of((-188L), (-188L));
      Range range1 = Range.of((-188L));
      range0.endsBefore(range1);
      range1.getLength();
      range0.split(2147483647L);
      Range.of(1L);
      Range range2 = Range.ofLength(3680L);
      range1.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range2.complementFrom(linkedList0);
      range2.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 899L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.213686594681112
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(2757L);
      range0.complement(range1);
      Range range2 = range0.asRange();
      List<Range> list0 = range2.split(127L);
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(127L);
      range_Builder0.expandBegin(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      Range range3 = Range.ofLength(2757L);
      range1.equals(range3);
      Range.Builder range_Builder1 = new Range.Builder();
      range2.iterator();
      range1.complementFrom(list0);
      Range range4 = Range.of((-558L), 4294967295L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.246689675548134
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      range_Builder0.contractBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      Range range1 = Range.ofLength(475L);
      String string0 = range1.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 1 .. 475 ]/RB", string0);
      
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1774L));
      range1.iterator();
      range1.complement(range0);
      range1.toString();
      range_Builder0.contractEnd(475L);
      String string1 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 2147483647 .. 2147483646 ]/0B", string1);
      
      Range.of((-1861L));
      Range range2 = Range.of((-1416L));
      range_Builder1.expandBegin(2165L);
      Range.of(475L);
      boolean boolean0 = range2.endsBefore(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range3 = range0.asRange();
      //  // Unstable assertion: assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.069089947780362
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of((-30L));
      Range range1 = range0.asRange();
      range1.getLength();
      List<Range> list0 = range0.split(2153L);
      Range range2 = Range.of((-2399L));
      Range.ofLength(899L);
      range2.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.complementFrom(list0);
      Range.of(1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("SB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.8005496823064338
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Comparators.values();
      Spliterator<Long> spliterator0 = range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(585L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd(585L);
      range_Builder0.copy();
      range0.equals(spliterator0);
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.9295524328791087
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Comparators.values();
      List<Range> list0 = range0.split(766L);
      range0.complementFrom(list0);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 3561L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder();
      range0.iterator();
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range range1 = Range.of(3561L, 9223372032559808513L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.587300971712055
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.of((-188L), (-188L));
      String string0 = ".RHvcM+a";
      Range range1 = Range.of((-188L));
      range0.endsBefore(range1);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("= 4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.= 4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.111523486331485
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-963L));
      range_Builder0.expandEnd((-963L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-963L));
      range_Builder0.contractBegin(0L);
      range_Builder1.contractBegin((-963L));
      Range range1 = Range.ofLength(76L);
      Range range2 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range2.complementFrom(linkedList0);
      range0.toString();
      range_Builder0.expandBegin((-963L));
      Range range3 = Range.of((-963L));
      range3.endsBefore(range0);
      range2.isEmpty();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.062193837984175
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = (-184L);
      Range range0 = Range.of((-184L), (-184L));
      Range range1 = Range.of((-184L));
      range0.endsBefore(range1);
      range1.getLength();
      range1.isSubRangeOf(range0);
      List<Range> list0 = range0.split(2L);
      range0.complementFrom(list0);
      range1.startsBefore(range0);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-584L));
      range1.intersects(range0);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.651197054908134
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of((-188L), (-188L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.startsBefore(range1);
      Range range2 = Range.of((-188L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      boolean boolean1 = range0.intersects(range2);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.7399435626884365
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range range1 = range_Builder0.build();
      Range range2 = range0.intersection(range1);
      range2.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      range_Builder1.shift(1L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(" 9#Nij]LZ?'&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem. 9#Nij]LZ?'&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.492966590895983
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-30L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1832L);
      Range range0 = Range.of((-1L), 1832L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      range_Builder1.contractBegin((-180L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.8139913455208663
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(0L);
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775554L);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(1L);
      range_Builder1.shift(9223372036854775554L);
      range_Builder2.copy();
      range_Builder0.copy();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-2147483648L);
      Range.of(range_CoordinateSystem0, (-2147483648L), 1L);
      String string0 = "h~i\"Z[6svX";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("h~i\"Z[6svX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.h~i\"Z[6svX
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.082912675292374
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of((-934L));
      range0.toString();
      Range range1 = Range.of((-934L));
      range0.intersects(range1);
      range1.endsBefore(range0);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Range range2 = Range.ofLength(4294967294L);
      range2.startsBefore(range1);
      range2.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(1218L, (-934L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.415636521843134
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      range_Builder1.contractBegin(0L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(2439L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=4.188907002066587
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-30L));
      Range range1 = range0.asRange();
      range1.getLength();
      List<Range> list0 = range0.split(2153L);
      Range range2 = Range.of((-1641L));
      Range range3 = Range.ofLength(899L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      range1.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder((-30L), 4294967295L);
      range_Builder0.expandBegin((-1861L));
      range1.endsBefore(range2);
      Range range4 = Range.of((-1861L));
      range4.complement(range1);
      range3.endsBefore(range4);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.970143034261998
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of((-30L));
      Range range1 = range0.asRange();
      range1.getLength();
      range0.split(2153L);
      Range range2 = Range.of((-2399L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.getEnd();
      range2.complementFrom(linkedList0);
      range1.intersection(range0);
      Range.of((-2399L), 4294967295L);
      range2.getLength();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("file can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.file can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6451831374803882
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of((-188L), (-188L));
      Range range1 = Range.of((-1L));
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange(".RHvcM+a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse .RHvcM+a into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.567196203119416
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(0L, 0L);
      Range range2 = Range.of(0L);
      boolean boolean0 = range1.startsBefore(range2);
      boolean boolean1 = range2.intersects(range0);
      assertFalse(boolean1 == boolean0);
      assertSame(range2, range0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.8821583619705056
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of(2165L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.contractBegin((-1L));
      range_Builder0.contractBegin((-1188L));
      range1.toString();
      range0.complement(range0);
      range1.startsBefore(range0);
      Range.parseRange("[ 2165 .. 2165 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.043113451755531
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775554L);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(1L);
      range_Builder1.shift(9223372036854775554L);
      range_Builder2.copy();
      range_Builder0.copy();
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(1L, long0);
      
      Range range2 = Range.of(range_CoordinateSystem1, (-2147483648L), (-3110L));
      List<Range> list0 = range2.complement(range1);
      range2.complementFrom(list0);
      assertEquals(0, list0.size());
      
      Range range3 = Range.of(range_CoordinateSystem0, (-3110L), (-3110L));
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.9804593468172933
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of(2165L, 2165L);
      Range range1 = range0.asRange();
      List<Range> list0 = range0.split(899L);
      Range range2 = Range.of(899L);
      Range.ofLength(899L);
      long long0 = 127L;
      Range.of(127L);
      Range.ofLength(127L);
      range0.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      range1.complementFrom(list0);
      range2.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("70]|FR&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 70]|FR& into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6202559104965215
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.shift(0L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2912L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1569195837122
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.ofLength(475L);
      Object object0 = new Object();
      String string0 = "gX}/43698NJky_C";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString();
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("gX}/43698NJky_C", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse gX}/43698NJky_C into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.7007552050392407
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(1L);
      Range.Builder range_Builder1 = new Range.Builder(0L, 1L);
      range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder2 = new Range.Builder();
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.46364552903113
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.of(899L);
      Range.ofLength(899L);
      Range.of(127L);
      Range.ofLength(127L);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.of(2165L, 1354L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.788568781230856
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      range_Builder0.expandEnd(1832L);
      Range range0 = Range.of((-1L), 1832L);
      range0.toString(range_CoordinateSystem0);
      range0.getLength();
      Range range1 = Range.ofLength(32767L);
      Range range2 = Range.ofLength(4186L);
      range1.startsBefore(range2);
      range0.split(1832L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("=u1R8:lvLGc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.=u1R8:lvLGc
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.788568781230856
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-30L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      range_Builder0.expandEnd(1832L);
      Range range0 = Range.of((-1L), 1832L);
      range0.toString(range_CoordinateSystem0);
      range0.getLength();
      Range range1 = Range.ofLength(32767L);
      Range range2 = Range.ofLength(4186L);
      range1.startsBefore(range2);
      range0.split(1832L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("=u1R8:lvLGc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.=u1R8:lvLGc
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.996338270002212
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Comparators.values();
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(585L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractEnd(585L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(766L);
      range_Builder2.contractBegin(766L);
      Range range1 = Range.of(585L, 766L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 3398L);
      range1.isSubRangeOf(range2);
      String string0 = "number of entries must be >=0";
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1851L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1851L), (-1851L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = 4294967295L;
      long long1 = 127L;
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.9142152970412516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.Comparators.values();
      long long0 = 766L;
      List<Range> list0 = range0.split(766L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      range0.spliterator();
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 3561L);
      range_Builder0.shift(3561L);
      range_Builder0.build();
      range_Builder0.expandEnd(0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3235346639983794
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of(4294967268L);
      Range range1 = range0.asRange();
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3584884981309253
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1851L), (-1851L));
      Range.Builder range_Builder0 = new Range.Builder((-436L), 255L);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=4.016413083564021
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854773975L);
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2075);
      linkedList1.add(integer0);
      linkedList1.removeFirstOccurrence(range0);
      linkedList0.removeAll(linkedList1);
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      long long0 = range2.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-9223372036854775808L), long0);
      
      Range range3 = Range.of(range_CoordinateSystem0, 9223372036854773975L, 9223372036854774909L);
      List<Range> list0 = range3.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range3));
      
      List<Range> list1 = range2.complement(range0);
      List<Range> list2 = range1.complementFrom(list1);
      //  // Unstable assertion: assertTrue(list2.contains(range2));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 898L, 2987L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem3, 1281L, 4294967295L);
      range4.intersection(range2);
      //  // Unstable assertion: assertNotSame(range2, range3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.9991028704996445
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1954L), (-1954L));
      Range.Comparators.values();
      Range range0 = Range.of(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = range_Builder2.shift(4294967295L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      range_Builder3.shift(643931L);
      range_Builder4.copy();
      range_Builder3.copy();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-3288L), 4294967295L);
      range2.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, 255L, 9223372036854775554L);
      List<Range> list0 = range1.complement(range2);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 1281L, (-1954L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.6259339035145532
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of(255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin();
      Range range1 = Range.of((-1416L));
      range1.split(255L);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.370438073166633
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = (-934L);
      Range range0 = Range.of((-934L));
      range0.toString();
      Range range1 = Range.of((-934L));
      range0.intersects(range1);
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-934L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.801765289872338
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.of((-934L));
      range0.getBegin();
      range0.toString();
      Range range1 = Range.of((-934L));
      range0.intersects(range1);
      range1.endsBefore(range0);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of((-934L), (-5209L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4137603481660967
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.of((-963L));
      long long0 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967303L, (-962L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.891308148837541
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(4294967295L);
      range0.intersects(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2075);
      linkedList1.add(integer0);
      linkedList1.removeFirstOccurrence(range0);
      linkedList0.removeAll(linkedList1);
      linkedList0.add(range0);
      range0.getEnd();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2675871151461036
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=4.086915206861487
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-963L));
      range_Builder0.expandEnd((-963L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-963L));
      range_Builder0.contractBegin(0L);
      range_Builder1.contractBegin((-963L));
      Range range1 = Range.ofLength(76L);
      Range range2 = range0.intersection(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range2.complementFrom(linkedList0);
      range0.toString();
      range0.intersects(range2);
      range_Builder0.expandBegin((-963L));
      Range.of((-963L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.8916612951586513
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(4294967295L);
      range0.intersects(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2075);
      range1.endsBefore(range1);
      linkedList1.removeFirstOccurrence(range0);
      linkedList0.removeAll(linkedList1);
      linkedList0.add(range0);
      int int0 = 48;
      long long0 = new Long(2075);
      range0.complementFrom(linkedList0);
      Range range2 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.4796066414379734
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      range2.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range_Builder1.shift(1L);
      range_Builder0.shift(0L);
      range1.intersects(range2);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3235346639983794
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.928058906475342
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854773975L);
      Range range1 = Range.ofLength(4294967295L);
      range0.intersects(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2075);
      linkedList1.add(integer0);
      linkedList1.removeFirstOccurrence(range0);
      linkedList0.removeAll(linkedList1);
      range1.spliterator();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2075);
      Range range2 = Range.of((-584L));
      range2.intersects(range0);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-1298L));
      range_Builder2.contractBegin(2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1298L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-436L), (-1068L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.of((-935L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = (-3703L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3703L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1069L);
      range_Builder0.expandBegin(1069L);
      range_Builder0.copy();
      range_Builder0.shift((-2045L));
      range_Builder0.expandEnd((-2045L));
      long long0 = (-2975L);
      range_Builder0.expandEnd((-2975L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
