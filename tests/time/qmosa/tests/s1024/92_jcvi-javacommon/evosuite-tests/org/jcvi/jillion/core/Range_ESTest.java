/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 10:10:45 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1188834054892975
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of((-30L), 2467L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0254887803944674
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1851L), 462L);
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.split(793L);
      assertFalse(list0.contains(range0));
      assertEquals(3, list0.size());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.14716708893603
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range range1 = Range.ofLength(76L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0749301214912226
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      Range range0 = Range.of((-1L), 1832L);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.954331036271918
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(8L, 8L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2002284824112834
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1711L), (-1711L));
      Range range1 = Range.of((-1711L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.267934377820567
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7519159690311215
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7284075400342904
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.15462219691272
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9806389395003627
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of((-50L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8580062396672252
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.664619195193491
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 2147483647 ]/RB", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("RB", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7782254130184434
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1390L, 4294967295L);
      Range range0 = range_Builder0.build();
      String string0 = range0.toString();
      assertEquals("[ 1390 .. 4294967294 ]/0B", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.775975553103794
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1851L), (-1851L));
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of((-1851L), (-1851L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.648438334546311
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.719809854865039
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-1430L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1430L), long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9761388013384353
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.664619195193491
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getEnd();
      assertEquals(2147483646L, long0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9678674685340356
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-1806L), (-1806L));
      long long0 = range0.getEnd();
      assertEquals((-1806L), long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 921L, 1182L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(921L, long0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.ofLength(462L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.864738512190568
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 921L, 1182L);
      long long0 = range0.getBegin();
      assertEquals(921L, long0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of((-963L));
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-963L), long0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4824475587172268
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      List<Range> list0 = range0.split(2147483647L);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(range1.isEmpty());
      assertFalse(list1.contains(range1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7284075400342904
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, (Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1532L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.925202764171108
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2368L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.024695553858248
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("uS4aZD4!-d6X(6q", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse uS4aZD4!-d6X(6q into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((-30L), (-2027L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6819941777226375
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967437L, 4294967437L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1851L), (-1851L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1736L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1736 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1069L);
      range_Builder0.expandEnd((-2045L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.831480240067973
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.737140718477016
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7730363048778623
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 639L, 639L);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.865703420347897
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      Range range0 = Range.ofLength(0L);
      range0.equals(range_Builder0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.972845711672121
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      Range range0 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.778225413018444
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7689014346007985
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.8234169983973927
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1390L, 4294967295L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.114963717591474
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      Range range0 = Range.of(range_CoordinateSystem0, (-30L), (-26L));
      range_Builder0.shift(2925L);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = Range.of(793L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.728352370092261
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.158499929075535
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8113759572611494
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.ofLength(76L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7878762280875944
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.ofLength(76L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.900980466620676
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-30L), (-26L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.917432973292215
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9909112080063873
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of((-30L), 1832L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.970930423112055
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1851L), 462L);
      Range range0 = Range.of((-1851L), (-1851L));
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.098367396963841
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = Range.of((-1851L), (-1851L));
      Range.Builder range_Builder0 = new Range.Builder((-3619L), 65535L);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.999815905964476
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.of((-1L), 1832L);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.582424317350126
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8712202522291133
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.of((-963L));
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.2235929159449475
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1851L), 462L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(462L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6484383345463107
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.002697432380181
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range range0 = Range.of((-1L), 1832L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.0142589947214877
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.2394935734346344
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.of((-1L), 1832L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range range0 = Range.of((-963L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.824365939916929
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1390L, 4294967295L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.177514020533748
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.973507894565574
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(793L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.158499929075535
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2121713795617453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range range0 = Range.of((-1L), 1832L);
      Range range1 = Range.of(0L, 888L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.9909112080063878
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range range0 = Range.of((-1L), 1832L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(2467L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(2468L, long0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range range0 = Range.of((-963L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-963L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.2923952726908654
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1390L, 4294967295L);
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.778225413018444
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967437L, 4294967437L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967437L);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.907439693701553
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.expandEnd(75L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8337387456310323
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1390L, 4294967295L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1532L));
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.354802586768093
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Range range0 = Range.of((-1L), 1832L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.7782254130184443
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.0146300137242736
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Range range0 = Range.parseRange("[ 1 .. 2147483647 ]/RB");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1390L, 4294967295L);
      Range range0 = range_Builder0.build();
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.7284075400342904
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.966826759892553
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.split(4294965905L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1069L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9966356757792143
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1390L, 4294967295L);
      range_Builder0.expandBegin(4294967295L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.736851060567468
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Range range0 = Range.of((-1L), 1832L);
      Range range1 = Range.of(0L, 888L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(2, list0.size());
      assertTrue(list1.isEmpty());
  }
}
