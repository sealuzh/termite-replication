/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:20:58 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.627323234076236
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = 2610;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-7), (Iterator<Nucleotide>) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)61;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 56);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1706289204519162
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.toString(byteArray0);
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      Byte byte0 = new Byte((byte) (-126));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte) (-126);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 374);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-126);
      byteArray1[5] = (byte) (-60);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[3] = (byte)0;
      byteArray1[8] = (byte) (-126);
      defaultNucleotideCodec0.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte) (-60));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      byte byte0 = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      byte byte1 = (byte)65;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 2565);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.475371727490056
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) null);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2610);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray2);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray2, 1825);
      defaultNucleotideCodec0.isGap(byteArray0, 2610);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      Range range0 = Range.of((long) 1825);
      range0.getLength();
      Range range1 = Range.ofLength(0);
      range0.endsBefore(range1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray0, range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(3, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Nucleotide nucleotide0 = Nucleotide.Weak;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Range.of((long) 0);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      int int0 = 3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 3);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.296315311838374
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) null);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      assertEquals(4, byteArray1.length);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 0);
      assertTrue(int1 == int0);
      
      int int2 = defaultNucleotideCodec3.getGappedOffsetFor(byteArray0, (-2146703311));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray0);
      assertEquals(3, int2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.325750657489052
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decode(byteArray0, (byte)3);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (byte) (-1));
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, (byte)0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((-3259), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7567169975450474
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      long long0 = 6L;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      defaultNucleotideCodec0.encode(nucleotide0);
      Range.of((-1106L), (-1106L));
      Range range0 = Range.of((long) (byte)0);
      long long1 = 6L;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.487270829577765
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) null);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2610);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      Integer integer0 = new Integer(0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray2);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray2, 1825);
      defaultNucleotideCodec0.isGap(byteArray0, 0);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray2, 1859);
      assertEquals(1859, int0);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray2, 1073741824);
      assertFalse(boolean0);
      
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 1073741824);
      assertEquals(4, byteArray1.length);
      
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("CGT", string0);
      
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray0);
      
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray2, (-1655));
      assertEquals(1, int1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.37561513047716
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.iterator(byteArray0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      linkedList1.add((int) (byte)0, nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide1 = Nucleotide.Guanine;
      nucleotide1.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) linkedList1);
      long long0 = defaultNucleotideCodec3.getUngappedLength(byteArray2);
      assertEquals(1L, long0);
      
      linkedList0.addAll((Collection<? extends Nucleotide>) linkedList1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec4.toString(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals("G", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray0, 167811579);
      int int1 = defaultNucleotideCodec3.getGappedOffsetFor(byteArray1, 255);
      assertTrue(int1 == int0);
      assertEquals(4, byteArray1.length);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1423715475427527
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = 2610;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of((long) 0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray0, range0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(1590, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.347825121946125
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) null);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2610);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.decode(byteArray1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Set<Nucleotide> set0 = nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[0] = (byte) (-30);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.toString(byteArray2);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray2, (byte) (-30));
      defaultNucleotideCodec1.iterator(byteArray1);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)120;
      byteArray0[0] = (byte)120;
      byte byte1 = (byte)53;
      byteArray0[1] = (byte)53;
      byte byte2 = (byte)3;
      byteArray0[2] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (byte) (-126));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4902054700934357
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) null);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2610);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray2);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-649));
      defaultNucleotideCodec0.isGap(byteArray2, 1825);
      defaultNucleotideCodec0.isGap(byteArray0, 2610);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray2, 1859);
      defaultNucleotideCodec0.isGap(byteArray2, 1073741824);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 1073741824);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8967541232658816
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-61);
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-110);
      defaultNucleotideCodec0.iterator(byteArray1);
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte) (-72);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte)87);
      defaultNucleotideCodec0.iterator(byteArray1);
      defaultNucleotideCodec0.iterator(byteArray1);
      byteArray1[3] = (byte)35;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3957897189453337
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) null);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2610);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide[] nucleotideArray0 = new Nucleotide[9];
      nucleotideArray0[0] = nucleotide0;
      nucleotideArray0[1] = nucleotide0;
      nucleotideArray0[2] = nucleotide0;
      nucleotideArray0[3] = nucleotide0;
      nucleotideArray0[4] = nucleotide0;
      nucleotideArray0[5] = nucleotide0;
      nucleotideArray0[6] = nucleotide0;
      nucleotideArray0[7] = nucleotide0;
      nucleotideArray0[8] = nucleotide0;
      linkedList0.toArray(nucleotideArray0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide0);
      linkedList1.toArray();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      String string0 = defaultNucleotideCodec0.toString(byteArray2);
      assertEquals("AT", string0);
      
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1717986918);
      Byte byte0 = new Byte((byte) (-119));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 1717986918);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)30}, byteArray0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, 2610);
      assertEquals(2610, int0);
      
      int int1 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, 0);
      assertEquals(0, int1);
      
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
      assertEquals(4, byteArray1.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.889123342973809
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-68));
      byteArray0[0] = (byte) (-51);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[1] = (byte)66;
      byte byte0 = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[3] = (byte) (-1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-625));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 3874L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 3874 corresponds to encodedIndex 1941  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3766265400583184
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)28;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (-1673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 585);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)10;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.830883141121314
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)88;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-79);
      defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-102);
      byteArray1[1] = (byte)3;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte) (-8);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-110);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.isGap(byteArray1, 0);
      Range range0 = Range.of((long) (byte)3, (long) (byte)3);
      Range range1 = Range.of((long) 0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      nucleotide1.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode(nucleotide0);
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byteArray0[0] = (byte) (-30);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, (-424));
      defaultNucleotideCodec0.iterator(byteArray1);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("^?0l0)#sz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.^?0l0)#sz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1941);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte) (-35);
      byteArray1[4] = (byte) (-27);
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)48;
      byteArray1[7] = (byte) (-27);
      byteArray1[8] = (byte)14;
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-90);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-35));
      byte[] byteArray2 = new byte[2];
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-5);
      byteArray3[1] = (byte)124;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray3);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.455565785406016
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) null);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2610);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getGapOffsets(byteArray2);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray2, 1825);
      defaultNucleotideCodec0.isGap(byteArray0, 2610);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-1966));
      defaultNucleotideCodec1.getUngappedLength(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1099038720);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)66;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-97);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.isGap(byteArray3, (-906));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3872368074139962
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, (Iterator<Nucleotide>) null);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Adenine;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray2, 3);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, (-1841));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray2, 0);
      byte[] byteArray3 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray3);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.058620243537487
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-68));
      byteArray0[0] = (byte) (-51);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, (-449));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (byte)66);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray0, 6);
      Range range0 = Range.of((-1197L), 1614L);
      Range range1 = Range.of((-855638016L), (-358L));
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4179454785189023
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)72;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[2] = (byte)7;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.417715857393759
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-11);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = new Integer((-68));
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-2884L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -2884
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-61);
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-110);
      defaultNucleotideCodec0.iterator(byteArray1);
      byteArray1[1] = (byte)61;
      defaultNucleotideCodec0.decode(byteArray1, 0L);
      byteArray1[2] = (byte) (-72);
      defaultNucleotideCodec0.iterator(byteArray1);
      defaultNucleotideCodec0.iterator(byteArray1);
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)42;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 9223372036854775806 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6222682140896603
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = 2610;
      Iterator<Nucleotide> iterator0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(2610, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.696783156858896
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.026522790307467
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      UnaryOperator<Nucleotide> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(176, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-109);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-62);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Weak;
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byteArray0[1] = (byte)2;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)2);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byte byte0 = (byte)15;
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2270262066986755
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide[] nucleotideArray0 = new Nucleotide[5];
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      nucleotideArray0[0] = nucleotide0;
      Nucleotide nucleotide1 = Nucleotide.Unknown;
      nucleotideArray0[1] = nucleotide1;
      Nucleotide nucleotide2 = Nucleotide.Unknown;
      nucleotideArray0[2] = nucleotide2;
      Nucleotide nucleotide3 = Nucleotide.NotAdenine;
      nucleotideArray0[3] = nucleotide3;
      Nucleotide nucleotide4 = Nucleotide.NotGuanine;
      nucleotideArray0[4] = nucleotide4;
      linkedList0.toArray(nucleotideArray0);
      linkedList0.toArray();
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.toString(byteArray0);
      byteArray0[0] = (byte) (-126);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-126));
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      Byte byte0 = new Byte((byte) (-126));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte)0;
      byteArray1[4] = (byte) (-126);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 32);
      byteArray1[5] = (byte) (-60);
      byteArray0[3] = (byte)0;
      byteArray1[8] = (byte) (-126);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte) (-60));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)87;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byte[] byteArray1 = new byte[4];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (-68));
      byteArray1[0] = (byte) (-51);
      byteArray1[1] = (byte)66;
      byteArray1[1] = (byte)3;
      byteArray1[3] = (byte) (-1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, (byte)66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.914237473922695
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, (byte)0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      Range.ofLength(3187L);
      Range range0 = Range.of((long) (byte)0);
      Range range1 = Range.ofLength(6L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Range> list0 = range1.split(2L);
      range1.complementFrom(list0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      range1.forEach(consumer0);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      String string0 = "offset must be >= 0";
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, 72);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
