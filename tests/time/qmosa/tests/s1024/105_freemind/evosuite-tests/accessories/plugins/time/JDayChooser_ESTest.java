/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:55:51 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.modes.common.CommonToggleFoldedAction;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.PopupMenu;
import java.awt.event.ActionEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.Locale;
import java.util.TimeZone;
import javax.help.DefaultHelpModel;
import javax.help.HelpSet;
import javax.help.JHelpFavoritesNavigator;
import javax.help.SearchView;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.crimson.tree.XmlDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.257607849501673
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 1772;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1772, 978, 978, 978, 978, 978);
      mockGregorianCalendar0.isLeapYear(1772);
      mockGregorianCalendar0.setFirstDayOfWeek(978);
      mockGregorianCalendar0.isWeekDateSupported();
      mockGregorianCalendar0.getCalendarType();
      jDayChooser0.repaint();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Color color0 = new Color(978);
      jDayChooser0.setDecorationBackgroundColor(color0);
      HelpSet helpSet0 = new HelpSet();
      Hashtable<MockCalendar, Calendar> hashtable0 = new Hashtable<MockCalendar, Calendar>();
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters(978);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 978
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.26550320228192
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[7];
      defaultTreeCellRenderer0.setInputVerifier((InputVerifier) null);
      floatArray0[0] = (-103.05054F);
      floatArray0[1] = (-483.0489F);
      floatArray0[2] = 2743.357F;
      floatArray0[3] = (-483.0489F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2743.357F;
      floatArray0[6] = 2743.357F;
      color0.getComponents(floatArray0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMaxDayCharacters(48);
      jDayChooser1.getDay();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser1.setMaxDayCharacters(14);
      System.setCurrentTimeMillis(0L);
      Color color1 = jDayChooser1.getSundayForeground();
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertEquals((-6029312), color1.getRGB());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.240235895383868
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getToolTipText();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Locale locale0 = Locale.UK;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ImageIcon imageIcon0 = new ImageIcon("day", "month");
      jDayChooser_DecoratorButton0.getDisplayedMnemonicIndex();
      jDayChooser_DecoratorButton0.setIcon(imageIcon0);
      jDayChooser_DecoratorButton0.isFocusable();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2978344628515255
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-483.0489F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1747.6F);
      floatArray0[6] = 2743.357F;
      color0.getComponents(floatArray0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(29);
      jDayChooser0.getDay();
      jDayChooser0.setMaxDayCharacters(29);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDecorationBackgroundColor();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 195
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2647078000655583
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Fzi|d");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertNull(jButton0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 4.492931F;
      Character character0 = Character.valueOf('l');
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, 6);
      defaultTreeCellRenderer0.unregisterKeyboardAction(keyStroke0);
      floatArray0[3] = (-483.0489F);
      floatArray0[4] = (-483.0489F);
      floatArray0[5] = (-1748.7484F);
      defaultTreeCellRenderer0.getHierarchyBoundsListeners();
      floatArray0[6] = 2743.357F;
      color0.getComponents(floatArray0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(29);
      jDayChooser0.getDay();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setMaxDayCharacters(29);
      jDayChooser0.setDayBordersVisible(false);
      System.setCurrentTimeMillis(460L);
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = DebugGraphics.flashColor();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 4068;
      floatArray0[1] = (float) 4068;
      floatArray0[2] = (float) 4068;
      floatArray0[3] = (float) 270;
      floatArray0[4] = (float) 4068;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 270;
      Color.RGBtoHSB(270, 0, 4068, floatArray0);
      jDayChooser0.setForeground(color0);
      XmlDocument xmlDocument0 = new XmlDocument();
      jDayChooser0.getWeekdayForeground();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(270, 210, 270);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.get((-2144));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2054607286107037
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear((-2725));
      jDayChooser0.getLocale();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[5] = "day";
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      stringArray0[4] = "day";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "namespace-alias");
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.133834698693281
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.init();
      ImageIcon imageIcon0 = MapNodePositionHolderBase.sMapLocationIcon;
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.197108715994662
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.setToolTipText("day");
      jDayChooser0.setYearChooser(jYearChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1779), 32, 15);
      TimeZone timeZone0 = TimeZone.getTimeZone("day");
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      Date date0 = mockGregorianCalendar1.getGregorianChange();
      MockDate mockDate0 = new MockDate(15, (-1779), (-1779), 1492, 1394, 16);
      jDayChooser0.setSelectableDateRange(date0, mockDate0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.drawDays();
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!=$_";
      stringArray0[1] = "";
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-2659));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1772;
      // Undeclared exception!
      try { 
        color0.getComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-483.0489F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1747.6F);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.initDecorations();
      Boolean boolean0 = new Boolean(true);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      float float0 = 1820.88F;
      Color color0 = null;
      try {
        color0 = new Color(1708.5275F, 1820.88F, 1708.5275F, 1820.88F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Alpha Red Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.202177847398577
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultListModel<MockCalendar> defaultListModel0 = new DefaultListModel<MockCalendar>();
      JList<MockCalendar> jList0 = new JList<MockCalendar>(defaultListModel0);
      Color color0 = jList0.getSelectionForeground();
      Color.getColor("95#mkPpBa?pR#");
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getDaysInMonth();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 28, "day", (-282L), 28);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Class<CommonToggleFoldedAction> class0 = CommonToggleFoldedAction.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.setBounds(0, 4218, 990, 990);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2646491414703145
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 4.492931F;
      Character character0 = Character.valueOf('l');
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, 6);
      defaultTreeCellRenderer0.unregisterKeyboardAction(keyStroke0);
      floatArray0[3] = (-483.0489F);
      color0.getComponents(floatArray0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(29);
      jDayChooser0.getDay();
      jDayChooser0.getDay();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.186672194454255
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1772, 210, 210, 210, 210, 210);
      mockGregorianCalendar0.isLeapYear(1772);
      mockGregorianCalendar0.isWeekDateSupported();
      Color color0 = Color.blue;
      color0.getComponents((float[]) null);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(210);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getDay();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setMaxDayCharacters(210);
      jDayChooser2.setDayBordersVisible(true);
      System.setCurrentTimeMillis((-78L));
      jDayChooser2.drawWeeks();
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2021902458859617
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultListModel<MockCalendar> defaultListModel0 = new DefaultListModel<MockCalendar>();
      JList<MockCalendar> jList0 = new JList<MockCalendar>(defaultListModel0);
      Color color0 = jList0.getSelectionForeground();
      Color.getColor("95#mkPpBa?pR#");
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setSundayForeground(color0);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 28, "day", (-282L), 28);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.97F;
      floatArray0[1] = 0.97F;
      floatArray0[3] = (-483.0489F);
      floatArray0[4] = (-883.8F);
      floatArray0[5] = (-883.8F);
      floatArray0[6] = 2743.357F;
      color0.getComponents(floatArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      jDayChooser0.dayNames = stringArray0;
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.setToolTipText((String) null);
      jYearChooser0.setName("day");
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.initDecorations();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getComponentPopupMenu();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.97F;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "proxy.use_settings";
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      long long0 = 141L;
      int int1 = 889;
      jDayChooser0.requestFocus(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 141L, 889, 0, 't');
      int int2 = (-1192);
      InputEvent.getModifiersExText((-1192));
      keyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getColorModel();
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3552423716883863
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getToolTipText();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Locale locale0 = Locale.UK;
      jDayChooser0.setLocale(locale0);
      int int0 = 33;
      int int1 = 3;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(238, 3, 33, 238, 3);
      mockGregorianCalendar0.getCalendarType();
      jDayChooser0.repaint();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Color color0 = jDayChooser0.weekdayForeground;
      Color color1 = Color.lightGray;
      jDayChooser0.setDecorationBackgroundColor(color1);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.drawDays();
      jDayChooser0.setMinSelectableDate(date0);
      int int2 = (-461);
      char char0 = 'I';
      MenuElement[] menuElementArray0 = new MenuElement[6];
      JMenuItem jMenuItem0 = new JMenuItem();
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      boolean boolean0 = false;
      JMenu jMenu0 = new JMenu(">@$D>1f{~", false);
      // Undeclared exception!
      try { 
        structuredMenuHolder0.addMenu(jMenu0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.StructuredMenuHolder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1144257212092703
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.contains(13, 39);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setMaxDayCharacters((-3064));
      jDayChooser0.setInputVerifier((InputVerifier) null);
      HelpSet helpSet0 = new HelpSet();
      Hashtable<MockCalendar, Calendar> hashtable0 = new Hashtable<MockCalendar, Calendar>();
      SearchView searchView0 = new SearchView(helpSet0, "", "", hashtable0);
      DefaultHelpModel defaultHelpModel0 = new DefaultHelpModel(helpSet0);
      DefaultHelpModel defaultHelpModel1 = new DefaultHelpModel(helpSet0);
      JHelpFavoritesNavigator jHelpFavoritesNavigator0 = null;
      try {
        jHelpFavoritesNavigator0 = new JHelpFavoritesNavigator(searchView0, defaultHelpModel1);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DragSource", e);
      }
  }
}
