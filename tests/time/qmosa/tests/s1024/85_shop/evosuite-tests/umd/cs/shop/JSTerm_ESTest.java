/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 07:53:56 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9608936578439664
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.firstElement();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      streamTokenizer0.whitespaceChars((-1), (-1));
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      function2.compose((Function<? super JSSubstitution, ?>) function1);
      function1.andThen((Function<? super Integer, ? extends Integer>) function2);
      Integer integer0 = new Integer((-1));
      unaryOperator1.apply(integer0);
      unaryOperator0.compose((Function<? super Integer, ?>) function1);
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      jSTerm2.replaceAll(unaryOperator0);
      jSTerm0.removeAll(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.add((Object) stringReader0);
      jSTerm1.isGround();
      jSTerm1.equals(jSTerm0);
      jSTerm1.print();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3583002224030505
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer0 = new Integer((-433));
      Integer integer1 = new Integer(2147483645);
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      predicate0.and(predicate4);
      Integer integer2 = new Integer((-1434639875));
      predicate0.test((Integer) null);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm0);
      assertFalse(jSSubstitution0.isEmpty());
      
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals("?%%% ", stringBuffer0.toString());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.199000858895052
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer0 = new Integer((-433));
      Integer integer1 = new Integer(2147483645);
      Integer integer2 = new Integer((-1434639875));
      predicate0.test(integer2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean0);
      
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSSubstitution0.size());
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7583310103837273
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?n0HJwDvd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      streamTokenizer0.ordinaryChar(3793);
      StringReader stringReader1 = new StringReader("8REIt");
      streamTokenizer0.pushBack();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      UnaryOperator.identity();
      StringReader stringReader2 = new StringReader("eJ/['");
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm2, jSSubstitution0);
      assertEquals("[?%%%0]", jSTerm3.toString());
      assertFalse(jSSubstitution2.isEmpty());
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9348233788620877
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.firstElement();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      streamTokenizer0.whitespaceChars((-1), (-1));
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      function2.compose((Function<? super JSSubstitution, ?>) function1);
      function1.andThen((Function<? super Integer, ? extends Integer>) function2);
      Integer integer0 = new Integer((-1));
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.toStr();
      jSTerm3.isGround();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      jSTerm4.matches(jSTerm2, jSSubstitution0);
      jSSubstitution0.retainAll(jSTerm1);
      jSSubstitution1.containsAll(jSTerm4);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.105029631334913
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer(2147483645);
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Integer> predicate4 = predicate0.and(predicate3);
      Integer integer2 = new Integer(2147483645);
      Predicate<Integer> predicate5 = predicate4.and(predicate0);
      Integer integer3 = new Integer((-1958));
      predicate5.test(integer3);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.785141388141547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.firstElement();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      streamTokenizer0.whitespaceChars((-1), (-1));
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      function1.andThen((Function<? super Integer, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super Integer, ?>) function1);
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      jSTerm2.replaceAll(unaryOperator0);
      jSTerm0.removeAll(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.add((Object) stringReader0);
      jSTerm0.equals(jSTerm2);
      jSTerm1.equals(jSTerm0);
      jSTerm1.print();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      assertEquals(0, jSTerm0.size());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 3551;
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7132670970708324
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      StringReader stringReader1 = new StringReader("CcS?F*J4h`l");
      stringReader1.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isEval();
      jSTerm1.makeFunction();
      streamTokenizer0.whitespaceChars(1, 1);
      JSTerm jSTerm2 = jSTerm1.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.pushBack();
      jSTerm2.standardizerTerm();
      jSTerm0.removeAll(jSSubstitution0);
      streamTokenizer0.whitespaceChars((-1), 295);
      JSTerm jSTerm3 = jSTerm0.call();
      streamTokenizer0.pushBack();
      jSTerm1.standardizerTerm();
      jSTerm3.removeAll(jSTerm1);
      stringReader0.read(charArray0);
      jSTerm0.cloneT();
      jSSubstitution0.clear();
      // Undeclared exception!
      try { 
        jSTerm3.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8207751622034678
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Integer integer0 = new Integer((-433));
      Integer integer1 = new Integer(2147483645);
      predicate0.test(integer1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator0);
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm0.removeAll(jSTerm1);
      Integer integer2 = new Integer((-433));
      jSTerm0.add((Object) integer2);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.868826873885318
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm1.makeFunction();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      streamTokenizer0.whitespaceChars((-1), (-1));
      JSTerm jSTerm2 = jSTerm1.call();
      streamTokenizer0.pushBack();
      jSTerm2.standardizerTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super Object, ?>) function3);
      jSTerm0.replaceAll(unaryOperator1);
      jSTerm1.removeAll(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.clear();
      jSTerm1.equals(jSTerm2);
      jSTerm0.print();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      assertTrue(jSSubstitution5.equals((Object)jSSubstitution3));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.796223376034489
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = 'N';
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isEval();
      jSTerm1.makeFunction();
      streamTokenizer0.whitespaceChars((-3), (-112));
      JSTerm jSTerm2 = jSTerm0.call();
      streamTokenizer0.pushBack();
      jSTerm0.standardizerTerm();
      jSTerm0.removeAll(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.isGround();
      jSSubstitution2.containsAll(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.637290517849481
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      StringReader stringReader1 = new StringReader("CcS?F*J4h`l");
      stringReader1.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isEval();
      jSTerm1.makeFunction();
      streamTokenizer0.whitespaceChars(1, 1);
      jSTerm1.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.pushBack();
      jSTerm0.removeAll(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.add((Object) stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      predicate0.negate();
      predicate0.negate();
      jSTerm1.removeIf(predicate0);
      jSTerm0.toStr();
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.757377544795294
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.isEval();
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = jSTerm1.call();
      streamTokenizer0.pushBack();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm2.removeAll(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.add((Object) "v&lB:I$F`1C+Fy");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm2);
      predicate0.test(jSSubstitution0);
      predicate0.negate();
      jSTerm2.removeIf(predicate0);
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm3.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Integer integer0 = new Integer((-433));
      Integer integer1 = new Integer(2147483645);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7558812594142168
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSJshopVars.backquote = (-2);
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.cloneT();
      StringReader stringReader1 = new StringReader("%u8/19q}F;@n&uyI%Jj");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4947005107463776
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSTerm0.firstElement();
      Object object0 = new Object();
      jSSubstitution0.add((Object) stringReader0);
      streamTokenizer0.whitespaceChars((-1141), 10);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      function1.andThen((Function<? super Integer, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super Integer, ?>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) function1);
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm0.removeAll(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.lastElement();
      jSTerm2.add((Object) "%%%");
      // Undeclared exception!
      try { 
        jSTerm2.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.787057055833048
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      jSTerm0.capacity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm0.makeFunction();
      streamTokenizer0.whitespaceChars('_', '_');
      JSTerm jSTerm2 = jSTerm1.call();
      streamTokenizer0.pushBack();
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm3);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm2.removeAll(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      char[] charArray1 = new char[3];
      charArray1[0] = '_';
      jSTerm4.call();
      jSTerm0.equals(jSTerm1);
      charArray1[1] = '_';
      charArray1[2] = '_';
      stringReader0.read(charArray1);
      jSTerm2.matches((JSPredicateForm) jSTerm4);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9976435342075187
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Integer> predicate5 = predicate1.or(predicate4);
      predicate5.test((Integer) (-4));
      JSTerm jSTerm1 = new JSTerm();
      Integer integer0 = new Integer((-4));
      Predicate<Object> predicate6 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate7 = predicate2.or(predicate6);
      Predicate<Object> predicate8 = predicate3.or(predicate6);
      predicate8.and(predicate2);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) jSTerm2);
      Predicate<Object> predicate10 = predicate9.and(predicate8);
      predicate3.negate();
      predicate7.negate();
      jSTerm2.removeIf(predicate10);
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.exclamation = (-2);
      jSTerm1.matches(jSTerm3, (JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6226569300301503
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      jSTerm0.firstElement();
      Object object0 = new Object();
      streamTokenizer0.whitespaceChars((-1), (-1));
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      function1.apply("v&lB:I$F`1C+Fy");
      function1.andThen((Function<? super Integer, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super Integer, ?>) function1);
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      jSTerm2.replaceAll(unaryOperator0);
      jSTerm0.removeAll(jSTerm2);
      jSTerm2.retainAll(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.add((Object) stringReader0);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.664137839392251
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?n0HwDv1#d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader1 = new StringReader("call");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.562233358034343
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U8A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-4533.823082621);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      char[] charArray0 = new char[5];
      JSJshopVars.flagLevel = 1450;
      charArray0[1] = 'Z';
      jSTerm1.retainAll(jSTerm0);
      charArray0[2] = 'O';
      stringReader0.read(charArray0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      assertFalse(jSTerm3.isVariable());
      
      JSJshopVars.semicolon = 1450;
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm4.matches(jSTerm5, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm3, jSTerm0);
      
      JSTerm jSTerm6 = new JSTerm();
      jSTerm5.matches(jSTerm6, jSSubstitution0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertNotSame(jSSubstitution0, jSSubstitution2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.58722782242188
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.apostrophe = (-1);
      streamTokenizer0.parseNumbers();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm2);
      jSTerm0.cloneT();
      jSTerm1.isGround();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm2.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2);
      // Undeclared exception!
      try { 
        jSSubstitution1.remove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6262653818752013
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U8A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-4533.823082621);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.flagLevel = 1450;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSTerm0);
      streamTokenizer0.whitespaceChars(1450, (-3));
      JSTerm jSTerm1 = jSTerm0.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      jSTerm0.standardizerTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function4 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super Object, ?>) function4);
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm1.removeAll(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.clear();
      jSTerm0.equals(jSTerm1);
      jSTerm0.print();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      assertFalse(jSSubstitution5.fail());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.containsAll(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      streamTokenizer0.sval = "oIOjw";
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.550001721468483
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?n0HJwDvd");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      streamTokenizer0.ordinaryChar(3793);
      StringReader stringReader1 = new StringReader("8REIt");
      streamTokenizer0.pushBack();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertEquals("[?%%%0]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isVariable());
      
      UnaryOperator.identity();
      StringReader stringReader2 = new StringReader("eJ/['");
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm2.cloneT();
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm5, jSTerm2);
      assertFalse(jSTerm2.isFunction());
      assertEquals(1, jSTerm2.size());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1901673943042492
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Integer> predicate2 = predicate1.negate();
      Predicate<Integer> predicate3 = predicate2.or(predicate0);
      Predicate<Integer> predicate4 = predicate3.and(predicate2);
      predicate2.and(predicate0);
      predicate2.and(predicate0);
      Predicate<Integer> predicate5 = predicate4.negate();
      predicate5.negate();
      Integer integer2 = new Integer(0);
      predicate3.test(integer2);
      JSTerm jSTerm1 = new JSTerm();
      Integer integer3 = new Integer(0);
      Predicate<Object> predicate6 = predicate0.or(predicate0);
      Predicate<Object> predicate7 = predicate0.and(predicate6);
      predicate7.and(predicate0);
      predicate7.negate();
      predicate7.negate();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9361121986760548
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      StringReader stringReader1 = new StringReader("CcS?F*J4h`l");
      stringReader1.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isEval();
      assertFalse(jSTerm1.isFunction());
      
      jSTerm1.makeFunction();
      streamTokenizer0.whitespaceChars(0, 1);
      JSTerm jSTerm2 = jSTerm1.call();
      JSJshopVars.equalT = 1;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.whitespaceChars((-2), (-4));
      jSTerm2.call();
      streamTokenizer0.pushBack();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSJshopVars.whiteSpace = (-2);
      jSTerm2.isGround();
      jSSubstitution0.containsAll(jSTerm1);
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm4.makeEval(true);
      JSTerm jSTerm5 = jSTerm2.cloneT();
      System.setCurrentTimeMillis((-4));
      jSTerm5.standardizerTerm();
      boolean boolean0 = jSTerm4.equals(jSTerm3);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U-\"o*b]&'T>^^oXjak");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.rightBrac = (-1);
      JSJshopVars.coma = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5922043450080743
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      StringReader stringReader1 = new StringReader("CcS?F*J4h`l");
      stringReader1.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isEval();
      streamTokenizer0.whitespaceChars(0, 1);
      JSTerm jSTerm2 = jSTerm1.call();
      JSJshopVars.equalT = 1;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.whitespaceChars((-2), (-4));
      jSTerm2.call();
      streamTokenizer0.pushBack();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSJshopVars.whiteSpace = (-2);
      jSTerm2.isGround();
      jSSubstitution0.containsAll(jSTerm1);
      jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm2.cloneT();
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6049952076241363
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("qo");
      streamTokenizer0.whitespaceChars(2, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      streamTokenizer0.pushBack();
      jSTerm1.standardizerTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.containsAll(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) jSTerm0);
      Integer integer0 = new Integer((-2));
      Integer integer1 = new Integer((-2));
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate2 = predicate1.negate();
      Predicate<Integer> predicate3 = predicate2.or(predicate1);
      Predicate<Integer> predicate4 = predicate3.and(predicate1);
      Predicate<Integer> predicate5 = predicate4.or(predicate3);
      Predicate<Integer> predicate6 = predicate5.and(predicate1);
      Predicate<Integer> predicate7 = predicate5.and(predicate4);
      Predicate<Integer> predicate8 = predicate7.negate();
      predicate8.negate();
      Integer integer1 = new Integer(2);
      boolean boolean0 = predicate6.test(integer1);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean1 = jSTerm0.isVariable();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("iFp6r.of)xo*W1hu;1=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.spliterator();
      stringReader0.ready();
      streamTokenizer0.slashStarComments(false);
      JSJshopVars.colon = 2316;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.468136639286414
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      stringReader0.read(charArray0);
      jSTerm0.makeFunction();
      jSTerm0.firstElement();
      Object object0 = new Object();
      streamTokenizer0.whitespaceChars((-1), (-1));
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      function1.apply("v&lB:I$F`1C+Fy");
      function1.andThen((Function<? super Integer, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super Integer, ?>) function1);
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      jSTerm2.replaceAll(unaryOperator0);
      jSTerm0.removeAll(jSTerm2);
      jSTerm2.retainAll(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isGround();
      jSSubstitution0.containsAll(jSTerm1);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.makeFunction();
      jSTerm0.isFunction();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) iterator0);
      Object[] objectArray0 = new Object[0];
      jSPredicateForm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = 0;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".FC7JD*&ub+Mn*f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Integer integer0 = new Integer(1228);
      Integer integer1 = new Integer((-1));
      Predicate<Integer> predicate1 = predicate0.negate();
      predicate1.test(integer1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6101900128189413
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-4533.823082621);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      char[] charArray0 = new char[5];
      JSJshopVars.flagLevel = 1450;
      charArray0[1] = 'Z';
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer0.whitespaceChars(1450, (-2));
      JSTerm jSTerm2 = jSTerm1.call();
      streamTokenizer2.pushBack();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      jSSubstitution0.containsAll(jSTerm3);
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isEval());
      
      jSTerm2.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.isFunction());
      
      streamTokenizer1.nextToken();
      JSTerm jSTerm4 = jSTerm0.cloneT();
      System.setCurrentTimeMillis((-1));
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(4, stringBuffer0.length());
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm4);
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0509521970352598
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StringReader stringReader1 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChar((-42));
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSSubstitution0.clear();
      jSTerm1.equals(jSTerm2);
      jSSubstitution0.add((Object) streamTokenizer0);
      jSTerm2.spliterator();
      streamTokenizer1.whitespaceChars((-42), (-4));
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      StringReader stringReader1 = new StringReader("CcS?F*J4h`l");
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.percent = (-1);
      stringReader0.markSupported();
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      stringReader0.read(charArray0);
      Integer integer0 = new Integer((-1));
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) ")");
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.and(predicate0);
      predicate2.and(predicate1);
      Predicate<Integer> predicate3 = predicate2.or(predicate0);
      predicate3.test(integer0);
      jSTerm0.removeIf(predicate2);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Integer integer0 = new Integer((-2));
      Integer integer1 = new Integer((-2));
      Integer integer2 = new Integer(2);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) integer2);
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate0.and(predicate2);
      Predicate<Integer> predicate4 = predicate3.negate();
      predicate3.negate();
      predicate4.test(integer1);
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      predicate1.or(predicate5);
      predicate1.and(predicate5);
      Integer integer3 = new Integer(37);
      predicate3.test(integer2);
      StringReader stringReader0 = new StringReader("<=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.236667736317083
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(dm'\"zya$:;o=tqp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer(2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(dm'\"zya$:;o=tqp");
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate2 = predicate1.negate();
      Predicate<Integer> predicate3 = predicate2.or(predicate1);
      Predicate<Integer> predicate4 = predicate3.and(predicate1);
      Predicate<Integer> predicate5 = predicate4.or(predicate3);
      Predicate<Integer> predicate6 = predicate5.and(predicate1);
      Predicate<Integer> predicate7 = predicate5.and(predicate4);
      Predicate<Integer> predicate8 = predicate7.negate();
      predicate8.negate();
      Integer integer2 = new Integer(2);
      predicate6.test(integer2);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer3 = new Integer((-4));
      Predicate<Object> predicate9 = Predicate.isEqual((Object) integer3);
      Predicate<Object> predicate10 = predicate0.or(predicate9);
      Predicate<Object> predicate11 = predicate9.and(predicate10);
      predicate11.and(predicate10);
      predicate11.negate();
      predicate9.negate();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = 'N';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.stream();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%;X[-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.whitespaceChars((-4), 1391);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v&lB:I$F`1C+Fy");
      Integer integer0 = new Integer(37);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) stringReader0);
      Predicate<Integer> predicate2 = predicate1.negate();
      Predicate<Integer> predicate3 = predicate1.or(predicate0);
      Predicate<Integer> predicate4 = predicate2.and(predicate3);
      Predicate<Integer> predicate5 = predicate4.or(predicate3);
      Predicate<Integer> predicate6 = predicate4.and(predicate5);
      predicate2.and(predicate6);
      predicate4.negate();
      predicate5.negate();
      JSTerm jSTerm0 = new JSTerm();
      Integer integer1 = new Integer(0);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) integer1);
      Predicate<Object> predicate8 = predicate0.or(predicate7);
      Predicate<Object> predicate9 = predicate8.and(predicate7);
      predicate0.and(predicate9);
      Integer integer2 = new Integer((-1));
      Predicate<Object> predicate10 = Predicate.isEqual((Object) integer2);
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate11);
      predicate12.or(predicate9);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
