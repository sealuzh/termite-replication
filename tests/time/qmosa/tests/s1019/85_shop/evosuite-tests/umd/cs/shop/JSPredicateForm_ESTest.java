/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:19:13 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.28647799845853
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm1.addAll(0, (Collection) jSPredicateForm0);
      jSPredicateForm1.removeElement(stringReader0);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm2.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm3.addElement((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm3.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1545895669999098
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm1.addAll(0, (Collection) jSPredicateForm0);
      jSPredicateForm1.removeElement(stringReader0);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm3.addElement(jSPredicateForm3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.semicolon = 0;
      // Undeclared exception!
      try { 
        jSPredicateForm3.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      stringReader0.skip((-1L));
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-3364));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChars(0, 1);
      streamTokenizer3.eolIsSignificant(false);
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      jSPredicateForm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.964532478280498
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      StringReader stringReader0 = new StringReader("}7FY;");
      stringReader0.skip(1L);
      stringReader0.reset();
      char[] charArray0 = new char[1];
      stringReader0.ready();
      charArray0[0] = 'H';
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("}7FY;");
      char[] charArray1 = new char[9];
      charArray1[1] = 'H';
      stringReader1.ready();
      charArray1[2] = 'H';
      charArray1[3] = 'H';
      charArray1[4] = 'H';
      charArray1[5] = 'H';
      charArray1[7] = 'H';
      stringReader1.read(charArray1);
      charArray1[8] = 'H';
      StringReader stringReader2 = new StringReader("(an_5=6|ujE8{");
      stringReader2.markSupported();
      stringReader1.read();
      StringReader stringReader3 = new StringReader("}7FY;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      System.setCurrentTimeMillis(5);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9995789198276486
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6w6>!9OMr`c-}d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("reading");
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "6w6>!9OMr`c-}d";
      objectArray0[1] = (Object) stringReader1;
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      StringReader stringReader2 = new StringReader("GX(I;IM03t<3{sodw");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      jSPredicateForm0.clonePF();
      jSPredicateForm1.lastElement();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSPredicateForm0.addElement(jSTerm1);
      jSPredicateForm0.print();
      try { 
        streamTokenizer0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) null);
      stringReader0.close();
      jSTerm0.add((Object) "the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      int int0 = 1;
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.commentChar(1);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.remove((Object) "nil");
      jSSubstitution0.parallelStream();
      StringReader stringReader1 = new StringReader("m7$Q=");
      stringReader1.close();
      StringReader stringReader2 = new StringReader("m7$Q=");
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2194649300685314
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSTerm0.remove((Object) streamTokenizer0);
      jSSubstitution0.parallelStream();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.add(object0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      StringReader stringReader1 = new StringReader("JSUtil>>stringTokenizer)ia ruturning %R%");
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
      
      streamTokenizer0.slashStarComments(false);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertEquals(2, jSPredicateForm0.size());
      
      jSTerm1.isEmpty();
      StringReader stringReader2 = new StringReader("%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm1 = jSTerm1.clonePF();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
      jSTerm2.applySubstitutionPF(jSSubstitution1);
      assertTrue(jSSubstitution1.fail());
      
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSPredicateForm1, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.033303574248122
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "the tokenizer is SPACE!";
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      jSTerm0.standarizerPredicateForm();
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) "Y)h");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.remove((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5IzB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.remove((Object) stringReader0);
      Object object0 = new Object();
      stringReader0.close();
      jSTerm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6w6>!9OMr`c-}d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.clone();
      jSTerm0.remove((Object) stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashStarComments(true);
      char[] charArray0 = new char[1];
      jSTerm1.add((Object) streamTokenizer2);
      charArray0[0] = '=';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.ordinaryChar((-4));
      stringReader0.close();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer2.slashStarComments(true);
      StringReader stringReader2 = new StringReader("M\"0MK7,jG~79");
      StringReader stringReader3 = null;
      try {
        stringReader3 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.remove((Object) streamTokenizer0);
      jSSubstitution0.add((Object) streamTokenizer0);
      jSSubstitution0.add((Object) jSTerm0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.eolIsSignificant(true);
      jSSubstitution0.parallelStream();
      streamTokenizer0.ordinaryChar((-1740));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.lastElement();
      jSPredicateForm0.addElement(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1482737775262257
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6w6>!9OMr`c-}d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("reading");
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-2), (-4));
      StringReader stringReader2 = new StringReader("N/-)Sc@#KQ$");
      JSSubstitution jSSubstitution0 = null;
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.equals(jSPredicateForm0);
      streamTokenizer1.slashStarComments(true);
      stringReader2.skip((-4));
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.isEmpty();
      StringReader stringReader3 = new StringReader("z<*u $9");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      jSTerm0.clonePF();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm1, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'z';
      char char0 = ';';
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8223722295837637
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.remove((Object) streamTokenizer0);
      jSSubstitution0.parallelStream();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      streamTokenizer0.slashStarComments(false);
      jSTerm0.standarizerPredicateForm();
      jSTerm2.isEmpty();
      StringReader stringReader1 = new StringReader("[g");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      jSTerm1.clonePF();
      jSTerm2.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6w6>!9OMr`c-}d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("reading");
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.wordChars((-2), (-4));
      StringReader stringReader2 = new StringReader("N/-)Sc@#KQ$");
      jSTerm0.add((Object) stringReader0);
      int int0 = 59;
      streamTokenizer2.ordinaryChars(59, (-2));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0632584594204766
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm1.addAll(0, (Collection) jSPredicateForm0);
      jSPredicateForm1.removeElement(stringReader0);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m@+2");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      predicate2.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.and(predicate0);
      jSPredicateForm3.removeIf(predicate3);
      jSPredicateForm2.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis(32);
      // Undeclared exception!
      try { 
        jSPredicateForm3.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6w6>!9OMr`c-}d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(272);
      StringReader stringReader1 = new StringReader("reading");
      stringReader1.close();
      stringReader0.close();
      streamTokenizer0.commentChar(660);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "6w6>!9OMr`c-}d";
      objectArray0[1] = (Object) stringReader1;
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add(objectArray0[1]);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6w6>!9OMr`c-}d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("reading");
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      streamTokenizer2.wordChars((-2), (-4));
      int int0 = 59;
      streamTokenizer2.ordinaryChars(59, (-2));
      jSTerm0.add((Object) jSTerm0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        stringReader1.mark((-1080947221));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.099811773199209
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm1.addAll(0, (Collection) jSPredicateForm0);
      jSPredicateForm1.removeElement(stringReader0);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m@+2");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.and(predicate0);
      jSPredicateForm3.removeIf(predicate3);
      jSPredicateForm2.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm3.addElement((Object) null);
      jSPredicateForm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.099811773199209
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm1.addAll(0, (Collection) jSPredicateForm0);
      jSPredicateForm1.removeElement(stringReader0);
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m@+2");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      predicate2.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.and(predicate0);
      jSPredicateForm3.removeIf(predicate3);
      jSPredicateForm2.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm3.addElement((Object) null);
      jSPredicateForm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.lessT = 2147483635;
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1603038527141956
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm3.toStr();
      jSTerm0.equals(jSPredicateForm2);
      Object[] objectArray0 = new Object[0];
      jSSubstitution0.addAll((Collection) jSTerm0);
      jSPredicateForm0.toArray(objectArray0);
      jSPredicateForm2.clonePF();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm2.clear();
      // Undeclared exception!
      try { 
        jSPredicateForm2.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("}7FY;");
      stringReader0.skip(1L);
      stringReader0.reset();
      char[] charArray0 = new char[1];
      stringReader0.ready();
      charArray0[0] = 'H';
      StringReader stringReader1 = new StringReader("}7FY;");
      char[] charArray1 = new char[9];
      charArray1[1] = 'H';
      charArray1[2] = 'H';
      charArray1[3] = 'H';
      charArray1[4] = 'H';
      charArray1[5] = 'H';
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      jSTerm0.add((Object) streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bIszB");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "5~bIszB";
      objectArray0[6] = (Object) jSPredicateForm0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) jSSubstitution0;
      jSPredicateForm0.toArray(objectArray0);
      jSPredicateForm0.print();
      jSPredicateForm0.sort((Comparator) null);
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4365286106847948
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6w6>!9OMr`c-}d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("6w6>!9OMr`c-}d");
      stringReader1.close();
      stringReader0.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm3.toStr();
      jSTerm0.equals(jSPredicateForm2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSSubstitution0;
      jSTerm0.toArray(objectArray0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      JSPredicateForm jSPredicateForm5 = new JSPredicateForm();
      jSPredicateForm4.add(1, (Object) jSPredicateForm5);
      JSPredicateForm jSPredicateForm6 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm7 = jSPredicateForm1.clonePF();
      assertEquals(1, jSPredicateForm0.size());
      
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm3.toArray(objectArray0);
      JSPredicateForm jSPredicateForm8 = jSPredicateForm7.standarizerPredicateForm();
      jSPredicateForm0.removeAll(jSPredicateForm5);
      JSPredicateForm jSPredicateForm9 = jSPredicateForm8.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm10 = jSPredicateForm9.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm3.toStr();
      jSTerm0.equals(jSPredicateForm10);
      JSPredicateForm jSPredicateForm11 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm8.matches(jSPredicateForm0, jSSubstitution0);
      jSPredicateForm9.add((Object) jSPredicateForm8);
      assertEquals("[6.0, [6.0]]", jSPredicateForm9.toString());
      
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm12 = jSPredicateForm6.clonePF();
      jSPredicateForm1.toStr();
      jSPredicateForm11.matches(jSPredicateForm12);
      assertTrue(jSPredicateForm12.equals((Object)jSPredicateForm8));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.325149992826253
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.lastElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm1.matches(jSPredicateForm0);
      System.setCurrentTimeMillis(2489L);
      JSPredicateForm jSPredicateForm2 = null;
      try {
        jSPredicateForm2 = new JSPredicateForm("JSTerm: Error reading control parameters: ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = null;
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) ";");
      jSTerm0.firstElement();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bIszB");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.remove((Object) "5~bIszB");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      StringReader stringReader1 = new StringReader("F\"Gq");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StreamTokenizer streamTokenizer0 = null;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6w6>!9OMr`c-}d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("reading");
      stringReader1.close();
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader("6w6>!9OMr`c-}d");
      stringReader2.close();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSJshopVars.semicolon = 62;
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSJshopVars.backquote = 62;
      jSPredicateForm0.iterator();
      jSPredicateForm1.add(0, (Object) jSPredicateForm0);
      jSPredicateForm0.removeAll(jSPredicateForm1);
      jSPredicateForm1.stream();
      jSPredicateForm0.equals((JSPredicateForm) null);
      // Undeclared exception!
      try { 
        jSPredicateForm1.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) jSSubstitution0;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) null);
      jSTerm0.equals((JSPredicateForm) null);
      jSTerm0.equals((JSPredicateForm) null);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      jSTerm0.remove((Object) streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      StringReader stringReader1 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      streamTokenizer0.slashStarComments(false);
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(0);
      streamTokenizer2.pushBack();
      streamTokenizer1.eolIsSignificant(false);
      // Undeclared exception!
      try { 
        stringReader1.read(charArray0, (-1), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5~bI,zB");
      JSJshopVars.lessT = 1;
      System.setCurrentTimeMillis(0L);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) null;
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
