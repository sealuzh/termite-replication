/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:58:58 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.221839667773992
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSSubstitution1);
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Integer integer0 = new Integer((-4));
      Predicate<Integer> predicate4 = Predicate.isEqual((Object) integer0);
      Predicate<Integer> predicate5 = predicate4.negate();
      Predicate<Integer> predicate6 = predicate5.or(predicate2);
      Predicate<Object> predicate7 = predicate1.or(predicate3);
      Predicate<Integer> predicate8 = predicate5.and(predicate7);
      predicate8.or(predicate6);
      Object object0 = jSTerm1.clone();
      Predicate<Object> predicate9 = Predicate.isEqual(object0);
      predicate5.or(predicate9);
      predicate9.and(predicate2);
      Predicate<Integer> predicate10 = predicate5.and(predicate3);
      predicate10.negate();
      System.setCurrentTimeMillis(671L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.535369314387831
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSSubstitution1);
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.makeFunction();
      jSTerm1.equals(jSTerm0);
      StringReader stringReader1 = new StringReader("wlslY!K0d6<^#D<");
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'V';
      stringReader1.read(charArray0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.firstElement();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "word");
      predicate0.negate();
      long long0 = (-130L);
      System.setCurrentTimeMillis((-130L));
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.411122450800352
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-2);
      jSTerm0.makeVariable();
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      jSTerm0.equals(jSTerm1);
      jSTerm1.spliterator();
      jSTerm0.print();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.528335082842978
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.add((Object) "word");
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.makeFunction();
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.50487136773061
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.removeAll(jSTerm0);
      jSTerm0.equals(jSTerm2);
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.827887047624921
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader("word");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.isGround();
      jSTerm2.makeFunction();
      jSTerm2.call();
      jSTerm1.containsAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.454862359205921
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSSubstitution1);
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.makeFunction();
      jSTerm1.equals(jSTerm0);
      jSTerm2.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.605522385195174
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("i9P0,0o)Qe2x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.makeVariable();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF((JSSubstitution) null);
      jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm1.containsAll(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer(40);
      jSSubstitution1.add((Object) integer1);
      jSSubstitution1.add((Object) null);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.isGround();
      jSTerm1.makeFunction();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.matches(jSTerm1);
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.iterator();
      jSTerm1.matches(jSTerm4, (JSSubstitution) null);
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5515783249235486
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "0.0");
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.272336416778445
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("b{`\"8Ip1v0");
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '-';
      stringReader0.ready();
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(2);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.isEval());
      assertEquals("(word )", stringBuffer0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5345971136156304
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSSubstitution0.add((Object) null);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution4);
      jSSubstitution2.clear();
      jSTerm0.makeVariable();
      jSTerm0.matches(jSTerm1, jSSubstitution2);
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6196308015271397
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.removeAll(jSTerm2);
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean1 == boolean0);
      
      jSTerm1.print();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertNotSame(jSTerm3, jSTerm2);
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2355868124807694
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-1876));
      jSTerm0.add((Object) integer0);
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.50654851657757
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSJshopVars.greaterT = 2954;
      jSTerm0.removeAll(jSTerm2);
      jSTerm2.equals(jSTerm1);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1654496561804675
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-2);
      jSTerm0.makeVariable();
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "0.0");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Integer integer0 = new Integer(75);
      jSTerm0.firstElement();
      Predicate<Integer> predicate5 = Predicate.isEqual((Object) "0.0");
      Predicate<Integer> predicate6 = predicate5.negate();
      predicate6.or(predicate3);
      Predicate<Integer> predicate7 = predicate6.and(predicate2);
      Predicate.isEqual((Object) predicate2);
      Predicate<Integer> predicate8 = predicate7.and(predicate6);
      predicate8.or(predicate6);
      predicate8.or(predicate4);
      Integer integer1 = new Integer(75);
      Predicate.isEqual((Object) integer1);
      predicate1.and(predicate0);
      predicate5.and(predicate2);
      predicate8.negate();
      System.setCurrentTimeMillis((-2));
      jSTerm0.toStr();
      jSTerm0.print();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.751969722958277
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.isFunction();
      jSTerm0.makeFunction();
      JSTerm jSTerm3 = jSTerm1.call();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1);
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      StringBuffer stringBuffer0 = jSTerm3.toStr();
      assertTrue(jSTerm0.isFunction());
      assertEquals("(word )", stringBuffer0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      jSTerm0.print();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.473709723800542
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.iterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.287991730133441
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.760718810662633
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSSubstitution1);
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm3 = jSTerm1.call();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm3);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution2);
      assertTrue(jSSubstitution3.fail());
      
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.iterator();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm3.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm6);
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm6.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
      assertEquals(10, jSTerm3.capacity());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.845633912734541
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.isGround();
      jSTerm0.makeFunction();
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm3.containsAll(jSTerm0);
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1);
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.iterator();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8499943390506624
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.clonePF();
      jSTerm1.forEach(consumer0);
      assertFalse(jSTerm1.isEval());
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm3 = jSTerm1.call();
      assertTrue(jSTerm3.isFunction());
      assertEquals(10, jSTerm3.capacity());
      
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      predicate1.and(predicate2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<Integer> predicate7 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Integer> predicate8 = predicate7.negate();
      Predicate<Integer> predicate9 = predicate8.or(predicate6);
      Predicate<Integer> predicate10 = predicate7.or(predicate8);
      Predicate<Object> predicate11 = predicate4.negate();
      Predicate<Integer> predicate12 = predicate10.and(predicate11);
      Predicate<Integer> predicate13 = predicate9.or(predicate6);
      Predicate<Integer> predicate14 = Predicate.isEqual((Object) predicate13);
      predicate14.or(predicate3);
      predicate1.and(predicate2);
      predicate8.and(predicate9);
      predicate12.negate();
      assertFalse(jSSubstitution2.fail());
      
      System.setCurrentTimeMillis(1845L);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("(word )", stringBuffer0.toString());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm1, jSTerm3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.926599282180253
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-2);
      jSTerm0.makeVariable();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.containsAll(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeConstant();
      JSJshopVars.greaterT = 1535;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.makeFunction();
      jSTerm0.matches(jSTerm1);
      jSTerm1.makeVariable();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.isVariable();
      jSTerm2.call();
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm2.isVariable());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7059717127726555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-2);
      jSTerm0.makeVariable();
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      predicate0.negate();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm1.call();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm3.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.813782155210461
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-2);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZX^H>vCb7H&M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7490906203903507
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution0.add((Object) streamTokenizer0);
      stringReader0.skip((-4));
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4452370493802307
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "0.0");
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.ensureCapacity((-2));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(0L);
      jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.155694287455985
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm3.isFunction());
      
      jSTerm2.cloneT();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm1.isEval());
      assertEquals("[%a]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution0.add((Object) streamTokenizer0);
      stringReader0.skip((-4));
      stringReader0.read();
      streamTokenizer0.commentChar((-155));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      Predicate<Integer> predicate3 = predicate2.and(predicate1);
      predicate3.negate();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.844125083417306
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.isGround();
      StringReader stringReader0 = new StringReader("word");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.makeFunction();
      JSTerm jSTerm4 = jSTerm1.call();
      jSTerm2.containsAll(jSTerm4);
      jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm4.matches(jSTerm2, jSSubstitution3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6572278336396518
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm2.isGround();
      jSSubstitution3.clear();
      jSTerm2.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7626587281075303
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeConstant();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      jSSubstitution0.clear();
      jSTerm1.makeVariable();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm1);
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution2));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals("[%a]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 0;
      StringReader stringReader1 = new StringReader("&%g=|b#}4um^3m&K,z");
      StringReader stringReader2 = new StringReader("9");
      stringReader2.reset();
      stringReader1.reset();
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'Q';
      charArray0[2] = 'C';
      charArray0[3] = 'H';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      stringReader1.read();
      charArray0[6] = 'Q';
      charArray0[7] = 'H';
      charArray0[8] = 'H';
      stringReader1.read(charArray0, 1, 0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("&%g=|b#}4um^3m&K,z");
      StringReader stringReader2 = new StringReader("9");
      stringReader2.reset();
      stringReader1.reset();
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'Q';
      charArray0[2] = 'C';
      charArray0[3] = 'H';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      stringReader1.read();
      charArray0[6] = 'Q';
      charArray0[7] = 'H';
      charArray0[8] = 'H';
      stringReader1.read(charArray0, 1, 0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = (-6315);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "A";
      StringReader stringReader0 = new StringReader("A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean0 = jSTerm2.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(": ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("f#SOE.=f");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Pj::h_bZ*RPx3");
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("Expecting elements of the list");
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      stringReader2.read();
      charArray0[1] = 'M';
      stringReader2.read(charArray0);
      StringReader stringReader3 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      System.setCurrentTimeMillis((-746L));
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.928551319792604
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("");
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '^';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = 'T';
      charArray0[5] = '~';
      charArray0[7] = '3';
      charArray0[8] = '3';
      StringReader stringReader2 = new StringReader(";");
      stringReader1.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertEquals("[%a]", jSTerm0.toString());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.182653957255736
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.removeAll(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.567160844910441
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(58);
      stringReader0.skip((-4));
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.equals(jSTerm1);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1724672000401166
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("");
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '^';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = 'T';
      charArray0[5] = '~';
      charArray0[6] = '3';
      charArray0[7] = '3';
      charArray0[8] = '3';
      stringReader1.read(charArray0);
      StringReader stringReader2 = new StringReader(";");
      stringReader1.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals("[%a]", jSTerm1.toString());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.206552161926179
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = 0;
      jSTerm0.makeConstant();
      StringReader stringReader0 = new StringReader(")s{");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.isFunction();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")s{";
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm1;
      Object object0 = jSTerm0.clone();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) streamTokenizer0;
      objectArray0[6] = (Object) stringReader0;
      objectArray0[7] = (Object) streamTokenizer0;
      objectArray0[8] = (Object) jSTerm1;
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "JSUtil>>stringTokenizer is returning %%%";
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      jSTerm0.addElement("JSUtil>>stringTokenizer is returning %%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.665515979580288
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%a$kbW88,N");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution0.add((Object) streamTokenizer0);
      stringReader0.skip((-4));
      stringReader0.read();
      streamTokenizer0.commentChar((-155));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[]", jSSubstitution1.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      jSSubstitution2.addElements(jSSubstitution0);
      StringReader stringReader0 = new StringReader("d\";D &nc5[o]jR");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
      assertEquals("[%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4925871229786734
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "0.0");
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution1.clear();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.385615626048181
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSSubstitution1.add((Object) jSTerm1);
      jSSubstitution1.clear();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSSubstitution3);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.containsAll(jSSubstitution0);
      Predicate<Integer> predicate2 = predicate0.and(predicate1);
      Predicate<Integer> predicate3 = predicate2.negate();
      Predicate<Integer> predicate4 = predicate3.or(predicate0);
      jSSubstitution2.removeIf(predicate4);
      jSSubstitution2.clear();
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution1);
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4924678025838007
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.greaterT = (-2);
      jSTerm0.makeVariable();
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeConstant();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("&%g=|b#}4um^3m&K,z");
      StringReader stringReader2 = new StringReader("9");
      stringReader2.reset();
      stringReader1.reset();
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'Q';
      charArray0[2] = 'C';
      charArray0[3] = 'H';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      charArray0[6] = 'Q';
      charArray0[7] = 'H';
      charArray0[8] = 'H';
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      jSTerm0.removeIf(predicate3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSJshopVars.verticalL = (-1327);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm1.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = ".";
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string1 = "&%g=|b#}4um^3m&K,z";
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = ".";
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate3.or(predicate4);
      predicate0.negate();
      jSTerm0.removeIf(predicate4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "'^H(z3c+AR";
      StringReader stringReader0 = new StringReader("'^H(z3c+AR");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9640071925919256
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("mDuNM%a*B");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars(416, 416);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8484077433331505
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.691528875508843
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("word");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.removeAll(jSTerm2);
      jSTerm1.isConstant();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      jSTerm1.print();
      jSTerm1.standardizerTerm();
      assertTrue(jSTerm1.isFunction());
      
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.496564514542002
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("w^rd");
      StringReader stringReader0 = new StringReader("w^rd");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      stringReader0.reset();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.add((Object) jSTerm2);
      jSTerm1.makeFunction();
      jSTerm3.isConstant();
      jSTerm3.print();
      jSTerm2.matches(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",zzvHQ>AQRv4TT4");
      stringReader0.skip(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.lastElement();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Integer> predicate3 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Integer> predicate4 = predicate3.negate();
      Predicate<Integer> predicate5 = predicate4.or(predicate0);
      Predicate<Integer> predicate6 = predicate5.and(predicate4);
      predicate4.or(predicate1);
      predicate4.or(predicate5);
      Predicate<Object> predicate7 = predicate0.and(predicate2);
      Predicate<Object> predicate8 = predicate0.or(predicate7);
      predicate6.and(predicate8);
      jSTerm0.firstElement();
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) "%%%");
      predicate9.negate();
      System.setCurrentTimeMillis((-145L));
      jSTerm0.toStr();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("` ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(416, 416);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
