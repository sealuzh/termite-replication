/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:09:34 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-86);
      byteArray0[3] = (byte)9;
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("9H4PNQ", " - ", true, inetAddress0);
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)92;
      MockInetAddress.getByName("!zndzOajetMb");
      MockInetAddress.getByName("!zndzOajetMb");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("<o_kZy<?AlXK;S", (String) null, inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("N3");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("v)E(=}J9WKBUE&[F./");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("v)E(=}J9WKBUE&[F./");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(")", (String) null, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "");
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", "QF%$'uxcU9Q?j");
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'q';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = 'q';
      charArray0[5] = '5';
      charArray0[6] = 'q';
      usernamePasswordToken1.setPassword(charArray0);
      usernamePasswordToken0.getPassword();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("QF%$'uxcU9Q?j", charArray0);
      usernamePasswordToken2.getUsername();
      usernamePasswordToken1.clear();
      String string0 = usernamePasswordToken1.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3831499345187974
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.setUsername("");
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = '1';
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      charArray0[2] = 'i';
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = 'd';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setUsername(" (");
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setUsername("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setUsername("");
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getUsername();
      Object object0 = new Object();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.clear();
      String string0 = usernamePasswordToken0.toString();
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("N3");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("v)E(=}J9WKBUE&[F./");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("v)E(=}J9WKBUE&[F./");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("N3", "ESP4S8(4DSD?", true);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?ymysXm!Y?NA1A>&c");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("jDs6D]g u,");
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("?ymysXm!Y?NA1A>&c", "?ymysXm!Y?NA1A>&c", false, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3072109573039925
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "");
      char[] charArray0 = new char[4];
      usernamePasswordToken0.setPassword(charArray0);
      charArray0[0] = 'Q';
      charArray0[1] = 'L';
      charArray0[2] = 'F';
      charArray0[3] = 'z';
      usernamePasswordToken0.setPassword(charArray0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false", string0);
      
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.toString();
      String string1 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[23];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'E';
      charArray0[3] = '%';
      charArray0[4] = '';
      charArray0[5] = '^';
      charArray0[6] = 'H';
      charArray0[7] = '^';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("SHf{^1i@WRS", "['GJ", false, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("Le3Ft1H`%IB^0s`Q");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[2] = 'n';
      charArray0[3] = '?';
      charArray0[4] = '=';
      charArray0[5] = '.';
      charArray0[6] = 'V';
      charArray0[7] = 's';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("^0B", charArray0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("V}Jf&(3eN4", "wASc8A;kM..}o?{sl", inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - V}Jf&(3eN4, rememberMe=false (ESP4S8(4DSD?/200.42.42.0)", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?ymysXm!Y?NA1A>&c");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2242578247365654
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "l[\"^aiW1d3$F=w@yI");
      InetAddress inetAddress0 = MockInetAddress.getByName("FYq6`Jg`p@1;@5[_E {");
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = '5';
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("FYq6`Jg`p@1;@5[_E {", charArray0, false, inetAddress0);
      usernamePasswordToken0.setPassword(charArray0);
      char[] charArray1 = usernamePasswordToken1.getPassword();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken1.clear();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("l[\"^aiW1d3$F=w@yI", charArray1);
      usernamePasswordToken1.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      InetAddress inetAddress0 = MockInetAddress.getByName("ESP4S8(4DSD?");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("r)!=7C V=l9", "r)!=7C V=l9", false, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (char[]) null, false);
      usernamePasswordToken0.getPassword();
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = '4';
      charArray0[2] = 'F';
      charArray0[3] = '[';
      charArray0[4] = '3';
      charArray0[5] = '4';
      charArray0[6] = ')';
      usernamePasswordToken0.setPassword(charArray0);
      try { 
        MockInetAddress.getByAddress("lwL!dw65j", (byte[]) null);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3072109573039925
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(")M5", ")M5");
      char[] charArray0 = new char[4];
      usernamePasswordToken0.setPassword(charArray0);
      charArray0[0] = 'Q';
      charArray0[1] = 'L';
      charArray0[2] = 'F';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      String string0 = usernamePasswordToken0.toString();
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("J+lL", charArray0, true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.setUsername("g]5w+t i\"]xT%'6lX");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("h", (String) null);
      usernamePasswordToken0.setUsername(")M5");
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPrincipal();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.setUsername(")M5");
      boolean boolean0 = usernamePasswordToken1.isRememberMe();
      assertFalse(boolean0);
      
      usernamePasswordToken0.setUsername("");
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken1.getUsername();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "l[\"^aW1d3F=w@yI");
      usernamePasswordToken0.setUsername("g5~bI,z");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("B/%L^>=*G", "ESP4S8(4DSD?", false, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - B/%L^>=*G, rememberMe=false (ESP4S8(4DSD?/200.42.42.0)", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      Object object0 = new Object();
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'I';
      charArray0[2] = 'x';
      charArray0[3] = 'H';
      charArray0[4] = '`';
      charArray0[5] = '+';
      charArray0[6] = 'j';
      charArray0[7] = '~';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("!zndzOajetMb", charArray0, true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - !zndzOajetMb, rememberMe=true", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?ymysXm!Y?NA1A>&c");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("jDs6D]g u,");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("?ymysXm!Y?NA1A>&c", "?ymysXm!Y?NA1A>&c", false, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName((String) null);
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("<o_kZy<?AlXK;S", "", true, inetAddress0);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = '%';
      charArray0[2] = 'L';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("ESP4S8(4DSD?");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("r)!=7C V=l9");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("ESP4S8(4DSD?", "", false, inetAddress0);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'B';
      charArray0[2] = '=';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.setRememberMe(true);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }
}
