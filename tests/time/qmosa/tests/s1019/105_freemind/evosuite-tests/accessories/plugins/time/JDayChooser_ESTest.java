/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:01:24 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeListener;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
import javax.help.BackAction;
import javax.swing.DefaultCellEditor;
import javax.swing.InputMap;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.event.MenuKeyEvent;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3243135201996807
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.isComponentPartOfCurrentMenu(jDayChooser0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDay();
      jDayChooser0.updateUI();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.27432232874385
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUIClassID();
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      InputMap inputMap0 = jDayChooser0.getInputMap(0);
      inputMap0.getParent();
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.setYear(0);
      jDayChooser0.init();
      jDayChooser0.getMaxDayCharacters();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSlider jSlider0 = new JSlider(0);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.getMaxDayCharacters();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setMonth(0);
      jDayChooser0.setForeground(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(90, color0.getGreen());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.359437310989161
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUIClassID();
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      InputMap inputMap0 = jDayChooser0.getInputMap(0);
      inputMap0.getParent();
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.setWeekOfYearVisible(false);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setForeground(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-737), (-737), 40, 40, '6');
      jDayChooser1.keyPressed(keyEvent0);
      JMonthChooser jMonthChooser0 = jDayChooser1.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser1.setDecorationBackgroundVisible(true);
      jDayChooser0.setDay(44);
      jDayChooser0.keyReleased(keyEvent0);
      ActionEvent actionEvent0 = new ActionEvent("PanelUI", 90, "6", 40, 90);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.299678453352297
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GridLayout gridLayout0 = new GridLayout();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, (-259), 0, 0, 'W');
      InputEvent.getModifiersExText(0);
      jDayChooser0.keyPressed(keyEvent0);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setDecorationBackgroundVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay((-259));
      jDayChooser1.isDayBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.268177954064355
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.getGraphics();
      jDayChooser0.initDecorations();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.addPropertyChangeListener("", (PropertyChangeListener) null);
      jDayChooser0.setFocus();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 26, 26, (-1595), (-1595), 'V', menuElementArray0, menuSelectionManager0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setLocation(19, 1284);
      jDayChooser0.keyPressed(menuKeyEvent0);
      InputMap inputMap0 = new InputMap();
      // Undeclared exception!
      try { 
        jDayChooser0.setInputMap((byte) (-14), inputMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.302630796774891
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 0;
      GridLayout gridLayout0 = new GridLayout();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 13, 0, (-259), 'D');
      InputEvent.getModifiersExText(13);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setEnabled(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocusTraversalKeysEnabled(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3075657134358205
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.isComponentPartOfCurrentMenu(jDayChooser0);
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jDayChooser0, (-1531), (-1531), (-1449), 4137, (-1531), 1178, 4137, (-1531), true, menuElementArray0, menuSelectionManager0);
      menuDragMouseEvent0.paramString();
      jDayChooser0.getToolTipText((MouseEvent) menuDragMouseEvent0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getMinSelectableDate();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0540989150393463
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.getDefaultLocale();
      jDayChooser0.setFocusTraversalKeysEnabled(true);
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.169980761415708
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.white;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.scrollRectToVisible(defaultCaret0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2978893000399134
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.isComponentPartOfCurrentMenu(jDayChooser0);
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jDayChooser0, (-1531), (-1531), (-1449), 4137, (-1531), 1178, 4137, (-1531), true, menuElementArray0, menuSelectionManager0);
      menuDragMouseEvent0.paramString();
      jDayChooser0.getToolTipText((MouseEvent) menuDragMouseEvent0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDay();
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = ")2h\"BgG3^k3urm$M14";
      stringArray0[2] = "ZQN,8R";
      stringArray0[3] = "3TLQ^0Op @my";
      stringArray0[4] = "+,MN#YaAz";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2055218749828893
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUIClassID();
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getInputMap(0);
      jDayChooser0.getInputMap();
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.setYear(0);
      jDayChooser0.init();
      jDayChooser0.getMaxDayCharacters();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSlider jSlider0 = new JSlider(0);
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 2, false, jSlider0);
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1427));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3546802215884695
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener2 = AWTEventMulticaster.add(containerListener0, containerListener1);
      containerListener2.componentRemoved((ContainerEvent) null);
      AWTEventMulticaster.remove(containerListener2, containerListener2);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setForeground(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 32, 0L, 27, 32, '[');
      jDayChooser1.keyPressed(keyEvent0);
      JMonthChooser jMonthChooser0 = jDayChooser1.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser1.setDay(27);
      assertEquals(27, jDayChooser1.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1699550666946883
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener2 = AWTEventMulticaster.add(containerListener0, containerListener1);
      containerListener2.componentRemoved((ContainerEvent) null);
      AWTEventMulticaster.remove(containerListener2, containerListener2);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.getSelectedDay();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.createImage(1717, 1717);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2410532075413867
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.isComponentPartOfCurrentMenu(jDayChooser0);
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jDayChooser0, (-1531), (-1531), (-1449), 4137, (-1531), 1178, 4137, (-1531), true, menuElementArray0, menuSelectionManager0);
      menuDragMouseEvent0.paramString();
      jDayChooser0.getToolTipText((MouseEvent) menuDragMouseEvent0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setForeground(color0);
      jDayChooser0.isWeekOfYearVisible();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 18, false, jDayChooser0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.focusLost(focusEvent0);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.271909334557486
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      jDayChooser0.focusGained(focusEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 0, 971, (-2168), '%', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.scrollRectToVisible((Rectangle) null);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2083617002749687
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GridLayout gridLayout0 = new GridLayout();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 13, 0, (-259), 'D');
      KeyEvent.getExtendedKeyCodeForChar(13);
      InputEvent.getModifiersExText(13);
      jDayChooser0.keyPressed(keyEvent0);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setDay(13);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener2 = AWTEventMulticaster.add(containerListener0, containerListener1);
      containerListener2.componentRemoved((ContainerEvent) null);
      AWTEventMulticaster.remove(containerListener2, containerListener2);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setYear(0);
      jDayChooser0.init();
      jDayChooser0.getMaxDayCharacters();
      JYearChooser jYearChooser0 = new JYearChooser();
      JSlider jSlider0 = null;
      try {
        jSlider0 = new JSlider(7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // orientation must be one of: VERTICAL, HORIZONTAL
         //
         verifyException("javax.swing.JSlider", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHeight();
      jDayChooser0.getDaysInMonth();
      Vector<Calendar> vector0 = new Vector<Calendar>();
      JList<Calendar> jList0 = new JList<Calendar>(vector0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader(defaultTableColumnModel0);
      TableCellRenderer tableCellRenderer0 = jTableHeader0.getDefaultRenderer();
      JCheckBox jCheckBox0 = new JCheckBox();
      DefaultCellEditor defaultCellEditor0 = new DefaultCellEditor(jCheckBox0);
      TableColumn tableColumn0 = new TableColumn(28, (-3817), tableCellRenderer0, defaultCellEditor0);
      defaultTableColumnModel0.removeColumn(tableColumn0);
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      jList0.addListSelectionListener(jTable0);
      jList0.removeSelectionInterval(28, 0);
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1701099558298114
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getRootPane();
      JComponent.getDefaultLocale();
      jDayChooser0.setFocusTraversalKeysEnabled(true);
      Date date0 = jDayChooser0.getMinSelectableDate();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.orange;
      jDayChooser0.sundayForeground = color0;
      jDayChooser0.createImage(210, 210);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.340143618834841
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.getGraphics();
      jDayChooser0.initDecorations();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.addPropertyChangeListener("", (PropertyChangeListener) null);
      jDayChooser0.setFocus();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 26, 26, (-1595), (-1595), 'V', menuElementArray0, menuSelectionManager0);
      KeyEvent.getKeyText((-57));
      menuKeyEvent0.paramString();
      jDayChooser0.keyTyped(menuKeyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BackAction backAction0 = new BackAction(calendar0);
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.getDayPanel();
      jDayChooser0.drawWeeks();
      jDayChooser0.setAlwaysFireDayProperty(true);
      Date date1 = jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertSame(date1, date0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.195159450252401
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.getGraphics();
      jDayChooser0.initDecorations();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser1.removeHierarchyListener((HierarchyListener) null);
      GridLayout gridLayout0 = new GridLayout();
      jDayChooser1.setDay(13);
      assertEquals(13, jDayChooser1.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2217033991750585
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.orange;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 3, 3, 1474, (-84), 'B', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent.getKeyText((-3660));
      menuKeyEvent0.paramString();
      jDayChooser0.keyTyped(menuKeyEvent0);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      BackAction backAction0 = new BackAction(integer0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_EMPTY_PARAGRAPH;
      BackAction backAction1 = new BackAction(gVTAttributedCharacterIterator_TextAttribute0);
      jDayChooser0.setMinSelectableDate((Date) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.202139577699249
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1434), true, jDayChooser0);
      focusEvent0.paramString();
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.addListeners(10);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2696806438052306
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 13;
      GridLayout gridLayout0 = new GridLayout();
      jDayChooser0.setLayout(gridLayout0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 13, 0, (-259), 'D');
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getAlignmentY();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setEnabled(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.240247623800649
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.init();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getCaretColor();
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2670.7754F;
      floatArray0[1] = 0.14F;
      floatArray0[2] = 179.0F;
      color0.getColorComponents(floatArray0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.isWeekOfYearVisible();
      FocusEvent focusEvent0 = new FocusEvent(jTextPane0, (-5186), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
