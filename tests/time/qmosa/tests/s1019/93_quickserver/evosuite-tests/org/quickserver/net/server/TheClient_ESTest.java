/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:58:16 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.toString();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setClientData((ClientData) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientCommandHandler();
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.getMaxAuthTry();
      QuickServer quickServer0 = new QuickServer("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      quickServer0.setServiceState(0);
      theClient0.setServer(quickServer0);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      // Undeclared exception!
      try { 
        quickServer0.findClientByKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      theClient0.getSocket();
      theClient0.toString();
      theClient0.setSocket((Socket) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: null}", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientObjectHandler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-5);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.getClientWriteHandler();
      theClient0.getClientEvent();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.toString();
      theClient0.getServer();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient0.setTimeout((-1441));
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxConnectionMsg("/client-object-handler");
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.getTimeout();
      theClient0.getMaxAuthTry();
      theClient0.getTrusted();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", 1031, inetAddress0, 1031);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@54bbe82a
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(0);
      theClient0.setMaxConnectionMsg("");
      theClient0.getSocketChannel();
      theClient0.getTimeout();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setTrusted(true);
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getMaxConnectionMsg();
      theClient0.getSocket();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getCommunicationLogging();
      theClient0.getClientEvent();
      theClient0.toString();
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.getServer();
      theClient0.getCommunicationLogging();
      theClient0.setCommunicationLogging(false);
      Data data0 = new Data();
      theClient0.setClientData(data0);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setCommunicationLogging(true);
      theClient0.getCommunicationLogging();
      ClientEvent clientEvent1 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.getClientData();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxAuthTryMsg(";<ob");
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.toString();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientEvent();
      theClient0.getSocketChannel();
      theClient0.getSocketChannel();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3247387677850297
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setSocket((Socket) null);
      theClient0.setTimeoutMsg("");
      SocketChannel.open();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.setTimeoutMsg("");
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient0.setMaxAuthTry(0);
      TheClient theClient2 = new TheClient();
      TheClient theClient3 = new TheClient();
      theClient3.setMaxAuthTry(1);
      theClient2.getClientExtendedEventHandler();
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient1.getServer();
      TheClient theClient4 = new TheClient();
      theClient2.setTrusted(true);
      theClient4.getClientWriteHandler();
      theClient4.setClientWriteHandler((ClientWriteHandler) null);
      theClient3.getSocket();
      theClient1.getTimeoutMsg();
      theClient3.getMaxAuthTry();
      assertEquals(1, theClient3.getMaxAuthTry());
      
      theClient0.getMaxAuthTry();
      theClient4.getAuthenticator();
      theClient2.getClientWriteHandler();
      assertTrue(theClient2.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1958550791509905
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", Event: ");
      theClient0.toString();
      theClient0.setTimeout(2893);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.setCommunicationLogging(false);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.toString();
      theClient0.toString();
      theClient0.getMaxAuthTry();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.toString();
      assertEquals(2893, theClient0.getTimeout());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("SecureStore configuration not set! So returning null for KeyManager");
      theClient0.getMaxConnectionMsg();
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      theClient0.getSocketChannel();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3781766359449454
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.toString();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setClientData((ClientData) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientCommandHandler();
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxAuthTry();
      QuickServer quickServer0 = new QuickServer("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.setServer(quickServer0);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      // Undeclared exception!
      try { 
        quickServer0.findClientByKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1952296882816973
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setSocket((Socket) null);
      theClient0.setTimeoutMsg("");
      theClient0.getSocketChannel();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.setTimeoutMsg("");
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient1.setClientEventHandler(commandHandler0);
      theClient0.getTimeoutMsg();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getServer();
      theClient1.getClientObjectHandler();
      QuickServer quickServer0 = null;
      try {
        quickServer0 = new QuickServer("Writing not possible during handshake!", (-1638));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port number can not be less than 0!
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.53575050789886
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setSocketChannel((SocketChannel) null);
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.toString();
      theClient0.setMaxAuthTry((-554));
      theClient0.setMaxConnectionMsg(")?lmbO,[");
      theClient0.getTimeoutMsg();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient1.getCommunicationLogging();
      theClient0.getClientWriteHandler();
      TheClient theClient2 = new TheClient();
      theClient2.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxAuthTry();
      QuickServer quickServer0 = new QuickServer((String) null);
      theClient1.setServer(quickServer0);
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      Data data0 = new Data();
      theClient0.getClientData();
      theClient1.setClientData((ClientData) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getClientEventHandler();
      theClient2.setClientEventHandler((ClientEventHandler) null);
      TheClient theClient3 = new TheClient();
      theClient1.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient2.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      assertEquals((-554), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setTimeout(226);
      theClient0.getTimeoutMsg();
      int int0 = theClient0.getTimeout();
      assertEquals(226, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.5354315286325124
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeoutMsg("J");
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      theClient0.setClientCommandHandler(commandHandler0);
      NonBlockingClientHandler nonBlockingClientHandler1 = new NonBlockingClientHandler((-2859));
      commandHandler0.closingConnection(nonBlockingClientHandler1);
      assertEquals("<ClientHandler-Pool#-2859-ID:1>", nonBlockingClientHandler1.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getServer();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setServer((QuickServer) null);
      theClient0.getServer();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.setMaxAuthTry(0);
      theClient0.setTrusted(true);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientObjectHandler();
      theClient0.setTrusted(true);
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getTimeout();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientEventHandler();
      assertEquals(0, theClient0.getTimeout());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)50;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTry();
      theClient0.getClientEvent();
      SocketChannel.open();
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[3];
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      byte byte2 = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (-484), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setTimeout(0);
      theClient0.getTimeoutMsg();
      theClient0.setTimeoutMsg((String) null);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      QuickServer quickServer0 = new QuickServer("<R&z7_ 6Y&j");
      // Undeclared exception!
      try { 
        quickServer0.findClientByKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
