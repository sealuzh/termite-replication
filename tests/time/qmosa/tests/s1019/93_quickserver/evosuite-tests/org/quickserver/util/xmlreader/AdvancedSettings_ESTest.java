/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:10:31 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8265512215693027
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setClientSocketSendBufferSize((-2937));
      advancedSettings0.setClientSocketTrafficClass("]vHRz&EXgbvl");
      advancedSettings0.setClientSocketTrafficClass("p");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("BH%@dT0*p");
      advancedSettings0.setCharset("");
      assertEquals((-2937), advancedSettings0.getClientSocketSendBufferSize());
      
      advancedSettings1.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      String string0 = advancedSettings2.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.7775186625697956
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-151));
      advancedSettings0.setPerformancePreferencesLatency((-51));
      advancedSettings0.setClientIdentifier("oVA{I!cslyKq~");
      advancedSettings0.setClientSocketReceiveBufferSize((-51));
      advancedSettings0.setClientIdentifier("sfuM4Fo:`D'Zl");
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setByteBufferSize((-51));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-507));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setMaxThreadsForNioWrite((-4));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.toXML("7A)9<:j?=?O;-<");
      advancedSettings0.setPerformancePreferencesBandwidth(1088);
      advancedSettings0.toXML("</client-identifier>\n");
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals("sfuM4Fo:`D'Zl", advancedSettings0.getClientIdentifier());
      assertEquals((-4), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.266952855425168
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6797398018039336
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(241);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth((-16));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-16));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.toXML("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getBacklog();
      advancedSettings0.setQSObjectPoolMaker("\"_y");
      advancedSettings0.getClientSocketSendBufferSize();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.7028337585815403
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-51));
      advancedSettings0.setClientIdentifier("oVA{I!cslyKq~");
      advancedSettings0.setClientSocketReceiveBufferSize((-51));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setByteBufferSize((-51));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth((-507));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML("</max-threads-for-nio-write>\n");
      advancedSettings0.setCharset("");
      advancedSettings0.getBacklog();
      advancedSettings0.setQSObjectPoolMaker("oVA{I!cslyKq~");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getCharset();
      assertEquals("oVA{I!cslyKq~", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("QH");
      advancedSettings0.setClientSocketTrafficClass("</client-socket-tcp-no-delay>\n");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.682787538930437
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-51));
      advancedSettings0.setClientIdentifier("oVA{I!cslyKq~");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setByteBufferSize((-51));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-507));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesLatency((-507));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.toXML("</max-threads-for-nio-write>\n");
      advancedSettings0.setClientIdentifier("5V3*P='%k,gXx");
      assertEquals("5V3*P='%k,gXx", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9431598145315694
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-698));
      advancedSettings0.setByteBufferSize((-698));
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientIdentifier("r<82u");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setClientSocketReceiveBufferSize((-192));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize((-1004));
      assertEquals("r<82u", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.924886245768638
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth((-3));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth(27);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-3));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.301160282549396
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1855));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientIdentifier("yQzB@E&z");
      advancedSettings0.setPerformancePreferencesBandwidth((-3087));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setQSObjectPoolMaker("\t<debug-non-blocking-mode>");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesBandwidth((-3087));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog(115);
      advancedSettings0.setClientSocketReceiveBufferSize(115);
      advancedSettings0.setByteBufferSize(0);
      assertEquals("yQzB@E&z", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-11));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-11), int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.704367243402848
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-1203));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1304));
      advancedSettings0.setSocketLinger(3738);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-1304));
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getBacklog();
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      assertEquals((-1203), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1743174176930435
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-391));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(1000);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setSocketLinger((-911));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency(1000);
      advancedSettings0.setByteBufferSize(3526);
      advancedSettings0.setPerformancePreferencesLatency((-911));
      advancedSettings0.setCharset("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketReceiveBufferSize((-885));
      advancedSettings0.getClientSocketTrafficClass();
      int int0 = advancedSettings0.getBacklog();
      assertEquals((-885), advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.508257277775018
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(245);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize(245);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime(3235);
      advancedSettings1.setClientIdentifier("be8_n6f2v");
      advancedSettings0.toXML("\t<client-socket-send-buffer-size>");
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(245, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3841954627973854
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML("");
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class></client-socket-traffic-class>\n</advanced-settings>\n", string0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.892529299503838
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth((-95));
      advancedSettings0.setCharset((String) null);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-13));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTrafficClass("");
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings2.setCharset((String) null);
      advancedSettings3.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setClientIdentifier("+:=uau\"Tiq");
      advancedSettings4.setClientSocketTcpNoDelay(true);
      assertEquals("+:=uau\"Tiq", advancedSettings4.getClientIdentifier());
      
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      String string0 = advancedSettings2.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.5825234156796895
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime((-2286));
      advancedSettings0.setSocketLinger((-2286));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.setUseDirectByteBuffer(false);
      assertEquals((-2286), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9431598145315694
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesBandwidth((-16));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-16));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientIdentifier();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("}_yi+#$@I7{UV");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // }_yi+#$@I7{UV
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = null;
      advancedSettings0.setCharset((String) null);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("E0marvQrQeTvN(NIQ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // E0marvQrQeTvN(NIQ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8247528729220797
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(364);
      advancedSettings0.setClientSocketReceiveBufferSize((-323));
      advancedSettings0.setPerformancePreferencesBandwidth((-323));
      advancedSettings0.setBacklog(364);
      advancedSettings0.setClientSocketReceiveBufferSize((-323));
      advancedSettings0.setPerformancePreferencesLatency((-840));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize((-840));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getBacklog();
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("Zi4(&i,)A<LUvUJT");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("d[dL[q<Y3Zc;`UcPC)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // d[dL[q<Y3Zc;`UcPC)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<client-socket-traffic-class>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<client-socket-traffic-class>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.659005500182372
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(245);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize(245);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth(146);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize(245);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setQSObjectPoolMaker("");
      advancedSettings2.toXML("");
      advancedSettings1.setPerformancePreferencesBandwidth(245);
      assertEquals(245, advancedSettings1.getPerformancePreferencesBandwidth());
      
      String string0 = advancedSettings2.getQSObjectPoolMaker();
      assertEquals("", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2878749590709533
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-1203));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1304));
      advancedSettings0.setClientIdentifier("@fN-m&vC");
      advancedSettings0.setSocketLinger(3738);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-1304));
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setUseDirectByteBuffer(true);
      assertEquals((-1), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0876740201230506
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setBacklog((-131));
      advancedSettings0.setClientIdentifier("!<Z");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog((-1742));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setBacklog(0);
      advancedSettings0.getPerformancePreferencesLatency();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.831673301904631
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(245);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize(245);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      String string0 = "h^%7%.A^.";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("h^%7%.A^.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // h^%7%.A^.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.878666739983584
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 3743;
      advancedSettings0.setClientSocketReceiveBufferSize(3743);
      advancedSettings0.setQSObjectPoolMaker("sK:3G");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(577);
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      boolean boolean0 = false;
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("Mf");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("sK:3G");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // sK:3G
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Cw");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Cw
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime((-1));
      advancedSettings1.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(2505);
      assertEquals(2505, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketSendBufferSize((-337));
      assertEquals((-337), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.831673301904631
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("!c!!U\"3Z2^{");
      advancedSettings0.setClientIdentifier("!c!!U\"3Z2^{");
      advancedSettings0.setPerformancePreferencesBandwidth(1764);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTrafficClass("");
      assertEquals("!c!!U\"3Z2^{", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      int int0 = advancedSettings0.getBacklog();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, int0);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8381597883911174
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-376));
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-connection-time>\n");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("Ui");
      advancedSettings0.setCharset("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      assertEquals((-376), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(0, advancedSettings0.getBacklog());
      
      advancedSettings0.setBacklog(1);
      assertEquals(1, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.046165953130989
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-2748));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      String string0 = advancedSettings1.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "oVA{IcslyKq~";
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("oVA{IcslyKq~");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("oVA{IcslyKq~");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // oVA{IcslyKq~
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.792424262869452
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketReceiveBufferSize(9);
      advancedSettings0.setClientIdentifier("z`I6T\"BpXNFX%RTlM");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setClientSocketSendBufferSize(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass((String) null);
      advancedSettings1.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      assertEquals(9, advancedSettings0.getClientSocketReceiveBufferSize());
      
      advancedSettings1.setCharset("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketReceiveBufferSize();
      advancedSettings2.setClientSocketTcpNoDelay(true);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      String string0 = advancedSettings2.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }
}
