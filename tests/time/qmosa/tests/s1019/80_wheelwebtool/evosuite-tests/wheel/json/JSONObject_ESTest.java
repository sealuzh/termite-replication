/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:10:41 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8702928936830259
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "is";
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("is");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1303139983229338
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.doubleToString(2541.0493);
      JSONObject jSONObject0 = new JSONObject((Object) "2541.0493");
      String string0 = jSONObject0.toString(43);
      jSONObject0.names();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put(string0, 2695L);
      double double0 = new Float(2541.0493);
      JSONObject.valueToString(object0, 43, (-453));
      JSONObject jSONObject2 = jSONObject1.put("=tA+,}-->]J#", (Object) string0);
      StringWriter stringWriter0 = new StringWriter(43);
      Writer writer0 = jSONObject2.write(stringWriter0);
      jSONObject2.write(writer0);
      jSONObject1.optString("w`dNg", "w`dNg");
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject3 = jSONObject0.put("w`dNg", (Map) hashMap0);
      jSONObject3.optJSONArray("IS=");
      JSONObject.valueToString("w`dNg");
      jSONObject2.opt("=tA+,}-->]J#");
      Integer integer0 = new Integer(43);
      JSONObject.numberToString(integer0);
      Float.max(0.0F, 289.26F);
      Double double1 = new Double(502.7);
      jSONObject2.putOpt("\n", "2541.0493");
      assertEquals(7, jSONObject2.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9747595558674815
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("#1D|xD2_h=[77jN");
      String string0 = "int";
      JSONObject jSONObject1 = jSONObject0.putOpt("int", (Object) null);
      jSONObject1.optBoolean("int");
      String string1 = "] is not a JSONArray.";
      Boolean boolean1 = new Boolean("int");
      jSONObject0.toString((-2180), (int) (byte) (-50));
      Boolean.logicalOr(false, false);
      Double double0 = new Double((byte)34);
      Float.max(2591.9F, 0.0F);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of int
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0645200928113994
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "'-Bzhuy'vYr41";
      jSONObject0.optDouble("'-Bzhuy'vYr41", 0.0);
      int int0 = 120;
      jSONObject0.put("'-Bzhuy'vYr41", (long) 120);
      Double double0 = new Double(0.0);
      jSONObject0.put("=tA+,}-->]J#", (Object) "=tA+,}-->]J#");
      int int1 = 69;
      try { 
        jSONObject0.getLong("=tA+,}-->]J#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=tA+,}-->]J#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2120099017307235
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONTokener jSONTokener0 = new JSONTokener("0");
      JSONObject.valueToString("0");
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      jSONObject0.toString(26, 26);
      try { 
        jSONObject0.getLong("v=I?v!b(,ZP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"v=I?v!b(,ZP\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3018521024642986
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(1.0);
      Float float0 = new Float(1593.9673327978287);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("lpiqF5ej:6f?zq{-P", "");
      jSONObject1.optLong("lpiqF5ej:6f?zq{-P");
      jSONObject1.get("lpiqF5ej:6f?zq{-P");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.735627217384735
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Double double0 = new Double((byte)1);
      Long long0 = new Long(1544L);
      Long long1 = new Long(0L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double1 = new Double(0.0);
      Double.min((byte)1, 0L);
      hashMap0.replace(double1, long1, long0);
      jSONObject0.names();
      Long long2 = new Long(1544L);
      Double double2 = new Double(0.0);
      Double.isFinite(0.0);
      hashMap0.put(double2, long2);
      jSONObject1.optDouble((String) null);
      jSONObject1.remove("");
      jSONObject1.optString("getwait");
      jSONObject1.put("o\"#lq@btW", true);
      assertEquals(2, jSONObject1.length());
      
      Float.max(0.0F, 0.0F);
      Double double3 = new Double(1944.4909694769751);
      Short short0 = new Short((byte)1);
      JSONObject jSONObject2 = new JSONObject(short0);
      jSONObject2.putOpt("pCow1=Y^\"3W_S8", (Object) null);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8534751280843236
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Byte.compare((byte)1, (byte) (-99));
      JSONObject jSONObject2 = jSONObject1.putOpt("", (Object) null);
      jSONObject1.toString();
      JSONObject jSONObject3 = jSONObject1.put("", (double) (byte)1);
      jSONObject2.keys();
      jSONObject3.optJSONObject("bSO]~`-Bo[pA!");
      JSONObject.doubleToString((-594.0));
      Long.getLong("bSO]~`-Bo[pA!", (long) (byte) (-42));
      String string0 = "par";
      Long.getLong("par");
      jSONObject1.put("lo", (Object) null);
      try { 
        jSONObject3.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4922801909165893
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      Object object1 = new Object();
      Object object2 = JSONObject.NULL;
      Object object3 = new Object();
      Boolean boolean1 = new Boolean("+`u");
      JSONObject jSONObject2 = jSONObject0.putOpt("#1D|xD2_h=[77jN", boolean1);
      jSONObject2.optBoolean("#1D|xD2_h=[77jN");
      Boolean boolean2 = new Boolean("+`u");
      jSONObject2.put("#1D|xD2_h=[77jN", (-1L));
      double double0 = 218.967;
      jSONObject0.put("istrim", 218.967);
      try { 
        jSONObject1.getInt("#1D|xD2_h=[77jN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#1D|xD2_h=[77jN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.576887357625046
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "] is not a JSONArray.";
      JSONObject.quote("] is not a JSONArray.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Boolean.getBoolean("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("Null porinter");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "Null porinter";
      stringArray0[2] = "Null porinter";
      stringArray0[3] = "] is not a JSONArray.";
      stringArray0[4] = "";
      stringArray0[5] = "] is not a JSONArray.";
      stringArray0[6] = "\"] is not a JSONArray.\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject2 = jSONObject1.put("\"] is not a JSONArray.\"", (Object) "Null porinter");
      jSONObject0.optDouble("JY/Ssc>ra*+!:3~fKXB", 2052.007116);
      Long long0 = new Long((-1680L));
      JSONObject jSONObject3 = new JSONObject(long0);
      jSONObject2.put("", false);
      StringWriter stringWriter0 = new StringWriter(446);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "] is not a JSONArray.", (-1142), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.665972041114439
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject.quote("] is not a JSONArray.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Boolean.getBoolean("");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("Null porinter");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "Null porinter";
      stringArray0[2] = "Null porinter";
      stringArray0[3] = "] is not a JSONArray.";
      stringArray0[4] = "";
      stringArray0[5] = "] is not a JSONArray.";
      stringArray0[6] = "\"] is not a JSONArray.\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject1.put("\"] is not a JSONArray.\"", (Object) "Null porinter");
      jSONObject0.optDouble("JY/Ssc>ra*+!:3~fKXB", 2052.007116);
      jSONObject0.optBoolean("wheel.json.JSONObject$Null");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((-364));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-364] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.100735203147798
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      assertEquals(2, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      JSONObject.quote("");
      String string0 = JSONObject.doubleToString((byte) (-1));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4918631810268326
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean.getBoolean("");
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Boolean.getBoolean("'");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("'", stringArray0);
      jSONObject0.optInt("'");
      JSONObject jSONObject1 = null;
      JSONObject jSONObject2 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject.getNames((Object) jSONObject2);
      Double double0 = new Double(0);
      jSONObject0.put("iswait", (Object) double0);
      jSONObject0.optDouble("iswait", (double) 0);
      Long long0 = new Long(0);
      String string0 = "{";
      try { 
        jSONObject0.getString("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.008676268697799
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Double double0 = new Double((byte)1);
      Long long0 = new Long(1544L);
      Long long1 = new Long(0L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double1 = new Double(0.0);
      Double.min((byte)1, 0L);
      hashMap0.replace(double1, long1, long0);
      Double double2 = new Double((-736L));
      JSONArray jSONArray0 = jSONObject0.names();
      Long long2 = new Long(1544L);
      Double double3 = new Double(0.0);
      Double.isFinite(0.0);
      hashMap0.put(double3, long2);
      jSONObject1.optDouble((String) null);
      jSONObject1.remove("");
      jSONObject1.optString("getwait");
      JSONObject jSONObject2 = jSONObject1.put("o\"#lq@btW", true);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject2.optBoolean("Expected a ',' or '}'");
      int int0 = jSONObject2.optInt("g", (-1845));
      assertEquals(2, jSONObject1.length());
      assertEquals((-1845), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.575007799399819
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      Byte.compare((byte)34, (byte) (-50));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("?2~]~.UF>IHvw<", "?2~]~.UF>IHvw<");
      Double.min(0.0, 1.0);
      JSONObject.valueToString(double0);
      Short.toUnsignedInt((short) (-311));
      jSONObject1.optBoolean("equ");
      jSONObject0.getJSONArray("?2~]~.UF>IHvw<");
      String string0 = "3\\7se?/Hu";
      try { 
        jSONObject1.getLong("java.lang.Double@0000000004");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Double@0000000004\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3957581606600087
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject.quote("] is not a JSONArray.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Object object1 = new Object();
      Object object2 = JSONObject.NULL;
      Object object3 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", object3);
      Boolean boolean0 = new Boolean("] is not a JSONArray.");
      jSONObject1.toString((-2180), 20);
      Double double0 = new Double((-1714.1840712011));
      Float float0 = new Float((-1.0));
      Float.max(1828.88F, (-887.9F));
      jSONObject0.putOpt((String) null, boolean0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9261901606226224
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject.quote("] is not a JSONArray.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Object object1 = new Object();
      Object object2 = JSONObject.NULL;
      Object object3 = new Object();
      jSONObject0.putOpt("] is not a JSONArray.", object3);
      JSONObject.quote("is");
      Boolean boolean0 = new Boolean("] is not a JSONArray.");
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(1746.71200341);
      Long long0 = new Long((-2180));
      hashMap0.put(double0, long0);
      Long long1 = new Long(1L);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4315565229371208
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject.quote("] is not a JSONArray.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Object object1 = new Object();
      Object object2 = JSONObject.NULL;
      Object object3 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a JSONArray.", object3);
      Boolean boolean0 = new Boolean("] is not a JSONArray.");
      jSONObject1.toString((-2180), 20);
      Double double0 = new Double((-1714.1840712011));
      Float float0 = new Float((-1.0));
      Integer integer0 = new Integer((-2180));
      JSONObject jSONObject2 = jSONObject0.putOpt("\"] is not a JSONArray.\"", integer0);
      jSONObject2.put("\"] is not a JSONArray.\"", 2872L);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.350711858404486
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("'-Bzhuy'vYr41", 0.0);
      byte byte0 = (byte)24;
      Byte byte1 = new Byte((byte)24);
      byte byte2 = (byte) (-42);
      Byte.toUnsignedInt((byte) (-99));
      JSONObject.valueToString(hashMap0, 114, (-1));
      Byte byte3 = new Byte((byte) (-95));
      try { 
        jSONObject0.accumulate((String) null, byte3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.777477642995922
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-89));
      JSONObject jSONObject1 = jSONObject0.put(",\n", (int) (byte) (-89));
      byte byte1 = (byte)34;
      try { 
        jSONObject1.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1868601258864917
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("r{b", "is");
      double double0 = 0.0;
      String string0 = "?2~]~.UF>IHvw<";
      Object object2 = JSONObject.NULL;
      Object object3 = JSONObject.NULL;
      try { 
        jSONObject1.append("r{b", object3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[r{b] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1572969469739314
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      Byte.compare((byte)34, (byte) (-50));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("?2~]~.UF>IHvw<", "?2~]~.UF>IHvw<");
      Double.min(0.0, 1.0);
      Short.toUnsignedInt((short) (-311));
      jSONObject1.optBoolean("equ");
      jSONObject0.getJSONArray("?2~]~.UF>IHvw<");
      try { 
        jSONObject0.getInt("3\u0007se?/Hu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3\\u0007se?/Hu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "*Lyxv(4~q";
      String string1 = null;
      JSONObject.quote((String) null);
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      String string2 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9524193473566362
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Byte.compare((byte)1, (byte) (-99));
      JSONObject jSONObject2 = jSONObject1.putOpt("", (Object) null);
      jSONObject1.toString();
      jSONObject2.optDouble("{\"java.lang.String@0000000004\":java.lang.Byte@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      JSONObject jSONObject3 = jSONObject1.put("", (double) (byte)1);
      jSONObject2.keys();
      String string1 = "bSO]~`-Bo[pA!";
      jSONObject3.optJSONObject("bSO]~`-Bo[pA!");
      JSONObject.doubleToString((-594.0));
      Long.getLong("bSO]~`-Bo[pA!", (long) (byte) (-42));
      String string2 = "par";
      Byte.toUnsignedInt((byte) (-108));
      Long.getLong("par");
      jSONObject3.optDouble((String) null);
      jSONObject1.keys();
      JSONObject jSONObject4 = jSONObject1.put("lo", (Object) null);
      try { 
        jSONObject4.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      jSONObject0.optDouble((String) null, 2216.39993915109);
      int int0 = 120;
      Double double0 = new Double(698.0215912);
      Long long0 = new Long(120);
      Long long1 = new Long(120);
      hashMap0.replace(double0, long0, long1);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.867508932557114
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("'-Bzhuy'vYr41", 0.0);
      JSONObject jSONObject1 = jSONObject0.put("'-Bzhuy'vYr41", (long) 120);
      double double0 = new Double(0.0);
      Byte byte0 = new Byte((byte) (-114));
      JSONObject.valueToString(byte0, 10, (-453));
      JSONObject jSONObject2 = jSONObject0.put("=tA+,}-->]J#", (Object) "=tA+,}-->]J#");
      StringWriter stringWriter0 = new StringWriter(69);
      StringWriter stringWriter1 = new StringWriter(120);
      jSONObject1.write(stringWriter1);
      jSONObject0.optString("V9sj61[F*um7_jx2", "&?+nnIU1jrz0");
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject3 = jSONObject0.put("ishashCode", (Map) hashMap0);
      jSONObject3.optJSONArray("=tA+,}-->]J#");
      Byte byte1 = new Byte((byte) (-114));
      JSONObject.valueToString(byte1);
      jSONObject2.opt("'-Bzhuy'vYr41");
      Integer integer0 = new Integer(69);
      JSONObject.numberToString(byte0);
      jSONObject1.toString();
      try { 
        jSONObject1.getString("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("iscompare");
      JSONObject.valueToString(jSONObject0);
      HashMap<Byte, Byte> hashMap1 = new HashMap<Byte, Byte>();
      HashMap<String, String> hashMap2 = null;
      try {
        hashMap2 = new HashMap<String, String>((-1105));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1105
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5814675403241694
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "'-Bzhuy'vYr41";
      jSONObject0.optDouble("'-Bzhuy'vYr41", 0.0);
      JSONObject jSONObject1 = jSONObject0.put("'-Bzhuy'vYr41", (long) 120);
      Double double0 = new Double(0.0);
      Byte byte0 = new Byte((byte) (-114));
      JSONObject.valueToString(byte0, 10, (-453));
      JSONObject jSONObject2 = jSONObject0.put("=tA+,}-->]J#", (Object) "=tA+,}-->]J#");
      int int0 = 69;
      StringWriter stringWriter0 = new StringWriter(69);
      StringWriter stringWriter1 = new StringWriter(120);
      jSONObject1.write(stringWriter1);
      String string1 = "V9sj61[F*um7_jx2";
      try { 
        jSONObject2.get("V9sj61[F*um7_jx2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"V9sj61[F*um7_jx2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.711985583977171
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "is");
      jSONObject0.optBoolean("is");
      jSONObject0.optString("ELPtx' `", "ELPtx' `");
      jSONObject0.optJSONArray("n>w[:YV");
      jSONObject0.optBoolean((String) null, false);
      Long long0 = new Long(1L);
      Short short0 = new Short((short)22);
      JSONObject jSONObject1 = jSONObject0.append("is", "5#d{8lWiC>(,Om*Dtkx");
      jSONObject0.optInt("wa", (int) (short) (-1119));
      jSONObject1.optDouble("P(he9=]F!g@N pmy#");
      Boolean boolean0 = Boolean.valueOf("toS");
      JSONObject.valueToString(boolean0);
      double double0 = jSONObject1.optDouble("toS");
      assertEquals(4, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8555332172047048
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      Byte.compare((byte)1, (byte) (-99));
      Byte.toUnsignedInt((byte) (-42));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.toString((int) (byte) (-99));
      Double double0 = new Double((byte) (-99));
      Long long0 = new Long(2789L);
      Long.compareUnsigned(1L, (-1344L));
      Double double1 = new Double(1L);
      Long long1 = new Long((byte) (-42));
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      Long long2 = new Long((-1344L));
      hashMap1.put(double1, long2);
      jSONObject1.optBoolean("{J]oRJy");
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3681743601801286
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      jSONObject0.putOpt("", object1);
      Boolean boolean1 = new Boolean("k%O~klA");
      // Undeclared exception!
      jSONObject0.toString(3257, 3257);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6469205868843955
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.keys();
      Byte.toUnsignedInt((byte) (-105));
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      jSONObject1.optInt("y?wpNwd5 ");
      Object object0 = new Object();
      JSONObject.valueToString(object0, 0, 0);
      jSONObject0.optLong("1qO^E{~@;l", (long) 151);
      jSONObject0.optString("1qO^E{~@;l");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.430814541834589
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string0 = "Z\\wH_C;o,#v}\\lk";
      Double double0 = new Double(Double.NaN);
      Long long0 = new Long(0L);
      long long1 = (-736L);
      Long long2 = new Long(151L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double1 = new Double(0.0);
      Long long3 = new Long((-736L));
      hashMap0.replace(double1, long2, long3);
      JSONObject jSONObject0 = new JSONObject((Object) "ZwH_C;o,#v}lk");
      // Undeclared exception!
      jSONObject0.toString(1754);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Boolean.getBoolean("");
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Long long0 = new Long(0L);
      Long.divideUnsigned(0L, 49L);
      hashMap0.put((Double) null, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) boolean0);
      long long1 = 0L;
      Double double0 = new Double(0L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      // Undeclared exception!
      try { 
        jSONObject0.toString(87, 87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.092447766411238
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Double double0 = new Double((byte)1);
      Long long0 = new Long(1544L);
      Long long1 = new Long(0L);
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3224106955121093
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.opt("f2!d__b>7 Pb'7s\"W+");
      jSONObject0.accumulate("f2!d__b>7 Pb'7s\"W+", "H- /,yLX");
      jSONObject0.optString("f2!d__b>7 Pb'7s\"W+");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8754797779369254
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.getBoolean("");
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Long long0 = new Long(0L);
      hashMap0.put((Double) null, long0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      hashMap1.put(double0, (Long) null);
      Long long1 = new Long(0L);
      JSONObject.numberToString(long0);
      Double double1 = new Double(0L);
      assertEquals((double)double1, (double)double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6544465311255245
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "'}HInB/o9L:E,C.0t";
      Byte byte0 = new Byte((byte) (-89));
      JSONObject jSONObject1 = jSONObject0.put("'}HInB/o9L:E,C.0t", (int) (byte) (-89));
      jSONObject0.length();
      JSONObject.getNames(jSONObject1);
      jSONObject0.optString("'}HInB/o9L:E,C.0t");
      JSONTokener jSONTokener0 = new JSONTokener("'}HInB/o9L:E,C.0t");
      jSONTokener0.back();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of '}HInB/o9L:E,C.0t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.565394837118028
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject.numberToString(long0);
      jSONObject0.length();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("aZ&*..8C^F)}6S8R,U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of aZ&*..8C^F)}6S8R,U
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3436160945872553
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Long long0 = new Long((-6L));
      Short.toUnsignedInt((short) (-2281));
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Short.toUnsignedLong((short) (-2281));
      jSONObject0.optDouble("jwXP<%(M", (double) (-6L));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, (-1), (short) (-2281));
      jSONObject0.put("] not found.", (double) (-1));
      try { 
        jSONObject0.getBoolean("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8141926404631836
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject.doubleToString(2541.0493);
      JSONObject jSONObject0 = new JSONObject((Object) "2541.0493");
      int int0 = 43;
      String string0 = jSONObject0.toString(43);
      String string1 = "w`dNg";
      jSONObject0.names();
      Object object0 = JSONObject.NULL;
      jSONObject0.put(string0, 2695L);
      String string2 = "=tA+,}-->]J#";
      try { 
        jSONObject0.getDouble("=tA+,}-->]J#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=tA+,}-->]J#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.618584376916259
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      Object object1 = new Object();
      Object object2 = JSONObject.NULL;
      Object object3 = new Object();
      Boolean boolean1 = new Boolean("+`u");
      JSONObject jSONObject2 = jSONObject0.putOpt("#1D|xD2_h=[77jN", boolean1);
      jSONObject2.optBoolean("#1D|xD2_h=[77jN");
      String string0 = "] is not a JSONArray.";
      Boolean boolean2 = new Boolean("+`u");
      jSONObject0.toString((-2938), (-30733247));
      Boolean.logicalOr(false, false);
      Double double0 = new Double(2022.40182);
      Float.max((-1138.1F), (-2180));
      String string1 = "\\t";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.678933504766246
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-20));
      JSONObject jSONObject1 = jSONObject0.putOpt("is", byte0);
      Byte.compare((byte)67, (byte)67);
      Byte.toUnsignedInt((byte) (-99));
      JSONObject.valueToString(jSONObject0, 53, 547);
      Byte.toUnsignedLong((byte) (-87));
      jSONObject1.has("r{b");
      jSONObject1.isNull("5c#01|<;Q3:iy,F`");
      jSONObject0.accumulate("com", "is");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9608905407094879
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      byte byte0 = (byte) (-89);
      jSONObject0.put("true", (long) (byte) (-89));
      Byte byte1 = new Byte((byte) (-89));
      byte byte2 = (byte)34;
      Byte.compare((byte)34, (byte)34);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(0.0);
      double double1 = 958.0902209812;
      double double2 = 1673.231288588;
      jSONObject0.append("?2~]~.UF>IHvw<", "?2~]~.UF>IHvw<");
      Double.min(0.0, 1.0);
      try { 
        jSONObject0.getJSONArray("equ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"equ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "y+:4DbSLu+a##,ppAY";
      stringArray0[1] = "JSON does not allow non-finite numbers.";
      stringArray0[2] = "y+:4DbSLu+a##,ppAY";
      stringArray0[3] = ".";
      stringArray0[4] = ".";
      stringArray0[5] = ".";
      stringArray0[6] = ".";
      stringArray0[7] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject("y+:4DbSLu+a##,ppAY", stringArray0);
      Short.toUnsignedInt((short) (-311));
      String string0 = "{}";
      try { 
        jSONObject0.getDouble(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8684600982261519
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      jSONObject0.put("'}HInB/o9L:E,C.0t", (int) (byte) (-89));
      Byte.compare((byte)34, (byte) (-50));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(84);
      try { 
        jSONObject0.getBoolean("'}HInB/o9L:E,C.0t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'}HInB/o9L:E,C.0t\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7473160710982958
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      JSONObject jSONObject1 = jSONObject0.put("'}HInB/o9L:E,C.0t", (int) (byte) (-89));
      byte byte1 = (byte)34;
      try { 
        jSONObject1.getJSONArray("'}HInB/o9L:E,C.0t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'}HInB/o9L:E,C.0t\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject.getNames((Object) null);
      JSONObject.valueToString((Object) null);
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      HashMap<String, String> hashMap1 = null;
      try {
        hashMap1 = new HashMap<String, String>((-1105));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1105
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.026928120696174
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      assertEquals(2, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.627245650675758
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      Long long0 = new Long(120);
      Long long1 = new Long((-736L));
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      hashMap1.replace(double0, long1, long0);
      String string0 = jSONObject0.toString(120);
      assertEquals("{}", string0);
      
      Double double1 = new Double((-1.0));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      Long long2 = new Long((-736L));
      hashMap1.put(double0, long0);
      boolean boolean0 = jSONObject0.optBoolean("Bi${fuZey");
      assertFalse(boolean0);
      
      double double2 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double2, 0.01);
      
      jSONObject0.remove("'-Bzhuy'vYr41");
      String string1 = jSONObject0.optString("{}");
      assertEquals("", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.16503137091215
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "";
      jSONObject0.putOpt("", byte0);
      Double double0 = new Double((byte)1);
      Long long0 = new Long(1544L);
      Long long1 = new Long(0L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double1 = new Double(0.0);
      Double.min((byte)1, 0L);
      hashMap0.replace(double1, long1, long0);
      Double double2 = new Double((-736L));
      jSONObject0.names();
      Long long2 = new Long(1544L);
      Double double3 = new Double(0.0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>((byte)1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      hashMap1.put("*FaH!o|ez8$T#L|u5", "*FaH!o|ez8$T#L|u5");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0247357943492776
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      String string0 = "Q^0O";
      String string1 = "wa";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String string2 = "VTO\"\\W7D(p";
      jSONObject0.remove("VTO\"W7D(p");
      try { 
        jSONObject0.getBoolean("Q3?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Q3?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.165508059966762
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+`u";
      stringArray0[1] = "+`u";
      stringArray0[2] = "+`u";
      stringArray0[3] = "+`u";
      Boolean.getBoolean("");
      stringArray0[4] = "+`u";
      jSONObject0.opt("+`u");
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("+`u", object0);
      jSONObject1.optString("+`u");
      assertEquals(2, jSONObject0.length());
      
      jSONObject0.remove("+`u");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.710477211322957
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "";
      jSONObject0.putOpt("", byte0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9472679203312127
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Long long0 = new Long((-6L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "IYw!nP/t";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = " of ";
      stringArray0[5] = "";
      stringArray0[6] = " `1x0lW}Fn]";
      stringArray0[7] = "Aq.";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject.valueToString("", 0, 0);
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4<F}_x'xs", (-5827.0));
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.680421054462574
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "'-Bzhuy'vYr41";
      jSONObject0.optDouble("'-Bzhuy'vYr41", 0.0);
      Double double0 = new Double(0.0);
      Byte byte0 = new Byte((byte) (-114));
      StringWriter stringWriter0 = new StringWriter(69);
      String string1 = "V9sj61[F*um7_jx2";
      Long.compareUnsigned(0L, 0L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      Double double1 = new Double(1.0);
      Long long0 = new Long(69);
      hashMap1.put(double1, long0);
      jSONObject0.optBoolean("gettoUnsignedInt");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((-1646));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1646] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0158551955461084
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      Object object1 = new Object();
      Object object2 = JSONObject.NULL;
      Object object3 = new Object();
      Boolean boolean1 = new Boolean("+`u");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6165987200599936
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject1.optInt("' and instead saw '");
      JSONObject jSONObject2 = jSONObject1.putOpt("' and instead saw '", "' and instead saw '");
      Byte.compare((byte)83, (byte) (-99));
      Byte.toUnsignedInt((byte) (-51));
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1, 45, 3070);
      jSONObject2.has("' and instead saw '");
      assertEquals(2, jSONObject1.length());
      
      boolean boolean0 = jSONObject0.isNull("R{7Os+-5^]cVM\",yD");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Map<JSONObject, Integer> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "X-VJm6S`XMlJa";
      try { 
        jSONObject0.getString("X-VJm6S`XMlJa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X-VJm6S`XMlJa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6523646796521927
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+`u";
      stringArray0[1] = "+`u";
      stringArray0[2] = "+`u";
      stringArray0[3] = "+`u";
      Boolean boolean1 = new Boolean("+`u");
      stringArray0[4] = "+`u";
      stringArray0[5] = "+`u";
      stringArray0[6] = "+`u";
      stringArray0[7] = "+`u";
      jSONObject0.optInt("+`u");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("+`u", (Object) "+`u");
      jSONObject2.optDouble("+`u", (double) 0);
      Long long0 = new Long(0);
      Long.toUnsignedString((long) 0);
      try { 
        jSONObject1.getString("^f#u~`7'AJjN_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^f#u~`7'AJjN_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.354240254662598
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      int int0 = new Byte((byte) (-99));
      Byte.toUnsignedInt((byte) (-42));
      jSONObject0.put("", (long) 214);
      JSONObject.valueToString((Object) null, 0, (byte)1);
      boolean boolean0 = new Boolean("");
      jSONObject0.isNull("");
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9823315946368227
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("'-Bzhuy'vYr41", (long) 120);
      Byte byte0 = new Byte((byte) (-114));
      JSONObject.valueToString(byte0, 10, (-453));
      Long long0 = new Long(120);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>();
      Double double0 = new Double(120);
      hashMap2.replace(double0, long0, long0);
      Double double1 = new Double((-145.232162519));
      jSONObject0.names();
      Long long1 = new Long(10);
      Double double2 = new Double(0.0);
      Long long2 = new Long(0L);
      hashMap1.put(double2, long2);
      jSONObject0.optBoolean("Bi${fuZey");
      jSONObject0.optDouble("java.lang.Byte@0000000004");
      jSONObject0.remove("+,N");
      jSONObject0.optString("+,N");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("gettoUnsignedLong", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Rkh", (double) (byte) (-114));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.452402827432251
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "'}HInB/o9L:E,C.0t";
      byte byte0 = (byte) (-89);
      jSONObject0.put("'}HInB/o9L:E,C.0t", (int) (byte) (-89));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'}HInB/o9L:E,C.0t";
      stringArray0[1] = "*Z'X{Z#5=?p8";
      stringArray0[2] = "?2~]~.UF>IHvw<";
      stringArray0[3] = "'}HInB/o9L:E,C.0t";
      stringArray0[4] = "?2~]~.UF>IHvw<";
      stringArray0[5] = "'}HInB/o9L:E,C.0t";
      stringArray0[6] = "'}HInB/o9L:E,C.0t";
      stringArray0[7] = "{u{XxL4ghlEw '@6e";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        Double.valueOf("] is not a JSONObject.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\t";
      stringArray0[1] = "6K!qcBs";
      stringArray0[2] = "";
      stringArray0[3] = ",{%M8";
      stringArray0[4] = "false";
      stringArray0[5] = "9<atkv+S<NitRzd2";
      stringArray0[6] = ";U}1F44<i";
      stringArray0[7] = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.7671158752979217
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Double double0 = new Double(698.0215912);
      Long long0 = new Long((-2565L));
      Long long1 = new Long((-1048L));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Long long2 = new Long(1L);
      Long.getLong("isnotify");
      hashMap0.replace(double0, long2, long1);
      jSONObject0.toString((-1606));
      Double double1 = new Double(120);
      Long long3 = new Long((byte)1);
      Long.compareUnsigned((-1511L), 1L);
      Double double2 = new Double(603.91994);
      Long long4 = new Long(1L);
      hashMap0.put(double2, long4);
      jSONObject0.optBoolean("{J]oRJy");
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9300853338576955
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+`u";
      stringArray0[1] = "+`u";
      stringArray0[2] = "+`u";
      stringArray0[3] = "+`u";
      String string0 = JSONObject.valueToString("+`u", 44, (-318));
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.4238080604842978
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("isequals", 517);
      Byte byte0 = new Byte((byte)4);
      hashMap0.put("?$t5HvOS.?%VgS:P", byte0);
      hashMap0.put("[", byte0);
      jSONObject0.optBoolean((String) null, false);
      jSONObject0.optBoolean((String) null);
      jSONObject0.optString("isequals", "5#d{8lWiC>(,Om*Dtkx");
      jSONObject0.optJSONArray(":1&p0)G@HT8OmY");
      jSONObject0.optBoolean("'W!5", false);
      Long long0 = new Long((-608L));
      JSONObject jSONObject1 = jSONObject0.append(":1&p0)G@HT8OmY", long0);
      jSONObject1.opt("?$t5HvOS.?%VgS:P");
      Object object0 = jSONObject0.opt("5#d{8lWiC>(,Om*Dtkx");
      assertNull(object0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3746517268956926
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>(0);
      jSONObject0.put("U\"3Z2^{8>", (Map) hashMap0);
      jSONObject0.optBoolean("false", true);
      jSONObject0.putOpt("(WV)+N\"4&[;;l^n7", "(WV)+N\"4&[;;l^n7");
      jSONObject0.optString("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9112573426114141
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Double double0 = new Double(1.0);
      Float float0 = new Float(1593.9673327978287);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.isFinite(1.0);
      jSONObject0.putOpt("lpiqF5ej:6f?zq{-P", "");
      JSONObject jSONObject1 = new JSONObject(double0);
      JSONObject.getNames((Object) null);
      jSONObject0.put(",\n", true);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 109, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6519034050156907
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "+`u";
      stringArray0[1] = "+`u";
      stringArray0[2] = "+`u";
      stringArray0[3] = "+`u";
      Boolean.getBoolean("");
      stringArray0[4] = "+`u";
      stringArray0[5] = "+`u";
      jSONObject0.optInt("+`u");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames((Object) boolean0);
      jSONObject1.put("", (Object) "+`u");
      jSONObject1.optDouble("+`u", (double) 0);
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.getInteger("+`u", integer0);
      JSONObject jSONObject2 = new JSONObject(integer1);
      jSONObject1.put("Unclosed comment", true);
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 0, (-1488));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.571021163259462
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("isequals", (-1185L));
      assertEquals((-1185L), long0);
      
      jSONObject0.optInt("isequals", 517);
      Byte byte0 = new Byte((byte)4);
      hashMap0.put("?$t5HvOS.?%VgS:P", byte0);
      hashMap0.put("[", byte0);
      jSONObject0.optBoolean((String) null, false);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
      
      String string0 = jSONObject0.optString("isequals", "5#d{8lWiC>(,Om*Dtkx");
      assertEquals("5#d{8lWiC>(,Om*Dtkx", string0);
      
      jSONObject0.optJSONArray(":1&p0)G@HT8OmY");
      jSONObject0.optBoolean("'W!5", false);
      Byte byte1 = new Byte((byte)4);
      hashMap0.put((String) null, byte1);
      Long long1 = new Long((-608L));
      jSONObject0.append(":1&p0)G@HT8OmY", long1);
      int int0 = jSONObject0.optInt((String) null, 42);
      assertEquals(42, int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long(120);
      Long long1 = new Long((-736L));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      hashMap0.replace(double0, long1, long0);
      Long long2 = new Long(2907L);
      hashMap0.put(double0, long2);
      Double double1 = new Double((-1.0));
      Long long3 = new Long((-736L));
      hashMap0.put(double0, long0);
      JSONObject.testValidity("'-Bzhuy'vYr41");
      JSONTokener jSONTokener0 = new JSONTokener("7$");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 7$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble((String) null, (-791.15030753234));
      Double double0 = new Double(698.0215912);
      Long long0 = new Long(120);
      HashMap<String, String> hashMap1 = new HashMap<String, String>(25);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      hashMap1.put("BZJt=cyO8v", (String) null);
      JSONObject jSONObject2 = jSONObject0.put("BZJt=cyO8v", 105);
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.9213573666140813
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.getBoolean("");
      jSONObject0.optInt("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "i^]vdysUJEUg<m";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      int int0 = (-28746850);
      Integer integer0 = new Integer((-28746850));
      try { 
        jSONObject1.put((String) null, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8316620655136404
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Double double0 = new Double((byte) (-89));
      jSONObject0.putOpt("'}HInB/o9L:E,C.0t", double0);
      Byte byte0 = new Byte((byte) (-89));
      JSONObject jSONObject1 = jSONObject0.put("'}HInB/o9L:E,C.0t", (int) (byte) (-89));
      Byte.compare((byte) (-89), (byte) (-50));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject2 = jSONObject1.put("uA~!", (Object) "");
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.4555099230677677
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.keys();
      Byte byte0 = new Byte((byte) (-89));
      Byte.compare((byte)34, (byte) (-50));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("7$lFlU%$]Zi4;", "7$lFlU%$]Zi4;");
      double double1 = new Float(1.0);
      Short.toUnsignedInt((short) (-311));
      jSONObject1.optBoolean("equ");
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.getJSONArray("7$lFlU%$]Zi4;");
      boolean boolean0 = jSONObject0.isNull("zJER");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.170576668409362
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("+`u");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Object object0 = new Object();
      JSONTokener jSONTokener0 = new JSONTokener("");
      Byte byte0 = Byte.valueOf((byte)22);
      JSONObject.valueToString(byte0);
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>((byte)22);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      hashMap1.put("+`u", "+`u");
      jSONObject1.put("R]6C[/p2", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.056179513694432
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Double double0 = new Double(1.0);
      Float float0 = new Float(1593.9673327978287);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.isFinite(1.0);
      String string0 = "";
      jSONObject0.putOpt("lpiqF5ej:6f?zq{-P", "");
      JSONObject jSONObject1 = new JSONObject(double0);
      JSONObject jSONObject2 = jSONObject0.put(",\n", true);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 109;
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      try { 
        jSONObject2.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.169979051185257
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "is");
      Object object0 = JSONObject.NULL;
      Double.sum(Double.NaN, Double.NaN);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = 2147483645;
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, (-108), 2147483645);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.388411857052045
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      int int0 = new Byte((byte)1);
      Byte.toUnsignedInt((byte) (-42));
      JSONObject.valueToString((Object) null, 0, (byte)1);
      Byte.toUnsignedLong((byte)1);
      boolean boolean0 = new Boolean("");
      jSONObject0.isNull("");
      jSONObject0.accumulate("com", "R{7Os+-5^]cVM\",yD");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Object object0 = null;
      String[] stringArray0 = new String[1];
      String string0 = ": ";
      stringArray0[0] = ": ";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.950089105224377
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Integer integer0 = new Integer((-1349));
      Integer integer1 = new Integer((-1349));
      Long.getLong("Expected a ',' or '}'", 0L);
      Long.getLong("{}");
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getBoolean("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.096053641962148
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Byte byte0 = new Byte((byte)22);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      byte byte1 = (byte) (-99);
      byte byte2 = (byte)10;
      Byte byte3 = new Byte((byte)10);
      jSONObject1.put("", (int) (byte)10);
      String string0 = "k\\FkyB-R^^&,U/7;\\nP";
      try { 
        jSONObject0.getJSONArray("kFkyB-R^^&,U/7;\nP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kFkyB-R^^&,U/7;\\nP\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.237112403379737
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Short short0 = new Short((short)160);
      Short.toUnsignedInt((short) (-924));
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedLong((short) (-924));
      jSONObject0.optDouble("jwXP<%(M", Double.NaN);
      jSONObject0.optLong("jwXP<%(M", 0L);
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.48086324721994
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String string0 = "!M1T gM3n0*P6s\"Y";
      String string1 = "k%Ar";
      int int0 = 2495;
      try { 
        jSONObject0.getBoolean("!M1T gM3n0*P6s\"Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!M1T gM3n0*P6s\\\"Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of is
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Float float0 = new Float((-3238.3F));
      Float.sum((-3238.3F), 44);
      Float.sum(44, 2261.57F);
      Float.min(44, (-3194.3F));
      Float.min(0.0F, 0.0F);
      String string0 = JSONObject.valueToString(float0, 44, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.2285834617692037
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte.toUnsignedInt((byte) (-42));
      String string0 = JSONObject.valueToString((Object) null, 0, (byte)1);
      String string1 = JSONObject.valueToString("is");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7612118325115627
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-89));
      jSONObject0.put("'}HInB/o9L:E,C.0t", (int) (byte) (-89));
      jSONObject0.put("5<b.E{F#)`kFr", 1760.16);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      Long long0 = new Long((-736L));
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.017131570750671
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", byte0);
      Double double0 = new Double((byte)1);
      Long long0 = new Long(1544L);
      Long long1 = new Long(0L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double1 = new Double(0.0);
      hashMap0.replace(double1, long1, long0);
      jSONObject1.toString((int) (byte)1);
      jSONObject1.optBoolean("isopt", true);
      jSONObject0.optBoolean("_^vPh9Scc");
      jSONObject1.optString("6*{=j", "isopt");
      jSONObject0.optJSONArray("wa");
      jSONObject1.optBoolean("", false);
      Long long2 = new Long(1L);
      Short short0 = new Short((short) (-1119));
      jSONObject0.append("'W!5", short0);
      boolean boolean0 = jSONObject1.isNull("_^vPh9Scc");
      assertEquals(3, jSONObject1.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.2097052670593187
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte.compare((byte)1, (byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      boolean boolean0 = jSONObject0.optBoolean("[]");
      assertFalse(boolean0);
      
      Byte.compare((byte)39, (byte)2);
      Boolean boolean1 = new Boolean("getdoubleToRawLongBits");
      String string0 = jSONObject0.optString("[]", "getdoubleToRawLongBits");
      assertEquals("getdoubleToRawLongBits", string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.530590363911015
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.opt("ELPtx' `");
      Object object0 = new Object();
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.accumulate(string0, "ELPtx' `");
      jSONObject1.optString("K");
      boolean boolean0 = jSONObject0.optBoolean("");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "y+:4DbSLu+a##,ppAY";
      stringArray0[1] = "JSON does not allow non-finite numbers.";
      stringArray0[2] = "y+:4DbSLu+a##,ppAY";
      stringArray0[3] = ".";
      stringArray0[4] = ".";
      stringArray0[5] = ".";
      stringArray0[6] = ".";
      stringArray0[7] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject("y+:4DbSLu+a##,ppAY", stringArray0);
      int int0 = jSONObject0.optInt(".", 1);
      int int1 = Short.toUnsignedInt((short) (-311));
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = new Boolean("Jl]sf");
      String string0 = jSONObject0.toString(123, 123);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.203091016406272
  */
  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("", byte0);
      Byte.compare((byte)1, (byte) (-99));
      Byte.toUnsignedInt((byte) (-42));
      jSONObject0.has("R{7O<+-5^]cVM\",yD");
      boolean boolean0 = jSONObject0.isNull("R{7O<+-5^]cVM\",yD");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }
}
