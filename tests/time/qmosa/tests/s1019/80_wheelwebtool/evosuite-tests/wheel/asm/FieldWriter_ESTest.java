/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:22:43 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.054669564528501
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-947));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "Zbq_", "", (String) null, (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2525306450725109
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-949));
      classWriter0.version = (-949);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-39), "zKi-?_t8q6", "RuntimeInvisibleAnnotations", (String) null, (Object) null);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.getSize();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-113);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("Deprecated", true);
      assertNotNull(annotationVisitor0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6229450846136646
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-949));
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "", "", "`{bcca+v<{*r5", "");
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-1015), "", "G#Z||1<]H;XeSb`3", "`{bcca+v<{*r5", "");
      fieldWriter1.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      Attribute attribute0 = new Attribute("G#Z||1<]H;XeSb`3");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter1.visitAnnotation("`{bcca+v<{*r5", true);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2885387096069334
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "C\"FR", "C\"FR", "C\"FR", "C\"FR");
      classWriter0.visitInnerClass((String) null, "?gjB`pN#<nqA.>X5-$", "", 3);
      fieldWriter0.getSize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.put11(2, 4096);
      ByteVector byteVector2 = byteVector1.put12((-643), 24);
      byteVector2.length = 8;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6118415758256417
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-946));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-670), "", "", "", "`{bcca+v<{*r5");
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.length = 1;
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      fieldWriter0.visitEnd();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4895424853149775
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-949));
      classWriter0.newUTF8("`]1");
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 218, "wheel.asm.Tyxpe", "", "`d]1?GREu9 7X Au^7", "`]1");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("wheel.asm.Tyxpe");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.putByte(4096);
      ByteVector byteVector2 = byteVector1.putShort(24);
      ByteVector byteVector3 = byteVector2.put11(4096, 2);
      ByteVector byteVector4 = byteVector3.putUTF8("`d]1?GREu9 7X Au^7");
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5250199997186045
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-949));
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, ")bq_", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector(1459);
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.OrFileFilter", false);
      fieldWriter0.getSize();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.read();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.606769022196835
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6);
      classWriter0.newClass("Yf-N`z4G.SY3k1{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "=&alOlm", "t`i]rWC=>;vg", "");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter0.next = fieldWriter1;
      fieldWriter1.visitAnnotation("MYdMLib%ar?", false);
      classWriter0.visitSource("t`i]rWC=>;vg", "MYdMLib%ar?");
      fieldWriter0.visitAnnotation("=&alOlm", true);
      fieldWriter1.getSize();
      fieldWriter0.next.visitAnnotation("Sul=@%+#;", true);
      fieldWriter1.getSize();
      fieldWriter0.next.visitAnnotation("t`i]rWC=>;vg", false);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putInt(285212684);
      ByteVector byteVector2 = byteVector1.putByteArray((byte[]) null, 4096, 2);
      fieldWriter1.put(byteVector2);
      ByteVector byteVector3 = null;
      // Undeclared exception!
      try { 
        fieldWriter0.next.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0832409930999294
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-949));
      classWriter0.newUTF8("XD`Z0!Y");
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 7, "/Q`>", "/Q`>", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("JP#Hv>-1V", true);
      byteVector0.putByte(1);
      fieldWriter0.put(byteVector0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      Object object1 = new Object();
      Attribute attribute0 = new Attribute(">HNy!rr3 GHm");
      assertTrue(attribute0.isUnknown());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(60);
      classWriter0.newUTF8(":qiy?&e,;ljU");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), ":qiy?&e,;ljU", "wheel.asm.ClassReader", "CpAA%XHUq", "CpAA%XHUq");
      ByteVector byteVector0 = new ByteVector(2);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-4), "", "", (String) null, "");
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.put12((-4), 248);
      int int0 = (-5);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-5), "A\"", "", "b:", "");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark((-463));
      PipedInputStream pipedInputStream1 = new PipedInputStream(248);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream(pipedOutputStream0, (-546));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-946));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-946), "Signature", "Signature", "Signature", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassWriter classWriter0 = new ClassWriter(10);
      Item[] itemArray0 = new Item[2];
      Item item0 = classWriter0.newClassItem("O7%n=tk.");
      itemArray0[0] = item0;
      Item item1 = classWriter0.newFieldItem("jq A))<$&3w=7", "RuntimeInvisibleAnnotations", "c_<2");
      itemArray0[1] = item1;
      classWriter0.typeTable = itemArray0;
      classWriter0.typeTable = null;
      String string0 = "|6B%hV#bsv8\"CNW&D";
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 7, (String) null, "|6B%hV#bsv8\"CNW&D", "#o`m?5/Ha v:K", "#o`m?5/Ha v:K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Attribute attribute0 = new Attribute("71I&3\"4m~");
      ClassWriter classWriter0 = new ClassWriter(918);
      Object object2 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 3892, "71I&3\"4m~", "$2`GJo", "71I&3\"4m~", object2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@4498d18b
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9859526183035509
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(60);
      classWriter0.newUTF8(":qiy?&e,;ljU");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), ":qiy?&e,;ljU", "wheel.asm.ClassReader", "CpAA%XHUq", "CpAA%XHUq");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      fieldWriter0.getSize();
      Enumeration<ObjectInputStream> enumeration0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }
}
