/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:04:37 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_tr_handle_impl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.422852756458204
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)27;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I79<g)~x8V");
      fBResultSet0.first();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-78);
      byteArray2[1] = (byte)31;
      byteArray2[2] = (byte)31;
      byteArray2[3] = (byte) (-84);
      byteArray2[4] = (byte) (-78);
      byteArray2[5] = (byte)46;
      byteArray2[6] = (byte) (-88);
      byteArray2[7] = (byte)31;
      byteArray2[8] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray2);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative(21);
      fBCachedFetcher0.updateRow(byteArray0);
      boolean boolean0 = fBCachedFetcher0.next();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.454407494219221
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList2);
      Object object2 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object2);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<byte[][]> predicate5 = predicate0.or(predicate4);
      Predicate<byte[][]> predicate6 = predicate5.and(predicate4);
      Predicate<Object> predicate7 = predicate4.negate();
      predicate2.and(predicate7);
      predicate6.or(predicate6);
      predicate0.negate();
      linkedList0.removeIf(predicate5);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isLast();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      javaGDSImpl0.createDatabaseParameterBuffer();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.getFetchSize();
      boolean boolean0 = fBCachedFetcher0.next();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.766815785764189
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[6];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[5] = fBBlobField0;
      Predicate.isEqual((Object) fBBlobField0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z\"T|rWd'");
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.last();
      fBCachedFetcher0.next();
      fBCachedFetcher0.absolute(57);
      fBCachedFetcher0.setFetchSize(105);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.last();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.last();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.updateRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.relative(1);
      assertEquals(105, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1984543287850427
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte) (-124);
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte) (-78);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I79<g)~x8V");
      byteArray1[4] = (byte)29;
      byteArray1[5] = (byte) (-84);
      byteArray1[6] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      boolean boolean0 = fBResultSet0.previous();
      assertFalse(boolean0);
      
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.093380419625629
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setSelectCount(1389);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList1);
      int int0 = (-1);
      fBCachedFetcher0.beforeFirst();
      try { 
        fBCachedFetcher0.absolute((-1));
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.675457082873685
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList1);
      fBResultSet1.previous();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet0.xsqlvars, linkedList3);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.absolute(1285);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.last();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.remove((Object) null);
      byte[][] byteArray0 = new byte[3][5];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)0;
      linkedList0.clear();
      byteArray1[2] = (byte)46;
      byteArray1[3] = (byte)7;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)5;
      byteArray2[1] = (byte)7;
      byteArray2[2] = (byte)7;
      byteArray2[3] = (byte)5;
      byteArray2[4] = (byte)46;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)7;
      byteArray3[1] = (byte)7;
      byteArray3[2] = (byte)46;
      byteArray3[3] = (byte)5;
      byteArray3[4] = (byte)109;
      byteArray3[5] = (byte)7;
      byteArray3[6] = (byte)5;
      byteArray3[7] = (byte)0;
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean0);
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7502545029914933
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[6];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      linkedList0.add((byte[][]) null);
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[5] = fBBlobField0;
      Predicate.isEqual((Object) fBBlobField0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z\"T|rWd'");
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.last();
      fBCachedFetcher0.next();
      fBCachedFetcher0.absolute(57);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      fBCachedFetcher0.last();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.last();
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.645932570853883
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      Predicate.isEqual((Object) linkedList1);
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<byte[][]> predicate2 = predicate0.or(predicate1);
      Predicate<byte[][]> predicate3 = predicate2.and(predicate0);
      Predicate<byte[][]> predicate4 = predicate3.negate();
      linkedList1.removeIf(predicate4);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.absolute((-1));
      assertEquals(2, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher1.previous();
      fBCachedFetcher1.last();
      boolean boolean0 = fBCachedFetcher1.first();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9527907954612824
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[][] byteArray0 = new byte[2][3];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte)100;
      byteArray1[5] = (byte)18;
      byteArray1[6] = (byte) (-5);
      byteArray1[7] = (byte) (-64);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-5);
      byteArray0[1] = byteArray2;
      linkedList0.add(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1279895059847687
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      linkedList0.remove((Object) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(2340);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][6];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)59;
      byteArray1[1] = (byte)38;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)38;
      byteArray3[1] = (byte)59;
      byteArray3[2] = (byte)59;
      byteArray3[3] = (byte)38;
      byteArray3[4] = (byte)59;
      byteArray3[5] = (byte)59;
      byteArray3[6] = (byte)59;
      byteArray3[7] = (byte)60;
      byteArray3[8] = (byte)38;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)59;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte)59;
      byteArray5[1] = (byte)38;
      byteArray5[2] = (byte)105;
      byteArray5[3] = (byte)38;
      byteArray5[4] = (byte)59;
      byteArray5[5] = (byte)59;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte)38;
      byteArray6[1] = (byte)59;
      byteArray6[2] = (byte)38;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[2];
      byteArray7[0] = (byte)59;
      byteArray7[1] = (byte)38;
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[6];
      byteArray8[0] = (byte)105;
      byteArray8[1] = (byte)38;
      byteArray8[2] = (byte)105;
      byteArray8[3] = (byte)60;
      byteArray8[4] = (byte)38;
      byteArray8[5] = (byte)105;
      byteArray0[7] = byteArray8;
      linkedList0.add(byteArray0);
      byte[][] byteArray9 = new byte[2][4];
      linkedList0.offerFirst(byteArray9);
      linkedList0.remove((Object) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3804082708178105
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList2);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) fBResultSet0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate4.and(predicate3);
      predicate1.negate();
      Predicate<Object> predicate6 = predicate5.or(predicate2);
      predicate4.negate();
      Predicate<byte[][]> predicate7 = predicate0.or(predicate5);
      Predicate<byte[][]> predicate8 = Predicate.isEqual((Object) predicate2);
      Predicate<byte[][]> predicate9 = predicate8.and(predicate7);
      Predicate<byte[][]> predicate10 = Predicate.isEqual(object0);
      predicate4.or(predicate6);
      Predicate<byte[][]> predicate11 = predicate7.or(predicate5);
      predicate10.or(predicate11);
      Predicate<byte[][]> predicate12 = predicate9.negate();
      linkedList0.removeIf(predicate12);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      javaGDSImpl0.getType();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3628384609307487
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][1];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte) (-88);
      byteArray1[3] = (byte)53;
      byteArray1[4] = (byte)100;
      byteArray1[5] = (byte)94;
      byteArray1[6] = (byte)94;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)53;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)53;
      byteArray2[3] = (byte)94;
      byteArray2[4] = (byte)7;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)7;
      byteArray3[1] = (byte)94;
      byteArray3[2] = (byte) (-88);
      byteArray3[3] = (byte)68;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)53;
      byteArray4[1] = (byte) (-88);
      byteArray4[2] = (byte) (-2);
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte) (-88);
      byteArray4[5] = (byte)94;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[0];
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[4];
      byteArray6[0] = (byte) (-88);
      byteArray6[1] = (byte)7;
      byteArray6[2] = (byte)94;
      byteArray6[3] = (byte)53;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[6];
      byteArray7[0] = (byte) (-119);
      byteArray7[1] = (byte)67;
      byteArray7[2] = (byte) (-2);
      byteArray7[3] = (byte)100;
      byteArray7[4] = (byte)100;
      byteArray7[5] = (byte)94;
      byteArray0[6] = byteArray7;
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      linkedList0.offerFirst((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.relative(138);
      fBCachedFetcher0.previous();
      byte[][] byteArray8 = new byte[5][5];
      byte[] byteArray9 = new byte[3];
      byteArray9[0] = (byte) (-1);
      byteArray9[1] = (byte) (-34);
      byteArray9[2] = (byte)23;
      byteArray8[0] = byteArray9;
      byte[] byteArray10 = new byte[2];
      byteArray10[0] = (byte) (-1);
      byteArray10[1] = (byte)22;
      byteArray8[1] = byteArray10;
      byte[] byteArray11 = new byte[1];
      byteArray11[0] = (byte)22;
      byteArray8[2] = byteArray11;
      byte[] byteArray12 = new byte[4];
      byteArray12[0] = (byte) (-34);
      byteArray12[1] = (byte)22;
      byteArray12[2] = (byte) (-14);
      byteArray12[3] = (byte) (-34);
      byteArray8[3] = byteArray12;
      byte[] byteArray13 = new byte[8];
      byteArray13[0] = (byte)23;
      byteArray13[1] = (byte) (-14);
      fBCachedFetcher1.isAfterLast();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5016380848191844
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList1);
      fBResultSet1.previous();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet0.xsqlvars, linkedList3);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      fBResultSet1.absolute(189);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.absolute(1285);
      fBCachedFetcher0.insertRow((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.toArray();
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      byte[][] byteArray0 = new byte[6][4];
      byte[] byteArray1 = new byte[2];
      linkedList0.offerFirst(byteArray0);
      byte byte0 = (byte)94;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3984990093149205
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][4];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-2);
      byteArray1[4] = (byte)19;
      byteArray1[5] = (byte)67;
      byteArray1[6] = (byte)29;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)67;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-112);
      byteArray3[1] = (byte) (-112);
      byteArray3[2] = (byte) (-112);
      byteArray3[3] = (byte) (-112);
      byteArray3[4] = (byte) (-1);
      byteArray3[5] = (byte)19;
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList1);
      fBResultSet1.previous();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet1);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet0.xsqlvars, linkedList3);
      fBCachedFetcher0.absolute(1285);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.last();
      boolean boolean0 = fBCachedFetcher0.first();
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8809457317913751
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte) (-124);
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte) (-78);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I79<g)~x8V");
      byteArray1[4] = (byte)29;
      byteArray1[5] = (byte) (-84);
      byteArray1[6] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative((byte) (-28));
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.355031381973742
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      fBResultSet0.previous();
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet1.xsqlvars, linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet2);
      fBCachedFetcher0.next();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.572869475944666
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      fBResultSet0.previous();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.beforeFirst();
      linkedList1.add((byte[][]) null);
      fBCachedFetcher0.first();
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.isLast();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_tr_handle_impl0.getDbHandle();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.remove((Object) linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      Object object0 = new Object();
      linkedList0.remove(object0);
      byte byte0 = (byte) (-39);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.820775162203468
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)27;
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte) (-78);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I79<g)~x8V");
      byteArray1[4] = (byte)29;
      byteArray1[5] = (byte) (-84);
      byteArray1[6] = (byte) (-28);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative((byte)0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setRsr_id_ptr(7, 7);
      isc_stmt_handle_impl0.setStatementType(939);
      isc_stmt_handle_impl0.setDeleteCount(939);
      isc_stmt_handle_impl0.setRsr_id_ptr((-240), 16777216);
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher(gDSHelper0, (-2508), (-1), isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.390016763125041
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object1);
      Object object2 = new Object();
      byte[][] byteArray0 = fBResultSet0.row;
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Object object3 = new Object();
      Predicate<Object> predicate2 = Predicate.isEqual(object3);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      predicate4.or(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<byte[][]> predicate6 = predicate0.or(predicate2);
      predicate6.and(predicate1);
      Predicate<byte[][]> predicate7 = Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate8 = predicate2.negate();
      predicate0.or(predicate8);
      predicate7.negate();
      linkedList0.removeIf(predicate5);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      javaGDSImpl0.getType();
      fBCachedFetcher0.deleteRow();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte) (-124);
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte) (-78);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I79<g)~x8V");
      byteArray1[4] = (byte)29;
      byteArray1[5] = (byte) (-84);
      byteArray1[6] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1429016058013977
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      Predicate.isEqual((Object) null);
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) comparator0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate1.or(predicate3);
      predicate2.negate();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("org.firebirdsql.jdbc.FBCachedFetcher$1");
      Predicate<byte[][]> predicate4 = Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<byte[][]> predicate5 = predicate4.or(predicate3);
      Predicate<byte[][]> predicate6 = predicate0.and(predicate5);
      Predicate<byte[][]> predicate7 = Predicate.isEqual((Object) jMXPrincipal0);
      predicate5.or(predicate6);
      Predicate<byte[][]> predicate8 = predicate7.or(predicate4);
      Predicate<byte[][]> predicate9 = predicate8.negate();
      linkedList0.removeIf(predicate9);
      fBCachedFetcher0.isLast();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher1.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6328188451738908
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, fBResultSet0);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) linkedList1);
      Object object1 = new Object();
      Predicate<byte[][]> predicate1 = Predicate.isEqual((Object) null);
      Object object2 = new Object();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate2.and(predicate5);
      Predicate<Object> predicate7 = predicate3.negate();
      predicate7.or(predicate5);
      predicate7.negate();
      Predicate<byte[][]> predicate8 = predicate1.or(predicate7);
      Predicate<byte[][]> predicate9 = predicate1.and(predicate6);
      Predicate.isEqual((Object) "");
      Predicate<byte[][]> predicate10 = predicate9.or(predicate4);
      Predicate.isEqual((Object) predicate10);
      predicate8.negate();
      linkedList2.removeIf(predicate9);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isEmpty());
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      javaGDSImpl0.getType();
      fBCachedFetcher0.deleteRow();
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0453420988585416
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.setRsr_id_ptr(7, 7);
      isc_stmt_handle_impl0.setStatementType(939);
      isc_stmt_handle_impl0.setDeleteCount(939);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<byte[][]> predicate4 = Predicate.isEqual((Object) linkedList0);
      Predicate<byte[][]> predicate5 = predicate4.and(predicate3);
      Predicate<byte[][]> predicate6 = predicate5.negate();
      predicate1.and(predicate2);
      Predicate<byte[][]> predicate7 = predicate6.negate();
      predicate7.or(predicate0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>(linkedList0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.remove((Object) predicate7);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList2, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.absolute(939);
      fBCachedFetcher0.setFetchSize(7);
      fBCachedFetcher0.first();
      boolean boolean0 = fBCachedFetcher0.last();
      assertEquals(7, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8809457317913751
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      linkedList0.remove((Object) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((byte) (-39));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.toArray();
      byte[][] byteArray0 = new byte[2][4];
      byte[] byteArray1 = new byte[2];
      linkedList0.offerFirst(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher1.relative((byte)94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8060057732153725
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[6];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[5] = fBBlobField0;
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) fBBlobField0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.last();
      fBCachedFetcher0.next();
      Predicate<byte[][]> predicate1 = Predicate.isEqual((Object) fBBlobField0);
      Predicate<byte[][]> predicate2 = predicate0.or(predicate1);
      predicate2.negate();
      linkedList0.removeIf(predicate1);
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.updateRow((byte[][]) null);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      GDSType.getType("z\"T|rWd'");
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.close();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6666003230084914
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      Predicate.isEqual((Object) fBCachedFetcher0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.last();
      fBCachedFetcher0.next();
      fBCachedFetcher0.absolute(57);
      fBCachedFetcher0.previous();
      linkedList0.remove((Object) fBCachedFetcher0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher1.next();
      fBCachedFetcher0.last();
      fBCachedFetcher1.isBeforeFirst();
      fBCachedFetcher0.isEmpty();
      byte[][] byteArray1 = new byte[9][4];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      byteArray1[6] = byteArray0;
      byteArray1[7] = byteArray0;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-2);
      byteArray2[1] = (byte) (-2);
      linkedList0.add(byteArray1);
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher1.next();
      fBCachedFetcher1.getRowNum();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      byte[][] byteArray0 = new byte[3][9];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte) (-55);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)68;
      byteArray1[5] = (byte)65;
      byteArray1[6] = (byte)86;
      byteArray1[7] = (byte) (-112);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-55);
      byteArray3[1] = (byte) (-112);
      byteArray3[2] = (byte) (-55);
      byteArray0[2] = byteArray3;
      linkedList0.offerFirst(byteArray0);
      Object object0 = new Object();
      linkedList0.remove(object0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][4];
      linkedList0.offerFirst(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray1 = new byte[8][2];
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-10);
      byteArray2[1] = (byte) (-2);
      byteArray1[0] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-10);
      byteArray3[1] = (byte) (-2);
      byteArray3[2] = (byte) (-2);
      byteArray3[3] = (byte) (-10);
      byteArray1[1] = byteArray3;
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-19);
      byteArray1[2] = byteArray4;
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte) (-19);
      byteArray5[1] = (byte) (-2);
      byteArray5[2] = (byte) (-2);
      byteArray5[3] = (byte) (-19);
      byteArray5[4] = (byte) (-2);
      byteArray1[3] = byteArray5;
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte) (-10);
      byteArray6[1] = (byte) (-2);
      byteArray6[2] = (byte) (-122);
      byteArray6[3] = (byte) (-19);
      byteArray6[4] = (byte) (-10);
      byteArray6[5] = (byte) (-2);
      byteArray6[6] = (byte) (-10);
      byteArray6[7] = (byte) (-10);
      byteArray1[4] = byteArray6;
      byte[] byteArray7 = new byte[7];
      byteArray7[0] = (byte) (-19);
      byteArray7[1] = (byte) (-10);
      byteArray7[2] = (byte) (-122);
      byteArray7[3] = (byte) (-122);
      byteArray7[4] = (byte) (-10);
      byteArray7[5] = (byte) (-2);
      byteArray7[6] = (byte)1;
      byteArray1[5] = byteArray7;
      byte[] byteArray8 = new byte[8];
      byteArray8[0] = (byte) (-38);
      byteArray8[1] = (byte)42;
      byteArray8[2] = (byte) (-2);
      byteArray8[3] = (byte) (-2);
      byteArray8[4] = (byte)0;
      byteArray8[5] = (byte)107;
      byteArray8[6] = (byte) (-19);
      byteArray8[7] = (byte) (-19);
      byteArray1[6] = byteArray8;
      byte[] byteArray9 = new byte[5];
      byteArray9[0] = (byte) (-1);
      byteArray9[1] = (byte)94;
      byteArray9[2] = (byte)42;
      byteArray9[3] = (byte) (-38);
      byteArray9[4] = (byte)1;
      byteArray1[7] = byteArray9;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      linkedList0.add((byte[][]) null);
      byteArray0[2] = (byte) (-26);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-2);
      byteArray0[3] = (byte) (-104);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte) (-124);
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte) (-78);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I79<g)~x8V");
      byteArray1[4] = (byte)29;
      byteArray1[5] = (byte) (-84);
      byteArray1[6] = (byte) (-28);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative((byte) (-28));
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6745460275183657
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList2);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList2);
      Object object2 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object2);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate0.or(predicate4);
      Object object3 = new Object();
      Predicate<Object> predicate5 = Predicate.isEqual(object3);
      predicate5.and(predicate4);
      predicate4.or(predicate2);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<byte[][]> predicate7 = predicate0.or(predicate5);
      predicate0.and(predicate6);
      Object object4 = new Object();
      Predicate.isEqual(object4);
      Predicate<byte[][]> predicate8 = predicate7.or(predicate6);
      predicate8.negate();
      linkedList1.removeIf(predicate8);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList2, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.relative(2918);
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9557135998277697
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      Predicate.isEqual((Object) linkedList1);
      Object object0 = new Object();
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<byte[][]> predicate2 = predicate0.or(predicate1);
      Predicate<byte[][]> predicate3 = predicate2.and(predicate0);
      Predicate<byte[][]> predicate4 = predicate3.negate();
      linkedList1.removeIf(predicate4);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4455549575917255
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      fBResultSet0.previous();
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.beforeFirst();
      linkedList1.add((byte[][]) null);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.beforeFirst();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_tr_handle_impl0.getDbHandle();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0069724918931833
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      linkedList0.remove(object0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.afterLast();
      assertFalse(fBCachedFetcher0.isAfterLast());
  }
}
