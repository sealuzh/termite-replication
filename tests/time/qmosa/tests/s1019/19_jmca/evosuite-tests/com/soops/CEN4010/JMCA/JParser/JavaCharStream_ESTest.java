/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 06:04:30 GMT 2020
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      char[] charArray0 = new char[19];
      charArray0[0] = 'b';
      charArray0[1] = 'E';
      charArray0[2] = 'F';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      sequenceInputStream0.available();
      stringReader0.skip(1425L);
      StringReader stringReader1 = new StringReader("k7d=\ts]e");
      stringReader1.ready();
      stringReader1.skip((-1L));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 10;
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringReader stringReader0 = new StringReader("-0bx2cGhfv%,=r|/p@");
      stringReader0.skip((-62L));
      stringReader0.skip(10);
      stringReader0.mark(1652);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringReader0.read(charBuffer0);
      CharBuffer.allocate(8);
      char char0 = '?';
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^o");
      StringReader stringReader0 = new StringReader("^o");
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5109630170575022
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=qts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      sequenceInputStream1.close();
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = ';';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4, 4);
      javaCharStream0.adjustBeginLineColumn((byte)0, 203);
      javaCharStream0.getBeginColumn();
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.559581156259877
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      String string0 = "9";
      StringReader stringReader1 = new StringReader("9");
      boolean boolean0 = javaCharStream0.prevCharIsCR;
      stringReader0.mark(10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.backup(10);
      stringReader1.read();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      stringReader0.read(charArray0);
      javaCharStream0.adjustBeginLineColumn(10, (-4729));
      javaCharStream0.getBeginColumn();
      stringReader0.read(charArray0);
      javaCharStream0.BeginToken();
      javaCharStream0.readChar();
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(stringReader0, (-1), 4087, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(12);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 80, (-101));
      javaCharStream0.maxNextCharInd = (-1);
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.798358234406036
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      char[] charArray0 = new char[19];
      charArray0[0] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      sequenceInputStream0.available();
      stringReader0.skip((-1624L));
      StringReader stringReader1 = new StringReader("k7d=\ts]e");
      stringReader0.ready();
      stringReader0.skip(1L);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      javaCharStream0.adjustBeginLineColumn(98, 65);
      javaCharStream0.BeginToken();
      int int0 = javaCharStream0.getEndLine();
      assertEquals(99, javaCharStream0.getBeginLine());
      assertEquals(99, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      char[] charArray0 = new char[19];
      charArray0[0] = 'O';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      stringReader0.skip((-1624L));
      StringReader stringReader1 = new StringReader("k7d=\ts]e");
      stringReader0.ready();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5919280370833981
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(12);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 80, (-101));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-101), (-4870));
      javaCharStream0.adjustBeginLineColumn((-1875), (-4870));
      javaCharStream0.getBeginColumn();
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.897367567113771
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharBuffer.allocate(10);
      StringReader stringReader0 = new StringReader("-0bx2cGhfv%,=r|/p@");
      stringReader0.skip((-62L));
      stringReader0.skip(10);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 86, 90);
      javaCharStream0.readChar();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.BeginToken();
      javaCharStream0.UpdateLineColumn('s');
      assertEquals(86, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6556867845545189
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      char[] charArray0 = new char[19];
      charArray0[0] = 'b';
      charArray0[1] = 'E';
      charArray0[2] = 'F';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      sequenceInputStream0.available();
      stringReader0.skip(1425L);
      StringReader stringReader1 = new StringReader("k7d=\ts]e");
      stringReader1.ready();
      stringReader1.skip((-1L));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      JavaCharStream.hexval('E');
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.bufpos = 14;
      javaCharStream0.ExpandBuff(true);
      javaCharStream0.ReInit((Reader) stringReader1);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 14, 4052, 4052);
      assertNotSame(sequenceInputStream0, sequenceInputStream2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0, (-1972), (int) (byte) (-14));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      sequenceInputStream0.read(byteArray0, (int) (byte) (-14), 970);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      int int0 = JavaCharStream.hexval('d');
      assertEquals(13, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[6];
      sequenceInputStream0.close();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration2);
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d\tsDe");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[6];
      sequenceInputStream0.read(byteArray0, 2, (-2937));
      JavaCharStream.hexval('3');
      sequenceInputStream1.close();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.read();
      try { 
        sequenceInputStream2.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      char[] charArray0 = new char[19];
      charArray0[0] = 'b';
      charArray0[1] = 'E';
      charArray0[2] = 'F';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.chars();
      sequenceInputStream0.available();
      stringReader0.skip(1425L);
      StringReader stringReader1 = new StringReader("k7d=\ts]e");
      stringReader1.ready();
      stringReader1.skip((-1L));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.close();
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^o");
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JavaCharStream.hexval('C');
      CharBuffer charBuffer0 = CharBuffer.allocate(701);
      charBuffer0.rewind();
      CharBuffer.wrap((CharSequence) charBuffer0, 701, 701);
      CharBuffer.allocate(97);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9092335993725373
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(12);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 80, (-101));
      javaCharStream0.maxNextCharInd = 1;
      javaCharStream0.readChar();
      javaCharStream0.AdjustBuffSize();
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-27);
      byte byte0 = (byte)35;
      byteArray0[5] = (byte)35;
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=qts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)0;
      sequenceInputStream1.close();
      sequenceInputStream1.read();
      byteArray0[1] = (byte)0;
      sequenceInputStream1.close();
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      sequenceInputStream1.close();
      byteArray0[5] = (byte)0;
      sequenceInputStream1.mark(594);
      sequenceInputStream1.read(byteArray0, (-1239), (int) (byte)0);
      sequenceInputStream1.read(byteArray0, 639, 2057);
      sequenceInputStream0.read();
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9504543117424777
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" column ");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1744, 1744, 1744);
      javaCharStream0.bufsize = 1744;
      javaCharStream0.ReInit((Reader) stringReader0, (-1351), 0);
      javaCharStream0.readChar();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      javaCharStream0.getColumn();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaCharStream0.GetImage();
      javaCharStream0.adjustBeginLineColumn(10, 0);
      javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.bufpos);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 43, 43);
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1:e[W?");
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5353070175881725
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=qts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      sequenceInputStream1.close();
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = ';';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4, 4);
      javaCharStream0.adjustBeginLineColumn((byte)0, 203);
      javaCharStream0.getBeginColumn();
      StringReader stringReader1 = new StringReader("k7d=qts]e");
      stringReader1.close();
      javaCharStream0.ReInit((Reader) stringReader1);
      javaCharStream0.getBeginColumn();
      javaCharStream0.adjustBeginLineColumn((byte)0, 1573);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('\'');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2591081801598123
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-2316), (-2316), 12);
      javaCharStream0.Done();
      StringReader stringReader0 = new StringReader("]@0D7DPL%h__l>w<8");
      javaCharStream0.ReInit((Reader) stringReader0, 0, 61);
      javaCharStream0.readChar();
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 61, 0, 4081);
      javaCharStream0.adjustBeginLineColumn(4081, 61);
      javaCharStream0.BeginToken();
      JavaCharStream javaCharStream2 = new JavaCharStream((Reader) null, 58, 75, 3039);
      javaCharStream1.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream2.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5268781472745927
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y[5P0F}&^fyn1");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.ready();
      char[] charArray0 = new char[0];
      javaCharStream0.buffer = charArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.backup(0);
      stringReader0.read();
      javaCharStream0.UpdateLineColumn(']');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      javaCharStream0.getColumn();
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.691559164310424
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y[5P0F}&^fyn1");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.ready();
      char[] charArray0 = new char[0];
      javaCharStream0.buffer = charArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.backup(0);
      stringReader0.read();
      javaCharStream0.UpdateLineColumn(']');
      javaCharStream0.available = 91;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      javaCharStream0.getColumn();
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.5919280370833981
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-853), (-853));
      char[] charArray0 = new char[9];
      stringReader0.markSupported();
      charArray0[6] = ',';
      stringReader0.ready();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.backup((-170));
      stringReader0.read();
      javaCharStream0.UpdateLineColumn('J');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = JavaCharStream.hexval('7');
      assertEquals(7, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(12);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, (-101));
      int[] intArray0 = new int[0];
      javaCharStream0.bufline = intArray0;
      javaCharStream0.bufline = intArray0;
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.5919280370833983
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "Y[5P0F}&^fyn1";
      StringReader stringReader0 = new StringReader("Y[5P0F}&^fyn1");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.ready();
      char[] charArray0 = new char[0];
      javaCharStream0.buffer = charArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.backup(0);
      stringReader0.read();
      javaCharStream0.UpdateLineColumn(']');
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = (-2316);
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = JavaCharStream.hexval('8');
      assertEquals(8, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^o");
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0, (-1972), (int) (byte) (-14));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("");
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)21;
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.read(byteArray0, 1, 4);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream1);
      javaCharStream1.Done();
      Enumeration<BufferedInputStream> enumeration2 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaCharStream.hexval('9');
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, (int) '9', 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4689732714597972
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      stringReader0.mark(3);
      javaCharStream0.bufsize = 4075;
      mockFileInputStream0.getChannel();
      javaCharStream0.ReInit((InputStream) mockFileInputStream0, 4075, 0, 0);
      javaCharStream0.ExpandBuff(false);
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4689732714597972
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 0, (-355), (int) (byte)0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.2501247721783552
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream.hexval('a');
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      StringReader stringReader0 = new StringReader("");
      try { 
        JavaCharStream.hexval('o');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1801, 1801, 6439);
      javaCharStream0.bufsize = 6439;
      // Undeclared exception!
      try { 
        javaCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5512227374080629
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[0] = (byte) (-42);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)65;
      sequenceInputStream0.read(byteArray0, (int) (byte) (-1), 0);
      sequenceInputStream0.read(byteArray0, (int) (byte) (-1), 3757);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.Done();
      javaCharStream0.available = 1010;
      javaCharStream0.ReInit((InputStream) sequenceInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
      
      int int1 = JavaCharStream.hexval('b');
      assertEquals(11, int1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2954252443770047
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JavaCharStream.hexval('6');
      CharBuffer.wrap((CharSequence) "#4W5%05 q~v&", (int) (byte)0, 0);
      StringReader stringReader0 = new StringReader("#4W5%05 q~v&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.adjustBeginLineColumn(76, 76);
      javaCharStream0.readChar();
      javaCharStream0.getBeginLine();
      javaCharStream0.backup((byte)0);
      javaCharStream0.getEndColumn();
      javaCharStream0.GetSuffix(73);
      javaCharStream0.UpdateLineColumn('#');
      assertEquals(0, javaCharStream0.bufpos);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.5650443346269556
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = (-1972);
      byte[] byteArray0 = new byte[1];
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      int int1 = (-1);
      sequenceInputStream0.read(byteArray0, 89, 10);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream2);
      javaCharStream0.Done();
      javaCharStream0.ReInit((InputStream) sequenceInputStream0);
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0, (-1972), (int) (byte) (-14));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m`T");
      StringReader stringReader1 = new StringReader("m`T");
      stringReader1.skip(0);
      int int0 = JavaCharStream.hexval('A');
      assertEquals(10, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 3293;
      javaCharStream0.column = 0;
      int int1 = 2550;
      // Undeclared exception!
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.819528603834425
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.read(byteArray0, 1, 4);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream1);
      javaCharStream1.Done();
      Enumeration<BufferedInputStream> enumeration2 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      javaCharStream0.ReInit((InputStream) sequenceInputStream2);
      JavaCharStream.hexval('F');
      StringReader stringReader0 = new StringReader("]+tg.");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      javaCharStream2.GetImage();
      // Undeclared exception!
      try { 
        javaCharStream1.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char char0 = '5';
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^o");
      StringReader stringReader0 = new StringReader("^o");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.GetImage();
      javaCharStream0.ReInit((Reader) stringReader0, 96, (-1418), 0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9092335993725373
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-853), (-853));
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      stringReader0.ready();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.backup((-170));
      stringReader0.read();
      javaCharStream0.UpdateLineColumn('J');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      javaCharStream0.getLine();
      javaCharStream0.adjustBeginLineColumn((-1720), (-853));
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681098
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",Vi%sK:3GBT");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.ready();
      char[] charArray0 = new char[0];
      javaCharStream0.buffer = charArray0;
      javaCharStream0.backup(0);
      stringReader0.read();
      javaCharStream0.getLine();
      javaCharStream0.adjustBeginLineColumn((-1228), 86);
      assertEquals(86, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9960309859581935
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.ReInit((Reader) stringReader0, 988, 2923);
      javaCharStream0.readChar();
      javaCharStream0.getColumn();
      char char0 = javaCharStream0.ReadByte();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('7', char0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m?T");
      StringReader stringReader1 = new StringReader("Ng+9");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-14);
      sequenceInputStream0.read(byteArray0, 4056, (-1811));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.read(byteArray0, (int) (byte) (-4), (int) (byte) (-4));
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.Done();
      javaCharStream0.ReInit((InputStream) sequenceInputStream0);
      sequenceInputStream0.read();
      javaCharStream0.ReInit((InputStream) sequenceInputStream1, 93, (int) (byte) (-37), 83);
      javaCharStream0.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.019814992492946
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      String string0 = "k7d=\\ts]e";
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      int int0 = (-1972);
      sequenceInputStream0.read(byteArray0, (-1972), (int) (byte) (-14));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1972), (byte) (-14));
      javaCharStream0.ReInit((Reader) null, (-1972), 77);
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7007479891081367
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharBuffer.allocate(10);
      StringReader stringReader0 = new StringReader("-0bx2cGhfv%,=r|/p@");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 10, 4092);
      javaCharStream0.adjustBeginLineColumn((-1605), (-1605));
      javaCharStream0.getBeginColumn();
      javaCharStream0.BeginToken();
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(stringReader0, 0, 4092, (-1836));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char char0 = 'e';
      JavaCharStream.hexval('e');
      CharBuffer charBuffer0 = CharBuffer.allocate(701);
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charBuffer0.put(charArray0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, 1091, (-283));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1786549963416462
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",Vi%sK:3GBT");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.ready();
      char[] charArray0 = new char[0];
      javaCharStream0.buffer = charArray0;
      javaCharStream0.backup(0);
      stringReader0.read();
      stringReader0.close();
      javaCharStream0.UpdateLineColumn(']');
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix(86);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0, (-1972), (int) (byte) (-14));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.skip(1L);
      sequenceInputStream2.read(byteArray0, 2048, (-1));
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 97, 2048, 2538);
      javaCharStream0.backup((byte) (-14));
      javaCharStream0.GetSuffix(0);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("9");
      StringReader stringReader2 = new StringReader("%/V%O#ny");
      StringReader stringReader3 = new StringReader("cYP~o\"3;o2NoQo&1");
      stringReader3.mark(839);
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringReader1.reset();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader3, 80, (-1));
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o");
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0198149924929463
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",Vi%sK:3GBT");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.ready();
      char[] charArray0 = new char[0];
      javaCharStream0.buffer = charArray0;
      javaCharStream0.backup(0);
      stringReader0.read();
      javaCharStream0.ReadByte();
      javaCharStream0.getEndColumn();
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0889104102217066
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte byte0 = (byte)1;
      String string0 = "Ng+9";
      StringReader stringReader0 = new StringReader("Ng+9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-774), 1874, (byte)1);
      javaCharStream0.ReInit((Reader) stringReader0, 63, 63);
      javaCharStream0.readChar();
      int int0 = (-1484);
      javaCharStream0.ReadByte();
      javaCharStream0.getEndColumn();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackInputStream0);
      pushbackInputStream0.skip(493L);
      try { 
        javaCharStream1.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4154690333344857
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      byte[] byteArray0 = new byte[0];
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.Done();
      javaCharStream0.ReInit((Reader) stringReader0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m?T");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringReader stringReader1 = new StringReader("m?T");
      stringReader1.skip(0);
      stringReader1.read(charBuffer0);
      CharBuffer.allocate(0);
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.770337008819435
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0, (int) (byte)10, (int) (byte)0);
      sequenceInputStream0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      sequenceInputStream0.read(byteArray0, 0, 86);
      sequenceInputStream0.read(byteArray0, 1258, 86);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      javaCharStream1.Done();
      javaCharStream0.ReInit((InputStream) sequenceInputStream0);
      JavaCharStream.hexval('c');
      // Undeclared exception!
      try { 
        javaCharStream1.adjustBeginLineColumn((-1), 87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = '|';
      charArray0[2] = '\\';
      charArray0[3] = 'T';
      charArray0[4] = 'L';
      charArray0[5] = 'x';
      charArray0[6] = ';';
      charArray0[7] = 'q';
      StringReader stringReader1 = new StringReader(" column ");
      int int0 = JavaCharStream.hexval('f');
      assertEquals(15, int0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      javaCharStream0.getBeginLine();
      StringReader stringReader0 = new StringReader("");
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0, 147);
      javaCharStream0.getBeginLine();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^o");
      StringReader stringReader0 = new StringReader("^o");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.AdjustBuffSize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^o");
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("< rCke5m]3ys7J]1");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      javaCharStream0.FillBuff();
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals('<', char0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char char0 = '\\';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org@=IG{D\":!,HJ~");
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8121428103584718
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("9");
      StringReader stringReader2 = new StringReader("%/V%O#ny");
      boolean boolean0 = javaCharStream0.prevCharIsCR;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.backup(4086);
      stringReader0.read();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      javaCharStream0.getColumn();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringReader1.markSupported();
      javaCharStream0.GetImage();
      javaCharStream0.adjustBeginLineColumn(10, 398);
      javaCharStream0.GetImage();
      stringReader1.close();
      javaCharStream0.BeginToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 65, (-3881), 65);
      javaCharStream1.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream1.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.351783994289646
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      int[] intArray0 = new int[9];
      intArray0[1] = (-1);
      intArray0[2] = 3329;
      intArray0[3] = 4;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      int int0 = 0;
      intArray0[4] = 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)13;
      javaCharStream0.adjustBeginLineColumn(4050, 4097);
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null, 3329, (int) (byte)23, (int) (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.890362775338868
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 98, 98);
      char[] charArray0 = new char[27];
      charArray0[0] = 'b';
      charArray0[1] = '|';
      charArray0[15] = 'X';
      charArray0[3] = 'T';
      charArray0[4] = 'L';
      charArray0[5] = 'x';
      charArray0[6] = ';';
      charArray0[7] = 'q';
      charArray0[8] = 'q';
      stringReader0.read(charArray0);
      javaCharStream0.adjustBeginLineColumn(0, 0);
      javaCharStream0.getBeginColumn();
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.019814992492946
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-2316), (-2316), 12);
      javaCharStream0.Done();
      javaCharStream0.ReInit((Reader) null, 12, (-3884), 0);
      StringReader stringReader0 = new StringReader("]@0D7DPL%h__l>w<8");
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      int int0 = (-376);
      stringReader0.markSupported();
      stringReader0.ready();
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-376), (-376));
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JavaCharStream.hexval('0');
      CharBuffer charBuffer0 = CharBuffer.allocate(15);
      CharBuffer charBuffer1 = charBuffer0.append('G');
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer1, 1605, 65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringReader stringReader0 = new StringReader("-0bx2cGhfv%,=r|/p@");
      stringReader0.skip((-62L));
      stringReader0.ready();
      stringReader0.skip(10);
      stringReader0.mark(1652);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringReader0.read(charBuffer0);
      CharBuffer.allocate(8);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      char char0 = '@';
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 10, 64, 1652);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0262296229952907
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'9~Mbdy<Gild$774");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1744, 1744, 1744);
      javaCharStream0.bufsize = 1744;
      javaCharStream0.ReInit((Reader) stringReader0, (-1351), 0);
      javaCharStream0.readChar();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 457, 0);
      javaCharStream0.adjustBeginLineColumn((-1351), 0);
      int int0 = javaCharStream0.getBeginLine();
      assertEquals((-1349), int0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.897367567113771
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=qts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      stringReader0.mark((byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader1 = new StringReader(">?~m^wKikcf;<=3}5");
      stringReader1.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 55, (byte)0);
      javaCharStream0.readChar();
      javaCharStream0.AdjustBuffSize();
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('?', char0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7351264569629226
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      StringReader stringReader0 = new StringReader("-0bx2cGhfv%,=r|/p@");
      stringReader0.skip((-62L));
      stringReader0.read(charBuffer0);
      CharBuffer.allocate(10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1), (-1), (-1));
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-707), (-707));
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, (-707), 2325, (-193));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1801, 1801, 6439);
      StringReader stringReader0 = new StringReader("K}204");
      javaCharStream0.ReInit((Reader) stringReader0, 6439, 6439);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 4052, 4052, 75);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9701814400260844
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringReader stringReader0 = new StringReader("be8_n6f2v");
      sequenceInputStream0.skip(1874);
      StringReader stringReader1 = new StringReader("");
      stringReader1.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1664, 1874, 63);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 1874, (-3467));
      javaCharStream0.ReInit((Reader) stringReader1, 7, (int) (byte)1);
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/-OX~VZ)4m_5X<iA");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 59, 590);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 59, 96);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1077);
      pipedOutputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      javaCharStream0.GetImage();
      javaCharStream0.GetSuffix(0);
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2175, (-1073));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, 5358);
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m?T");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      stringReader0.read(charBuffer0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 10, 0, 1848);
      javaCharStream0.GetImage();
      javaCharStream0.prevCharIsCR = true;
      javaCharStream0.GetSuffix(368);
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, (-35), 234);
      javaCharStream0.ReInit((InputStream) bufferedInputStream0, (-35), 234);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char char0 = '`';
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JavaCharStream.hexval('C');
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      CharBuffer charBuffer1 = charBuffer0.append('C');
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer1, (-4534), (-1398));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip(0L);
      sequenceInputStream0.markSupported();
      sequenceInputStream0.mark(0);
      int int0 = 1;
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 1, 1, 1);
      javaCharStream0.tokenBegin = (-57);
      sequenceInputStream0.markSupported();
      javaCharStream0.bufpos = 2133;
      javaCharStream0.backup(1);
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.7480215040807066
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^o");
      StringReader stringReader0 = new StringReader("i ~k\"pv]&sSjUO{N+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup((-2706));
      stringReader0.read();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      javaCharStream0.getColumn();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaCharStream0.GetImage();
      javaCharStream0.adjustBeginLineColumn(6, (-2706));
      javaCharStream0.GetImage();
      stringReader0.close();
      StringReader stringReader1 = new StringReader("");
      stringReader0.close();
      javaCharStream0.ReInit((Reader) stringReader0);
      javaCharStream0.adjustBeginLineColumn(0, (-1235));
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('\'');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.22848084672669
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("k7d=qts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      sequenceInputStream1.close();
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = ';';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4, 4);
      javaCharStream0.adjustBeginLineColumn((byte)0, 203);
      javaCharStream0.getBeginColumn();
      javaCharStream0.BeginToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-3881), 77, 3);
      javaCharStream0.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream1.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.3066687254045313
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      sequenceInputStream0.read(byteArray0, 0, 86);
      sequenceInputStream0.read(byteArray0, 1258, 86);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.ReInit((Reader) stringReader0, (-1), 0);
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("");
      javaCharStream0.ReInit((Reader) stringReader2);
      javaCharStream0.ExpandBuff(false);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      javaCharStream0.adjustBeginLineColumn((byte) (-1), 1600);
      assertEquals(1600, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m?T");
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 81, 2626);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'f)8r/K98BoZ ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, 1, 1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 1, (int) (byte)1, (-1));
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.9633815843099565
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m?T");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringReader stringReader1 = new StringReader("m?T");
      stringReader1.skip(0);
      stringReader1.skip((-1L));
      stringReader1.read(charBuffer0);
      CharBuffer.allocate(0);
      StringReader stringReader2 = new StringReader("?Cc Zv%Bu]^m7");
      StringReader stringReader3 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 2650, (-2969));
      javaCharStream0.ReInit((Reader) stringReader0);
      javaCharStream0.ExpandBuff(false);
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('m', char0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.2424533248940002
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",Vi%sK:3GBT");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      MockFile mockFile0 = new MockFile("", "nP/t^WI$!rk-Bl#Sr");
      File file0 = MockFile.createTempFile("nP/t^WI$!rk-Bl#Sr", ",Vi%sK:3GBT", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      javaCharStream0.ReInit((InputStream) bufferedInputStream0, (-2463), 4085, 4081);
      javaCharStream0.ReInit((Reader) stringReader0, 4081, 4085, 4081);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m?T");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringReader stringReader1 = new StringReader("m?T");
      stringReader1.read(charBuffer0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 10, 0, 0);
      javaCharStream0.FillBuff();
      javaCharStream0.GetImage();
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix(162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.9999107727071171
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JavaCharStream.hexval('5');
      CharBuffer.allocate(5);
      StringReader stringReader0 = new StringReader("Tx9P");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("Invalid escape ch@racter at line ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("Tx9P", "", (File) mockFile1);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      javaCharStream0.backup(5);
      stringReader0.read();
      javaCharStream0.UpdateLineColumn('5');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      javaCharStream0.getLine();
      javaCharStream0.adjustBeginLineColumn(1, (-1));
      assertEquals(4090, javaCharStream0.bufpos);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.7540914213506924
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 7);
      boolean boolean0 = JavaCharStream.staticFlag;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.backup(0);
      stringReader0.read();
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      javaCharStream0.getColumn();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = javaCharStream0.GetImage();
      javaCharStream0.adjustBeginLineColumn(7, 68);
      javaCharStream0.GetImage();
      stringReader0.close();
      StringReader stringReader1 = new StringReader(string0);
      stringReader1.close();
      javaCharStream0.ReInit((Reader) stringReader1);
      javaCharStream0.getBeginColumn();
      javaCharStream0.adjustBeginLineColumn(0, 67);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('\'');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4402347497045995
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      String string0 = "k7d=\\ts]e";
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte byte0 = (byte) (-41);
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      sequenceInputStream1.close();
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-41);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-41), (byte) (-41));
      javaCharStream0.readChar();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "k7d=\ts]e", 0, (-1900));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int0 = 1077;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1077);
      pipedOutputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      bufferedInputStream0.skip(1932L);
      javaCharStream0.GetImage();
      byte[] byteArray0 = new byte[0];
      bufferedInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 'Y';
      charArray0[2] = '$';
      charArray0[3] = 'G';
      charArray0[4] = 'U';
      charArray0[5] = ')';
      charArray0[6] = 'V';
      charArray0[7] = 'h';
      charArray0[8] = 'P';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(2198);
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1572);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 8, 8);
      javaCharStream0.ExpandBuff(false);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ya4@Cp'vuogJ;}5nLS");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 44, (-3462));
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0, (-4235), (-3462));
      char char0 = javaCharStream0.ReadByte();
      assertEquals('y', char0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^o");
      StringReader stringReader0 = new StringReader("^o");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals('', char0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 1, 1, (-605));
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      int int0 = 4;
      sequenceInputStream1.read(byteArray0, 1, 4);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream1);
      javaCharStream1.Done();
      Enumeration<BufferedInputStream> enumeration2 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      javaCharStream0.ReInit((InputStream) sequenceInputStream2);
      char char0 = ';';
      // Undeclared exception!
      try { 
        javaCharStream1.getEndColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.1738965505262752
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 98, 98);
      char[] charArray0 = new char[27];
      charArray0[0] = 'b';
      charArray0[1] = '|';
      charArray0[15] = '\\';
      charArray0[3] = 'T';
      charArray0[4] = 'L';
      charArray0[5] = 'x';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[6] = ';';
      charArray0[7] = 'q';
      try { 
        JavaCharStream.hexval('x');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("k7d=\ts]e");
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.Done();
      javaCharStream0.ReInit((Reader) stringReader0, (int) (byte)10, (int) (byte)10, (int) (byte)10);
      javaCharStream0.Done();
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)10);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, (-2315), (int) (byte)10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
