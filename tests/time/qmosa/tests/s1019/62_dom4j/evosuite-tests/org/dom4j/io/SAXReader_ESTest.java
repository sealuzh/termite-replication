/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:33:53 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.786100866302153
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getDispatchHandler();
      SAXReader sAXReader1 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader1.setXMLFilter(xMLFilterImpl1);
      sAXReader1.installXMLFilter(xMLFilterImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("//tmp/org.dom4j.util.NonLazyElement0]@z");
      try { 
        sAXReader1.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.489282127000795
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createXMLReader();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("LGfXrH\";T LJ1}-@/");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("*K7R@KJP|ZL{Xd=LD,", "Dl36Alcvz6&>");
      defaultHandler0.resolveEntity("*K7R@KJP|ZL{Xd=LD,", "LGfXrH\";T LJ1}-@/");
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.removeHandler("LGfXrH\";T LJ1}-@/");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.getErrorHandler();
      sAXReader0.isStringInternEnabled();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: LGfXrH\";T LJ1}-@/Dl36Alcvz6&> Nested exception: no protocol: LGfXrH\";T LJ1}-@/Dl36Alcvz6&>
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.218655583840207
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      byte[] byteArray0 = new byte[7];
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)112;
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("LGfXrH\";T LJ1}-@/", "a>6Yr");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXParseException sAXParseException0 = new SAXParseException("", "", "", (byte)0, (-380));
      String string0 = "//tmp/org.dom4j.util.NonLazyElement0]@z";
      try { 
        sAXReader0.setProperty("hv30Qj<M{7pC", "");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'hv30Qj<M{7pC' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3790384234819824
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.setEncoding("vBj4PL}%=^9vZK");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)67;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("\"E8Ywk^_7].3");
      String string0 = null;
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.getXMLFilter();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      sAXReader1.setFeature("http://xml.org/sax/features/namespaces", false);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      xMLReaderAdapter0.setDocumentHandler(parserAdapter0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      locator2Impl0.setColumnNumber(6);
      locatorImpl1.getColumnNumber();
      xMLFilterImpl0.getParent();
      locatorImpl1.setSystemId("Invalid XPath expression: ");
      parserAdapter0.setEntityResolver(xMLFilterImpl0);
      xMLReaderAdapter0.setDocumentLocator(locator2Impl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.endPrefixMapping("//tmp/:,>48/|}W9A0:,>48/|}W9A");
      sAXReader0.installXMLFilter(parserAdapter0);
      defaultHandler0.skippedEntity("");
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.574729047527649
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "Uph";
      StringReader stringReader0 = new StringReader("Uph");
      try { 
        sAXReader0.read((Reader) stringReader0, "Uph");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q1pgyH+");
      stringReader0.ready();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, (DefaultHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3671774230734823
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/";
      stringArray0[1] = "/";
      stringArray0[2] = "org.dom4j.io.SAXModifException";
      stringArray0[3] = "4gND}}=-";
      dispatchHandler0.getHandler("%");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 0);
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      dispatchHandler0.addHandler("/", dispatchHandler1);
      dispatchHandler0.getHandler("5cO0x{+");
      sAXReader0.addHandler("/", (ElementHandler) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputSource inputSource0 = new InputSource("/");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = 'v';
      charArray0[2] = '<';
      charArray0[3] = 'a';
      charArray0[4] = 'U';
      charArray0[5] = '\\';
      charArray0[6] = 'V';
      charArray0[7] = 't';
      charArray0[8] = '4';
      xMLFilterImpl0.characters(charArray0, (-3432), (-3432));
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(boolean0);
      
      sAXReader0.getXMLReader();
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4687400132753323
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setEncoding("^y?wpN");
      sAXReader0.getDispatchHandler();
      sAXReader0.getEntityResolver();
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getXMLReader();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 15, (byte)19);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "0jqDLG");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"^Y?WPN\". Nested exception: Invalid encoding name \"^Y?WPN\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLReader xMLReader0 = null;
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      String string0 = ":,>48/|}W9A";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler(":,>48/|}W9A");
      pipedInputStream0.skip(0L);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream1, pipedInputStream0);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream2);
      try { 
        sAXReader0.read((InputStream) pipedInputStream1, "3l3VGB/3@O`en?+e");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.68644405381145
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      sAXReader0.createDefaultEntityResolver(":,>48/|}W9A");
      assertTrue(sAXReader0.isStringInternEnabled());
      
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.getErrorHandler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/:,>48/|}W9A0:,>48");
      FileSystemHandling.createFolder(evoSuiteFile0);
      sAXReader0.resetHandlers();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "//tmp/:,>48/|}W9A0:,>48/|}W9A");
      MockFile.createTempFile(":,>48/|}W9A", ":,>48/|}W9A");
      sAXReader0.isMergeAdjacentText();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.dom4j.io.SAXModifyException";
      stringArray0[3] = "4gND}}=-";
      dispatchHandler0.getHandler("");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 9);
      pruningElementStack0.getDispatchHandler();
      dispatchHandler0.addHandler("", (ElementHandler) null);
      dispatchHandler0.getHandler("5cO0x{+");
      sAXReader0.addHandler("", (ElementHandler) null);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      boolean boolean1 = sAXReader0.isMergeAdjacentText();
      assertFalse(boolean1);
      
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader0.getErrorHandler();
      boolean boolean2 = sAXReader0.isStringInternEnabled();
      assertFalse(boolean2 == boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(boolean2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      sAXReader0.getErrorHandler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/:,>48/|}W9A0:,>48");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile.createTempFile(":,>48/|}W9A", ":,>48/|}W9A");
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.isMergeAdjacentText();
      sAXReader0.isMergeAdjacentText();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@17a69c3c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      String string0 = null;
      xMLFilterImpl1.endElement((String) null, (String) null, (String) null);
      SAXReader sAXReader1 = new SAXReader((String) null, false);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2637804311525747
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      String string0 = ":,>48/|}W9A";
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile(":,>48/|}W9A", ":,>48/|}W9A");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5709195237181253
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.createContentHandler(xMLReader0);
      SAXReader sAXReader1 = new SAXReader(xMLReader0, true);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertNotNull(documentFactory0);
      
      sAXReader1.createDefaultEntityResolver(":,>48/|}W9A");
      sAXReader1.setXMLReader(xMLReader0);
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader1.isValidating());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.42212525194659
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      String string0 = "LGfXrH\";T LJ1}-@/";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("LGfXrH\";T LJ1}-@/");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("LGfXrH\";T LJ1}-@/", "LGfXrH\";T LJ1}-@/");
      SAXParseException sAXParseException0 = new SAXParseException("cuA\"6T3+Q", "A/`Z,", "cuA\"6T3+Q", 1121, 350);
      Object object0 = new Object();
      SAXParseException sAXParseException1 = new SAXParseException(">l", (Locator) null);
      try { 
        sAXReader0.setProperty("A/`Z,", sAXParseException1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'A/`Z,' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.751120856085606
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      SAXReader sAXReader1 = new SAXReader(false);
      sAXReader0.setStringInternEnabled(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.util.NonLazyElement");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.util.NonLazyElement", "http://xml.org/sax/properties/declaration-handler");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader1.setDocumentFactory((DocumentFactory) null);
      sAXReader_SAXEntityResolver0.resolveEntity("", "org.dom4j.util.NonLazyElement");
      SAXParseException sAXParseException0 = new SAXParseException("org.dom4j.util.NonLazyElement", "//tmp/:,>48/|}W9A0:,>48/|}W9A", "http://xml.org/sax/properties/declaration-handler", 0, 39);
      sAXReader1.installXMLFilter((XMLReader) null);
      String string0 = "//tmp/:,>48/|}W9A0:,>48/|}W9A";
      Object object0 = new Object();
      try { 
        sAXReader1.setProperty("org.dom4j.util.NonLazyElement", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'org.dom4j.util.NonLazyElement' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.583437541968916
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("file://");
      String string0 = "9,;";
      sAXReader_SAXEntityResolver0.uriPrefix = "f^2";
      sAXReader_SAXEntityResolver0.resolveEntity("^=}", "file://");
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.setStringInternEnabled(true);
      sAXReader_SAXEntityResolver0.resolveEntity("file://", "org.dom4j.util.NonLazyElement");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      sAXReader_SAXEntityResolver0.resolveEntity("9,;", "");
      sAXReader0.setValidation(false);
      sAXReader0.setIgnoreComments(false);
      try { 
        sAXReader0.setFeature("org.dom4j.util.NonLazyElement", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'org.dom4j.util.NonLazyElement' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.getXMLFilter();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.366660627207849
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLReader xMLReader0 = null;
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      String string0 = ":,>48/|}W9A";
      sAXReader0.getErrorHandler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/:,>48/|}W9A0:,>48");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = MockFile.createTempFile(":,>48/|}W9A", ":,>48/|}W9A");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Simulated IOException Nested exception: Simulated IOException
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<EY6e+");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.isIgnoreComments();
      sAXReader0.isStripWhitespaceText();
      String string0 = "X+|h";
      String string1 = null;
      // Undeclared exception!
      try { 
        MockURL.URL("X+|h", "<EY6e+", 0, (String) null, (URLStreamHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4208121818995942
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setEntityResolver(handlerBase0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)112;
      sAXReader0.setStripWhitespaceText(false);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-26);
      dispatchHandler0.removeHandler("");
      dispatchHandler0.addHandler("", (ElementHandler) null);
      dispatchHandler0.getHandler("");
      sAXReader0.addHandler("5cO0x{+", dispatchHandler0);
      sAXReader0.isIncludeExternalDTDDeclarations();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputSource inputSource0 = new InputSource(pipedInputStream0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5381861691868464
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader((String) null);
          sAXReader0.getXMLFilter();
          SAXReader sAXReader1 = new SAXReader((XMLReader) null);
          sAXReader0.installXMLFilter((XMLReader) null);
          sAXReader0.setXMLFilter((XMLFilter) null);
          sAXReader0.setEncoding(" ~Lk5d\"LTo");
          sAXReader1.setIncludeExternalDTDDeclarations(true);
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.583102572856648
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader((String) null);
          sAXReader0.getXMLFilter();
          SAXReader sAXReader1 = new SAXReader((XMLReader) null);
          DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
          dispatchHandler0.removeHandler((String) null);
          dispatchHandler0.setDefaultHandler((ElementHandler) null);
          PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
          pruningDispatchHandler0.setDefaultHandler((ElementHandler) null);
          dispatchHandler0.removeHandler((String) null);
          DispatchHandler dispatchHandler1 = new DispatchHandler();
          sAXReader1.setDefaultHandler(dispatchHandler1);
          DefaultHandler defaultHandler0 = new DefaultHandler();
          defaultHandler0.unparsedEntityDecl("1", "w9?I!zv", "w9?I!zv", "&");
          sAXReader0.setErrorHandler(defaultHandler0);
          sAXReader0.setIncludeExternalDTDDeclarations(false);
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3895530195104047
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = ":,>48/|}W9A";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler(":,>48/|}W9A");
      pipedInputStream0.skip(0L);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream1, pipedInputStream0);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream2);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sAXReader0.isValidating();
      MockFile mockFile0 = new MockFile((String) null, "z[5Rmuo");
      MockFile mockFile1 = new MockFile(mockFile0, ":,>48/|}W9A");
      try { 
        sAXReader0.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getDispatchHandler();
      String string0 = "org.dom4j.io.SAXModifyException";
      documentFactory0.createDocument();
      SAXParseException sAXParseException0 = new SAXParseException("i5%$hLv')x3M~rQD;@", "", "org.dom4j.io.DispatchHandler", (-53), 144);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QName qName0 = QName.get("l:lRZ>", (Namespace) null, "//tmp/}cuxaT0}cuxaT");
      qName0.getDocumentFactory();
      qName0.setDocumentFactory((DocumentFactory) null);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      try { 
        sAXReader0.setFeature("l:lRZ>", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'l:lRZ>' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.405936544833819
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.getEncoding();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("M*bzWX)P<", "org.dom4j.util.SimpleSingleton", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile1);
      String string1 = "FnV|]\\H3";
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "FnV|]H3");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@7b177e01 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@7b177e01 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "org.dom4j.io.SAXModifyException";
      stringArray0[3] = "4gND}}=-";
      stringArray0[4] = "";
      dispatchHandler0.getHandler("");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 0);
      dispatchHandler0.removeHandler("org.w3c.dom.Node");
      sAXReader0.addHandler("", dispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader1 = new SAXReader(parserAdapter0, false);
      sAXReader1.setDefaultHandler(dispatchHandler0);
      try { 
        sAXReader1.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace("--cT5rwr9h7=]'%~R2", "--cT5rwr9h7=]'%~R2");
      QName qName0 = defaultDocumentFactory0.createQName("\n  ", namespace0);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      qName0.equals(documentFactory0);
      qName0.setDocumentFactory(defaultDocumentFactory0);
      SAXParseException sAXParseException0 = new SAXParseException("<;>'i1*\"G\"Ph$4Lcj%", (Locator) null);
      qName0.equals(sAXParseException0);
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.resetHandlers();
      sAXReader0.setEncoding("--cT5rwr9h7=]'%~R2");
      sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.createContentHandler(xMLReader0);
      String string0 = "!}+(F2\"puw,?go[G";
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXParseException sAXParseException0 = new SAXParseException("org.dom4j.dom.DOMProcessingInstruction", "NbaO<aSk1]v9^", "org.dom4j.IllegalAddException", (-2019), 1396);
      try { 
        sAXReader0.setProperty("jk(?p8vb\"P^", "!}+(F2\"puw,?go[G");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'jk(?p8vb\"P^' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      SAXReader sAXReader1 = new SAXReader(xMLReader0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader1.installXMLFilter(xMLReader0);
      try { 
        sAXReader1.setFeature("the size: ", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'the size: ' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.462901963697835
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.getEntityResolver();
      sAXReader0.getEntityResolver();
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.setEntityResolver(sAXContentHandler0);
      sAXReader0.getErrorHandler();
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.getXMLReader();
      try { 
        sAXReader0.read("gHLeJ;_!zh");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/gHLeJ;_!zh (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/gHLeJ;_!zh (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.getEntityResolver();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = "ANY_NODE";
      SAXParseException sAXParseException0 = new SAXParseException((String) null, "Error on line ", "", (-498), 47);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, xMLReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.391772851204174
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)112;
      sAXReader0.setStripWhitespaceText(false);
      byteArray0[4] = (byte)0;
      dispatchHandler0.removeHandler("");
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.414091653059997
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/";
      stringArray0[1] = "/";
      stringArray0[2] = "org.dom4j.io.SAXModifException";
      stringArray0[3] = "4gND}}=-";
      dispatchHandler0.getHandler("");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 0);
      pruningElementStack0.getDispatchHandler();
      dispatchHandler0.addHandler("/", (ElementHandler) null);
      dispatchHandler0.getHandler("5cO0x{+");
      sAXReader0.addHandler("/", (ElementHandler) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputSource inputSource0 = new InputSource(pipedInputStream0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("http://xml.org/sax/properties/declaration-handler");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "4gND}}=-";
      stringArray0[4] = "";
      dispatchHandler0.getHandler("");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 0);
      pruningElementStack0.getDispatchHandler();
      dispatchHandler0.addHandler("", (ElementHandler) null);
      dispatchHandler0.getHandler("5cO0x{+");
      sAXReader0.addHandler("", (ElementHandler) null);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean1 = sAXReader0.isMergeAdjacentText();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader0.getErrorHandler();
      boolean boolean2 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean2 == boolean1);
      assertTrue(sAXReader0.isValidating());
      assertTrue(boolean2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "/";
      stringArray0[2] = "org.dom4j.io.SAXModifException";
      stringArray0[3] = "4gND}}=-";
      stringArray0[4] = "/";
      dispatchHandler0.getHandler("");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 0);
      pruningElementStack0.getDispatchHandler();
      dispatchHandler0.removeHandler("org.dom4j.io.SAXModifException");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("4gND}}=-");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      String string0 = "";
      sAXReader0.getDispatchHandler();
      String string1 = "org.dom4j.io.SAXModifyException";
      String string2 = "g,sM!)1Gh2^^RlLqX1";
      try { 
        sAXReader0.read("g,sM!)1Gh2^^RlLqX1");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: g,sM!)1Gh2^^RlLqX1 Nested exception: no protocol: g,sM!)1Gh2^^RlLqX1
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)112;
      sAXReader0.setStripWhitespaceText(false);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-26);
      sAXReader0.setStripWhitespaceText(false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setXMLReader(xMLReader0);
      InputStream inputStream0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler((String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.getXMLReader();
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("http://xml.org/sax/features/string-interning");
      assertTrue(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.createContentHandler(xMLReader0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      locator2Impl1.setPublicId("NbaO<aSk1]v9^");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.setDocumentLocator(locator2Impl0);
      sAXReader0.createDefaultEntityResolver("NbaO<aSk1]v9^");
      sAXReader0.setXMLReader(xMLFilterImpl0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q1pgyH+");
      stringReader0.ready();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/}cuxaT0}cuxaT");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document //tmp/}cuxaT0}cuxaT : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = new InputSource("Dl36Alcvz6&>");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/}cuxaT0}cuxaT", "");
      SAXParseException sAXParseException0 = new SAXParseException("", "#cdata-section", "2fLhevNE4y)#|F8at*", 47, 35);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      try { 
        xMLReaderAdapter0.parse("Dl36Alcvz6&>");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4241956453213316
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("file://");
      sAXReader_SAXEntityResolver0.uriPrefix = "f^2";
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.setStringInternEnabled(true);
      sAXReader_SAXEntityResolver0.resolveEntity("file://", "org.dom4j.util.NonLazyElement");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      sAXReader_SAXEntityResolver0.resolveEntity("9,;", "");
      SAXParseException sAXParseException0 = new SAXParseException("f^2", "", "~t9XUx9\"a((7`", 14, 0);
      String string0 = "//tmp/org.dom4j.util.NonLazyElement0]@z";
      try { 
        sAXReader0.setProperty("//tmp/org.dom4j.util.NonLazyElement0]@z", "//tmp/:,>48/|}W9A0:,>48/|}W9A");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '//tmp/org.dom4j.util.NonLazyElement0]@z' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.471853918106659
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLReader xMLReader0 = null;
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      sAXReader0.getErrorHandler();
      sAXReader0.setStringInternEnabled(false);
      String string0 = "";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setValidation(true);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.221751559072405
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createXMLReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("LGfXrH\";T LJ1}-@/");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "org.dom4j.io.SAXReader");
      String string0 = "#g+N";
      SAXParseException sAXParseException0 = new SAXParseException("AMDn0?\"}Nx4ki", (String) null, "#g+N", 47, 47);
      try { 
        sAXReader0.setProperty("H.e{`\"7>P=$rmX", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'H.e{`\"7>P=$rmX' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "<sGI,G%+";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("<sGI,G%+");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class <sGI,G%+ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      String string0 = " [";
      SAXReader sAXReader1 = new SAXReader(xMLReader0);
      try { 
        sAXReader1.setXMLReaderClassName(" [");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  [ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXParseException sAXParseException0 = new SAXParseException("org.dom4j.dom.DOMProcessingInstruction", "NbaO<aSk1]v9^", "org.dom4j.IllegalAddException", (-2019), 1396);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("jk(?p8vb\"P^", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class jk(?p8vb\"P^ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nQHEw3 MBzTf78");
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      sAXReader1.getXMLFilter();
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("Q1pgyH+");
      stringReader0.ready();
      try { 
        sAXReader0.read((Reader) stringReader0, "Q1pgyH+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/Q1pgyH+ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)113;
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locatorImpl1.getLineNumber();
      SAXParseException sAXParseException0 = new SAXParseException("java.util.concurrent.ConcurrentHashMap", locatorImpl1);
      xMLFilterImpl0.fatalError(sAXParseException0);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", true);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }
}
