/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:23:05 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3094376774882805
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setLineSeparator("AAISFrd;i1");
      outputFormat0.setIndent("Fo0g;i");
      outputFormat0.setOmitEncoding(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Fo0g;i";
      stringArray0[1] = "-padText";
      stringArray0[2] = "-padText";
      stringArray0[3] = "Fo0g;i";
      stringArray0[4] = "u1ovEs";
      stringArray0[5] = "-padText";
      stringArray0[6] = "Fo0g;i";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("AAISFrd;i1", outputFormat0.getLineSeparator());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setOmitEncoding(false);
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat1.setAttributeQuoteCharacter('\"');
      assertFalse(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&[.d)P{W,+-gx4A6Y");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("&[.d)P{W,+-gx4A6Y");
      outputFormat0.setIndent("-omitEncoding");
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-omitEncoding";
      outputFormat0.parseOptions(stringArray0, 0);
      OutputFormat.createCompactFormat();
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("-omitEncoding", outputFormat0.getIndent());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9530768015417137
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat("H;K};8zla", true, "-trimText");
      outputFormat1.setTrimText(false);
      outputFormat1.setIndent(true);
      outputFormat1.setTrimText(true);
      outputFormat1.setOmitEncoding(true);
      outputFormat1.setEncoding("H;K};8zla");
      outputFormat1.setPadText(true);
      outputFormat0.setIndent("-indentSize");
      outputFormat1.setPadText(false);
      OutputFormat outputFormat2 = new OutputFormat("", true, "");
      outputFormat2.setTrimText(true);
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.isPadText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "";
      stringArray0[3] = "-indentSize";
      stringArray0[4] = "-indentSize";
      stringArray0[5] = "H;K};8zla";
      stringArray0[6] = "H;K};8zla";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-indentSize\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.735312793413351
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("BnA@sQ5/jsM5+-g");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags(1575);
      outputFormat1.setNewLineAfterNTags(1059);
      outputFormat0.setEncoding("fh{,}hm7");
      outputFormat1.setPadText(true);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.getEncoding();
      outputFormat0.isExpandEmptyElements();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fh{,}hm7";
      outputFormat0.parseOptions(stringArray0, 1059);
      outputFormat1.getNewLineAfterNTags();
      outputFormat1.isExpandEmptyElements();
      outputFormat0.getEncoding();
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat0.getEncoding();
      assertEquals("fh{,}hm7", outputFormat0.getEncoding());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      int int0 = outputFormat2.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.346898755809349
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setLineSeparator("BnA@sQ5/jsM5+-g");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags(1575);
      outputFormat1.setNewLineAfterNTags(1235);
      outputFormat0.setEncoding("fh{,}hm7");
      outputFormat1.setPadText(true);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.getEncoding();
      outputFormat0.isExpandEmptyElements();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fh{,}hm7";
      outputFormat1.parseOptions(stringArray0, 1235);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.parseOptions(stringArray0, 1235);
      outputFormat1.setIndent("");
      assertEquals(1235, outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8706826278129531
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&[.d)P{W,+-gx4A6Y", false, "&[.d)P{W,+-gx4A6Y");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("&[.d)P{W,+-gx4A6Y");
      outputFormat0.setIndent("&[.d)P{W,+-gx4A6Y");
      outputFormat0.setIndent(true);
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-padText";
      stringArray0[1] = "u1oivEs";
      stringArray0[2] = "Ca\" m";
      stringArray0[3] = "-xhtmlAAISFrd;i1";
      stringArray0[4] = "ukY</>uy8<Ul!t8w`>";
      outputFormat0.setIndent("Axh0>{z/=OMi;F<XI");
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "Ca\" m";
      stringArray1[1] = "ukY</>uy8<Ul!t8w`>";
      outputFormat0.parseOptions(stringArray1, 1);
      outputFormat0.setIndent("u1oivEs");
      outputFormat0.setIndent("Axh0>{z/=OMi;F<XI");
      assertEquals("Axh0>{z/=OMi;F<XI", outputFormat0.getIndent());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      outputFormat0.getEncoding();
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3489061161305265
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&[.d)P{W,+-gx4A6Y", false, "");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("");
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setEncoding("");
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("");
      outputFormat0.setIndent(false);
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setXHTML(false);
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat1.setXHTML(false);
      outputFormat0.isSuppressDeclaration();
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      outputFormat1.getEncoding();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat2.getIndent());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.088123238410373
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("AAISFrd;i1", true, "AAISFrd;i1");
      outputFormat0.setTrimText(true);
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.setTrimText(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewlines(false);
      outputFormat0.setIndent(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setEncoding("AAISFrd;i1");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("AAISFrd;i1");
      outputFormat1.isPadText();
      outputFormat1.setNewLineAfterNTags(0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AAISFrd;i1";
      stringArray0[1] = "-indent";
      stringArray0[2] = "Z,eUg@G'";
      outputFormat0.parseOptions(stringArray0, 1);
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
      
      outputFormat1.isExpandEmptyElements();
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2878749590709533
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewlines(false);
      outputFormat0.setEncoding("");
      outputFormat0.setLineSeparator("Ed}cymsj nzX.");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewlines(false);
      outputFormat0.getIndent();
      outputFormat0.setSuppressDeclaration(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "";
      outputFormat0.parseOptions(stringArray0, 39);
      outputFormat0.isTrimText();
      outputFormat0.isPadText();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('c');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (c)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1102542329415295
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setPadText(false);
      outputFormat1.setSuppressDeclaration(false);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat2.isExpandEmptyElements();
      outputFormat0.setTrimText(false);
      OutputFormat.createPrettyPrint();
      outputFormat1.setEncoding("");
      outputFormat0.setPadText(false);
      outputFormat0.setEncoding("#a%.yjUPrDw$zaL?");
      assertEquals("#a%.yjUPrDw$zaL?", outputFormat0.getEncoding());
      
      outputFormat0.setEncoding("UTF-8");
      outputFormat1.isNewLineAfterDeclaration();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat3.isSuppressDeclaration());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty1|`$3zjNv", false, "-expandEmpty1|`$3zjNv");
      outputFormat0.setTrimText(true);
      outputFormat0.setIndent(true);
      outputFormat0.setTrimText(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setEncoding("|qU");
      outputFormat0.setTrimText(true);
      outputFormat0.setPadText(true);
      outputFormat0.setPadText(true);
      outputFormat0.setTrimText(false);
      outputFormat0.isPadText();
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&[.d)P{W,+-gx4A6Y", true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.703448290226065
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&[.d)P{W,+-gx4A6Y", false, "");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("");
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setEncoding("");
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("");
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setTrimText(false);
      outputFormat0.isPadText();
      outputFormat0.setNewLineAfterNTags(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&[.d)P{W,+-gx4A6Y";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getEncoding();
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = new OutputFormat("-xhtml", true, "1|`$3zjNv");
      outputFormat1.setNewlines(true);
      outputFormat0.setTrimText(true);
      outputFormat1.setIndent(true);
      outputFormat0.parseOptions(stringArray0, 87);
      outputFormat0.getIndent();
      char char0 = '@';
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (@)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5053262207700677
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-xhtmlAIFrd;i1";
      stringArray0[1] = "Ca\" m";
      stringArray0[2] = "-xhtmlAIFrd;i1";
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("Ca\" m");
      outputFormat0.setPadText(true);
      outputFormat0.setTrimText(true);
      outputFormat0.isPadText();
      outputFormat0.setIndent("-xhtmlAIFrd;i1");
      assertEquals("-xhtmlAIFrd;i1", outputFormat0.getIndent());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      outputFormat0.setNewLineAfterNTags(0);
      stringArray0[2] = "";
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setSuppressDeclaration(false);
      stringArray0[3] = "";
      stringArray0[4] = "M3n0*P6";
      stringArray0[5] = "";
      outputFormat0.setPadText(true);
      stringArray0[6] = "";
      outputFormat0.setNewLineAfterDeclaration(false);
      stringArray0[7] = "";
      outputFormat0.setNewlines(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setEncoding("");
      outputFormat0.parseOptions(stringArray0, 3603);
      outputFormat0.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isNewlines();
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0293980059486403
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding");
      outputFormat0.setIndentSize(0);
      outputFormat0.setTrimText(true);
      OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(false);
      outputFormat0.setIndentSize(0);
      outputFormat0.isTrimText();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat1.getIndent();
      outputFormat0.isTrimText();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getEncoding();
      assertEquals("", outputFormat0.getIndent());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0385617635055233
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-xhtmlZAISFrd;i1";
      stringArray0[1] = "xa\" m";
      stringArray0[0] = "1|m`$3zjNv";
      stringArray0[3] = "MllA";
      stringArray0[5] = "FZ)d(cI";
      stringArray0[5] = "1|m`$3zjNv";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isPadText());
      assertEquals("  ", outputFormat0.getIndent());
      assertTrue(outputFormat0.isTrimText());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isXHTML());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4545398262671005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      outputFormat0.setNewLineAfterNTags(0);
      stringArray0[2] = "";
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setSuppressDeclaration(false);
      stringArray0[3] = "";
      stringArray0[4] = "M3n0*P6";
      stringArray0[5] = "";
      outputFormat0.setPadText(true);
      stringArray0[6] = "";
      outputFormat0.setNewLineAfterDeclaration(false);
      stringArray0[7] = "";
      outputFormat0.setNewlines(true);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.getIndent();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (@)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.008925238667177
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("NHd]G|", false, "");
      outputFormat0.isTrimText();
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NHd]G|";
      stringArray0[1] = "  ";
      outputFormat0.parseOptions(stringArray0, 1765);
      outputFormat0.setXHTML(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat0.isTrimText();
      outputFormat0.setXHTML(false);
      outputFormat1.setPadText(false);
      outputFormat0.isNewlines();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-839));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -839
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9421822974250196
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("QTDg'mnu@Xs");
      outputFormat0.setPadText(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setTrimText(true);
      outputFormat1.setSuppressDeclaration(false);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setOmitEncoding(false);
      assertTrue(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isPadText());
      
      outputFormat1.isTrimText();
      outputFormat1.setIndent("QTDg'mnu@Xs");
      assertTrue(outputFormat1.isTrimText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(false);
      boolean boolean0 = outputFormat0.isNewlines();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.449191882584089
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&[.d)P{W,+-gx4A6Y", false, "&[.d)P{W,+-gx4A6Y");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("&[.d)P{W,+-gx4A6Y");
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(true);
      outputFormat0.setPadText(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ($)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = false;
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, (String) null);
      outputFormat0.isXHTML();
      outputFormat0.setTrimText(false);
      outputFormat0.setXHTML(true);
      outputFormat0.setXHTML(true);
      outputFormat0.isXHTML();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      outputFormat0.setIndent(stringArray0[0]);
      stringArray0[1] = null;
      outputFormat0.setNewlines(true);
      stringArray0[2] = "";
      outputFormat0.setLineSeparator("");
      stringArray0[3] = "";
      stringArray0[4] = null;
      outputFormat0.setXHTML(true);
      stringArray0[5] = null;
      stringArray0[6] = "";
      outputFormat0.setEncoding("");
      outputFormat0.setXHTML(true);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&[.d)P{W,+-gx4A6Y", false, "9");
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setEncoding((String) null);
      outputFormat0.setPadText(false);
      outputFormat0.setPadText(false);
      outputFormat0.setTrimText(true);
      outputFormat0.isPadText();
      outputFormat0.setIndent("#$>B%X|B*HEmQPM]29c");
      assertTrue(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7377285573432877
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setIndent(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndent("J6z`|");
      outputFormat0.setIndent("]..?f`tSI4PW.Acs");
      assertEquals("]..?f`tSI4PW.Acs", outputFormat0.getIndent());
      
      outputFormat0.setIndent(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setTrimText(true);
      boolean boolean0 = outputFormat0.isXHTML();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("i&}ABuWIjk'WlrHZ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "i&}ABuWIjk'WlrHZ";
      stringArray0[1] = "i&}ABuWIjk'WlrHZ";
      stringArray0[2] = "i&}ABuWIjk'WlrHZ";
      stringArray0[3] = "BaI{ H";
      stringArray0[4] = "i&}ABuWIjk'WlrHZ";
      stringArray0[5] = "i&}ABuWIjk'WlrHZ";
      stringArray0[6] = "i&}ABuWIjk'WlrHZ";
      stringArray0[7] = "i&}ABuWIjk'WlrHZ";
      stringArray0[8] = "i&}ABuWIjk'WlrHZ";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1633598952));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1633598952
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5480936103537815
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "z)2h\"BgG3^k3urm";
      stringArray0[1] = "4{y2ZQN,8Rk2P";
      stringArray0[2] = "Q^0O";
      outputFormat0.setExpandEmptyElements(true);
      stringArray0[3] = "";
      stringArray0[4] = "+,MN#YaAz";
      stringArray0[5] = "U++/%A";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(false);
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      assertTrue(outputFormat0.isExpandEmptyElements());
      
      outputFormat1.isSuppressDeclaration();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.735759780235691
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("AAISFrd;i1", true, "AAISFrd;i1");
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setEncoding("AAISFrd;i1");
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AAISFrd;i1";
      stringArray0[1] = "AAISFrd;i1";
      stringArray0[2] = "U++/%A";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setSuppressDeclaration(false);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      assertTrue(outputFormat0.isPadText());
      
      outputFormat2.isSuppressDeclaration();
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat3.isNewlines());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (`)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty1|`$3zjNv");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ($)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty1|`$3zjNv", false, "-expandEmpty1|`$3zjNv");
      outputFormat0.setOmitEncoding(true);
      OutputFormat outputFormat1 = new OutputFormat("@UZ*DZ9j ", false);
      outputFormat1.setEncoding("@UZ*DZ9j ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-xhtml-xhtml";
      stringArray0[1] = "u1oivEs";
      outputFormat1.setIndentSize(208);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-271));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -271
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setNewLineAfterNTags(4151);
      outputFormat0.setXHTML(false);
      outputFormat0.setLineSeparator("o'k+");
      assertEquals("o'k+", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4990104312963837
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-xhtmlAAISFrd;i1";
      outputFormat0.setIndent("-indentSize");
      stringArray0[1] = "Ca\" m";
      stringArray0[0] = "1|`$3zjNv";
      stringArray0[3] = "";
      String string0 = "FZ)\\d(cI";
      outputFormat0.setIndentSize((-1469594582));
      stringArray0[5] = "FZ)d(cI";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1634596545));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1634596545
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty1|`$3zjNv");
      outputFormat0.setNewLineAfterNTags((-1886364234));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmpty1|`$3zjNv";
      stringArray0[1] = "-expandEmpty1|`$3zjNv";
      stringArray0[2] = "-xhtml-xhtmlAIFrd;i1";
      stringArray0[3] = "-expandEmpty1|`$3zjNv";
      stringArray0[4] = "-expandEmpty1|`$3zjNv";
      stringArray0[5] = "-expandEmpty1|`$3zjNv";
      stringArray0[6] = ")";
      stringArray0[7] = "-expandEmpty1|`$3zjNv";
      stringArray0[8] = "-expandEmpty1|`$3zjNv";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-1886364234), int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.864366838339269
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-xhtmlAIFrd;i1";
      String string0 = "Ca\" m";
      stringArray0[1] = "Ca\" m";
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "-xhtmlAIFrd;i1";
      stringArray1[1] = "Ca\" m";
      stringArray1[2] = "-xhtmlAIFrd;i1";
      stringArray1[3] = "Ca\" m";
      int int0 = 526;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-1629298329));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1629298329
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1952296882816973
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      outputFormat0.setNewlines(true);
      outputFormat0.setXHTML(true);
      outputFormat0.getLineSeparator();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setExpandEmptyElements(false);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertTrue(boolean0);
      
      outputFormat0.isNewlines();
      OutputFormat outputFormat1 = new OutputFormat("", false, "");
      outputFormat1.setOmitEncoding(true);
      outputFormat1.getLineSeparator();
      outputFormat0.setExpandEmptyElements(false);
      OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat1.setNewLineAfterDeclaration(false);
      assertFalse(outputFormat1.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml");
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewlines(true);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      outputFormat0.setNewLineAfterDeclaration(true);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty1|`$3zjNv", false, "-expandEmpty1|`$3zjNv");
      outputFormat0.setTrimText(true);
      outputFormat0.setTrimText(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setEncoding("|qU");
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "|qU";
      stringArray0[1] = "-expandEmpty1|`$3zjNv";
      stringArray0[2] = "-expandEmpty1|`$3zjNv";
      stringArray0[3] = "-xhtml)";
      outputFormat0.parseOptions(stringArray0, 2045);
      outputFormat0.parseOptions(stringArray0, 2045);
      outputFormat0.getEncoding();
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "AAISFrd;i1";
      stringArray0[1] = "AAISFrd;i1";
      stringArray0[2] = "AAISFrd;i1";
      stringArray0[3] = "AAISFrd;i1";
      stringArray0[4] = "AAISFrd;i1";
      stringArray0[5] = "AAISFrd;i1";
      stringArray0[6] = "AAISFrd;i1";
      stringArray0[7] = "AAISFrd;i1";
      OutputFormat outputFormat0 = new OutputFormat("2WBA^{d3UTdoAc3(y;O", false);
      String string0 = outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", string0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("2WBA^{d3UTdoAc3(y;O", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.173934984280126
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty1|`$3zjNv", false, "-expandEmpty1|`$3zjNv");
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmpty1|`$3zjNv";
      stringArray0[1] = "-expandEmpty1|`$3zjNv";
      stringArray0[2] = "-expandEmpty1|`$3zjNv";
      stringArray0[3] = "-expandEmpty1|`$3zjNv";
      stringArray0[4] = "-expandEmpty1|`$3zjNv";
      stringArray0[5] = "-expandEmpty1|`$3zjNv";
      stringArray0[6] = "-expandEmpty1|`$3zjNv";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 755);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(755, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5068077022515487
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty1|`$3zjNv", false, "-expandEmpty1|`$3zjNv");
      outputFormat0.setIndent(false);
      outputFormat0.setTrimText(true);
      outputFormat0.setPadText(true);
      outputFormat0.setIndent(true);
      outputFormat0.setTrimText(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setEncoding("|qU");
      outputFormat0.setPadText(false);
      outputFormat0.setPadText(true);
      outputFormat0.setTrimText(true);
      outputFormat0.isPadText();
      outputFormat0.setIndent("|qU");
      assertEquals("|qU", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty1|`$3zjNv");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-expandEmpty1|`$3zjNv";
      stringArray0[2] = "-xhtml-xhtmlAIFrd;i1";
      stringArray0[3] = "-expandEmpty1|`$3zjNv";
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setPadText(true);
      OutputFormat outputFormat2 = new OutputFormat("nhMr`2+#");
      outputFormat2.setIndent("-xhtml-xhtmlAIFrd;i1");
      outputFormat1.setTrimText(true);
      outputFormat2.isPadText();
      outputFormat0.setIndent("-expandEmpty)");
      assertEquals("-expandEmpty)", outputFormat0.getIndent());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&[.d)P{W,+-gx4A6Y", false, "&[.d)P{W,+-gx4A6Y");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent((String) null);
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-padText";
      stringArray0[2] = "Ca\" m";
      stringArray0[3] = "FZ)d(cI";
      stringArray0[4] = "ukY</>uy8<Ul!w`>";
      stringArray0[5] = "Ca\" m";
      outputFormat0.setSuppressDeclaration(false);
      OutputFormat outputFormat1 = new OutputFormat("FZ)d(cI", false);
      outputFormat0.setSuppressDeclaration(false);
      OutputFormat outputFormat2 = new OutputFormat("Ca\" m", true, "-expandEmptyukY</>uy8<Ul!w`>");
      assertFalse(outputFormat2.isOmitEncoding());
      
      outputFormat2.setOmitEncoding(true);
      outputFormat2.setNewLineAfterDeclaration(true);
      assertTrue(outputFormat2.isOmitEncoding());
      
      outputFormat1.isSuppressDeclaration();
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
  }
}
