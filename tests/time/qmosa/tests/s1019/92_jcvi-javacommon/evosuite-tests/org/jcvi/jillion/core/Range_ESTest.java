/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:06:08 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.604619654336239
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(686L);
      range0.equals(range1);
      range1.intersects(range0);
      String string0 = ">#<67:";
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.of((-898L));
      // Undeclared exception!
      try { 
        range0.intersection(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -898 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.449474834565261
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of(2015L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.ofLength(65535L);
      range0.iterator();
      Long long0 = new Long(926L);
      Range.of((long) long0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4824366317352013
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range range0 = Range.of((-968L), 1987936L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-967L), long0);
      
      long long1 = range0.getLength();
      assertEquals(1988905L, long1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.280066553303607
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of((-66L), 3841L);
      range0.spliterator();
      range0.iterator();
      List<Range> list0 = range0.split(3841L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2462L), 9223372036853055344L);
      range0.startsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 1153L);
      range0.endsBefore(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5282199698544097
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(686L);
      range0.equals(range1);
      range1.intersects(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(">#<67:", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse >#<67: into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.046456381894883
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      range0.getEnd();
      Range range1 = Range.of(212L);
      Range range2 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-1029L), 211L);
      range3.startsBefore(range0);
      Range range4 = range0.intersection(range3);
      range4.isSubRangeOf(range3);
      range2.spliterator();
      range4.intersection(range0);
      range3.complement(range0);
      range4.intersects(range2);
      range1.split(212L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1876L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.455215963650512
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2222L, 9223372036854775807L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2222L, long0);
      
      Range range1 = Range.of(1L, 9223372036854775807L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.434186313670046
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(686L);
      range1.intersects(range0);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(">#<67:", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse >#<67: into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("offset must be >= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.offset must be >= 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.9636522107079983
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2055L, 32767L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = Range.ofLength(3841L);
      range0.spliterator();
      Range.Builder range_Builder2 = range_Builder0.shift(3841L);
      Range.Builder range_Builder3 = range_Builder1.contractBegin((-344L));
      range_Builder3.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder4 = range_Builder2.expandBegin(3260L);
      range_Builder3.copy();
      Range range1 = Range.of(range_CoordinateSystem0, (-66L), 80L);
      range0.isSubRangeOf(range1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1130L, 2055L);
      Range range3 = range0.asRange();
      Range range4 = range_Builder0.build();
      range3.getLength();
      range2.isSubRangeOf(range4);
      range3.asRange();
      Range.Builder range_Builder5 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder4.contractEnd(1950875L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.9956301992282697
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      range0.getEnd();
      Range range1 = Range.of(212L);
      Range range2 = Range.of((-547L));
      range0.isSubRangeOf(range1);
      range2.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.endsBefore(range0);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 212L, 330L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(range_CoordinateSystem1, (-2147483648L), 212L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.parseRange("[ 1 .. 212 ]/RB", range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range4.getEnd(range_CoordinateSystem3);
      Range range5 = range3.intersection(range4);
      assertFalse(range5.isEmpty());
      assertSame(range5, range0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.063182749596243
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(1588L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 1587 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(81L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(426L);
      Range range2 = Range.parseRange("[ 0 .. 1587 ]/0B");
      range1.endsBefore(range2);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(3841L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range_Builder2.copy();
      range2.startsBefore(range1);
      List<Range> list0 = range2.split(255L);
      assertEquals(7, list0.size());
      
      Range range3 = Range.of(138L, 2147483647L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range2.getEnd(range_CoordinateSystem1);
      assertSame(range2, range0);
      assertEquals(1587L, long0);
      
      boolean boolean0 = range1.intersects(range3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5295776651400446
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      long long0 = range0.getEnd();
      assertEquals(211L, long0);
      
      Range range1 = Range.of(212L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.ofLength(211L);
      Range.CoordinateSystem.values();
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(211L);
      range2.intersection(range3);
      assertTrue(range2.isEmpty());
      
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.contractEnd((-2313L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.568263454824555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(">#<67:", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse >#<67: into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7564912634467182
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1898L), (-107L));
      range1.getEnd();
      range1.startsBefore(range0);
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1898L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2380188789437025
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.of((-32786L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("+|W{xs)xR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.+|W{xs)xR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.971140930706464
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2055L, 32767L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = Range.ofLength(3841L);
      range0.spliterator();
      Range.Builder range_Builder2 = range_Builder0.shift(3841L);
      Range.Builder range_Builder3 = range_Builder1.contractBegin((-344L));
      range_Builder3.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder2.expandBegin(3260L);
      range_Builder3.copy();
      Range range1 = Range.of(range_CoordinateSystem0, (-66L), 80L);
      range_Builder0.expandEnd((-2084L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.Comparators.values();
      Range.Builder range_Builder4 = new Range.Builder(255L);
      range_Builder3.expandEnd((-66L));
      boolean boolean1 = range0.endsBefore(range0);
      assertFalse(boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem1);
      assertEquals((-65L), long0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.117819073067664
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      long long0 = range0.getEnd();
      assertEquals(211L, long0);
      
      Range range1 = Range.of(212L);
      Range range2 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isSubRangeOf(range3);
      Range range4 = Range.of((-1029L));
      boolean boolean0 = range4.startsBefore(range0);
      Range range5 = range0.intersection(range4);
      range5.isSubRangeOf(range4);
      range2.spliterator();
      List<Range> list0 = range4.complement(range3);
      Range range6 = Range.of(1L);
      boolean boolean1 = range1.equals((Object) null);
      assertFalse(boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range6.toString(range_CoordinateSystem1);
      assertEquals("[ 2 .. 2 ]/RB", string0);
      
      range6.endsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = new Long((-1029L));
      Range.of(range_CoordinateSystem2, 212L, 330L);
      boolean boolean2 = range0.startsBefore(range0);
      assertFalse(boolean2 == boolean0);
      
      List<Range> list1 = new LinkedList<Range>();
      assertFalse(list1.equals((Object)list0));
      
      Range.Builder range_Builder0 = new Range.Builder(range2);
      String string1 = range5.toString();
      assertEquals("[ 0 .. -1 ]/0B", string1);
      assertTrue(range5.isEmpty());
      
      List<Range> list2 = range3.complement(range4);
      assertEquals(1, list2.size());
      assertSame(range3, range5);
      
      Range range7 = Range.of((-1029L), 5307L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = range1.getEnd(range_CoordinateSystem3);
      assertEquals(212L, long2);
      
      boolean boolean3 = range4.intersects(range1);
      assertNotSame(range4, range7);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5656941631549763
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      assertFalse(range0.isEmpty());
      
      long long0 = new Long(212L);
      Range range1 = Range.of(212L);
      Range.of(212L, 212L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Object object0 = new Object();
      boolean boolean0 = range1.equals("");
      assertFalse(boolean0);
      
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2065362872845777
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      
      boolean boolean0 = range1.isEmpty();
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.840796575039778
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      range1.getLength();
      range0.asRange();
      Range.CoordinateSystem.values();
      Range range2 = Range.of((-130L), 1L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7997173396058437
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      range1.getLength();
      Range range2 = range0.asRange();
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-128L), 1L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.9029497044666224
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2055L, 32767L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = Range.ofLength(3841L);
      range0.spliterator();
      Range.Builder range_Builder2 = range_Builder0.shift(3841L);
      Range.Builder range_Builder3 = range_Builder1.contractBegin((-344L));
      range_Builder3.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder2.expandBegin(3260L);
      range_Builder3.copy();
      Range range1 = Range.of(range_CoordinateSystem0, (-66L), 80L);
      range0.isSubRangeOf(range1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1130L, 2055L);
      Range range2 = range0.asRange();
      Range range3 = range_Builder0.build();
      range2.getLength();
      // Undeclared exception!
      try { 
        range3.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.033280289727524
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      range0.getEnd();
      Range range1 = Range.of(212L);
      range1.getLength();
      Range range2 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isSubRangeOf(range3);
      Range range4 = Range.of((-1029L));
      range4.startsBefore(range0);
      Range range5 = range0.intersection(range4);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      range5.isSubRangeOf(range4);
      range2.spliterator();
      range4.complement(range3);
      Range.of(1L);
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.ofLength((-547L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2147023174965645
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, (-2044L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5113026001411627
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = 891L;
      Range range0 = Range.of(199L, 891L);
      range0.split(199L);
      // Undeclared exception!
      try { 
        Range.ofLength((-5239L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.292918773452325
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(1683L);
      List<Range> list0 = new LinkedList<Range>();
      range0.intersects(range0);
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3935777538322145
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of((-15L), 900L);
      // Undeclared exception!
      try { 
        range0.split((-15L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5118878448682453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.of((-32768L));
      long long0 = 4294967295L;
      Range range1 = Range.of(4294967295L);
      range1.split(4531L);
      range0.intersects(range1);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7370651399972954
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 891L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-361L), (-361L));
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.676880168144185
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of((-547L));
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.58822358020973
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      long long0 = 2117L;
      Range range0 = Range.ofLength(2117L);
      Range range1 = null;
      Range range2 = Range.of(2117L, 2117L);
      range0.split(2117L);
      range2.intersects(range0);
      range2.getLength();
      // Undeclared exception!
      try { 
        range2.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.5581121418761184
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775766L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(686L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775766L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -85 would make range [9223372036854775766 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.7719420678391726
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range range0 = Range.of(2055L, 2055L);
      Range range1 = Range.ofLength(2055L);
      List<Range> list0 = range0.complement(range1);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.588798172135717
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range range0 = Range.ofLength(686L);
      Range range1 = Range.ofLength(1168L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1168L, 2117L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      Range.of(range_CoordinateSystem0, 686L, 2147483647L);
      Range range3 = Range.ofLength(686L);
      assertSame(range3, range2);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.813465247548178
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-3230L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3230L), (-3230L));
      assertTrue(range1.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals((-3230L), long0);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.ofLength(255L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.24651429371086
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.of((-66L), 3841L);
      range0.spliterator();
      range0.iterator();
      List<Range> list0 = range0.split(3841L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1153L, 1153L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.intersection(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1765L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.9725156716062027
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range.ofLength(686L);
      Range range0 = Range.ofLength(1168L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of((-1575L));
      range1.iterator();
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 686L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.766019800976996
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2055L, 32767L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = Range.ofLength(3841L);
      range0.spliterator();
      Range.Builder range_Builder2 = range_Builder0.shift(3841L);
      Range.Builder range_Builder3 = range_Builder1.contractBegin((-344L));
      range_Builder3.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder2.expandBegin(3260L);
      range_Builder3.copy();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2055L, (-66L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3824231362077777
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of((-32768L));
      Range.CoordinateSystem.values();
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range range3 = range2.intersection(range0);
      Range.of((-1250L));
      Range range4 = range3.intersection(range2);
      assertFalse(range4.isEmpty());
      
      boolean boolean1 = range3.isEmpty();
      assertFalse(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range5 = range1.intersection(range2);
      assertSame(range5, range2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.353627401079457
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of((-15L), (-15L));
      // Undeclared exception!
      try { 
        range0.split((-15L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.5413516668606317
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range range1 = Range.of(range_CoordinateSystem1, (-303L), 0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.378014125728404
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      range0.intersects(range1);
      range0.equals(range1);
      String string0 = ">#<67:";
      // Undeclared exception!
      try { 
        Range.of(98L, (-3032L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.775878484138468
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range range0 = Range.of(2055L, 2055L);
      Range range1 = Range.ofLength(2055L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.isEmpty();
      boolean boolean1 = range1.endsBefore(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.510861129044374
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=4.004983712801703
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(1588L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(81L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(426L);
      Range range2 = Range.parseRange("[ 0 .. 1587 ]/0B");
      range1.endsBefore(range2);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(3841L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.Builder range_Builder3 = range_Builder2.copy();
      range2.startsBefore(range1);
      range2.split(255L);
      range_Builder3.copy();
      range2.isSubRangeOf(range0);
      range0.endsBefore(range2);
      range1.toString();
      range0.startsBefore(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1341526202605965
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.5177900205332167
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L));
      Range.of(1725135L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of((-32768L));
      Range.CoordinateSystem.values();
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range range3 = range2.intersection(range0);
      Range.of((-1250L));
      Range range4 = range3.intersection(range2);
      assertFalse(range4.isEmpty());
      
      boolean boolean1 = range3.isEmpty();
      assertFalse(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range5 = range_Builder0.build();
      assertSame(range5, range2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.283852510112358
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      range0.getEnd();
      Range range1 = Range.of(212L);
      Range range2 = Range.of((-547L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.isSubRangeOf(range1);
      Range range3 = Range.of(range_CoordinateSystem0, (-1029L), 211L);
      range3.startsBefore(range0);
      Range range4 = range0.intersection(range3);
      range4.isSubRangeOf(range3);
      range2.spliterator();
      List<Range> list0 = range3.complement(range0);
      range4.intersects(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 212L, 330L);
      range3.equals(range0);
      range1.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range4.toString();
      range2.complement(range3);
      range_Builder0.copy();
      range4.isSubRangeOf(range2);
      range1.endsBefore(range4);
      range0.startsBefore(range2);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-1029L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.7407406223835165
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range range0 = Range.ofLength(686L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.split(1168L);
      Range range1 = Range.of(686L, 686L);
      Range.CoordinateSystem.values();
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(687L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4530014063936125
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(2222L, 9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.7319897711631094
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = 686L;
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(686L);
      range0.equals(range1);
      Range range2 = Range.of(686L, 9223372036854775807L);
      range2.intersects(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      long long0 = 2117L;
      Range range0 = Range.ofLength(2117L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.4804669944700115
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range range0 = Range.ofLength(686L);
      long long0 = range0.getLength();
      assertEquals(686L, long0);
      
      Range.ofLength(1168L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(3019L);
      Range.Builder range_Builder1 = range_Builder0.shift(2674L);
      range_Builder1.contractBegin(3019L);
      range_Builder1.expandBegin(2674L);
      range_Builder1.shift(2674L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("QLv>[gqB\"z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.QLv>[gqB\"z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.8821272516549943
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range range0 = Range.ofLength(686L);
      Range range1 = Range.ofLength(1168L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.of((-1575L));
      Range range3 = range2.intersection(range1);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3209094821860035
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.of(18L, 18L);
      // Undeclared exception!
      try { 
        Range.of(2187L, 18L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.527062838287056
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-665L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-665L), (-1L));
      range_Builder0.contractEnd((-665L));
      range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-665L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5216196670738955
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(686L);
      range0.equals(range1);
      range1.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object1 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 983L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.243693405686912
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.5362411447420827
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(686L);
      range1.startsBefore(range0);
      range0.isSubRangeOf(range1);
      range1.startsBefore(range0);
      range1.endsBefore(range0);
      Range range2 = Range.ofLength(686L);
      range0.startsBefore(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(686L);
      range_Builder0.contractEnd((-1002L));
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3925058903494896
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2202L, 2202L);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.395362489092586
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2187L, 2187L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.4587467648778794
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range range0 = Range.of(2187L, 2187L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      Range.Comparators.values();
      Range.Builder range_Builder1 = new Range.Builder(2787L);
      range_Builder1.contractEnd((-92L));
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.2687914507542923
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2222L, 9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }
}
