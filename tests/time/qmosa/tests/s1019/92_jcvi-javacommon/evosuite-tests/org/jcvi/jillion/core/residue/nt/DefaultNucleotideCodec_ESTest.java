/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:20:14 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2754191025580943
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-4436));
      assertEquals(0, int0);
      
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 727);
      assertEquals(727, int1);
      
      Range range0 = Range.of((-2892L));
      Range.of((long) (byte) (-65));
      range0.toString();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      int int2 = new Integer((-4436));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, (-4436));
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int3 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray1, 0);
      assertEquals(5, byteArray1.length);
      assertEquals((-1), int3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2731538195493517
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-4436));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 727);
      Range range0 = Range.of((-2892L));
      Range.of((long) (byte) (-65));
      range0.toString();
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, 2644);
      assertEquals(0, int0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, 0);
      assertEquals(1, int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int2 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray0, (byte) (-61));
      assertEquals((-61), int2);
      
      int int3 = defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, 11);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray1);
      assertEquals(1, int3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)11;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 4L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 4 corresponds to encodedIndex 6  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      Nucleotide nucleotide0 = Nucleotide.Purine;
      defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-34);
      byteArray0[8] = (byte)0;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-34));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 11);
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)70;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1431655765);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-45);
      byteArray1[1] = (byte) (-45);
      byteArray1[2] = (byte) (-54);
      byteArray1[3] = (byte)7;
      Integer integer0 = new Integer(2123622718);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-102);
      byteArray0[0] = (byte) (-102);
      byte byte1 = (byte)82;
      byteArray0[1] = (byte)82;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte) (-74);
      byte byte1 = (byte)91;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGappedOffsetFor((byte[]) null, (-687));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 9;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-91);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2450098975597035
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedLength(byteArray1);
      Range range0 = Range.of(2L);
      Range range1 = Range.of(2L, 127L);
      range1.intersects(range0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 2 .. 2 ]/0B is out of range of sequence which is only [ 0 .. 1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.127429422638514
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)5;
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-1023082496L), long0);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 12);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)5;
      Integer integer0 = new Integer(5);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = defaultNucleotideCodec1.decode(byteArray0, 5);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.088513922683914
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 11);
      assertEquals(0, int0);
      
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)24;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)67;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1078913017));
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-79));
      byteArray0[6] = (byte)70;
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1431655765);
      assertEquals(1431655765, int1);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-45);
      byteArray2[1] = (byte) (-45);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int2 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (byte) (-79));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int3 = defaultNucleotideCodec2.getNumberOfGaps(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte) (-80)}, byteArray1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.889354696329235
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)40;
      Range range0 = Range.ofLength((byte)79);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      Range range1 = Range.of((long) (byte)40);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      range1.iterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, range1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.916470328787129
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray0[1] = (byte) (-79);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)7;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-74));
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)24);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte) (-79);
      byteArray1[3] = (byte)24;
      byteArray1[4] = (byte)40;
      byteArray1[5] = (byte) (-74);
      byteArray1[6] = (byte)40;
      byteArray1[7] = (byte)31;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, (byte) (-79));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2203100414723047
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getUngappedLength(byteArray1);
      Range.of(1L);
      // Undeclared exception!
      try { 
        Range.of(34L, (-2411L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0337071898969303
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)5;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, 12);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)5);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 0);
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (byte)1);
      Integer integer0 = new Integer(0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength((byte)5);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)79);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 11);
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-79);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-273));
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 1431655765L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1431655765 corresponds to encodedIndex 715827886  encodedglyph length is 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3416029588673823
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[0] = (byte)79;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide0);
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray1, 0L);
      assertEquals(Nucleotide.Unknown, nucleotide1);
      
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray1, (-1689));
      assertFalse(boolean0);
      
      int int0 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray2, (-2257));
      assertEquals(1, int0);
      
      int int1 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, 1533);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec2.getUngappedLength(byteArray1);
      assertEquals(1L, long0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec3.toString(byteArray2);
      assertEquals("N", string0);
      
      Nucleotide nucleotide2 = Nucleotide.NotCytosine;
      byte[] byteArray3 = defaultNucleotideCodec0.encode(nucleotide2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)96}, byteArray3);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)15;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5096736624473883
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-75);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1995756248310236
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)79;
      byteArray1[2] = (byte)40;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)40);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-196));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)40);
      Integer integer0 = new Integer((-196));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1465021848890036
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Adenine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 13);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)7, (byte) (-9), (byte) (-106), (byte)74, (byte) (-64)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(10, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.isGap((byte[]) null, (-2042));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9622895772687436
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, (-156172288));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-46)}, byteArray0);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1138750485071203
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Purine;
      nucleotide0.getAllPossibleAmbiguities();
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (byte)1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.889123342973809
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.toString(byteArray0);
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)8);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 433);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (byte) (-60));
      Integer integer0 = new Integer((-1010630656));
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.decode(byteArray0, (-1056L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1056
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)24;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)24;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2077));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9829724465866
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)31;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)40);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, (-484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)124;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (-1829));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.05725704976923
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.isGap(byteArray0, (-1296));
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-113), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)5;
      byte byte0 = (byte)71;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byte byte1 = (byte) (-2);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)4;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 9);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)5;
      defaultNucleotideCodec0.isGap(byteArray0, 12);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      Integer integer0 = new Integer((byte)71);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 2672L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 2672 corresponds to encodedIndex 1340  encodedglyph length is 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.192898685950695
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      Nucleotide nucleotide0 = Nucleotide.Purine;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)30;
      byteArray0[1] = (byte)30;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((byte)30);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("eVbTS5|3T6!RmC[t[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.eVbTS5|3T6!RmC[t[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5709669654086493
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 11);
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)8;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-65);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-3);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)91;
      byteArray2[3] = (byte)7;
      byteArray2[4] = (byte)24;
      byteArray2[5] = (byte)13;
      byteArray2[6] = (byte) (-96);
      byteArray2[7] = (byte)7;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray2);
      byteArray1[1] = (byte) (-3);
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte) (-96);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)70;
      byteArray1[6] = (byte) (-34);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (-4119));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[0] = (byte)31;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(0, iterator0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-29);
      byte byte0 = (byte) (-84);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-41);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-109));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.113420251755796
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 0);
      // Undeclared exception!
      try { 
        Range.parseRange("g8kPR=Ex`2G3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse g8kPR=Ex`2G3 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)8;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)2);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)79;
      byte byte0 = (byte)31;
      byteArray1[2] = (byte)31;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte) (-96);
      byteArray1[3] = (byte) (-96);
      byteArray1[4] = (byte) (-96);
      byteArray1[5] = (byte) (-96);
      byteArray1[6] = (byte) (-18);
      byteArray1[7] = (byte) (-96);
      byteArray1[8] = (byte) (-96);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 3424);
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)27;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8591780380620238
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      defaultNucleotideCodec0.iterator(byteArray0);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-56);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 2147483646);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-3993), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2437301089950092
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)18;
      byteArray0[8] = (byte)4;
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      byte[] byteArray1 = new byte[7];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 11);
      byteArray1[0] = (byte) (-65);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte)8;
      byteArray1[6] = (byte)70;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, 1431655765);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-45);
      byteArray2[1] = (byte) (-45);
      byteArray2[2] = (byte) (-54);
      byteArray2[3] = (byte)7;
      Integer integer0 = new Integer(2123622718);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray2, (byte)7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 7 corresponds to encodedIndex 7  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)66;
      byteArray0[0] = (byte)66;
      byte byte1 = (byte)10;
      byteArray0[1] = (byte)10;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.400344526816758
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)12;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4337150271040935
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-1753808896L), long0);
      
      List<Integer> list1 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byte byte0 = (byte)79;
      long long0 = 26L;
      Range range0 = Range.of((-540L), (-540L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      Nucleotide nucleotide0 = Nucleotide.Strong;
      nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode(nucleotide0);
      byte byte0 = (byte)40;
      Range range0 = Range.of((long) (byte)79, (long) (byte)79);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 79 .. 79 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)2;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5151L), (-45L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -5152 .. -46 ]/0B is out of range of sequence which is only [ 0 .. 1388183763 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)71;
      Range range0 = Range.of((-1003L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.717254098537004
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-61);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)5;
      defaultNucleotideCodec0.isGap(byteArray0, 12);
      byteArray0[2] = (byte)71;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)71;
      byteArray1[2] = (byte) (-61);
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte) (-61);
      byteArray1[6] = (byte) (-61);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte) (-61));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.669710087154307
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)8;
      byteArray0[1] = (byte)8;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-68);
      byte byte2 = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-500));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.6082294819613843
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.961095617831518
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.toString(byteArray0);
      Integer integer0 = new Integer((-1));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, (byte) (-45));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -45
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.4125876522655534
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byte byte0 = (byte)31;
      byteArray0[2] = (byte)31;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.510357617990278
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)7;
      Integer integer0 = new Integer(2123622718);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte) (-54);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray1, (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.566621028859323
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-34);
      byteArray0[8] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)71);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-34));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.80592882723436
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)0;
      byteArray0[1] = (byte)8;
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      byteArray0[2] = (byte)31;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4125876522655534
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)79;
      byteArray0[0] = (byte)79;
      byte byte1 = (byte)31;
      byteArray0[2] = (byte)31;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
