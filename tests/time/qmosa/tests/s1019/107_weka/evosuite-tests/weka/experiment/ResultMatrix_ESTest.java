/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:30:42 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.565778338020668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1372, 0);
      resultMatrixLatex0.RIGHT_PARENTHESES = " &}#%K^W";
      resultMatrixLatex0.TIE_STRING = "ZDs93/(f";
      resultMatrixLatex0.setMeanPrec(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.toStringKey();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(701, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setColNameWidth(2073);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.setStdDevWidth(1);
      resultMatrixSignificance0.setEnumerateColNames(true);
      resultMatrixSignificance0.toStringSummary();
      resultMatrixSignificance0.setRemoveFilterName(true);
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.printRowNamesTipText();
      assertEquals(2073, resultMatrixPlainText0.getColNameWidth());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.532057450117612
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.setStdDevPrec(1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.setRowHidden(1, true);
      resultMatrixCSV0.getRowHidden(1);
      resultMatrixCSV0.getAverage(26);
      resultMatrixPlainText0.setRowHidden(0, false);
      assertEquals(1, resultMatrixPlainText0.getStdDevPrec());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.9076899393923905
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setCountWidth(3096);
      resultMatrixLatex0.getDisplayCol(2);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.toString();
      resultMatrixPlainText0.getColNameWidth();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      resultMatrixPlainText1.getDefaultRowNameWidth();
      int[] intArray0 = new int[2];
      resultMatrixPlainText0.setShowStdDev(true);
      intArray0[0] = 34;
      intArray0[1] = 2;
      resultMatrixPlainText0.setRowOrder(intArray0);
      assertTrue(resultMatrixPlainText0.getShowStdDev());
      
      resultMatrixPlainText1.getStdDevWidth();
      int int0 = resultMatrixLatex0.getColCount();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.9802755563489622
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixCSV0.toStringRanking();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixCSV0.getRowName(1);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.setSignificanceWidth(0);
      ResultMatrixCSV.main((String[]) null);
      resultMatrixLatex0.setRowNameWidth(1);
      resultMatrixLatex0.addHeader("-show-avg", "]");
      resultMatrixCSV0.setMeanPrec(1);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[0];
      resultMatrixCSV0.LEFT_PARENTHESES = "Z65L";
      doubleArray0[0] = doubleArray1;
      resultMatrixLatex0.m_StdDev = doubleArray0;
      resultMatrixLatex0.globalInfo();
      resultMatrixLatex0.listOptions();
      resultMatrixLatex0.getDefaultRowNameWidth();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 1);
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.423723589869215
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_StdDevWidth = (-1731);
      resultMatrixHTML0.setCountWidth((-21));
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_PrintColNames = true;
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.toStringKey();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.m_ShowAverage = true;
      resultMatrixCSV0.getDisplayName();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4437491727670597
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clearHeader();
      String string0 = resultMatrixPlainText0.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      
      int int0 = resultMatrixPlainText0.getColNameWidth();
      assertEquals(0, int0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      int[] intArray0 = new int[1];
      resultMatrixCSV0.setColOrder(intArray0);
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      resultMatrixPlainText0.m_NonSigWins = intArray1;
      resultMatrixCSV0.getRowHidden(2);
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      
      resultMatrixPlainText0.setRowHidden(9, false);
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.9826892296394867
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.padString("# generated by WEKA ", (-2135));
      resultMatrixHTML0.m_StdDevWidth = (-1731);
      resultMatrixHTML0.setCountWidth(0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_PrintColNames = true;
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText();
      resultMatrixPlainText2.getAverage(1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDev(1338, 1785, 2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(2, (-56));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.453490662529435
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1372, 0);
      resultMatrixLatex0.TIE_STRING = "ZDs93/(f";
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      
      resultMatrixLatex0.setMeanPrec(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.toStringKey();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(701, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setColNameWidth(2073);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.setStdDevWidth(1);
      resultMatrixSignificance0.setEnumerateColNames(true);
      resultMatrixSignificance0.toStringSummary();
      resultMatrixSignificance0.setRemoveFilterName(true);
      resultMatrixPlainText0.getDisplayRow(1172);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.toStringSummary();
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8475167037252866
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.addHeader("-weka.filters..*", "-weka.filters..*");
      resultMatrixCSV0.setColOrder((int[]) null);
      resultMatrixCSV0.setRowHidden(1693, true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.setSignificance(697, 0, 1);
      assertEquals(5, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4273662814216426
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.rowNameWidthTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      resultMatrixGnuPlot0.m_ColOrder = intArray0;
      booleanArray0[7] = false;
      resultMatrixPlainText0.m_ColHidden = booleanArray0;
      resultMatrixPlainText0.getRevision();
      resultMatrixGnuPlot0.toStringRanking();
      resultMatrixGnuPlot0.getDefaultSignificanceWidth();
      resultMatrixGnuPlot0.meanPrecTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance((-1771), 26);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4823930393168556
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.rowNameWidthTipText();
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.960854253729575
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.addHeader("$circ$", "$\bullet$");
      resultMatrixCSV0.setColOrder((int[]) null);
      resultMatrixCSV0.clear();
      resultMatrixCSV0.setRowHidden((-42), true);
      resultMatrixCSV0.getRowHidden(192);
      resultMatrixCSV0.getAverage(3456);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.983097477411967
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.printColNamesTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.getDisplayName();
      String[] stringArray0 = new String[5];
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixCSV0.m_HeaderKeys = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add((Object) vector1);
      resultMatrixSignificance0.getRowName(2186);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      
      stringArray0[0] = "-sig-width";
      stringArray0[1] = ")";
      stringArray0[2] = "CSV";
      stringArray0[3] = "*";
      stringArray0[4] = "Whether to output column names or just numbers representing them.";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultRowNameWidth();
      resultMatrixPlainText0.getAverage(50);
      resultMatrixSignificance0.setStdDev((-3028), 2186, 2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      
      resultMatrixCSV0.toStringSummary();
      resultMatrixLatex0.toStringSummary();
      resultMatrixSignificance0.getDefaultPrintColNames();
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.555862313847633
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.WIN_STRING = "oZm%~'VUvu";
      resultMatrixHTML0.getDisplayName();
      resultMatrixHTML0.getDefaultEnumerateRowNames();
      resultMatrixHTML0.getRowOrder();
      resultMatrixHTML0.m_RemoveFilterName = false;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 0);
      boolean boolean0 = resultMatrixCSV0.getRowHidden(0);
      assertFalse(boolean0);
      
      double double0 = resultMatrixCSV0.getAverage(1);
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = resultMatrixCSV0.getSummaryTitle(5);
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals("f", string0);
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4153203444224887
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      int[][] intArray0 = new int[8][5];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 0;
      intArray4[3] = 1;
      intArray4[4] = (-2241);
      intArray4[5] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 0;
      intArray5[1] = (-2241);
      intArray5[2] = 2;
      intArray5[3] = 152;
      intArray5[4] = 0;
      intArray5[5] = 2;
      intArray5[6] = (-2241);
      intArray5[7] = (-309);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 152;
      intArray6[1] = 0;
      intArray6[2] = (-309);
      intArray6[3] = 152;
      intArray6[4] = (-2241);
      intArray6[5] = (-2241);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      intArray0[6] = intArray7;
      int[] intArray8 = new int[3];
      intArray8[0] = 2;
      intArray8[1] = 1;
      intArray8[2] = 0;
      intArray0[7] = intArray8;
      resultMatrixSignificance0.setRanking(intArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.isStdDev(1);
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3712083673794435
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixPlainText0.setRowNameWidth((-2099));
      resultMatrixPlainText0.trimString("5$Q1h&~hQt!!", (-155));
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      resultMatrixPlainText0.setColNameWidth(1);
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      resultMatrixSignificance0.setStdDevWidth(2);
      resultMatrixSignificance0.m_RowHidden = booleanArray0;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = (-155);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.setRowOrder(intArray0);
      resultMatrixLatex0.getDefaultRowNameWidth();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(0, 5);
      // Undeclared exception!
      try { 
        resultMatrixPlainText1.setSize((-899), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.38710873215423
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.setColHidden(2, true);
      resultMatrixSignificance0.getShowAverage();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.clear();
      resultMatrixPlainText0.getDefaultPrintColNames();
      resultMatrixSignificance0.m_SignificanceWidth = 2;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1329, 2);
      resultMatrixHTML0.getDefaultPrintColNames();
      String[] stringArray0 = new String[2];
      resultMatrixHTML0.setEnumerateRowNames(true);
      stringArray0[0] = "(";
      stringArray0[1] = "$circ$";
      resultMatrixSignificance0.m_ColNames = stringArray0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[4][3];
      int[] intArray1 = new int[6];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 2;
      intArray4[2] = (-1523);
      intArray4[3] = 1;
      intArray4[4] = 0;
      intArray4[5] = 1;
      intArray4[6] = 0;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3475874512230743
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (-266);
      intArray0[2] = 668;
      intArray0[3] = 49;
      intArray0[4] = 2;
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.m_RowNameWidth = 49;
      resultMatrixSignificance0.clear();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.padString((String) null, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4644806172372005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[0];
      resultMatrixPlainText0.setRowOrder(intArray0);
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.isAverage((-1724));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.TIE_STRING = "";
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setSize(1, 2);
      resultMatrixCSV0.setEnumerateRowNames(true);
      resultMatrixCSV0.toStringKey();
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.clearRanking();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String string0 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.371874123012086
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      resultMatrixPlainText1.setSignificanceWidth(0);
      boolean boolean0 = false;
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1946);
      intArray0[4] = 453;
      intArray0[5] = 2;
      resultMatrixPlainText0.setColOrder(intArray0);
      resultMatrixPlainText1.setShowStdDev(false);
      resultMatrixPlainText0.headerKeys();
      resultMatrixPlainText1.getSummaryTitle(1);
      resultMatrixPlainText0.getRowCount();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getRevision();
      ResultMatrixPlainText resultMatrixPlainText3 = new ResultMatrixPlainText();
      resultMatrixPlainText3.getRowNameWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(692, 1081);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.9689400813408753
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.toStringKey();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.toArray();
      resultMatrixCSV0.setShowAverage(true);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.setPrintColNames(false);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText1.toStringMatrix();
      resultMatrixPlainText0.getRevision();
      resultMatrixCSV0.getRowNameWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 0);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.5823837486140317
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = 0;
      resultMatrixCSV0.setColHidden(0, true);
      String string0 = "V";
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3152739318325932
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$circ$";
      stringArray0[1] = " ";
      stringArray0[2] = "(";
      stringArray0[3] = "$circ$";
      stringArray0[4] = "(";
      stringArray0[5] = ")";
      stringArray0[6] = " ";
      stringArray0[7] = " ";
      resultMatrixLatex0.m_RowNames = stringArray0;
      resultMatrixLatex0.addHeader("G^\u0002", "v@f1e493+iX");
      int[][] intArray0 = new int[5][0];
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      intArray3[0] = 1;
      intArray3[1] = 0;
      intArray3[2] = 2;
      intArray3[3] = 0;
      intArray3[4] = 1;
      intArray3[5] = 97;
      intArray3[6] = 1;
      intArray3[7] = 1;
      intArray3[8] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 1;
      intArray4[1] = 97;
      intArray4[2] = 2;
      intArray4[3] = 45;
      intArray4[4] = 0;
      intArray4[5] = 2;
      intArray4[6] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[0] = 97;
      intArray5[1] = 97;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5678074798441632
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setCountWidth(15);
      resultMatrixLatex0.getDisplayCol(0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_StdDevWidth = 0;
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-695.10288809635);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 15;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (-695.10288809635);
      doubleArray2[5] = (-1020.000484);
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (-1020.000484);
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 1299.239647054;
      doubleArray0[2] = doubleArray3;
      resultMatrixLatex0.m_Mean = doubleArray0;
      resultMatrixPlainText0.setMeanWidth((-129));
      resultMatrixPlainText0.globalInfo();
      int int0 = resultMatrixLatex0.getMeanPrec();
      assertEquals(15, resultMatrixLatex0.getCountWidth());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.9464410584567244
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixCSV0.toStringRanking();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixCSV0.getRowName(1);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.setSignificanceWidth(0);
      ResultMatrixCSV.main((String[]) null);
      resultMatrixLatex0.setRowNameWidth(1);
      resultMatrixLatex0.addHeader("-show-avg", "]");
      resultMatrixCSV0.setMeanPrec((-618));
      resultMatrixCSV0.getDefaultCountWidth();
      resultMatrixCSV0.getDisplayName();
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.552732970779722
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1372, 0);
      resultMatrixLatex0.TIE_STRING = "ZDs93/(f";
      resultMatrixLatex0.setMeanPrec(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.toStringKey();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(701, 0);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.522818645958669
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.WIN_STRING = "oZm%~'VUvu";
      resultMatrixHTML0.getDisplayName();
      resultMatrixHTML0.getDefaultEnumerateRowNames();
      resultMatrixHTML0.getRowOrder();
      resultMatrixHTML0.setSignificance(0, 0, 857);
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2289874463186274
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixCSV0.getColName((-129));
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(1, (-129));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.8477307956386197
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.toStringKey();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.setSignificanceWidth(0);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      String string0 = resultMatrixSignificance0.toString();
      assertEquals("Dataset (1) col0\n----------------\nrow0            \n", string0);
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      
      resultMatrixPlainText0.getColNameWidth();
      resultMatrixPlainText0.getDefaultRowNameWidth();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      resultMatrixPlainText0.setRowOrder(intArray0);
      assertFalse(resultMatrixPlainText0.getShowStdDev());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.9257436376366037
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.addHeader("-weka.filters..*", "-weka.filters..*");
      resultMatrixCSV0.setColOrder((int[]) null);
      resultMatrixCSV0.setRowHidden(1693, true);
      resultMatrixCSV0.getRowHidden(1693);
      double double0 = resultMatrixCSV0.getAverage(0);
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1598996544888824
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.LOSS_STRING = "T2E#((";
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixSignificance0.setCount(40, 40);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 97;
      intArray0[5] = 0;
      intArray0[6] = 1358;
      intArray0[7] = 0;
      resultMatrixSignificance0.m_ColOrder = intArray0;
      String string0 = resultMatrixSignificance0.padString("W=r?=V03", 0, false);
      assertEquals("W=r?=V03", string0);
      
      resultMatrixSignificance0.getDefaultStdDevWidth();
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixPlainText0.globalInfo();
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(40, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(0, resultMatrixPlainText0.getDefaultMeanWidth());
      
      resultMatrixPlainText0.getDisplayName();
      assertEquals(40, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.9465830340982353
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1372, 0);
      resultMatrixLatex0.TIE_STRING = "ZDs93/(f";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixLatex0.getColName(1);
      resultMatrixSignificance0.setCount(3055, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 40;
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.setPrintColNames(true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.getRevision();
      resultMatrixCSV0.getRowNameWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 986);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.551303442077466
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      resultMatrixLatex0.LEFT_PARENTHESES = "";
      resultMatrixLatex0.enumerateColNamesTipText();
      resultMatrixLatex0.getDefaultStdDevWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 0);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9626189519739743
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[][] stringArray0 = new String[9][7];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "v";
      stringArray1[1] = "*";
      stringArray1[2] = "(";
      stringArray1[3] = " ";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[3];
      stringArray2[0] = " ";
      stringArray2[1] = "(";
      stringArray2[2] = "(";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[1];
      stringArray3[0] = "Y)lmU^A6";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[3];
      stringArray4[0] = "*";
      stringArray4[1] = "v";
      stringArray4[2] = "*";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[9];
      stringArray5[0] = " ";
      stringArray5[1] = "Y)lmU^A6";
      stringArray5[2] = " ";
      stringArray5[3] = "v";
      stringArray5[4] = "v";
      stringArray5[5] = "[";
      stringArray5[6] = "v";
      stringArray5[7] = "(";
      stringArray5[8] = "*";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[7];
      stringArray6[0] = " ";
      stringArray6[1] = ")";
      stringArray6[2] = " ";
      stringArray6[3] = "Y)lmU^A6";
      stringArray6[4] = " ";
      stringArray6[5] = "Y)lmU^A6";
      stringArray6[6] = ")";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[4];
      stringArray7[0] = "[";
      stringArray7[1] = "# end #\n";
      stringArray7[2] = "(";
      stringArray7[3] = "[";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[5];
      stringArray8[0] = " ";
      stringArray8[1] = "(";
      stringArray8[2] = "(";
      stringArray8[3] = "# end #\n";
      stringArray8[4] = "v";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[5];
      stringArray9[0] = "print-col-names";
      stringArray9[1] = "[";
      stringArray9[2] = "# end #\n";
      stringArray9[3] = "(";
      stringArray9[4] = "Y)lmU^A6";
      stringArray0[8] = stringArray9;
      int int0 = resultMatrixSignificance0.getColSize(stringArray0, 0, true, true);
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(8, int0);
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2495260220707816
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixPlainText0.setRowNameWidth((-2099));
      resultMatrixPlainText0.trimString("5$Q1h&~hQt!!", (-155));
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      resultMatrixPlainText0.setColNameWidth(1);
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      resultMatrixSignificance0.setStdDevWidth(2);
      resultMatrixSignificance0.m_RowHidden = booleanArray0;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = (-155);
      resultMatrixSignificance0.m_RankingWins = intArray0;
      resultMatrixSignificance0.setEnumerateColNames(true);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringSummary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.241486947511929
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2489);
      assertEquals(0, resultMatrixLatex0.getColCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.enumerateColNamesTipText();
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2489, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2391123923369305
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(756, 0);
      assertEquals(0, resultMatrixCSV0.getRowCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getDisplayName();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.assign(resultMatrixHTML0);
      resultMatrixSignificance0.getRevision();
      assertEquals(756, resultMatrixSignificance0.getVisibleColCount());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.830019261509212
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setSignificanceWidth(2531);
      resultMatrixSignificance0.toString();
      assertEquals(2531, resultMatrixSignificance0.getSignificanceWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.getColNameWidth();
      resultMatrixPlainText0.getDefaultRowNameWidth();
      resultMatrixPlainText0.setRowOrder(intArray0);
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=4.073069916885646
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      resultMatrixPlainText1.setSignificanceWidth(0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixPlainText0.m_HeaderKeys = vector0;
      intArray0[3] = (-1946);
      intArray0[4] = 453;
      intArray0[5] = 2;
      resultMatrixPlainText0.setColOrder(intArray0);
      resultMatrixPlainText1.setShowStdDev(false);
      ResultMatrixPlainText.main((String[]) null);
      vector0.add((Object) resultMatrixPlainText0);
      assertEquals("[Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n]", vector0.toString());
      
      resultMatrixPlainText0.headerKeys();
      resultMatrixPlainText1.getSummaryTitle(1);
      resultMatrixPlainText0.getRowCount();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      stringArray0[1] = ")";
      stringArray0[2] = "</tr>\n";
      stringArray0[3] = "Dataset";
      ResultMatrixCSV.main(stringArray0);
      resultMatrixPlainText0.getShowAverage();
      assertEquals(0, resultMatrixPlainText0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.073069916885646
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(1, resultMatrixPlainText0.getColCount());
      
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      resultMatrixPlainText1.setSignificanceWidth(0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1946);
      intArray0[4] = 453;
      intArray0[5] = 2;
      resultMatrixPlainText0.setColOrder(intArray0);
      resultMatrixPlainText1.setShowStdDev(false);
      assertEquals(1, resultMatrixPlainText1.getVisibleRowCount());
      assertEquals(1, resultMatrixPlainText1.getVisibleColCount());
      
      ResultMatrixPlainText.main((String[]) null);
      resultMatrixPlainText0.headerKeys();
      resultMatrixPlainText1.getSummaryTitle(1);
      assertTrue(resultMatrixPlainText1.getPrintRowNames());
      assertFalse(resultMatrixPlainText1.getShowStdDev());
      assertEquals(0, resultMatrixPlainText1.getStdDevWidth());
      
      resultMatrixPlainText0.getRowCount();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      stringArray0[1] = ")";
      stringArray0[2] = "</tr>\n";
      stringArray0[3] = "Dataset";
      ResultMatrixCSV.main(stringArray0);
      resultMatrixPlainText0.getShowAverage();
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.570857319003485
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 463;
      int int1 = 0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(463, 0);
      resultMatrixGnuPlot0.toString();
      resultMatrixGnuPlot0.getRevision();
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = (-744);
      intArray1[2] = 463;
      intArray1[3] = 463;
      intArray1[4] = 0;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.5009209902154224
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.m_Wins = null;
      resultMatrixGnuPlot0.m_CountWidth = 15;
      resultMatrixGnuPlot0.setStdDevPrec(15);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.removeFilterNameTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixHTML0.setColNameWidth(15);
      resultMatrixHTML0.toStringSummary();
      resultMatrixGnuPlot0.trimString("Whether to remove the classname package prefixes from the filter names in datasets.", 2);
      resultMatrixHTML0.m_PrintColNames = false;
      resultMatrixHTML0.printColNamesTipText();
      resultMatrixGnuPlot0.getDisplayName();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.901420621163439
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.addHeader("-weka.filters..*", "-weka.filters..*");
      resultMatrixCSV0.setRowHidden(1693, true);
      resultMatrixCSV0.getRowHidden(1693);
      resultMatrixCSV0.getAverage((-14));
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.6573398049220045
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixPlainText0.setRowNameWidth((-2099));
      resultMatrixPlainText0.trimString("5$Q1h&~hQt!!", (-155));
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      resultMatrixPlainText0.setColNameWidth(1);
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      resultMatrixSignificance0.setStdDevWidth(2);
      resultMatrixSignificance0.m_RowHidden = booleanArray0;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = (-155);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.getDefaultRowNameWidth();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(0, 5);
      // Undeclared exception!
      try { 
        resultMatrixPlainText1.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2842228217416776
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.showStdDevTipText();
      resultMatrixGnuPlot0.significanceWidthTipText();
      resultMatrixGnuPlot0.setRemoveFilterName(true);
      assertTrue(resultMatrixGnuPlot0.getRemoveFilterName());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4368349880326576
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1372, 0);
      resultMatrixLatex0.TIE_STRING = "ZDs93/(f";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixLatex0.getColName(1);
      resultMatrixSignificance0.setCount(3055, 0);
      resultMatrixSignificance0.padString("^I;oJ", 1, true);
      resultMatrixSignificance0.getDefaultStdDevWidth();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.toStringRanking();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixSignificance1);
      resultMatrixSignificance2.setRemoveFilterName(true);
      int int0 = 19;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1172, 19);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.845482509580832
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.m_StdDevPrec = 1023;
      resultMatrixPlainText0.setSize(1023, 2);
      resultMatrixPlainText0.LOSS_STRING = "CSV";
      String[] stringArray0 = new String[0];
      resultMatrixPlainText0.m_RowNames = stringArray0;
      resultMatrixPlainText0.getColHidden(1702);
      resultMatrixPlainText0.toStringRanking();
      int[][] intArray0 = new int[2][2];
      int[] intArray1 = new int[7];
      intArray1[0] = 1023;
      intArray1[1] = 2;
      intArray1[2] = 1;
      intArray1[3] = 1023;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray1[6] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 30;
      intArray2[1] = 1023;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 2;
      intArray2[5] = 0;
      intArray2[6] = 1023;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.87003072807915
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setCountWidth(15);
      resultMatrixLatex0.getDisplayCol(0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_StdDevWidth = 0;
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-695.10288809635);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      String string0 = resultMatrixSignificance0.toString();
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals("Dataset               (1)\n-------------------------\nrow0                     \n", string0);
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      
      resultMatrixPlainText0.getColNameWidth();
      resultMatrixPlainText0.getDefaultRowNameWidth();
      int[] intArray0 = new int[0];
      resultMatrixPlainText0.setRowOrder(intArray0);
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4304114315163474
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixSignificance0.assign(resultMatrixPlainText0);
      resultMatrixSignificance0.WIN_STRING = "/q3r";
      resultMatrixSignificance0.setColName(0, ") - ignored!");
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(67, (-1378));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.8392120768629305
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clearHeader();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.setSignificanceWidth(0);
      resultMatrixSignificance0.toString();
      resultMatrixPlainText0.getColNameWidth();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixSignificance0.setSignificanceWidth(0);
      resultMatrixPlainText0.setMeanWidth(0);
      ResultMatrixPlainText resultMatrixPlainText1 = null;
      try {
        resultMatrixPlainText1 = new ResultMatrixPlainText(0, (-553));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3943570972832946
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.doubleToString((-1.0), 0);
      resultMatrixSignificance0.setRowOrder((int[]) null);
      int[][] intArray0 = new int[1][2];
      resultMatrixSignificance0.setMeanWidth(3238);
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      resultMatrixSignificance0.m_Significance = intArray0;
      resultMatrixSignificance0.m_Significance = intArray0;
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixSignificance0.getShowStdDev();
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(0, (-3734));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.9975092814604523
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "I6- %geB:pc$?:cT";
      stringArray0[2] = "unm";
      stringArray0[3] = "# end #\n";
      ResultMatrixHTML.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3337);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 3337;
      intArray0[2] = 3337;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 0;
      resultMatrixCSV0.m_ColOrder = intArray0;
      resultMatrixCSV0.m_PrintColNames = true;
      boolean boolean0 = resultMatrixCSV0.getPrintRowNames();
      assertTrue(boolean0);
      
      resultMatrixCSV0.toStringRanking();
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 3337;
      doubleArray1[3] = (double) 3337;
      doubleArray1[4] = (-2673.965623937395);
      doubleArray1[5] = (double) 3337;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 3337;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 1;
      doubleArray0[1] = doubleArray2;
      resultMatrixCSV0.m_StdDev = doubleArray0;
      int int0 = resultMatrixCSV0.getDefaultCountWidth();
      assertEquals(0, int0);
      
      resultMatrixCSV0.getDisplayName();
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.895703240474344
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.addHeader("-weka.filters..*", "-weka.filters..*");
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultRowNameWidth();
      resultMatrixPlainText0.setRowOrder((int[]) null);
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.7745974467946897
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "v";
      stringArray0[3] = " ";
      resultMatrixCSV0.m_EnumerateColNames = true;
      resultMatrixCSV0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.padString((String) null, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.473631354080886
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      intArray3[1] = 1;
      intArray3[2] = 0;
      intArray3[3] = 1;
      intArray3[4] = (-2241);
      intArray3[5] = 1;
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = (-2241);
      intArray4[2] = 2;
      intArray4[3] = 152;
      intArray4[4] = 0;
      intArray4[5] = 2;
      intArray4[6] = (-2241);
      int[] intArray5 = new int[6];
      intArray5[0] = 152;
      intArray5[1] = 0;
      intArray5[2] = (-309);
      intArray5[3] = 152;
      intArray5[4] = (-2241);
      intArray5[5] = (-2241);
      int[] intArray6 = new int[0];
      int[] intArray7 = new int[3];
      intArray7[0] = 2;
      intArray7[1] = 1;
      intArray7[2] = 0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      boolean boolean0 = resultMatrixLatex0.isStdDev(1);
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 1);
      resultMatrixLatex0.m_EnumerateColNames = true;
      resultMatrixLatex0.getDefaultPrintColNames();
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
  }
}
