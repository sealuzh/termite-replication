/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:11:37 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.trees.M5P;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.filters.Filter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("&>8W,a8^d");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip0.optimizationsTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      attribute0.addStringValue("The number of optimization runs.");
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 0.0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(118);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      
      Utils.log2 = (double) 6;
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("&", "", 3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1477.43, intArray0, 1419);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iuov2,.e%");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iuov2,.e%");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@E");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9511242024841526
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(118);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      Utils.log2 = (double) 6;
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("&", "", 3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 4;
      intArray0[5] = 6;
      intArray0[6] = 6;
      intArray0[7] = 2538;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2, intArray0, (-8));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to Matlab:\n", (String) null, (-3522));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      jRip_NumericAntd0.accu = (double) 2;
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.copy();
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(118);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.getRevision();
      jRip_RipperRule1.hasAntds();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.covers((Instance) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Attribute attribute0 = new Attribute("How many neighbours are used to determine the width of the weighting function (<= 0 means all neighbours).", 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Attribute.typeToString(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("How many neighbours are used to determine the width of the weighting function (<= 0 means all neighbours). = ", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lv8R)a,UJ8K,S,q ");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      double[] doubleArray0 = new double[15];
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, int0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("to Matlab:\n", (String) null, (-3522));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("to Matlab:\n <= NaN", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      StringReader stringReader0 = new StringReader(">&xMt7EAxP");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      AbstractClassifier.makeCopy(jRip0);
      double double1 = jRip_NumericAntd0.getAccuRate();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("&>8W,a8^d");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "date");
      Attribute.typeToString(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NominalAntd0.copy();
      attribute0.addStringValue("Pvd");
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 111, 3398.970723403024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Attribute attribute0 = new Attribute("How many neighbours are used to determine the width of the weighting function (<= 0 means all neighbours).", 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("@attribute", linkedList0, 3);
      JRip jRip1 = new JRip();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(3455.884, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute2 = new Attribute("", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd1 = jRip1.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd2 = jRip1.new NominalAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd3 = (JRip.NominalAntd)jRip_NominalAntd2.copy();
      assertEquals(0.0, jRip_NominalAntd3.getMaxInfoGain(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd3.getAccuRate(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd3.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd3.getCover(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd3.getAttrValue(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(3, jRip1.getFolds());
      assertEquals(1L, jRip1.getSeed());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Attribute attribute0 = new Attribute("How many neighbours are used to determine the width of the weighting function (<= 0 means all neighbours).", 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Properties properties0 = new Properties((Properties) null);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("ueE\"Tw9j`i ", protectedProperties0);
      attribute1.copy("ueE\"Tw9j`i ");
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute1);
      double double0 = jRip_NominalAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getSplitPoint();
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "integer";
      stringArray0[1] = "relational";
      stringArray0[2] = "real";
      stringArray0[3] = "relational";
      stringArray0[4] = "+DUW>bj\"n5K_3L86Q";
      stringArray0[5] = "string";
      stringArray0[6] = "";
      try { 
        AbstractClassifier.forName("relational", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: relational
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "}W9A";
      stringArray0[2] = "bla[K";
      stringArray0[3] = "*G>,HY,C?@LwC";
      stringArray0[4] = "*G>,HY,C?@LwC";
      stringArray0[5] = "}W9A";
      AbstractClassifier.runClassifier(naiveBayesMultinomialUpdateable0, stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("}W9A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // }W9A not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.49509342535792
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      M5P m5P0 = new M5P();
      m5P0.getTechnicalInformation();
      jRip0.getTechnicalInformation();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "c";
      stringArray1[2] = "";
      stringArray1[3] = "?BKaA#od5C,ug4g";
      jRip0.toString();
      stringArray1[4] = "R";
      AbstractClassifier.runClassifier(m5P0, stringArray1);
      m5P0.setUnpruned(true);
      AbstractClassifier.makeCopy(m5P0);
      AbstractClassifier.makeCopies(m5P0, 2488);
      jRip0.getSeed();
      jRip0.getMinNo();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      jRip0.setOptions(stringArray0);
      jRip_RipperRule0.hasAntds();
      try { 
        jRip1.rulesetForOneClass(2488, (Instances) null, 0.0, 64.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      jRip0.debugTipText();
      StringReader stringReader0 = new StringReader("\tUse randomly chosen initial anchors.");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 25);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      AbstractClassifier.makeCopy(jRip0);
      String[] stringArray0 = new String[5];
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      jRip0.globalInfo();
      Attribute attribute0 = null;
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      jRip0.getUsePruning();
      String string0 = "P3&gN}x|@D";
      int int0 = (-2024);
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null, (-2024));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String string0 = "^kT\\|Ii<2|{6L;kM";
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      String string1 = "Replace rule covers: ";
      stringArray0[0] = "Replace rule covers: ";
      stringArray0[2] = " = ";
      stringArray0[3] = "\r\"w2\"_";
      stringArray0[4] = "^kT|Ii<2|{6L;kM";
      stringArray0[5] = "}%:Dr|-2)7vV";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      
      String string1 = jRip0.foldsTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string1);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iuov2,.e%");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iuov2,.e%");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@E");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList0, (-2329));
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("&", "", 3);
      JRip jRip1 = new JRip();
      jRip1.setSeed(1);
      CoverTree coverTree0 = new CoverTree();
      assertEquals("The base for the expansion constant.", coverTree0.baseTipText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      StringReader stringReader0 = new StringReader("lv8R)a,UJ8K,S,q ");
      StringReader stringReader1 = new StringReader("integer");
      jRip0.getSeed();
      BufferedReader bufferedReader0 = new BufferedReader(stringReader1, 244);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      String string0 = "thanx";
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("weka.classifier.rules.JRip$NominalAntd");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      String string0 = jRip0.seedTipText();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The seed used for randomizing the data.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 118;
      SparseInstance sparseInstance0 = new SparseInstance(118);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      Attribute attribute0 = new Attribute("v%4z2aVZjdd!", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttr();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9383113296830845
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      StringTokenizer stringTokenizer0 = new StringTokenizer("JRIP: No model built yet.", "JRIP: No model built yet.");
      jRip0.getDebug();
      IBk iBk0 = new IBk();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zjq5;T4!";
      stringArray0[1] = "JRIP: No model built yet.";
      stringArray0[2] = "1oHck'V_(1";
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      AbstractClassifier.makeCopy(iBk0);
      jRip_RipperRule0.size();
      Attribute attribute0 = new Attribute("\"|J.\">Qo%WlDe1 T{Xo", 2);
      jRip_RipperRule0.toString(attribute0);
      jRip0.listOptions();
      jRip0.setCheckErrorRate(false);
      jRip_RipperRule0.getConsequent();
      jRip0.getOptimizations();
      jRip0.setUsePruning(false);
      MultiFilter multiFilter0 = new MultiFilter();
      try { 
        Filter.useFilter((Instances) null, (Filter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null);
      Attribute attribute1 = new Attribute("%p_Q\"GhL\"zl_h");
      Attribute attribute2 = new Attribute("relational", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      Attribute.typeToString(attribute1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute2);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      Attribute attribute3 = new Attribute("@attribute", (List<String>) null, 3024);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute1);
      assertEquals(" => %p_Q\"GhL\"zl_h=", string0);
      
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iuov2,.e%");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iuov2,.e%");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@E");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.covers((Instance) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~hQt!!H/-h";
      stringArray0[1] = "Old rule: ";
      stringArray0[2] = "s";
      stringArray0[3] = "}%:Dr|-2)7vV";
      stringArray0[4] = "\r\"w2\"_";
      stringArray0[5] = "^kT|Ii<2|{6L;kM";
      stringArray0[6] = " = ";
      stringArray0[7] = "}`H~4Nm^y(Um.`";
      stringArray0[8] = "";
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("~hQt!!H/-h");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1408;
      intArray0[2] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1351.0), intArray0, 4842);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.kNearestNeighbours(binarySparseInstance2, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Attribute attribute0 = new Attribute("How many neighbours are used to determine the width of the weighting function (<= 0 means all neighbours).", 1);
      DecisionTable decisionTable1 = new DecisionTable();
      Attribute attribute1 = new Attribute("real", 83);
      attribute0.setStringValue("date");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      Instances instances0 = decisionTable1.m_dtInstances;
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 2, 2062.7672135);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(118);
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      Utils.log2 = (double) 6;
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("&", "", 3);
      jRip0.setCheckErrorRate(true);
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      String string0 = jRip0.toString();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals("JRIP: No model built yet.", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.266778223937368
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip0.toString();
      AbstractClassifier.runClassifier(decisionTable0, (String[]) null);
      M5P m5P0 = new M5P();
      M5P m5P1 = new M5P();
      m5P1.setUnpruned(true);
      AbstractClassifier.makeCopy(jRip0);
      AbstractClassifier.makeCopies(decisionTable0, 869);
      jRip0.getSeed();
      jRip0.getMinNo();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      AbstractClassifier.makeCopy(filteredClassifier0);
      jRip0.setOptions((String[]) null);
      jRip_RipperRule0.hasAntds();
      try { 
        jRip0.rulesetForOneClass(2.0, (Instances) null, 2.0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      jRip0.usePruningTipText();
      StringReader stringReader0 = new StringReader("Whether pruning is performed.");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 223);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = '%';
      bufferedReader1.read(charArray0);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader2);
      BufferedReader bufferedReader4 = new BufferedReader(bufferedReader3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      
      String string0 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      
      String string1 = jRip0.checkErrorRateTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string1);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.970791902477622
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      M5P m5P0 = new M5P();
      m5P0.getTechnicalInformation();
      jRip0.getTechnicalInformation();
      AbstractClassifier.makeCopies(m5P0, 2488);
      jRip0.getSeed();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.hasAntds();
      AbstractClassifier.makeCopy(jRip0);
      jRip_RipperRule1.size();
      Attribute attribute0 = new Attribute("", 49);
      jRip_RipperRule0.toString(attribute0);
      jRip0.listOptions();
      jRip0.setCheckErrorRate(false);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.getRevision();
      jRip_RipperRule1.getConsequent();
      jRip0.getOptimizations();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      Instances instances0 = null;
      MultiFilter multiFilter0 = new MultiFilter();
      try { 
        Filter.useFilter((Instances) null, multiFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(118);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka.classifiers.functions.MultilayerPerceptron$NodePanel";
      jRip0.setOptions(stringArray0);
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "}W9A";
      stringArray0[2] = "bla[K";
      stringArray0[3] = "*G>,HY,C?@LwC";
      stringArray0[4] = "*G>,HY,C?@LwC";
      stringArray0[5] = "}W9A";
      stringArray0[6] = "<Zds`BGY89F/xk:,>4";
      stringArray0[7] = "<Zds`BGY89F/xk:,>4";
      stringArray0[8] = "bla[K";
      AbstractClassifier.runClassifier(naiveBayesMultinomialUpdateable0, stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("bla[K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bla[K not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.38615474653985
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(4385.1);
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-3131.4463782));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip_RipperRule0.copy();
      assertEquals((-3131.4463782), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.listOptions();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(%$;h%%s";
      stringArray0[1] = "($r|wIp?";
      stringArray0[2] = "stem";
      JRip.main(stringArray0);
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The minimum total weight of the instances in a rule.";
      stringArray0[1] = "=$rm";
      stringArray0[2] = "The minimum total weight of the instances in a rule.";
      stringArray0[3] = "The minimum total weight of the instances in a rule.";
      stringArray0[4] = "The minimum total weight of the instances in a rule.";
      stringArray0[5] = "The minimum total weight of the instances in a rule.";
      stringArray0[6] = "The minimum total weight of the instances in a rule.";
      stringArray0[7] = "The minimum total weight of the instances in a rule.";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      M5P m5P0 = new M5P();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(2571);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k5gism6d$skJ833RU");
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~hQt!!H/-h";
      stringArray0[1] = "Old rule: ";
      stringArray0[2] = "";
      stringArray0[3] = "}%:Dr|-2)7vV";
      stringArray0[4] = "\r\"w2\"_";
      stringArray0[5] = "^kT|Ii<2|{6L;kM";
      stringArray0[6] = " = ";
      stringArray0[7] = "}`H~4Nm^y(Um.`";
      jRip0.setFolds((-15));
      stringArray0[8] = "";
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, "Fast Effective Rule Induction", Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iuov2,.e%");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iuov2,.e%");
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-1896.1826719939686));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iuov2,.e%");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.hasAntds();
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = jRip0.getRevision();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals("8118", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(865);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1186);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.dataset();
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@E");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1960.650599529);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", arrayList0, (-2329));
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1960, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      
      Utils.SMALL = 0.0;
      Attribute attribute0 = new Attribute(",3!\">%+Gq4mL");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1960.650599529);
      assertEquals(1960.650599529, jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("");
      JRip jRip1 = new JRip();
      jRip1.globalInfo();
      assertEquals(1L, jRip1.getSeed());
  }
}
