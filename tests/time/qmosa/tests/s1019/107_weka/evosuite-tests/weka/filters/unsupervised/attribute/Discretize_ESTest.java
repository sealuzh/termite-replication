/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:24:59 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.205464322156926
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.runFilter(discretize0, (String[]) null);
      discretize0.setAttributeIndices("");
      discretize0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.listOptions();
      Random.setNextRandom((-2486));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_bFY5L(D.VpWuqXN";
      stringArray0[1] = "'";
      stringArray0[2] = "~&n$d";
      stringArray0[3] = "~&n$d";
      stringArray0[4] = "~&n$d";
      stringArray0[5] = "'";
      stringArray0[6] = "'";
      stringArray0[7] = "_bFY5L(D.VpWuqXN";
      stringArray0[8] = "~&n$d";
      Filter.runFilter(multiFilter0, stringArray0);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.447656998631052
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("X]..?f");
      discretize0.setAttributeIndices("X]..?f");
      discretize0.setIgnoreClass(true);
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      int int0 = (-1065);
      int[] intArray0 = new int[11];
      intArray0[0] = (-1065);
      intArray0[1] = (-1);
      intArray0[2] = (-1065);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      MockRandom mockRandom0 = new MockRandom(3147L);
      mockRandom0.nextDouble();
      mockRandom0.nextGaussian();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      MockRandom mockRandom1 = new MockRandom(0L);
      mockRandom0.nextGaussian();
      mockRandom1.doubles(3147L);
      MockRandom mockRandom2 = new MockRandom(4454L);
      mockRandom1.nextGaussian();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(77);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 77
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-475.09877107930686);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-6.78214234);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 790.9400528879808;
      doubleArray1[6] = 1127.75253158;
      doubleArray1[7] = (-732.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-475.09877107930686);
      doubleArray2[1] = (-6.78214234);
      doubleArray2[2] = 790.9400528879808;
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.260788192240021
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("X]..?f");
      discretize0.setAttributeIndices("X]..?f");
      discretize0.m_UseEqualFrequency = true;
      discretize0.m_MakeBinary = true;
      String[] stringArray0 = discretize0.getOptions();
      int[] intArray0 = new int[11];
      intArray0[0] = (-1065);
      intArray0[1] = (-1);
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.203341240631385
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      String[] stringArray0 = new String[6];
      discretize0.m_MakeBinary = true;
      SystemInUtil.addInputLine("z2eE&b");
      stringArray0[0] = "z2eE&b";
      discretize0.getInvertSelection();
      stringArray0[1] = "mJaP?q)OUGT";
      stringArray0[2] = "";
      stringArray0[3] = "w`sH";
      stringArray0[4] = "]FK^@b\"3\"'+";
      stringArray0[5] = "bp6W|[[MqI:52P'd>L)";
      discretize0.setInvertSelection(false);
      Discretize.main(stringArray0);
      discretize0.attributeIndicesTipText();
      discretize0.getMakeBinary();
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(3311);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Le)?[V&=G#='Cb", arrayList0, 3379);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      SystemInUtil.addInputLine("@relation");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@relation";
      stringArray0[2] = ".arff";
      int[] intArray0 = new int[3];
      intArray0[0] = 3379;
      instances1.enumerateInstances();
      intArray0[1] = 489;
      intArray0[2] = 3379;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3379, intArray0, 489);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.dataset();
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Number of bins.");
      protectedProperties0.store((Writer) mockPrintWriter0, "Number of bins.");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-K2VY,@d!FYC6x";
      stringArray0[1] = "A r_Vg-b2`";
      stringArray0[2] = "y7Hy";
      Random.setNextRandom(1);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      Discretize discretize0 = new Discretize("@A0(&E[@}}J/&RNm]'V");
      discretize0.m_UseEqualFrequency = true;
      discretize0.setAttributeIndices("@A0(&E[@}}J/&RNm]'V");
      discretize0.setInvertSelection(true);
      discretize0.binsTipText();
      discretize0.getUseEqualFrequency();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[8];
      SystemInUtil.addInputLine("relational");
      discretize0.setUseEqualFrequency(true);
      stringArray0[0] = null;
      stringArray0[1] = "@attribute";
      stringArray0[2] = "@end";
      stringArray0[0] = "@attribute";
      stringArray0[4] = "numeric";
      stringArray0[5] = "real";
      discretize0.listOptions();
      discretize0.listOptions();
      stringArray0[6] = "numeric";
      stringArray0[0] = "numeric";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = discretize0.getOptions();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[4] = 1;
      intArray0[5] = (-1717986916);
      intArray0[7] = (-2255);
      intArray0[8] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(148, intArray0, (-1));
      Filter.runFilter(discretize0, stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8003780070989173
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("X]..?f");
      discretize0.setAttributeIndices("X]..?f");
      discretize0.m_MakeBinary = true;
      discretize0.setFindNumBins(true);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.7976931348623157E308;
      discretize0.binsTipText();
      discretize0.getOptions();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      discretize0.setFindNumBins(true);
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[6] = 1.0;
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 350);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1879048189));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.binsTipText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/packages");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Number of bins.");
      discretize0.listOptions();
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[5];
      intArray0[4] = 362;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setInvertSelection(true);
      discretize0.setDesiredWeightOfInstancesPerInterval(2647.152932809281);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(2647.152932809281, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("'@qkMW(82C9eYes", arrayList0, 414);
      discretize0.getCapabilities(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.getBinRangesString(3379);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("Test date = ");
      discretize0.setOutputFormat();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Test date = ";
      stringArray0[1] = "Test date = ";
      stringArray0[6] = "Test date = ";
      stringArray0[3] = "Test date = ";
      stringArray0[4] = "Test date = ";
      stringArray0[5] = "Test date = ";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("#");
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute0.enumerateValues();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@attribute";
      stringArray0[2] = "@end";
      stringArray0[3] = "@attribute";
      stringArray0[4] = "numeric";
      stringArray0[5] = "real";
      stringArray0[6] = "numeric";
      stringArray0[7] = "string";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, 1);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[5];
      intArray0[0] = 44;
      intArray0[1] = 1019;
      intArray0[2] = 990;
      intArray0[3] = (-2245);
      int int0 = 1108;
      intArray0[4] = 1108;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getAttributeIndices();
      discretize0.useBinNumbersTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1691);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1019;
      doubleArray0[1] = (double) 990;
      doubleArray0[2] = (double) 990;
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = (double) 44;
      doubleArray0[5] = (double) 44;
      doubleArray0[6] = (-1.7976931348623157E308);
      SparseInstance sparseInstance0 = new SparseInstance((-1.7976931348623157E308), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      // Undeclared exception!
      try { 
        instances0.remove(990);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 990, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      MockRandom mockRandom0 = new MockRandom(26L);
      mockRandom0.nextDouble();
      mockRandom0.nextGaussian();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      MockRandom mockRandom1 = new MockRandom(0L);
      mockRandom0.nextGaussian();
      MockRandom mockRandom2 = new MockRandom((-3226L));
      mockRandom0.nextGaussian();
      discretize0.getCutPoints(2011);
      Random.setNextRandom(1576);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      discretize0.m_FindNumBins = true;
      discretize0.getCapabilities();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.useBinNumbersTipText();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize("X]..?f");
      discretize0.setAttributeIndices("X]..?f");
      discretize0.m_MakeBinary = true;
      int[] intArray0 = new int[11];
      intArray0[2] = (-1065);
      intArray0[4] = (-1065);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, 0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      discretize0.m_IgnoreClass = false;
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[10];
      stringArray0[0] = null;
      stringArray0[1] = "@attribute";
      stringArray0[2] = "@end";
      stringArray0[3] = "@attribute";
      stringArray0[4] = "integer";
      stringArray0[5] = "real";
      stringArray0[6] = "numeric";
      stringArray0[0] = "string";
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6373204733030917
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize("X]..?f");
      discretize0.setAttributeIndices("X]..?f");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      int[] intArray0 = new int[11];
      intArray0[0] = (-1065);
      intArray0[1] = (-1);
      intArray0[2] = (-1065);
      intArray0[4] = (-1065);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, 0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.dataset();
      System.setCurrentTimeMillis(1L);
      discretize0.listOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.nextGaussian();
      String string0 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Le)?[V&=G#='Cb", arrayList0, 3379);
      Instances instances1 = new Instances(instances0, 3379);
      SystemInUtil.addInputLine(".arff");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@data";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@relation";
      stringArray0[6] = "fo~4[]4i";
      stringArray0[7] = ".arff";
      Filter.runFilter(discretize0, stringArray0);
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(false);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize("]\"?uJk's");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "!91|D.4z?DUhcNt";
      stringArray0[1] = "`6";
      stringArray0[2] = "A r_Vg-b2`";
      stringArray0[3] = "]\"?uJk's";
      stringArray0[4] = "]\"?uJk's";
      stringArray0[5] = "]\"?uJk's";
      stringArray0[6] = "]\"?uJk's";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize("y7Hy");
      discretize0.setBins((-13));
      discretize0.m_DesiredWeightOfInstancesPerInterval = 547.8980127548533;
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 547.8980127548533;
      doubleArray1[1] = (double) (-13);
      doubleArray1[2] = 547.8980127548533;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 547.8980127548533;
      doubleArray2[1] = 13.9034501;
      doubleArray2[2] = 547.8980127548533;
      doubleArray2[3] = (double) (-13);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 13.9034501;
      doubleArray3[1] = 13.9034501;
      doubleArray3[2] = (double) (-13);
      doubleArray3[3] = 547.8980127548533;
      doubleArray3[5] = 547.8980127548533;
      doubleArray3[6] = 2781.52562;
      doubleArray3[7] = 547.8980127548533;
      doubleArray0[2] = doubleArray3;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "y7Hy";
      stringArray0[1] = "y7Hy";
      Filter.runFilter(discretize0, stringArray0);
      System.setCurrentTimeMillis((-13));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setDesiredWeightOfInstancesPerInterval((-458.6285535258168));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[6];
      intArray0[2] = (-1892);
      intArray0[1] = 0;
      intArray0[2] = (-2013265917);
      intArray0[3] = (-1892);
      intArray0[4] = 0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SKKY?W'3!V,";
      stringArray0[1] = "(:T1";
      stringArray0[2] = ")e.";
      Filter.runFilter(discretize0, stringArray0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      Properties properties2 = new Properties();
      properties0.elements();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      Properties properties3 = new Properties();
      properties1.entrySet();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      MockRandom mockRandom0 = new MockRandom();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties5);
      discretize0.setOutputFormat();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[8];
      SystemInUtil.addInputLine("relational");
      stringArray0[0] = null;
      stringArray0[1] = "@attribute";
      stringArray0[2] = "@end";
      stringArray0[0] = "@attribute";
      stringArray0[4] = "numeric";
      stringArray0[5] = "real";
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1664);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      MockRandom mockRandom0 = new MockRandom(26L);
      mockRandom0.nextGaussian();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, arrayList2, protectedProperties1);
      arrayList0.add(attribute0);
      MockRandom mockRandom1 = new MockRandom();
      arrayList2.removeAll(arrayList0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, (int[]) null, 3148);
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize("y7Hy");
      discretize0.setBins((-13));
      discretize0.m_DesiredWeightOfInstancesPerInterval = 547.8980127548533;
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 547.8980127548533;
      doubleArray1[1] = (double) (-13);
      doubleArray1[2] = 547.8980127548533;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 547.8980127548533;
      doubleArray2[1] = 13.9034501;
      doubleArray2[2] = 547.8980127548533;
      doubleArray2[3] = (double) (-13);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 13.9034501;
      doubleArray3[1] = 13.9034501;
      doubleArray3[2] = (double) (-13);
      doubleArray3[3] = 547.8980127548533;
      doubleArray3[4] = 547.8980127548533;
      doubleArray3[5] = 547.8980127548533;
      doubleArray3[6] = 2781.52562;
      doubleArray3[7] = 547.8980127548533;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 13.9034501;
      doubleArray4[1] = 13.9034501;
      doubleArray4[2] = (double) (-13);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) (-13);
      doubleArray5[1] = 547.8980127548533;
      doubleArray5[2] = 547.8980127548533;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) (-13);
      doubleArray6[1] = (double) (-13);
      doubleArray6[2] = 547.8980127548533;
      doubleArray6[3] = 2781.52562;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (double) (-13);
      doubleArray7[1] = 547.8980127548533;
      doubleArray7[2] = 13.9034501;
      doubleArray7[3] = 2781.52562;
      doubleArray7[4] = (double) (-13);
      doubleArray7[5] = 2781.52562;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.setMakeBinary(true);
      discretize0.m_FindNumBins = true;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(134);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 134
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3027.2);
      doubleArray0[1] = (-1.0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = discretize0.getRevision();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("8964", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      Attribute attribute0 = new Attribute("zG*WR!%'oH", list0, 3379);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "log2(4.6): ";
      stringArray0[2] = "@end";
      DenseInstance denseInstance0 = new DenseInstance(37);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.798534689126567
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      discretize0.setDesiredWeightOfInstancesPerInterval(366.0);
      discretize0.m_DefaultCols = "'@qkMW(82C9eYes";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setInvertSelection(false);
      discretize0.globalInfo();
      discretize0.getOptions();
      assertEquals(366.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@attribute";
      stringArray0[2] = "@end";
      stringArray0[0] = "@attribute";
      stringArray0[4] = "numeric";
      stringArray0[5] = "real";
      stringArray0[6] = "numeric";
      stringArray0[0] = "numeric";
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter.makeCopies(discretize0, 1788);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1892);
      intArray0[1] = (-1879048189);
      intArray0[2] = (-2013265917);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/idl(W<}v0IEFa!E";
      stringArray0[1] = "/idl(W<}v0IEFa!E";
      stringArray0[2] = "/idl(W<}v0IEFa!E";
      stringArray0[3] = "/idl(W<}v0IEFa!E";
      stringArray0[4] = "/idl(W<}v0IEFa!E";
      stringArray0[5] = "/idl(W<}v0IEFa!E";
      Filter.runFilter(discretize0, stringArray0);
      Random.setNextRandom((-442));
      String string0 = discretize0.invertSelectionTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize("dSMPH'");
      String string0 = discretize0.findNumBinsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Le+)?[&=G#='Cb", arrayList0, 3379);
      Instances instances1 = new Instances(instances0, 3379);
      SystemInUtil.addInputLine("x+Qae#,");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@relation";
      stringArray0[1] = "Le+)?[&=G#='Cb";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".arff";
      stringArray0[4] = "1- ;$VvN9[";
      stringArray0[5] = "_zn)Is{ywB/";
      stringArray0[6] = ".arff";
      stringArray0[7] = "x+Qae#,";
      stringArray0[8] = "@relation";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[8];
      SystemInUtil.addInputLine("relational");
      stringArray0[0] = null;
      stringArray0[1] = "@attribute";
      stringArray0[2] = "@end";
      stringArray0[0] = "@attribute";
      stringArray0[4] = "numeric";
      stringArray0[5] = "real";
      stringArray0[6] = "numeric";
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-4607.05127), intArray0, 1338);
      Discretize discretize1 = new Discretize("string");
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("`D");
      discretize1.getOptions();
      int int0 = 1;
      int[] intArray0 = new int[7];
      int int1 = (-2255);
      intArray0[0] = (-2255);
      intArray0[1] = (-1065);
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (-1065);
      intArray0[6] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1065), intArray0, 148);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.setValue((-2255), "X]..?f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      DenseInstance denseInstance0 = new DenseInstance((byte)0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
