/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:47:37 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m<2l07BYAi5,[");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      stringReader0.close();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      Function.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.apply(function3);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, Integer> function4 = unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function5 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function4);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      unaryOperator2.compose((Function<? super JSPredicateForm, ?>) unaryOperator4);
      unaryOperator1.compose((Function<? super Integer, ?>) function3);
      UnaryOperator.identity();
      unaryOperator4.apply("m<2l07BYAi5,[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator3);
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1179251883779973
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "iXHU9DY4");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.print();
      JSTerm jSTerm1 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Integer, ?>) function1);
      StringReader stringReader0 = new StringReader("NyM@cIG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.addElement((Object) null);
      jSTerm0.stream();
      jSPredicateForm1.toArray();
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2273451507147093
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR. ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("");
      stringReader1.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSTerm0.ensureCapacity((-140));
      jSSubstitution0.add((Object) streamTokenizer0);
      stringReader0.skip((-140));
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSTerm0.capacity();
      jSTerm0.equals(jSPredicateForm1);
      jSPredicateForm3.addElement(jSTerm0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.clonePF();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm6 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm7 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm3.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm9 = jSPredicateForm3.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm3.equals(jSPredicateForm4);
      assertFalse(boolean0);
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm9));
      assertNotSame(jSPredicateForm4, jSPredicateForm5);
      assertNotSame(jSPredicateForm3, jSPredicateForm8);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.027701333351763
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR. ");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("tV>8R0BAvtdY");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[5];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "dR.";
      objectArray0[2] = (Object) stringReader0;
      objectArray0[0] = (Object) streamTokenizer1;
      jSTerm0.toArray(objectArray0);
      streamTokenizer2.parseNumbers();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      jSTerm0.clonePF();
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR.");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      stringReader0.close();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator1.compose((Function<? super JSPredicateForm, ?>) function2);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.forEach(consumer0);
      jSPredicateForm0.equals((JSPredicateForm) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9966392780576343
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR.");
      UnaryOperator.identity();
      UnaryOperator.identity();
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      stringReader0.read(charArray0);
      System.setCurrentTimeMillis(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.toArray();
      jSTerm0.ensureCapacity(0);
      jSTerm0.print();
      streamTokenizer0.nextToken();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm1.add((Object) null);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm1);
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.753224735656615
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR. ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) "dR. ");
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator0);
      jSPredicateForm0.clone();
      jSPredicateForm0.addElement(jSTerm0);
      jSPredicateForm0.clonePF();
      jSTerm0.toStr();
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm2.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3102240192648786
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m<2l07BYAi5,[");
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = '/';
      charArray0[4] = 'I';
      stringReader0.read(charArray0);
      System.setCurrentTimeMillis(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.stream();
      jSTerm1.toArray();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm0.ensureCapacity((-5486));
      jSTerm0.ensureCapacity(462);
      jSTerm0.print();
      streamTokenizer0.nextToken();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(1L);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m<2l07BYAi5,[");
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'h';
      charArray0[3] = '/';
      charArray0[4] = 'I';
      long long0 = 327L;
      System.setCurrentTimeMillis(327L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.stream();
      jSTerm1.toArray();
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<JSPredicateForm> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(jSPredicateForm0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      unaryOperator1.compose((Function<? super Integer, ?>) function2);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR. ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-140));
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("tV>8R0BAvtdY");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      Integer integer0 = new Integer((-140));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.removeAll(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m<2l07BYAi5,[");
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = '@';
      charArray0[2] = 'E';
      stringReader0.read(charArray0);
      System.setCurrentTimeMillis((-892L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.stream();
      jSPredicateForm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1544958086999477
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR.");
      UnaryOperator.identity();
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.clone();
      jSPredicateForm0.addElement(jSTerm0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm0.toStr();
      jSTerm0.toStr();
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      JSJshopVars.verticalL = (-4043);
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm3.print();
      assertEquals(0, jSPredicateForm3.size());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.665515979580288
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR. ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-140));
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("tV>8R0BAvtdY");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.stream();
      Object[] objectArray0 = new Object[5];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "dR.";
      streamTokenizer1.nextToken();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis((-4));
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.add((Object) "0.6");
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" . ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-140));
      stringReader0.ready();
      streamTokenizer0.slashSlashComments(true);
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.pushBack();
      streamTokenizer1.nextToken();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.addElement((Object) null);
      jSTerm0.stream();
      jSPredicateForm0.toArray();
      streamTokenizer1.parseNumbers();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR.");
      UnaryOperator.identity();
      UnaryOperator.identity();
      System.setCurrentTimeMillis((-2383L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.addElement("dR.");
      jSTerm0.stream();
      jSTerm0.toArray();
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR.");
      UnaryOperator.identity();
      stringReader0.reset();
      UnaryOperator.identity();
      long long0 = (-2383L);
      System.setCurrentTimeMillis((-2383L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(2602);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(124);
      jSTerm0.add((Object) null);
      jSTerm0.removeAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR. ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(124);
      jSTerm0.add((Object) integer0);
      jSTerm0.removeAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR.");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      stringReader0.close();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Object> function2 = Function.identity();
      function1.compose((Function<? super Object, ?>) function2);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function4 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super Integer, ?>) function5);
      Function.identity();
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      Function.identity();
      unaryOperator1.compose((Function<? super JSPredicateForm, ?>) function3);
      unaryOperator0.compose((Function<? super Integer, ?>) function6);
      UnaryOperator.identity();
      unaryOperator1.apply(unaryOperator2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      UnaryOperator.identity();
      stringReader0.markSupported();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.156071048481391
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E|)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      jSSubstitution1.add((Object) jSSubstitution0);
      stringReader0.skip(41);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution1);
      stringReader0.read();
      Integer integer0 = new Integer(2751);
      jSSubstitution1.add((Object) integer0);
      jSTerm0.equals(jSPredicateForm1);
      jSPredicateForm3.spliterator();
      JSJshopVars.minus = 41;
      System.setCurrentTimeMillis(1854L);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution1);
      System.setCurrentTimeMillis(59L);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm2, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.275508648777424
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m<2l07BYAi5,[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'w';
      charArray0[2] = 'y';
      charArray0[3] = '2';
      charArray0[4] = 'l';
      stringReader0.read(charArray0);
      stringReader0.skip((-1));
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      stringReader0.read();
      Integer integer0 = new Integer(4082);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.equals(jSPredicateForm3);
      jSPredicateForm2.spliterator();
      System.setCurrentTimeMillis(4082);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.applySubstitutionPF(jSSubstitution1);
      System.setCurrentTimeMillis(1L);
      jSPredicateForm1.matches(jSPredicateForm4, jSSubstitution1);
      jSTerm0.matches(jSPredicateForm1);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7824268046877836
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR. ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.sort(comparator0);
      Object object0 = jSPredicateForm0.clone();
      jSPredicateForm0.addElement(object0);
      jSTerm0.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-140));
      stringReader0.ready();
      StringReader stringReader1 = new StringReader(",v t+=-`j");
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.nextToken();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.addElement(jSTerm0);
      jSTerm0.stream();
      jSTerm0.toArray();
      jSTerm0.add((Object) streamTokenizer1);
      streamTokenizer2.parseNumbers();
      jSPredicateForm0.print();
      streamTokenizer0.ordinaryChars(44, 569);
      // Undeclared exception!
      try { 
        jSTerm0.subList(754, (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(754) > toIndex(-4)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0277013333517635
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m<2l07BYAi5,[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm1.insertElementAt(jSPredicateForm2, 1);
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSPredicateForm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.622743907496936
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "iXHU9DY4");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm1);
      jSPredicateForm1.sort((Comparator) null);
      jSTerm1.matches(jSPredicateForm0, jSSubstitution0);
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.backquote = 0;
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m<2l07BYAi5,[");
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = '/';
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      function4.andThen((Function<? super Integer, ? extends Integer>) function3);
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.compose((Function<? super Integer, ?>) function5);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.size();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      function3.andThen((Function<? super Integer, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      function3.andThen((Function<? super Integer, ? extends Integer>) unaryOperator3);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.compose((Function<? super Integer, ?>) function2);
      jSPredicateForm0.toStr();
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(2954L);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("Qj<Ad.j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iXHU9DY4");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.pushBack();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSSubstitution0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      objectArray0[1] = (Object) stringReader0;
      objectArray0[4] = (Object) "iXHU9DY4";
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iXHU9DY4");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR. ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.toStr();
      jSPredicateForm0.ensureCapacity((-4));
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'h';
      charArray0[3] = '/';
      Object[] objectArray0 = new Object[4];
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.coma = (-33);
      JSJshopVars.coma = (-1433500681);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      function2.andThen((Function<? super Integer, ?>) function1);
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply(function2);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function5 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function3);
      Function<Object, Integer> function6 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.compose((Function<? super String, ?>) function3);
      unaryOperator4.andThen((Function<? super Object, ? extends Integer>) function6);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator4.compose((Function<? super Integer, ?>) function4);
      UnaryOperator.identity();
      unaryOperator2.apply(unaryOperator3);
      StringReader stringReader0 = new StringReader("dr. ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator.identity();
      stringReader0.markSupported();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("34q[uOJL!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = ";{#193BL-`|?";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(";{#193BL-`|?");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dR.");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(<cC77h}.9<]s[");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      System.setCurrentTimeMillis(462);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
