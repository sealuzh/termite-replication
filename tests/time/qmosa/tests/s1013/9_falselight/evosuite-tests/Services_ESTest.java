/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:07:53 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7636717913850872
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://4[9m$'3}^]:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "AQgD");
      Services services0 = new Services();
      Services.testPOP3("", 0);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP((String) null, 224);
      Services.testHTTP(">#.zj;P`\"3f;ut\"RDn", (-128));
      Services.testHTTP("$jZfYuV|VGL9M(m>[", 0);
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP((String) null, 0);
      services_SIMPLE_Result1.Error = "**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: $jZfYuV|VGL9M(m>[) **";
      services_SIMPLE_Result1.Error = "** Erreur g\u00E9n\u00E9r\u00E9e : ";
      services_SIMPLE_Result1.Error = "%->,q{^}-dW(&uBb";
      services_SIMPLE_Result1.Error = "fxqF";
      services_SIMPLE_Result1.time = (long) 0;
      services_SIMPLE_Result1.reset();
      services_SIMPLE_Result1.reset();
      String string0 = services_SIMPLE_Result1.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      String string1 = services_SIMPLE_Result0.Error;
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("4[9m$'3}^]", 0);
      assertEquals(5, services_HTTP_Result0.page_weight);
      assertTrue(services_HTTP_Result0.works);
      
      Services.testPOP3("ec>V/u3,7b#u1Cv'kag", 0);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("", 0);
      assertEquals(0L, services_HTTP_Result1.time);
      assertEquals(0, services_HTTP_Result1.code);
      assertEquals(0, services_HTTP_Result1.page_weight);
      assertFalse(services_HTTP_Result1.works);
      
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testSMTP("**URL Mal Form\u00E9** (java.net.MalformedURLException: Invalid port number :-128) **", 0);
      assertEquals(0L, services_SIMPLE_Result2.time);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("200.42.42.0", 2656);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      System.setCurrentTimeMillis((-1186L));
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("L3JJTAk,K/9Kz+,WP", 2656);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 3000);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      System.setCurrentTimeMillis(224);
      System.setCurrentTimeMillis(0L);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", 3000);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.861445611758169
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://$jZfYuV|VGL9M(m>[:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "AQgD");
      Services services0 = new Services();
      Services.testPOP3("", 0);
      Services.testSMTP((String) null, 224);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP(">#.zj;P`\"3f;ut\"RDn", (-128));
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("$jZfYuV|VGL9M(m>[", 0);
      assertEquals(5, services_HTTP_Result1.page_weight);
      assertTrue(services_HTTP_Result1.works);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("** Erreur g\u00E9n\u00E9r\u00E9e : ", 6661);
      services_SIMPLE_Result0.Error = "** Erreur g\u00E9n\u00E9r\u00E9e : ";
      services_SIMPLE_Result0.Error = "%->,q{^}-dW(&uBb";
      services_SIMPLE_Result0.Error = "fxqF";
      services_SIMPLE_Result0.time = 1L;
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result0.reset();
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      String string1 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **URL Mal Form\u00E9** (java.net.MalformedURLException: Invalid port number :-128) **.\n****", string1);
      
      Services.testHTTPS("4[9m$'3}^]", 0);
      Services.testPOP3("ec>V/u3,7b#u1Cv'kag", 0);
      Services.testHTTPS("", 3000);
      System.setCurrentTimeMillis(0);
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("UVg~1U", 0);
      assertFalse(services_SIMPLE_Result1.works);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3945268395631056
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:3000");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "AQgD");
      Services services0 = new Services();
      Services.testPOP3("jNe@k`<g4xtd", 3000);
      Services.testPOP3("AQgD", 3000);
      Services.testPOP3("", (-27));
      Services.testPOP3("nw|L7&FpC\"=#c}|AR", 3000);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", 3000);
      assertEquals(5, services_HTTP_Result0.page_weight);
      assertTrue(services_HTTP_Result0.works);
      
      System.setCurrentTimeMillis((-1L));
      Services.testSMTP("", 3000);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("", 0);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("J0wZbDvk1e~4^8 mkA8", (-357));
      assertEquals(0, services_HTTP_Result0.code);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Muy$FP+&</\"^%lHpb");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS((String) null, 1062);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP((String) null, 802);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("@B|1R`xuw7D`JykkCD", (-1));
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.reset();
      assertEquals(0, services_HTTP_Result0.code);
      
      services_HTTP_Result0.code = 1260;
      services_HTTP_Result0.Error = "";
      services_HTTP_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.reset();
      services_HTTP_Result0.code = services_HTTP_Result0.code;
      services_SIMPLE_Result0.toString();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("OrV3ZErA", 0);
      assertEquals(0, services_HTTP_Result1.code);
  }
}
