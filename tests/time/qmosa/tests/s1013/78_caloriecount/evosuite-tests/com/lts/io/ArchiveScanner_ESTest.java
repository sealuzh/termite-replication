/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:38:34 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.ImprovedFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "khQ$CReHMJVcz";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("khQ$CReHMJVcz");
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1889, (-1487));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      byteArrayInputStream0.close();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      byteArrayInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.skip((byte)27);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.available();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      sequenceInputStream2.markSupported();
      byteArrayInputStream0.markSupported();
      Vector<Integer> vector0 = new Vector<Integer>();
      String[] stringArray0 = new String[1];
      sequenceInputStream2.markSupported();
      stringArray0[0] = "khQ$CReHMJVcz";
      archiveScanner0.includes = stringArray0;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector1;
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, ".YN6s", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String string0 = "";
      String string1 = "tp0OcrWYx.ja.jar.jar";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesNotIncluded = vector0;
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.processFile("");
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, ".JAR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("khQ$CReHMJVcz");
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1889, (-1487));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      byteArrayInputStream0.close();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      byteArrayInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.skip((byte)27);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.available();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      byteArrayInputStream0.markSupported();
      Vector<Integer> vector0 = new Vector<Integer>();
      String[] stringArray0 = new String[1];
      sequenceInputStream2.markSupported();
      stringArray0[0] = "khQ$CReHMJVcz";
      archiveScanner0.includes = stringArray0;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsExcluded = vector1;
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.processDirectory(improvedFile0, "khQ$CReHMJVcz", true);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "khQ$CReHMJVcz", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/khQ$CReHMJVcz
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9210203354075464
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("khQ$CReHMJVcz");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "khQ$CReHMJVcz";
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector1;
      archiveScanner0.includes = stringArray0;
      archiveScanner0.setExcludes(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("khQ$CReHMJVcz/.WAR0.EAR");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      File file0 = MockFile.createTempFile(".WAR", ".EAR", (File) improvedFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("khQ$CReHMJVcz");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      ImprovedFile improvedFile1 = new ImprovedFile(file0, "!;Y");
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, ".EAR", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ImprovedFile improvedFile0 = new ImprovedFile("xSJ{");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-24);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-103466917), (byte) (-24));
      byteArrayInputStream0.read();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xSJ{");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">~y0)fzQJ|aoD<Y");
      MockFile.createTempFile("xSJ{", (String) null, (File) improvedFile0);
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "rjar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "rjar", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("khQ$CReHMJVcz");
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1873, (-1487));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      byteArrayInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      Integer integer0 = new Integer(1873);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.available();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      byteArrayInputStream0.read();
      InputStream[] inputStreamArray0 = new InputStream[2];
      Vector<Object> vector1 = new Vector<Object>();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte) (-11);
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      archiveScanner0.dirsExcluded = vector1;
      inputStreamArray0[0] = (InputStream) sequenceInputStream2;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "khQ$CReHMJVcz";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.setExcludes(stringArray0);
      inputStreamArray0[1] = (InputStream) byteArrayInputStream0;
      archiveScanner0.isArchive(improvedFile0);
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "khQ$CReHMJVcz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "khQ$CReHMJVcz";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("khQ$CReHMJVcz");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "khQ$CReHMJVcz";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.setExcludes(stringArray0);
      System.setCurrentTimeMillis(4575L);
      archiveScanner0.setExcludes(stringArray0);
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("khQ$CReHMJVcz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("khQ$CReHMJVcz");
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1889, (-1487));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      byteArrayInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.skip((byte)27);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.available();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      InputStream[] inputStreamArray0 = new InputStream[2];
      inputStreamArray0[0] = (InputStream) sequenceInputStream2;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "khQ$CReHMJVcz";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.setExcludes(stringArray0);
      inputStreamArray0[1] = (InputStream) byteArrayInputStream0;
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("quMXW;*H4?{H:C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("khQ$CReHMJVcz");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "khQ$CReHMJVcz";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.setExcludes(stringArray0);
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "R=S'd$t+MB$.i_V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tmptcrWYJx.jar/tm0tcrWYJx.jarjar");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      ImprovedFile improvedFile0 = new ImprovedFile("tmptcrWYJx.jar", "tmptcrWYJx.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "tmptcrWYJx.jar");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("tmptcrWYJx.jar/tm0tcrWYJx.jarjar");
      FileSystemHandling.createFolder(evoSuiteFile1);
      archiveScanner0.isArchive(improvedFile0);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis((-1095L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-3642L));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(3L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1139L);
      ImprovedFile improvedFile0 = new ImprovedFile("U@C.7YDduN[A&aL2$3");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("YG5sgihgHv*gO9xdb", "i4F9H`ZJI_o;l$O&:");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("YG5sgihgHv*gO9xdb", "i4F9H`ZJI_o;l$O&:");
      ImprovedFile improvedFile2 = improvedFile1.createTempDir("+23RZ", "P(}Y(2O)x5 LI/\"kNl~");
      ImprovedFile improvedFile3 = improvedFile2.createTempDir();
      ImprovedFile improvedFile4 = improvedFile0.createTempDir("P(}Y(2O)x5 LI/\"kNl~", "P(}Y(2O)x5 LI/\"kNl~");
      improvedFile3.delete();
      improvedFile3.setLastModified(0L);
      improvedFile1.createTempDir("pty.", "3p$.}+7");
      improvedFile0.toPath();
      improvedFile1.setLastModified(0L);
      improvedFile4.createTempDir("+23RZ", "3p$.}+7");
      ImprovedFile improvedFile5 = new ImprovedFile("3p$.}+7");
      ImprovedFile improvedFile6 = ImprovedFile.createTempDirectory("Hv-lk0eZ7t~$/us", "backup", (File) improvedFile0);
      improvedFile2.deleteAll();
      ImprovedFile.buildName("TjG9V7NWN+lGb3;wq", (-118L), "DfB8O_2&f", improvedFile2);
      ImprovedFile improvedFile7 = new ImprovedFile(improvedFile0, "i4F9H`ZJI_o;l$O&:");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile6);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("`Ug\\|hpeM{6/`Ug\\|hpeM{6");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ImprovedFile improvedFile0 = new ImprovedFile(")mmGn _`", ")mmGn _`");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(improvedFile0);
      // Undeclared exception!
      try { 
        MockURI.create(")mmGn _`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 5: )mmGn _`
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("C!{~BE*rt|");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("C!{~BE*rt|", "C!{~BE*rt|");
      improvedFile0.toPath();
      ImprovedFile improvedFile2 = new ImprovedFile(improvedFile0);
      improvedFile1.setReadOnly();
      ImprovedFile.buildName("C!{~BE*rt|", 0L, "", improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "n.jar", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".jar.jar";
      stringArray0[1] = "eM{6";
      stringArray0[2] = "ld0dDh\"PF~o(2[*?";
      stringArray0[3] = "G?wmQEX:tQP(N1065.com.lts.io.ArchiveScanner.jar";
      stringArray0[4] = ".war";
      stringArray0[5] = ".WAR";
      stringArray0[6] = ".war";
      stringArray0[7] = "$'iK!/c";
      stringArray0[8] = "<M+l&}E~kHWww3\"Uyfn";
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RAi$Hy`T";
      stringArray0[1] = ".JAR";
      stringArray0[2] = "";
      stringArray0[3] = "ners";
      stringArray0[4] = "v-,*8j*-{NH=0X[";
      stringArray0[5] = ".JAR";
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "i4F9H`ZJI_o;l$O&:");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 7, (-1613792495));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      byteArrayInputStream0.close();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.skip((byte)2);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration2);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream2);
      InputStream[] inputStreamArray0 = new InputStream[6];
      inputStreamArray0[0] = (InputStream) sequenceInputStream2;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i4F9H`ZJI_o;l$O&:";
      stringArray0[1] = "";
      archiveScanner0.setExcludes(stringArray0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("khQ$CReHMJVcz");
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1889, (-1487));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      byteArrayInputStream0.close();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      byteArrayInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.skip((byte)27);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.available();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      byteArrayInputStream0.markSupported();
      Vector<Integer> vector0 = new Vector<Integer>();
      InputStream[] inputStreamArray0 = new InputStream[2];
      inputStreamArray0[0] = (InputStream) sequenceInputStream2;
      String[] stringArray0 = new String[1];
      sequenceInputStream2.markSupported();
      stringArray0[0] = "khQ$CReHMJVcz";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "khQ$CReHMJVcz", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("YG5sgihgHv*gO9xdb", "i4F9H`ZJI_o;l$O&:");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("YG5sgihgHv*gO9xdb", "i4F9H`ZJI_o;l$O&:");
      ImprovedFile improvedFile2 = improvedFile1.createTempDir("+23RZ", "P(}Y(2O)x5 LI/\"kNl~");
      ImprovedFile improvedFile3 = improvedFile2.createTempDir();
      ImprovedFile improvedFile4 = improvedFile0.createTempDir("P(}Y(2O)x5 LI/\"kNl~", "P(}Y(2O)x5 LI/\"kNl~");
      improvedFile3.delete();
      improvedFile3.setLastModified(0L);
      ImprovedFile improvedFile5 = improvedFile1.createTempDir("pty.", "3p$.}+7");
      improvedFile0.toPath();
      improvedFile1.setLastModified(0L);
      ImprovedFile improvedFile6 = new ImprovedFile(improvedFile4);
      improvedFile5.setReadOnly();
      improvedFile6.createTempDir(".war", "PL5KNGDjE'2R!@M");
      improvedFile6.createTempDir("i4F9H`ZJI_o;l$O&:", "rjar");
      ImprovedFile improvedFile7 = improvedFile6.createTempDir();
      ImprovedFile improvedFile8 = new ImprovedFile(improvedFile7, "+23RZ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile4);
      archiveScanner0.scandir(improvedFile5, "khQ$CReHMJVcz281320..ear.jar", true);
      assertNotSame(improvedFile5, improvedFile7);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("YG5sgihgHv*gO9xdb", "i4F9H`ZJI_o;l$O&:");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("#c[g?=h7GM)M/G", "]r l|?'(pUF8]I3V#");
      ImprovedFile improvedFile2 = improvedFile1.createTempDir("]r l|?'(pUF8]I3V#", "]r l|?'(pUF8]I3V#");
      ImprovedFile improvedFile3 = improvedFile0.createTempDir();
      ImprovedFile improvedFile4 = improvedFile2.createTempDir("tmp0tcrWYJx.jar.jar", "3p$.}+7");
      improvedFile0.delete();
      improvedFile1.setLastModified(0L);
      ImprovedFile improvedFile5 = improvedFile3.createTempDir("YG5sgihgHv*gO9xdb", "YG5sgihgHv*gO9xdb");
      improvedFile1.toPath();
      improvedFile5.setLastModified(0L);
      ImprovedFile improvedFile6 = new ImprovedFile(improvedFile0);
      improvedFile4.setReadOnly();
      MockFile mockFile0 = new MockFile("!uDu", "]r l|?'(pUF8]I3V#");
      ImprovedFile improvedFile7 = new ImprovedFile(mockFile0, ".jar0*Jp}@EH;uQ4E[*|S[@.jar.jar");
      improvedFile7.createTempDir("!uDu", (String) null);
      ImprovedFile improvedFile8 = new ImprovedFile(improvedFile3, "{7X1s)Nd5.jar");
      ImprovedFile improvedFile9 = ImprovedFile.createTempDirectory("tmp0tcrWYJx.jar.jar", ".LM^pIjo", (File) improvedFile6);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile9);
      archiveScanner0.scandir(improvedFile4, "]r l|?'(pUF8]I3V#", true);
      assertNotSame(improvedFile4, improvedFile5);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tmptcrWYJx.jar/tm0tcrWYJx.jarjar");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "tm0tcrWYJx.jarjar");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "tm0tcrWYJx.jarjar";
      stringArray0[1] = "tmptcrWYJx.jar";
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("tmptcrWYJx.jar/tm0tcrWYJx.jarjar");
      FileSystemHandling.createFolder(evoSuiteFile1);
      stringArray0[2] = "tmptcrWYJx.jar";
      System.setCurrentTimeMillis((-1095L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-3642L));
      ImprovedFile improvedFile0 = new ImprovedFile("tmp0tcrWYJx.jar.jar3khQ$CReHMJVcz.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "tm0tcrWYJx.jarjar", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/tmp0tcrWYJx.jar.jar3khQ$CReHMJVcz.jar
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "i4F9H`ZJI_o;l$O&:");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 7, (-1613792495));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      byteArrayInputStream0.close();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.skip((byte)2);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration2);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream2);
      InputStream[] inputStreamArray0 = new InputStream[6];
      inputStreamArray0[0] = (InputStream) sequenceInputStream2;
      inputStreamArray0[1] = (InputStream) sequenceInputStream4;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)2, 7);
      inputStreamArray0[2] = (InputStream) byteArrayInputStream1;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      inputStreamArray0[3] = (InputStream) pipedInputStream0;
      inputStreamArray0[4] = (InputStream) sequenceInputStream3;
      inputStreamArray0[5] = (InputStream) sequenceInputStream3;
      vector0.toArray(inputStreamArray0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "hk");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /i4F9H`ZJI_o;l$O&:
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }
}
