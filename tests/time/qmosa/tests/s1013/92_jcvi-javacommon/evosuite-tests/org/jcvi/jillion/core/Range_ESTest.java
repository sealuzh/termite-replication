/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 00:50:18 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.234597313459731
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.getLength();
      String string0 = "1@-j&x)U^\\p&";
      Long.getLong("1@-j&x)U^p&");
      Long.getLong("1@-j&x)U^p&");
      range0.equals((Object) null);
      Range range2 = Range.of((-992L));
      range2.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("1@-j&x)U^p&", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 1@-j&x)U^p& into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.074030273998048
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Long.getLong("qgE@z_P`q3'1");
      range0.equals(object0);
      Range range1 = Range.of(3292L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(".", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse . into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.511610424382585
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-3133L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1558L, 3346L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(4294967296L);
      range1.getBegin(range_CoordinateSystem1);
      Object object0 = new Object();
      range0.equals((Object) null);
      long long1 = 578L;
      Range.of((-1L));
      long long2 = 436L;
      // Undeclared exception!
      try { 
        Range.ofLength((-1821L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4665853549084447
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.getLength();
      Object object0 = new Object();
      range0.equals(object0);
      range1.equals(object0);
      long long0 = 2042L;
      Range range2 = Range.of(2042L);
      Range range3 = Range.ofLength(4294967295L);
      range3.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range5 = Range.of(4294967295L);
      range4.equals(range5);
      long long1 = 578L;
      long long2 = (-1625L);
      Range.of((-1625L));
      long long3 = (-1L);
      // Undeclared exception!
      try { 
        range2.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.209036898546093
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-928L), 255L);
      Range range1 = Range.of((-3447L));
      Range.of((-9223372036854775808L), 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.515717960586334
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = 65535L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-3133L);
      Range range0 = Range.of(range_CoordinateSystem0, (-3133L), 65535L);
      Range range1 = Range.of(range_CoordinateSystem0, (-3133L), 32767L);
      range1.complement(range0);
      Long long2 = new Long(65535L);
      range0.equals(long2);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.796336049535939
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(2247L);
      Range range1 = Range.of(2247L, 2247L);
      Object object0 = new Object();
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      assertSame(range1, range0);
      
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
      
      range0.getEnd();
      Range range2 = Range.of(1598L);
      range2.isSubRangeOf(range1);
      range0.equals(range2);
      Range range3 = Range.of(2247L);
      List<Range> list1 = range2.split(957L);
      long long0 = range1.getEnd();
      assertEquals(2247L, long0);
      
      Range range4 = Range.of((-334L), 578L);
      range4.spliterator();
      range0.spliterator();
      Range range5 = Range.ofLength(565L);
      Range range6 = range2.intersection(range4);
      range6.getEnd();
      Range.Builder range_Builder0 = new Range.Builder();
      List<Range> list2 = range3.complementFrom(list1);
      boolean boolean1 = range5.equals(list1);
      assertTrue(list1.equals((Object)list2));
      
      boolean boolean2 = range6.endsBefore(range2);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = range1.startsBefore(range5);
      assertFalse(range5.isEmpty());
      assertTrue(boolean3 == boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3385526453680145
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(255L, 9223372036854774114L);
      Object object0 = new Object();
      Range range1 = Range.of(9223372032559808513L);
      List<Range> list0 = range0.split(9223372036854774114L);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.35508521262691
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Object object0 = new Object();
      Range range1 = Range.of(1L);
      range1.intersects(range0);
      Object object1 = new Object();
      range1.equals(range0);
      Range.of((-4007L));
      Range.of(416L);
      Range range2 = Range.ofLength(1441L);
      Range.ofLength(0L);
      Range.of((-4352L));
      // Undeclared exception!
      try { 
        range2.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4665182787021576
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.ofLength(0L);
      range1.endsBefore(range0);
      range1.toString();
      range0.getEnd();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range_CoordinateSystem0);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range2 = Range.of(0L);
      range2.spliterator();
      List<Range> list0 = range2.complement(range0);
      assertTrue(list0.isEmpty());
      
      range2.spliterator();
      range0.intersects(range2);
      range0.endsBefore(range2);
      Range range3 = range2.asRange();
      range1.isEmpty();
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      range3.endsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.of(1L, 1L);
      Range range4 = Range.ofLength(0L);
      assertSame(range4, range1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.778225413018444
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.179370694698119
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.getLength();
      Object object0 = new Object();
      range0.equals(object0);
      range1.equals(object0);
      Range range2 = Range.ofLength(4294967295L);
      Range range3 = Range.ofLength(4294967295L);
      range2.equals(range3);
      range2.toString();
      Range.of(251L);
      Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1840L, (-1871L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.93453559666881
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Long.getLong(".");
      range0.equals((Object) null);
      range0.startsBefore(range0);
      range0.intersection(range0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem..
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4929858637379123
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(2247L);
      Range range1 = Range.of(2247L, 2247L);
      Object object0 = new Object();
      range1.endsBefore(range0);
      range1.complement(range0);
      range0.getEnd();
      Range range2 = Range.of(1598L);
      range2.isSubRangeOf(range1);
      Long long0 = new Long(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object1 = new Object();
      range2.equals((Object) null);
      Range.of(127L);
      // Undeclared exception!
      try { 
        Range.ofLength((-878L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.499978318709197
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.ofLength(0L);
      range1.getLength();
      range0.intersection(range1);
      Object object0 = new Object();
      range1.equals(object0);
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3280883435714257
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of((-1L), 9223372036854773945L);
      Object object0 = new Object();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        range1.split(9223372036854773945L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3728 would make range [9223372036854773944 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9504258637418843
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(255L, 9223372036854774114L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8951043369520963
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.ofLength(0L);
      long long0 = (-128L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4369218918979825
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(959L, 959L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem3, 960L, 960L);
      range2.complement(range0);
      Range.Builder range_Builder1 = new Range.Builder(960L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2365L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7092929855193044
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854773945L);
      Object object0 = new Object();
      Range range1 = Range.of(522L);
      List<Range> list0 = range0.complement(range1);
      // Undeclared exception!
      try { 
        range1.complementFrom(list0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6443319916227837
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(4294967311L);
      range0.iterator();
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(4294967311L);
      Range range3 = range2.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.equals(range_CoordinateSystem0);
      range0.intersects(range2);
      Long long0 = new Long((-421L));
      range1.equals("length must be >= 0");
      Range.of((-421L), 108L);
      List<Range> list0 = range1.complement(range2);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-3243L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      String string0 = "length must be >= 0";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-968L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -968 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4616400811283725
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 4294967294 ]/0B");
      range0.intersects(range1);
      range1.iterator();
      Range range2 = Range.of(1825L, 1825L);
      range2.intersects(range0);
      Range.CoordinateSystem.values();
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      range1.split(1L);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.468162190646411
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854773945L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-586L), (-586L));
      range1.complement(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-2743L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3294149950614744
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-3133L);
      Range range0 = Range.of(range_CoordinateSystem0, (-3133L), 65535L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(3292L);
      range0.startsBefore(range1);
      String string0 = "<K@%x9i}b<P;A";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("<K@%x9i}b<P;A", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse <K@%x9i}b<P;A into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.632704255094684
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = Range.of(2247L, 9223372036854773561L);
      Object object0 = new Object();
      boolean boolean0 = range1.endsBefore(range2);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      Range range3 = Range.ofLength(255L);
      long long0 = range3.getEnd();
      assertEquals(254L, long0);
      
      Range range4 = Range.of(255L);
      boolean boolean1 = range4.isSubRangeOf(range2);
      Range range5 = Range.of(9223372032559808496L, 9223372036854775807L);
      range5.equals(range0);
      Range.ofLength(1851L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range6 = range_Builder0.build();
      Range range7 = Range.ofLength(1851L);
      List<Range> list1 = range6.complement(range7);
      List<Range> list2 = range5.complementFrom(list1);
      assertFalse(list2.equals((Object)list1));
      
      List<Range> list3 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertFalse(list0.equals((Object)list1));
      assertTrue(list3.isEmpty());
      
      boolean boolean2 = range3.endsBefore(range1);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = range0.startsBefore(range3);
      assertTrue(boolean3 == boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5519942547196632
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-2390L));
      Range range1 = Range.of((-2390L), (-2390L));
      Object object0 = new Object();
      range0.endsBefore(range1);
      List<Range> list0 = range1.complement(range0);
      range1.getEnd();
      Range range2 = Range.of((-2390L));
      range2.isSubRangeOf(range1);
      range2.isSubRangeOf(range1);
      range0.complement(range2);
      Range range3 = Range.ofLength(32767L);
      range3.split(32767L);
      range2.complementFrom(list0);
      range2.complementFrom(list0);
      // Undeclared exception!
      try { 
        range2.split((-857L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2466326715553495
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-981L), 225L);
      range0.split(225L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1783L, 160L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1891546610765857
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = (-956L);
      Range range0 = Range.of((-956L), (-491L));
      Object object0 = new Object();
      long long1 = (-4L);
      range0.getBegin();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder((-1098L), (-1098L));
      long long2 = (-4499L);
      range_Builder0.contractBegin((-4499L));
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("_#$TOe_;f%qU", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse _#$TOe_;f%qU into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2887937023370126
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range range0 = Range.of((-1L), 9223372036854773945L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.3234602789656384
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object1 = new Object();
      range1.equals(range0);
      long long1 = 578L;
      Range.of(578L);
      Range range2 = Range.ofLength(1L);
      Range.of(1L);
      Range.ofLength(236L);
      Range range3 = range0.intersection(range1);
      range3.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 236L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3847669501595523
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      long long0 = 0L;
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.ofLength(0L);
      range0.intersection(range1);
      Object object0 = new Object();
      range_Builder0.contractBegin(0L);
      Range range2 = range_Builder0.build();
      range2.split(255L);
      Range.ofLength(726L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.236877390781638
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(object0);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1549L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1L, 1549L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd();
      range0.equals(range1);
      Range.of(1549L);
      String string0 = "eZZ";
      // Undeclared exception!
      try { 
        Range.parseRange("eZZ", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse eZZ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9336295972450466
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Object object0 = new Object();
      Range range1 = Range.of(1L);
      range1.intersects(range1);
      Object object1 = new Object();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5065292070587235
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(object0);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem2);
      Range range2 = range1.intersection(range0);
      long long0 = 0L;
      Range range3 = Range.of(127L, 127L);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      range_Builder0.shift(127L);
      range2.split(1L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2016709724709513
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.intersects(range0);
      Range range2 = Range.of(9223372036854775807L);
      range0.startsBefore(range2);
      range2.intersection(range0);
      Range range3 = Range.of(9223372036854775807L, 9223372036854775807L);
      range2.getLength();
      range0.intersection(range2);
      range2.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-1542L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6039372375292227
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      long long0 = range0.getLength();
      assertEquals(4294967295L, long0);
      
      Object object0 = new Object();
      range0.equals(object0);
      range1.equals(object0);
      Range range2 = range0.intersection(range1);
      Object object1 = new Object();
      List<Range> list0 = range2.split(9223372036854774114L);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      assertTrue(list2.contains(range2));
      assertTrue(range2.isEmpty());
      
      Range.ofLength(4294967295L);
      Range range3 = Range.of(631L, 9223372036854775807L);
      Range range4 = Range.ofLength(631L);
      assertFalse(range4.isEmpty());
      
      boolean boolean0 = range3.endsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.668835451864701
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854773945L);
      Object object0 = new Object();
      long long0 = (-520L);
      List<Range> list0 = range0.complement(range0);
      Range.ofLength(338L);
      Range.of(1749L);
      range0.complementFrom(list0);
      long long1 = (-2728L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2728L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.605504541628752
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      range1.intersects(range0);
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range1.complement(range2);
      Range range3 = Range.of(1L);
      range2.complementFrom(list0);
      range1.spliterator();
      Range range4 = Range.ofLength(1L);
      range4.intersection(range3);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.shift(1862L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.4215596113586053
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-928L), 229L);
      range0.split(127L);
      Range range1 = Range.of(229L, 1441L);
      range0.getLength();
      range0.intersection(range1);
      range0.isSubRangeOf(range1);
      range0.split(1441L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1596L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9533508035575085
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(1168L);
      Range range1 = Range.ofLength(1168L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.703459879867239
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Object object0 = new Object();
      Range range1 = Range.of(1694L);
      range1.intersects(range0);
      Object object1 = new Object();
      range1.equals(range0);
      Long long0 = new Long(1L);
      range0.equals(object1);
      Range range2 = Range.of(1775L);
      Range range3 = Range.of((-523L), (-523L));
      List<Range> list0 = range3.complement(range2);
      List<Range> list1 = range1.complementFrom(list0);
      range3.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.of((-198L), (-9223372036854774493L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.744846374631236
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.ofLength(0L);
      range0.intersection(range1);
      Object object0 = new Object();
      Range.of(726L);
      List<Range> list0 = range0.split(726L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1549L), 1131L);
      Range.ofLength(726L);
      range2.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1931L, (-1549L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.7294443781376954
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3133L), 65535L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1862L);
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range range2 = Range.ofLength(65535L);
      range2.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1863L, 1862L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65535L, 1863L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0897556540651885
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-956L), (-491L));
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.339750569131767
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(9223372036854180383L);
      String string0 = "+MXSPN%";
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-3133L), 65535L);
      Range.of(range_CoordinateSystem0, (-3133L), 2147483647L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.262448055261478
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-928L), 255L);
      Range range1 = Range.of((-3447L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-3446L), long0);
      
      Range range2 = Range.of((-9223372036854775808L), 9223372036854775807L);
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-3447L), 255L);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.103237237705472
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-981L), (-981L));
      range0.split(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-980L), long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9977567032719814
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(255L, 9223372036854774114L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin();
      assertEquals(255L, long0);
      
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.52383746885986
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-927L), 255L);
      Range range1 = Range.of((-3447L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      Range range3 = Range.ofLength(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range2.complementFrom(list0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.of(255L);
      boolean boolean0 = range0.endsBefore(range3);
      assertFalse(boolean0);
      
      range2.endsBefore(range1);
      range0.startsBefore(range2);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3584197520210752
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-3447L));
      Range range1 = Range.ofLength(253L);
      Range range2 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range2.startsBefore(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1);
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2534363563809836
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range1.intersection(range0);
      range_Builder0.shift(4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.382325347078085
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-738L), 0L);
      long long0 = (-850L);
      Range.of((-850L), (-850L));
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.contractBegin(0L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.050964737831728
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.intersects(range0);
      Range range2 = Range.of(9223372036854775807L);
      range0.startsBefore(range2);
      range2.intersection(range0);
      range0.endsBefore(range2);
      long long1 = 2090L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775807L, 2090L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9042160517045548
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      range0.intersection(range0);
      range_Builder0.shift(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.1660202904172587
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = 255L;
      Range range0 = Range.of((-981L), 255L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.6133319353450815
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(object0);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1L, 1549L);
      Range range2 = range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = new Long(1L);
      range_Builder0.build();
      range2.getBegin(range_CoordinateSystem2);
      range1.spliterator();
      Range range3 = Range.of(range_CoordinateSystem1, (-607L), 2L);
      range3.iterator();
      long long1 = range2.getLength();
      //  // Unstable assertion: assertEquals(1548L, long1);
      
      Range range4 = Range.of(0L, 1L);
      Range range5 = range2.intersection(range0);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      
      range3.split(610L);
      long long2 = range4.getBegin();
      //  // Unstable assertion: assertTrue(range4.isEmpty());
      //  // Unstable assertion: assertEquals(0L, long2);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.224791896950826
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      range0.iterator();
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long1 = 5063L;
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(5063L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5665989181145106
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1261L), (-1261L));
      range_Builder0.contractEnd((-1261L));
      range_Builder0.expandEnd((-1261L));
      range_Builder0.expandEnd(1615L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder2 = new Range.Builder((-1261L), 0L);
      range_Builder1.contractBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("fDW0`ThpKG5}kV`];");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse fDW0`ThpKG5}kV`]; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.320403719371955
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      List<Range> list0 = new LinkedList<Range>();
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range range1 = Range.of(9223372036854773860L);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1308596534603357
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-956L), (-491L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-956L), long0);
      
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem2);
      assertEquals((-490L), long1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.199090175967632
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = (-928L);
      long long1 = 255L;
      Range range0 = Range.of((-928L), 255L);
      Range.of((-3447L));
      Long long2 = new Long(3710L);
      range0.equals(long2);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange(">GxG-'Xj~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse >GxG-'Xj~ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.7064419001141684
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of((-928L), 255L);
      List<Range> list0 = range0.split(255L);
      Range.of((-3914L));
      Range.ofLength(0L);
      Range range1 = Range.of(640L);
      range1.complementFrom(list0);
      Range.of((-493L), 0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("$h^o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.$h^o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long long0 = (-128L);
      Range.of((-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-520L), (-4140L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.195085608204764
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(229L, 1441L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.removeFirstOccurrence(range0);
      range0.complementFrom(linkedList0);
      range0.getLength();
      Range.of((-128L), 229L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-1L), (-1L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.3074199637598043
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-3133L), (-3133L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-3133L), 1L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854773860L, 543L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.353732441763502
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3133L), 65535L);
      Range range1 = Range.of(range_CoordinateSystem0, 6856L, 4294967295L);
      range0.intersects(range1);
      Object object0 = new Object();
      Range range2 = Range.ofLength(6856L);
      range1.equals(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-9223372036854775808L), 6824L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.7484323871999754
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3133L), 65535L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1862L);
      range0.complement(range1);
      Range.CoordinateSystem.values();
      Range range2 = Range.of(578L);
      range0.split(55L);
      long long0 = (-334L);
      Range.of((-334L), 9223372036854774059L);
      range2.spliterator();
      Range.of(1357L, 1862L);
      range1.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-334L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.3074199637598043
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(1L, 4294967295L);
      range0.getLength();
      Range.of((-2416L));
      long long1 = 883L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967295L, 883L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.7410484681610683
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 65535L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3133L), 65535L);
      Range range1 = Range.of(range_CoordinateSystem0, (-3133L), 32767L);
      List<Range> list0 = range1.complement(range0);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      range1.isSubRangeOf(range0);
      Range.ofLength(2147483647L);
      range0.complementFrom(list0);
      range2.complementFrom(list0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range2.forEach(consumer0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.588487037607832
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Range range1 = Range.of(1694L);
      range1.intersects(range0);
      Object object0 = new Object();
      range1.equals(range0);
      Range range2 = Range.of((-4007L));
      Range.ofLength(1L);
      Range.of(416L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range range3 = Range.parseRange("[ 0 .. 0 ]/0B");
      range3.isSubRangeOf(range0);
      range1.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 1L, 2674L);
      range3.split(416L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.4568251578910405
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Range.of(1112L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem2);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.of(4459L, 3097L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.427408289284082
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(959L, 959L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem2);
      range1.complement(range0);
      range_Builder0.expandBegin(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1860393050631433
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      range_Builder1.build();
      range_Builder0.expandBegin(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.520864070566199
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = (-2523L);
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-128L));
      range0.complement(range1);
      Range.of(0L, 0L);
      range0.toString(range_CoordinateSystem0);
      range0.iterator();
      Long long1 = new Long(1L);
      Long.compareUnsigned(3309L, (-128L));
      // Undeclared exception!
      try { 
        Range.of(0L, (-411L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.265992056649442
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-981L), 255L);
      range0.split(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1785L, 1558L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.7738522086804824
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = 726L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-3133L), (-3133L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 848L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.8343821646486655
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3133L), 4294967295L);
      Range range2 = Range.of(range_CoordinateSystem0, (-3133L), 1862L);
      List<Range> list0 = range1.complement(range2);
      Range.of(2985L);
      range0.complementFrom(list0);
      range0.spliterator();
      Range range3 = Range.ofLength(2985L);
      range3.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.6974633831550165
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(790L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3133L), 790L);
      Range range2 = Range.of(range_CoordinateSystem0, (-3133L), 1862L);
      List<Range> list0 = range1.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-866L), (-294L));
      Range.ofLength(790L);
      range2.complement(range0);
      range0.complementFrom(list0);
      Range.of(range_CoordinateSystem1, (-928L), 0L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.1220300074473752
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 255L;
      Range range0 = Range.of(255L, 9223372036854774114L);
      Object object0 = new Object();
      Range.of(9223372032559808513L);
      range0.split(9223372036854774114L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854774114L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.882772343051308
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Object object0 = new Object();
      Range range1 = Range.of(1L);
      range1.intersects(range1);
      Object object1 = new Object();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.ofLength((-390L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0764183611271196
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range.of(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-3133L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-3133L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.480406012166212
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-927L), 255L);
      Range range1 = Range.of((-3447L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.split(2147483639L);
      range1.intersects(range0);
      Range range2 = Range.of(368L, 65535L);
      range2.spliterator();
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-927L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.283053873652643
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.intersects(range0);
      Object object0 = new Object();
      range0.complement(range1);
      range0.getEnd();
      Range.CoordinateSystem.values();
      range1.isSubRangeOf(range0);
      Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 1220L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.587681369920687
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.ofLength(0L);
      range0.intersection(range1);
      Object object0 = new Object();
      range_Builder0.contractBegin(0L);
      Range range2 = range_Builder0.build();
      List<Range> list0 = range2.split(255L);
      Range range3 = Range.ofLength(726L);
      Range.ofLength(9223372036854775034L);
      Range range4 = Range.of(0L);
      List<Range> list1 = range3.complementFrom(list0);
      range1.complementFrom(list1);
      assertEquals(1, list0.size());
      assertTrue(list1.contains(range2));
      
      range1.intersection(range4);
      assertNotSame(range4, range0);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.632500472848191
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = 9223372036854774114L;
      Range range0 = Range.of(255L, 9223372036854774114L);
      Object object0 = new Object();
      Range range1 = Range.of(255L, 65535L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.of(2344L);
      range2.complementFrom(list0);
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-4157L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.236243760990201
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(255L, 9223372036854774114L);
      Object object0 = new Object();
      Range range1 = Range.of(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.split(9223372036854774114L);
      assertFalse(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.5743179386359376
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(774L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.ofLength(774L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(774L);
      range0.getBegin();
      Range range1 = Range.ofLength(774L);
      Range range2 = Range.ofLength(1955L);
      Range range3 = Range.of(774L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.getBegin(range_CoordinateSystem0);
      range1.getLength();
      Range range4 = Range.of((-1597L), 774L);
      range2.intersection(range4);
      range_Builder1.copy();
      range_Builder0.shift(9223372036854775807L);
      range4.intersection(range1);
      Range.Builder range_Builder3 = range_Builder2.shift(1629L);
      assertSame(range_Builder0, range_Builder3);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.347924081400718
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(774L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift(774L);
      range0.getBegin();
      Range range2 = Range.ofLength(774L);
      Range.of(0L);
      Range range3 = Range.ofLength(1955L);
      Range range4 = Range.of(774L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range4.getBegin(range_CoordinateSystem0);
      assertEquals(775L, long0);
      
      range3.getEnd();
      range4.split(774L);
      boolean boolean0 = range3.intersects(range1);
      assertFalse(boolean0);
      assertTrue(range1.isEmpty());
      
      long long1 = range2.getBegin(range_CoordinateSystem0);
      assertSame(range2, range0);
      
      long long2 = range3.getLength();
      assertEquals(1955L, long2);
      
      long long3 = range4.getLength();
      assertTrue(long3 == long1);
      assertEquals(1L, long3);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.0762338209703355
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertSame(range1, range0);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.274685700619658
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = 1L;
      Object object0 = new Object();
      Range range0 = Range.of(1L);
      range0.intersects(range0);
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-4007L), 1752L);
      // Undeclared exception!
      try { 
        Range.ofLength((-6L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.4257240403709135
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 0L, 1862L);
      Range.of((-3133L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.of((-3133L), (-3133L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(">lYRv9S8*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.>lYRv9S8*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.2087510476251255
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-956L), (-491L));
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder((-1125L), (-1125L));
      range_Builder0.contractBegin((-4499L));
      Range range1 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range1.split((-4499L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.5988846830166286
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(4294967311L);
      range0.iterator();
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(4294967311L);
      Range range3 = range2.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.equals(range_CoordinateSystem0);
      range1.isEmpty();
      Long long0 = new Long((-421L));
      Range.of((-421L), 108L);
      List<Range> list0 = range1.complement(range2);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-3243L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.274105619884916
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.ofLength(0L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift(774L);
      Range.ofLength(774L);
      Range range0 = Range.ofLength(1955L);
      Range range1 = Range.of(774L);
      range1.getLength();
      Range.of(1955L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        range0.split((-222L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.239493573434635
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.of((-928L), 1425L);
      Range.of(1096L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.9009804666206764
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range.of(range_CoordinateSystem0, 1771L, 1771L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(".$ah(:2*M}xzi^$q1", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse .$ah(:2*M}xzi^$q1 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.0470742228559304
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = (-956L);
      long long1 = (-491L);
      Range.of((-956L), (-491L));
      Object object0 = new Object();
      String string0 = "UO_%^mmcD(UccGlX|HQ";
      // Undeclared exception!
      try { 
        Range.parseRange("UO_%^mmcD(UccGlX|HQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse UO_%^mmcD(UccGlX|HQ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
