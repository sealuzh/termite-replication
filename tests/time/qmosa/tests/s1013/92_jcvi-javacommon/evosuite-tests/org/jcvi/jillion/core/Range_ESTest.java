/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:00:50 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.832539223047007
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.toString(range_CoordinateSystem0);
      range2.iterator();
      Long long0 = new Long(1L);
      Long.compareUnsigned(0L, (-349L));
      range2.isSubRangeOf(range1);
      range0.endsBefore(range2);
      range2.spliterator();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.009646556806239
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of((-1L), 0L);
      Range range1 = Range.of((-1L));
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-563L), 0L);
      range2.complement(range1);
      Range.of(0L);
      Object object0 = new Object();
      range1.equals((Object) null);
      long long0 = (-9223372036854775783L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      long long1 = (-1427L);
      Range.of(range_CoordinateSystem1, (-1427L), 9223372032559808513L);
      // Undeclared exception!
      try { 
        Range.of((-1427L), (-9223372036854775783L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.9603291281634676
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.ofLength(774L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift(774L);
      long long0 = range0.getBegin();
      //  // Unstable assertion: assertEquals(0L, long0);
      
      Range range2 = Range.ofLength(774L);
      Range range3 = Range.of(0L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      Range range4 = Range.ofLength(1955L);
      range0.intersects(range2);
      Range range5 = Range.of(774L);
      Range range6 = Range.ofLength(0L);
      Object object0 = new Object();
      range6.isEmpty();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range7 = Range.of(0L, 0L);
      Range.Builder range_Builder2 = new Range.Builder(range7);
      range_Builder2.shift(9223372036854774666L);
      //  // Unstable assertion: assertNotSame(range7, range4);
      
      Range range8 = range_Builder0.build();
      boolean boolean0 = range8.intersects(range5);
      //  // Unstable assertion: assertTrue(range5.equals((Object)range8));
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range1.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-1L), long1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4337625539000474
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      Range.ofLength(295L);
      Range.of(1664L);
      Object object0 = new Object();
      Range range1 = Range.of(0L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(1664L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8587196349999533
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      long long0 = 0L;
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 726L, 9223372036854774666L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854774666L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.9560016875739725
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 692L, 1792L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-32768L), 1939L);
      Range range2 = Range.of(0L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      Range.of(range_CoordinateSystem1, (-32768L), 30L);
      Range range3 = range0.intersection(range2);
      String string0 = range3.toString();
      assertEquals("[ 692 .. 1791 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder((-774L), 692L);
      Range range4 = Range.parseRange("[ 692 .. 1791 ]/0B");
      assertSame(range4, range3);
      assertSame(range4, range0);
      
      Range range5 = Range.of(0L, 1L);
      boolean boolean1 = range5.endsBefore(range2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3546995671730038
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = (-2523L);
      long long1 = 0L;
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range range0 = Range.of((-2523L), 0L);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.of(9223372036854774202L, (-2523L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2523 would make range [9223372036854774202 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8965055843534913
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 692L, 1792L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-32768L), 1939L);
      Range range2 = Range.of(0L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range3 = Range.of(range_CoordinateSystem1, (-32768L), 30L);
      assertNotSame(range3, range1);
      
      Range range4 = range0.intersection(range2);
      String string0 = range4.toString();
      assertEquals("[ 692 .. 1791 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder((-774L), 692L);
      range_Builder0.expandBegin(4294967295L);
      range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range4.complementFrom(linkedList0);
      assertSame(range4, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8193928052828237
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of(2472L);
      range0.getLength();
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(2472L, 2472L);
      List<Range> list0 = range0.split(2472L);
      range1.complementFrom(list0);
      range1.startsBefore(range0);
      range0.intersection(range1);
      long long0 = 1L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854774854L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.87231270051905
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(0L, 0L);
      range0.toString(range_CoordinateSystem0);
      range0.complement(range1);
      range1.getEnd();
      range2.iterator();
      Range range3 = Range.of(1L);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range3.isSubRangeOf(range1);
      range_Builder2.expandBegin(1L);
      // Undeclared exception!
      try { 
        Range.ofLength((-217L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.8951346377809513
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 1594L;
      Range.of(1594L);
      Range range0 = Range.of((-767L), 1594L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 4294967295L;
      Range.of(range_CoordinateSystem0, 955L, 4294967295L);
      long long2 = (-1L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.9155123734201434
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      List<Range> list0 = range0.split(255L);
      range0.complementFrom(list0);
      Range range1 = Range.ofLength(255L);
      range0.split(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      range1.isEmpty();
      Long.compareUnsigned(255L, (-784L));
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.668312398446197
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 65535L;
      Range.of(1101L, 65535L);
      Range.of((-2147483648L), (-128L));
      // Undeclared exception!
      try { 
        Range.of(1948L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.9060150419646225
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 0L);
      Range range2 = Range.of((-834L), (-834L));
      range1.getEnd();
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range0.startsBefore(range2);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(0L, (-802L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.8906249153793153
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      List<Range> list0 = range0.split(255L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      assertEquals(0, list1.size());
      
      Range range1 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long0 = new Long(255L);
      range1.isEmpty();
      Range range2 = Range.ofLength(255L);
      Range.Comparators.values();
      boolean boolean0 = range0.endsBefore(range2);
      assertFalse(boolean0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.612680154724274
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(240L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      long long0 = 1L;
      range_Builder0.shift((-2L));
      Range.of(1L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 319L, 4681L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.654109328988063
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(object0);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1L, 1549L);
      Range range2 = range_Builder0.build();
      Range range3 = Range.of(9223372036854774707L);
      Range range4 = Range.ofLength(1300L);
      range2.intersects(range1);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.getBegin(range_CoordinateSystem2);
      range3.getEnd();
      long long0 = (-1101L);
      // Undeclared exception!
      try { 
        range2.split((-1101L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1823540452404075
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(956L);
      range0.toString();
      Object object0 = new Object();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.804594619168795
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.ofLength(774L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.ofLength(0L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift(774L);
      range0.getBegin();
      Range range1 = Range.of(0L);
      Range range2 = Range.of(0L);
      Range range3 = Range.ofLength(1955L);
      range0.intersects(range1);
      Range range4 = Range.of(774L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.getBegin(range_CoordinateSystem0);
      range3.getEnd();
      range4.split(774L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1788L, 774L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 959L, (-9223372036854775126L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775126 would make range [959 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.899956476339785
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2517L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(1L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(0L, 0L);
      range0.toString(range_CoordinateSystem0);
      range0.iterator();
      Long long0 = new Long(1L);
      Long.compareUnsigned(3309L, 0L);
      range1.isSubRangeOf(range1);
      range0.endsBefore(range1);
      range1.startsBefore(range2);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.parseRange(")-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )- into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.7889809222804005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 30L);
      Range range0 = Range.of((-2523L), 30L);
      long long0 = 0L;
      Range range1 = Range.of((-128L));
      List<Range> list0 = new LinkedList<Range>();
      Range range2 = Range.of(0L, 0L);
      range2.endsBefore(range1);
      range1.intersection(range0);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(0L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.785563124535361
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 0L);
      Range.of((-834L), (-834L));
      long long0 = range1.getEnd();
      assertEquals(0L, long0);
      
      Range range2 = Range.of(0L, 9223372036854774666L);
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(0L, 466L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range range3 = range_Builder1.build();
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.492138725743892
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 692L, 1761L);
      Range range1 = Range.of(1761L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8658333873754107
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(0L, 0L);
      range0.toString(range_CoordinateSystem0);
      range2.iterator();
      Long long0 = new Long(1L);
      Long.compareUnsigned(0L, (-349L));
      range2.isSubRangeOf(range1);
      range0.endsBefore(range2);
      range2.spliterator();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5839989144751514
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L);
      Range.ofLength(0L);
      Range range0 = Range.ofLength(0L);
      Range.of((-136L), 127L);
      range0.getEnd();
      long long0 = (-1604L);
      // Undeclared exception!
      try { 
        Range.of(127L, (-1604L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.248766339946269
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 680L, 680L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.964078801846317
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 959L, 1077L);
      Range.of((-1L), 0L);
      Range.of((-125L));
      range_Builder0.contractBegin(0L);
      range0.complement(range0);
      Range.of((-1L), 0L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.871036992551667
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 30L);
      Range range0 = Range.of((-2523L), 30L);
      Range range1 = Range.of((-128L));
      range0.complement(range1);
      Range range2 = Range.of(0L, 0L);
      range2.startsBefore(range1);
      Range range3 = range1.intersection(range0);
      range3.startsBefore(range2);
      long long0 = 1800L;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(1800L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.767997921535507
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(4294967286L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      
      Range range2 = Range.ofLength(0L);
      Range range3 = range0.intersection(range2);
      Range range4 = Range.of(0L);
      assertFalse(range4.isEmpty());
      
      Object object0 = new Object();
      range1.isEmpty();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.shift(9223372036854774666L);
      Range range5 = range_Builder1.build();
      assertSame(range5, range3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.7731516638929454
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      range0.getLength();
      range0.intersection(range1);
      long long1 = 0L;
      Range.of(0L, 1L);
      Range.CoordinateSystem.values();
      long long2 = (-834L);
      // Undeclared exception!
      try { 
        Range.of(1L, (-834L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.716021937159144
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      range2.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(2472L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.073979567117211
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      long long0 = 0L;
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      range1.equals(range_Builder0);
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of((-1082L), 9223372036854774666L);
      Object object0 = new Object();
      range3.equals("-j^eB>X3QWP[FqD;8D/");
      range2.isSubRangeOf(range0);
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 726L, 162L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6288885876523964
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.of(0L);
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 610L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 1600L, 2395L);
      Range range2 = Range.of(162L, 226L);
      range1.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder((-914L), 0L);
      range_Builder0.shift((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854774894 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6763601812984326
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range1.intersection(range0);
      range_Builder0.shift(4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7873015035816167
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(0L, 726L);
      Range range0 = Range.ofLength(0L);
      Range.of(726L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.parseRange("cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cluster distance can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.9690653490749184
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.isEmpty());
      
      Range range2 = Range.ofLength(0L);
      Range range3 = range0.intersection(range2);
      Range.of((-1082L), 9223372036854774666L);
      Object object0 = new Object();
      range1.isEmpty();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.shift(9223372036854774666L);
      range_Builder1.build();
      boolean boolean0 = range3.startsBefore(range2);
      assertTrue(range3.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.312778700525052
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 692L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.7707943616067703
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = 726L;
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      long long1 = (-834L);
      Range.Builder range_Builder1 = new Range.Builder((-834L), (-834L));
      Range range0 = range_Builder0.build();
      range_Builder1.shift(0L);
      Range range1 = Range.of(0L);
      Range range2 = null;
      range1.complement(range0);
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.6927159399583185
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1L, 1549L);
      Range range2 = range_Builder0.build();
      range_Builder0.contractEnd(0L);
      range2.toString();
      range2.isSubRangeOf(range1);
      range1.startsBefore(range2);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("X?8?rKi-)5BY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse X?8?rKi-)5BY into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.793786311046664
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.of((-2451L), (-452L));
      Range.of(2991L, 9223372036854775807L);
      Range.of(157L, 1101L);
      Object object0 = new Object();
      long long1 = (-872L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 3349L, 3349L);
      Range range0 = Range.ofLength(1948L);
      range0.equals(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem0, 127L, 1472L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 157L, (-701L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.538877501544455
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of((-956L), (-491L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Residue Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.007908888895002
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = 240L;
      Range range0 = Range.of((-1L), 0L);
      Range range1 = Range.of((-1L));
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 0L;
      Range range2 = Range.of(range_CoordinateSystem0, (-563L), 0L);
      range2.complement(range1);
      long long2 = 0L;
      Range range3 = Range.of(0L);
      range1.intersection(range3);
      Range.of((-1L), 2147483647L);
      Object object0 = new Object();
      range2.equals(range1);
      long long3 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 240L, (-563L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.7468369140418223
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      Range range2 = Range.of(0L, 726L);
      range2.complement(range0);
      Range range3 = Range.ofLength(1133L);
      range1.intersection(range3);
      // Undeclared exception!
      try { 
        Range.of(4294967294L, 293L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4960563423652324
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1L, 299L);
      // Undeclared exception!
      try { 
        Range.of(30L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.013012667071259
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      range1.isSubRangeOf(range2);
      Range range3 = Range.of(726L, 3052L);
      range1.iterator();
      range2.startsBefore(range1);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range1.endsBefore(range2);
      range1.isEmpty();
      range3.isEmpty();
      range3.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.5404991198559905
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = (-2523L);
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, (-2620L), 1L);
      Range.of(1L, 4294967295L);
      Range.of(4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.166005845994917
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      Range.of(726L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of((-1816L), 0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 726 ]/0B", string0);
      
      range0.iterator();
      Long long0 = new Long(4294967295L);
      Long.compareUnsigned(0L, (-1L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.endsBefore(range2);
      assertTrue(boolean1 == boolean0);
      
      range1.spliterator();
      Range range3 = Range.parseRange("[ 0 .. 726 ]/0B");
      Range.Builder range_Builder1 = new Range.Builder(range3);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(1, list1.size());
      assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.6825088149413236
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.058906610422203
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1261L), (-1261L));
      range_Builder0.contractEnd((-1261L));
      range_Builder0.expandEnd((-1261L));
      range_Builder0.expandEnd(1615L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      Range.CoordinateSystem.values();
      Range.Builder range_Builder2 = new Range.Builder((-1261L), 0L);
      range_Builder1.contractBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("fDW0`ThpKG5}kV`];");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse fDW0`ThpKG5}kV`]; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.8457358094246974
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(1L);
      range0.complement(range1);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
      
      range0.iterator();
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long(1L);
      Long.compareUnsigned(3309L, 0L);
      boolean boolean0 = range1.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range3 = range1.intersection(range2);
      range_Builder1.shift((-2523L));
      Range range4 = range3.asRange();
      assertSame(range4, range0);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.8623770609734662
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.of((-127L), (-127L));
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of((-2175L), (-127L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, (-1886L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1887 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.9777788148301694
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.of(2472L);
      range0.getLength();
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(2472L, 2472L);
      range0.split(2472L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 176L);
      range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.parseRange("Is*^wS#(v23MZo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Is*^wS#(v23MZo into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.9361701611073783
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 692L, 1792L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-32768L), 1939L);
      Range range2 = Range.of(0L, 4294967295L);
      Object object0 = new Object();
      range1.equals(range0);
      Range range3 = Range.of(range_CoordinateSystem0, (-2189L), 1792L);
      Range range4 = range2.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, (-32768L), (-32768L));
      range4.isSubRangeOf(range5);
      range3.toString();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(692L, (-2189L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2112L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.5265528738577676
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.698555726878231
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = 774L;
      Range range0 = Range.ofLength(774L);
      Range.Builder range_Builder0 = new Range.Builder();
      long long1 = 0L;
      Range.ofLength(0L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift(774L);
      range0.getBegin();
      Range range1 = Range.ofLength(774L);
      Range.of(0L);
      Range.ofLength(1955L);
      range0.intersects(range1);
      Range.of(774L);
      // Undeclared exception!
      try { 
        Range.of((-139L), (-1082L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.8706488337371328
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 0L);
      Range.of((-834L), (-834L));
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 610L);
      Range range3 = range2.intersection(range1);
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 0L, 0L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range2.getEnd(range_CoordinateSystem2);
      //  // Unstable assertion: assertEquals(609L, long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.8009937209808866
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.ofLength(774L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range_Builder0.contractBegin(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift(774L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range2 = Range.ofLength(774L);
      assertSame(range2, range0);
      
      Range range3 = Range.of(0L);
      assertFalse(range3.isEmpty());
      assertNotSame(range3, range2);
      
      range1.spliterator();
      assertTrue(range1.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range range4 = Range.of(141L, 1955L);
      assertNotSame(range4, range3);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.8656097409524808
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-767L), 0L);
      Range.of((-834L), (-834L));
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-767L), 2435L);
      range2.intersection(range0);
      range2.getEnd();
      long long0 = new Long(0L);
      range1.getLength();
      Range.ofLength(768L);
      Range range3 = range0.intersection(range1);
      range3.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2435L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.8655921298927356
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-767L), 0L);
      Range.of((-834L), (-834L));
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-767L), 2435L);
      range2.intersection(range0);
      range2.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem1);
      range1.getLength();
      Range.ofLength(768L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2435L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.8769863890935734
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(0L, 726L);
      Range range1 = Range.ofLength(0L);
      range1.split(131L);
      range0.intersection(range1);
      Object object0 = new Object();
      range1.equals(object0);
      // Undeclared exception!
      try { 
        Range.parseRange("cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cluster distance can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.885076675030487
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.of(0L);
      Range range0 = Range.of(0L, 0L);
      Range.of((-834L), (-834L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 610L);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 759L);
      range1.split(1L);
      Range.of(1L, 4681L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=4.085343435041405
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = Range.of(32767L);
      range1.complement(range2);
      Range range3 = Range.ofLength(0L);
      Range range4 = range3.intersection(range0);
      Range.of(1286L, 32767L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, (-4124L), (-4042L));
      range5.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(65535L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        range4.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.980596158058189
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      long long0 = 0L;
      Range range0 = Range.ofLength(2937L);
      Range.Builder range_Builder1 = new Range.Builder(0L, 1446L);
      range_Builder1.contractBegin((-1570L));
      range_Builder0.expandEnd(717L);
      range_Builder1.shift(9223372036854775807L);
      range0.getBegin();
      Range range1 = Range.ofLength(0L);
      Range.of(2937L);
      Range range2 = Range.ofLength(959L);
      range2.intersects(range1);
      Range range3 = Range.of((-1570L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range3.getBegin(range_CoordinateSystem1);
      range0.getEnd();
      // Undeclared exception!
      try { 
        range3.split((-1570L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.429577901756605
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.intersects(range1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.849401170350898
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(726L, 726L);
      long long0 = 0L;
      Range.of(4294967295L);
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 9223372036854774666L;
      Range.of((-1082L), 9223372036854774666L);
      Object object0 = new Object();
      long long2 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 726L, 162L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 127L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem1, 127L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.671133784118073
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      long long1 = 65535L;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      range0.intersection(range1);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      range_Builder1.expandEnd(65535L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=4.019884716688142
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 959L, 1077L);
      Range range1 = Range.of((-1L), 0L);
      range1.getLength();
      Range range2 = Range.ofLength(0L);
      range_Builder0.contractBegin(0L);
      range0.complement(range0);
      Range range3 = Range.of(range_CoordinateSystem0, 9223372036854775799L, 9223372036854775799L);
      range2.complement(range3);
      range3.intersection(range0);
      Range.Builder range_Builder2 = new Range.Builder((-631L), 51L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("8&ZR%@wW0|8 [Zt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.8&ZR%@wW0|8 [Zt
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=4.0695294667123365
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-383L), 9223372036854774144L);
      Range range1 = Range.of(30L, 255L);
      range1.spliterator();
      Range range2 = Range.of(9223372036854774144L);
      range0.complement(range1);
      Range.of(range_CoordinateSystem0, (-257L), 1L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 2433L);
      range0.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(2161L, 9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("]c~?pzAN+(qbs{;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.]c~?pzAN+(qbs{;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.ofLength(959L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.7804942542193123
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2523L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 30L);
      Range range0 = Range.of((-2523L), 30L);
      range0.spliterator();
      Range range1 = Range.of((-128L));
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2380188789437025
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.of((-3719L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3568113492839657
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.of((-3719L));
      long long0 = 3868L;
      // Undeclared exception!
      try { 
        Range.of(3868L, (-3719L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.540272655449458
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 692L, 1792L);
      Range.of((-455L), 1792L);
      long long0 = 1L;
      // Undeclared exception!
      try { 
        Range.of(1260L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.807637646629519
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.of(0L);
      Range.ofLength(0L);
      Range.of((-834L), (-834L));
      long long0 = (-1641L);
      Range.of((-1641L), (-834L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.848759733001053
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.of((-767L), 0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long1 = (-834L);
      Range.of((-834L), (-834L));
      // Undeclared exception!
      try { 
        Range.ofLength((-834L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.859161466071945
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      Range range0 = Range.of(1792L, 4294967295L);
      Object object0 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("XjE!m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse XjE!m into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
