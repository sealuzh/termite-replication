/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:08:30 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player((-1518), "state.Player$JoinInfo", 3);
      player0.setZ(343.3F);
      int int0 = Packable.ACTION;
      player0.gangStrength();
      System.setCurrentTimeMillis(4870L);
      player0.getZ();
      Player player1 = new Player();
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(343.3F, player0.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.11596764210355
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      Player player0 = new Player();
      player0.pack();
      player0.setDead((long) (-47), false);
      player0.getStrength();
      player0.getIP();
      assertEquals((-47L), player0.getTimeOfDeath());
      
      player0.reset(true);
      Player player1 = new Player(279, "0.0.0.0", 1);
      player1.setJoinOK(player0, false);
      player1.isJoinOK(player0, false);
      int int0 = Packable.ACTION;
      player0.add(player1);
      player1.getStrength();
      System.setCurrentTimeMillis((-891L));
      player1.getZ();
      player0.gangStrength();
      int int1 = player0.type();
      assertEquals(5, int1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player0 = new Player((-1));
      Party party0 = player0.head;
      player0.remove((Party) null);
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4530014063936125
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0.0.0.0");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(4, "0.0.0.0", "0.0.0.0", 993, 4);
      Player player1 = new Player();
      player0.remove(player1);
      assertEquals("Player-1", player1.toString());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0, player1.getPictureId());
      
      Player player2 = new Player(4, "0.0.0.0", "", (-1935));
      player2.setJoinOK(player0, true);
      boolean boolean0 = player2.isJoinOK(player0, true);
      assertFalse(player2.isDead());
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(1, player2.getStrength());
      assertTrue(player2.isConnected());
      assertTrue(boolean0);
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(4, player0.getStrength());
      assertEquals("0.0.0.0", player2.getIP());
      assertEquals((-1935), player2.getPictureId());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9456645463488123
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((-1432));
      Player player1 = new Player((-1432), "0.0.0.0", (short)4919);
      player0.setJoinOK(player1, false);
      player1.setJoinOK(player0, true);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(4919, player1.getPictureId());
      assertEquals("0.0.0.0", player1.getIP());
      assertFalse(boolean0);
      assertTrue(player1.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(1, player1.getStrength());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("Player-1432", player0.toString());
      assertFalse(player1.isDead());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.198616238838059
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(0, "state.Player", (String) null, (-1));
      player0.setDead((long) (-1));
      Player player1 = new Player();
      player1.setX(0.0F);
      Player player2 = new Player();
      player1.pack();
      player1.setZ((-326.0F));
      player2.getPictureId();
      player1.setMoney((-185.30524F));
      player1.getName();
      player0.setMoney(0);
      Player player3 = new Player((short)4919);
      player3.type();
      Player player4 = new Player((-1));
      Player player5 = new Player(5, "e7LCnS!OT6}Y-RPRO8D", "", 410, (-1));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.852140740384332
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      Player player0 = new Player();
      player0.pack();
      player0.getStrength();
      player0.getIP();
      player0.reset(true);
      Player player1 = new Player(5);
      player0.boss = (Party) player1;
      Player player2 = new Player((-970), (String) null, (byte) (-88));
      player2.getSubparty();
      boolean boolean0 = player0.isJoinOK(player2, false);
      assertFalse(boolean0);
      
      int int0 = player0.gangStrength();
      int int1 = player0.getStrength();
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.toString());
      
      player2.getName();
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals((-88), player2.getPictureId());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2414625352988633
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      Player player0 = new Player((byte) (-69));
      player0.pack();
      player0.setDead((long) (-1), false);
      player0.getStrength();
      Player player1 = new Player(0, "}wh9t%,z#b)S3::a]Q", "}wh9t%,z#b)S3::a]Q", (-891), 0);
      player1.getStrength();
      player0.getIP();
      player1.reset(true);
      Player player2 = new Player((-3166), "}wh9t%,z#b)S3::a]Q", 4919);
      Player player3 = new Player(0, "state.Player$JoinInfo", (-891));
      player0.setJoinOK(player3, false);
      player3.isJoinOK(player1, false);
      player0.gangStrength();
      player2.getStrength();
      System.setCurrentTimeMillis((short)4919);
      player1.getZ();
      player3.isJoinOK(player0, false);
      assertTrue(player0.isDead());
      
      float float0 = player1.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((-1899), "", "", (-1899), (-1899));
      MockFile mockFile0 = new MockFile("CV\"P-", ".*[.]class$");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile("CV\"P-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      int int0 = player0.getStrength();
      assertEquals((-1899), int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      Party party0 = player0.head;
      player0.next = null;
      player0.add((Party) null);
      charArray0[1] = '\'';
      charArray0[2] = 'D';
      charArray0[3] = 'v';
      charArray0[4] = '+';
      mockPrintStream0.print(charArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "");
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      player0.pack(dataOutputStream0);
      assertTrue(player0.isConnected());
      assertEquals((-1899), player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9454908168625717
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)10;
      Player player0 = new Player(0, "|)+Jk5Ji", (byte) (-88));
      player0.gangStrength();
      player0.setX(0.0F);
      player0.setDead((long) (byte) (-75), true);
      Party party0 = player0.gangBoss();
      player0.remove(party0);
      player0.setDead((-2406L));
      player0.getSubparty();
      Player player1 = new Player();
      player0.isJoinOK(player1, true);
      Player player2 = new Player((byte) (-75), "|)+Jk5Ji", (byte) (-88));
      player2.getY();
      player0.getTimeOfDeath();
      player1.gangStrength();
      player1.getY();
      player2.getStrength();
      player0.getTimeOfDeath();
      boolean boolean0 = player0.isConnected();
      assertTrue(player0.isDead());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)118);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      Player player1 = new Player((-1540), "gui.ModuleBrowserDialog$ModuleFilter", "gui.ModuleBrowserDialog$ModuleFilter", (-1429), (byte)118);
      Player player2 = new Player((short)4919, "", "module.ModuleBrowserDialog$ModuleFilter", 2222, 1246);
      boolean boolean1 = player0.isJoinOK(player2, false);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, player0.getStrength());
      assertEquals("", player2.getIP());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player0", player0.toString());
      
      float float0 = player1.getZ();
      assertEquals(118, player1.getStrength());
      assertFalse(player1.isDead());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(player1.isConnected());
      assertEquals((-1429), player1.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1394;
      Player player0 = new Player(1394);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(2147340491, "^J?5l@V>9o7+`C7F!)", "}l}X", 1126, 2147340491);
      Player player1 = new Player((short)4919, "}l}X", "^J?5l@V>9o7+`C7F!)", 5, 5);
      player0.setY((-1.0F));
      player0.isJoinOK(player1, false);
      player1.setJoinOK(player0, false);
      player0.getMoney();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      dataInputStream0.read(byteArray0, (int) (short)4919, (int) (byte)0);
      player0.unpack(dataInputStream0);
      assertEquals((-1.0F), player0.getY(), 0.01F);
      
      player1.getIP();
      player1.getZ();
      boolean boolean0 = player1.unpack(dataInputStream0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(1781, "", "", 53, 196);
      player0.getIP();
      assertEquals(53, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(196, player0.getStrength());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(20, "No5JbKp/JfOQo", "Z0zFM{XSMon YA4", 10, 10);
      MockFile mockFile0 = new MockFile("No5JbKp/JfOQo", ".*[.]class$");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile(mockFile0, "/home/ubuntu/termite/projects/27_gangup/No5JbKp/JfOQo/.*[.]class$");
      MockFile mockFile2 = new MockFile("K");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      mockFile1.setReadOnly();
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = 't';
      charArray0[2] = 'v';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = 'i';
      int int0 = player0.gangStrength();
      int int1 = player0.getStrength();
      assertTrue(int1 == int0);
      
      System.setCurrentTimeMillis(0L);
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      Player player1 = new Player(1366, "No5JbKp/JfOQo", "Z0zFM{XSMon YA4", 2083, 392);
      player0.isJoinOK(player1, false);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(392, player1.getStrength());
      assertEquals(2083, player1.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals("No5JbKp/JfOQo", player1.getIP());
      assertEquals(10, player0.getStrength());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.362385208963958
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(806);
      Player player1 = new Player(806, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 256);
      player0.gangStrength();
      player1.setDead();
      player1.pack();
      Player player2 = new Player(1, "yX>?I", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 4, 1);
      player2.setDead((long) 256);
      player0.setZ((short)4919);
      player1.getPictureId();
      player2.setMoney((-765.0F));
      player2.getName();
      player0.setMoney(1);
      player2.type();
      Player player3 = new Player(4, "'Ht", "yX>?I", (-3780));
      player3.setY(1055.0F);
      System.setCurrentTimeMillis(0L);
      player0.isDead();
      player1.isJoinOK(player0, true);
      assertEquals(4919.0F, player0.getZ(), 0.01F);
      assertEquals("Player806", player0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "0.0.0.0";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0.0.0.0");
      byte byte0 = (byte) (-94);
      int int0 = (-1432);
      Player player0 = new Player((-1432), "0.0.0.0", "0.0.0.0", (-1432));
      Player player1 = new Player((-1432), "0.0.0.0", 256);
      player1.pack();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(4, "", "", (-437));
      player0.getPictureId();
      player0.pack();
      player0.getY();
      player0.getY();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("Mv7j!OO(]HEQ2&@+n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1013448627418363
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(0, "(F>;MBZp", 5);
      player0.gangStrength();
      player0.setDead();
      player0.pack();
      player0.setDead((long) 5);
      player0.setZ((-921.9387F));
      player0.getPictureId();
      player0.setMoney(5);
      player0.getName();
      player0.setMoney(0.0F);
      player0.type();
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = player0.isDead();
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-88);
      byteArray0[3] = (byte)114;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)122;
      Player player0 = new Player();
      Player player1 = new Player((byte)10, "0.0.0.0", "0.0.0.0", (-2437), (-2437));
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(1, player0.getStrength());
      assertTrue(player1.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
      assertEquals((-2437), player1.getStrength());
      assertFalse(boolean0);
      assertEquals((-2437), player1.getPictureId());
      assertFalse(player1.isDead());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((-1095), "[OQ:JN/A", "[OQ:JN/A", 0);
      Player player1 = new Player(0, "[OQ:JN/A", "0.0.0.0", 0);
      player0.head = (Party) player1;
      assertEquals("[OQ:JN/A", player1.getIP());
      
      player0.getSubparty();
      boolean boolean0 = player0.isConnected();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
      assertTrue(boolean0);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(806);
      player0.getSubparty();
      player0.id = 2355;
      player0.setDead((-1365L));
      player0.setX(2355);
      player0.setConnected(false);
      player0.setY((-1.0F));
      player0.getX();
      player0.type();
      player0.setDead();
      player0.setX(0.0F);
      assertEquals(0.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(2, "0.0.0.0", 2);
      player0.pack();
      MockFile mockFile0 = new MockFile("0.0.0.0", "0.0.0.0");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile(mockFile0, "0.0.0.0");
      File file0 = MockFile.createTempFile("8Yz'qw@jPN[Kk2^", "gui.ModuleBrowserDialog$ModuleFilter", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockFile1.mkdirs();
      mockFile0.toURI();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      player0.pack(dataOutputStream0);
      assertEquals(2, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      MockFile mockFile0 = new MockFile(".*[.]class$", "");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("`s[V,uAUrV;/V_I", "T !JA~sRn(Fv@4D2z", (File) mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockFile0.setReadOnly();
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = 'i';
      charArray0[2] = '\'';
      charArray0[3] = 'i';
      mockPrintStream0.print(charArray0);
      mockPrintStream0.append((CharSequence) "`s[V,uAUrV;/V_I");
      mockFile0.toURI();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      Player player0 = new Player(0, "/home/ubuntu/termite/projects/27_gangup/.*[.]class$", "module.ModuleBrowserDialog$ModuleFilter", 0, 0);
      player0.pack(dataOutputStream0);
      int int0 = player0.gangStrength();
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(0, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("/home/ubuntu/termite/projects/27_gangup/.*[.]class$", player0.getIP());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9383113296830845
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead();
      player0.setZ(0.0F);
      player0.boss = null;
      player0.pack();
      player0.gangStrength();
      player0.getPictureId();
      player0.getX();
      player0.setMoney((-291.8F));
      assertEquals((-291.8F), player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-88);
      byteArray0[3] = (byte)114;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)122;
      Player player0 = new Player();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 753;
      Player player0 = new Player(753);
      player0.setX(0.0F);
      player0.setZ((-1663.051F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.setDead((long) 753, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      player0.setY(753);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        dataInputStream0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)114;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte) (-52);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Hg4ng7w9S");
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = 'i';
      charArray0[7] = 'i';
      charArray0[8] = 'i';
      mockPrintStream0.print(charArray0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Hg4ng7w9S");
      MockFile mockFile0 = new MockFile("gui.ModuleBrowserDialog$ModuleFilter", "state.Party");
      mockFile0.toURI();
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      Player player0 = new Player((byte) (-69), "Hg4ng7w9S", "gui.ModuleBrowserDialog$ModuleFilter", (byte)10, 5);
      player0.pack(dataOutputStream0);
      assertEquals("Hg4ng7w9S", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(5, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(0, "gui.ModuleBrowserDialog$ModuleFilter", "", 10);
      Party party0 = new Party();
      player0.boss = party0;
      Player player1 = new Player((-2815), ";*z-.B", "(sYA", (-17));
      float float0 = player0.getZ();
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("gui.ModuleBrowserDialog$ModuleFilter", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10, player0.getPictureId());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((byte)10, "", "", 30328);
      player0.getName();
      assertTrue(player0.isConnected());
      assertEquals(30328, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(234, "059m$j)>WU1J", (byte)122);
      float float0 = player0.getMoney();
      assertEquals(122, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player();
      player0.toString();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("Player");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3244414142316545
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player(0);
      player1.setMoney(0.1F);
      player1.head = (Party) player0;
      player1.setDead((-2708L), false);
      player1.setMoney(274.982F);
      player1.setConnected(true);
      player0.setJoinOK(player1, false);
      player0.setX(0.0F);
      player0.setDead();
      player0.setDead(2435L);
      player1.head.getSubparty();
      player0.id = 0;
      player0.getPictureId();
      player0.getY();
      player0.head = player1.head;
      player1.head.add(player0);
      player0.setConnected(false);
      player0.setDead();
      player0.getName();
      player1.head.boss = (Party) player0;
      player0.setX(0);
      player1.getPictureId();
      player0.getTimeOfDeath();
      player0.pack();
      float float0 = player1.getMoney();
      assertEquals(274.982F, float0, 0.01F);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((-1473), " ", "", (-1473));
      byte[] byteArray0 = new byte[3];
      Party party0 = new Party(4);
      player0.prev = party0;
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)0;
      party0.id = (int) (byte)0;
      player0.unpack(byteArray0);
      String string0 = player0.getIP();
      assertEquals(" ", string0);
      
      player0.toString();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-1473), player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = player0.pack();
      player0.setDead();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1246);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0, (short)4919);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream1);
      player0.unpack(dataInputStream0);
      player0.setY(3896.72F);
      int int0 = Packable.UNDEFINED;
      player0.setDead();
      player0.setX(1693.0254F);
      assertEquals(1392409281320L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player();
      player0.getZ();
      player0.setZ(0.0F);
      player0.remove((Party) null);
      player0.setZ((-2700.456F));
      player0.reset(false);
      player0.getPictureId();
      player0.setDead((long) 0, true);
      player0.type();
      player0.getName();
      assertEquals((-2700.456F), player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((-1448));
      Player player1 = new Player((short)4919, "", 1872);
      player1.setJoinOK(player0, false);
      player1.setJoinOK(player0, true);
      Player player2 = new Player(5, "0.0.0.0", "", (-1448));
      boolean boolean0 = player2.isJoinOK(player0, true);
      assertEquals("Player-1448", player0.toString());
      assertFalse(boolean0);
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      
      player2.toString();
      assertFalse(player2.isDead());
      assertEquals((-1448), player2.getPictureId());
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(1, player2.getStrength());
      assertEquals("0.0.0.0", player2.getIP());
      assertTrue(player2.isConnected());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1952296882816973
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-74);
      player0.unpack(byteArray0);
      Party party0 = player0.next;
      player0.setY((-1448.7587F));
      player0.setConnected(false);
      player0.getX();
      player0.type();
      Player player1 = new Player((-570), " ", " ", (byte)55, (-10122));
      player1.setDead();
      player0.setX(0.0F);
      assertEquals(1392409281320L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-581);
      Player player0 = new Player((-1899), "", "", (-1899), (-581));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, (InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.unpack(dataInputStream0);
      player0.gangStrength();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-102);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-581), (-1168));
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream1);
      BufferedInputStream bufferedInputStream2 = new BufferedInputStream(bufferedInputStream1, (byte)17);
      try { 
        pushbackInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(1, "", "module.+oduleBrowserDialog$ModuleFilter", 1488);
      player0.setZ((-2576));
      player0.getZ();
      player0.getX();
      player0.isConnected();
      player0.getIP();
      assertEquals((-2576.0F), player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player(0, "45PEre(", "45PEre(", (-1), (-1));
      long long0 = player0.getTimeOfDeath();
      assertFalse(player0.isDead());
      assertEquals((-1), player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, long0);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-1), player0.getPictureId());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, "state.Player$JoinInfo", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1795), 0);
      player1.setJoinOK(player0, true);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(1, player0.getStrength());
      assertTrue(player1.isConnected());
      assertEquals(0, player1.getStrength());
      assertEquals("Player-1", player0.getName());
      assertFalse(boolean0);
      assertEquals(0, player0.getPictureId());
      assertFalse(player1.isDead());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("state.Player$JoinInfo", player1.getIP());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals((-1795), player1.getPictureId());
  }
}
