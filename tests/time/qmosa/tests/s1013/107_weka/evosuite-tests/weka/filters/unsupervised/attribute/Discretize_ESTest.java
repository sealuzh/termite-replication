/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:10:07 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.075307505974338
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("Invert matching sense of column indexes.", list0, 1457);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      linkedList1.add("@attribute");
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      Instances instances0 = new Instances("date", arrayList0, 0);
      discretize0.m_FindNumBins = true;
      Instances instances1 = new Instances("$(Hhg", arrayList1, 1757);
      discretize0.setInputFormat(instances0);
      assertTrue(discretize0.getFindNumBins());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "relational";
      stringArray0[1] = "date";
      stringArray0[2] = "@data";
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8092579446563697
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("Invert matching sense of column indexes.", list0, 1457);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      linkedList1.add("@attribute");
      Discretize discretize0 = new Discretize();
      arrayList1.add(attribute0);
      discretize0.setOutputFormat();
      assertFalse(discretize0.getFindNumBins());
      
      Instances instances0 = new Instances("date", arrayList0, 0);
      discretize0.m_FindNumBins = true;
      Instances instances1 = new Instances("$(Hhg", arrayList1, 1757);
      discretize0.setInputFormat(instances0);
      discretize0.getOptions();
      discretize0.setOutputFormat();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 4774.7988;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 3558.2779465239;
      doubleArray1[3] = (-75.4227578994384);
      doubleArray1[4] = (-1510.43292);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 4774.7988;
      doubleArray2[2] = 4774.7988;
      doubleArray2[3] = (-75.4227578994384);
      doubleArray2[4] = (-50.575);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-75.4227578994384);
      doubleArray3[1] = (-50.575);
      doubleArray3[2] = 1.7976931348623157E308;
      doubleArray3[3] = (-1510.43292);
      doubleArray3[4] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(2658);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2658
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0646205521792886
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("n!$I@8|v6'?)=", arrayList0);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      attribute0.isInRange(0);
      Instances instances0 = new Instances("n!$I@8|v6'?)=", arrayList1, 2);
      String string0 = "b$";
      Instances instances1 = new Instances("-V", arrayList1, 8);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances1);
      // Undeclared exception!
      try { 
        discretize1.findNumBins(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("l*{e5SNh");
      discretize0.m_ClassIndex = 177;
      discretize0.setUseEqualFrequency(true);
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 177;
      doubleArray1[1] = (double) 177;
      doubleArray1[2] = (double) 177;
      doubleArray0[0] = doubleArray1;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("-F", arrayList0, (-1125));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Discretize discretize1 = new Discretize();
      discretize1.setOutputFormat();
      Instances instances0 = new Instances("string", arrayList1, 4);
      Instances instances1 = new Instances("@attribute", arrayList1, 0);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at l*{e5SNh
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9363453084064135
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("Invert matching sense of column indexes.", list0, 1457);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      linkedList1.add("@attribute");
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertFalse(discretize0.getFindNumBins());
      
      Instances instances0 = new Instances("date", arrayList0, 0);
      discretize0.m_FindNumBins = true;
      Instances instances1 = new Instances("$(Hhg", arrayList1, 1757);
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(discretize0.getFindNumBins());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7132389994392954
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("l*{e5SNh");
      discretize0.m_ClassIndex = 177;
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 177;
      doubleArray1[1] = (double) 177;
      doubleArray1[2] = (double) 177;
      doubleArray0[0] = doubleArray1;
      Discretize discretize1 = new Discretize();
      Discretize discretize2 = new Discretize();
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-28);
      doubleArray0[1] = (double) (byte) (-28);
      doubleArray0[2] = (double) (byte) (-28);
      doubleArray0[3] = (double) (byte) (-28);
      doubleArray0[4] = (double) (byte) (-28);
      doubleArray0[5] = (double) (byte) (-28);
      doubleArray0[6] = 2609.8201;
      doubleArray0[7] = (double) (byte) (-28);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-28), doubleArray0);
      binarySparseInstance0.setDataset((Instances) null);
      binarySparseInstance0.copy();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "Original string:";
      stringArray0[2] = "zzkM]g2[R/uQ5SW5M/L";
      stringArray0[3] = "GvN";
      Discretize discretize1 = new Discretize("");
      String[] stringArray1 = discretize1.getOptions();
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray1.length);
      
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.55606413300705
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("jjH4VMQ<1dA-HO<");
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getFindNumBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      
      Discretize discretize2 = new Discretize("_");
      discretize2.setIgnoreClass(true);
      String[] stringArray0 = discretize2.getOptions();
      assertEquals(7, stringArray0.length);
      
      Discretize discretize3 = new Discretize("VP=dJD(E@7");
      String[] stringArray1 = new String[6];
      stringArray1[0] = "jjH4VMQ<1dA-HO<";
      stringArray1[1] = "z\"[";
      stringArray1[2] = "jjH4VMQ<1dA-HO<";
      stringArray1[3] = "z\"[";
      stringArray1[4] = "B3W%Wg";
      stringArray1[5] = "VP=dJD(E@7";
      boolean boolean0 = discretize3.getFindNumBins();
      assertEquals(10, discretize3.getBins());
      assertEquals((-1.0), discretize3.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.323921794922607
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      discretize0.setUseBinNumbers(true);
      stringArray0[0] = "Ciqy%$zDK#%hT?l";
      stringArray0[1] = "F";
      stringArray0[2] = "GU:p";
      Discretize.main(stringArray0);
      discretize0.globalInfo();
      discretize0.setUseEqualFrequency(true);
      discretize0.getUseBinNumbers();
      discretize0.binsTipText();
      discretize0.getUseEqualFrequency();
      discretize0.getMakeBinary();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(134);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("@ cbn>");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@ cbn>";
      stringArray0[1] = "@ cbn>";
      Filter.makeCopy(discretize0);
      stringArray0[2] = "@ cbn>";
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-38);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("ZN");
      String string0 = discretize0.globalInfo();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.137530776297274
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("l*{+5kNh");
      discretize0.setUseEqualFrequency(true);
      discretize0.listOptions();
      discretize0.setIgnoreClass(true);
      Discretize.main((String[]) null);
      discretize0.findNumBinsTipText();
      discretize0.setInvertSelection(true);
      discretize0.getBinRangesString(95);
      boolean boolean0 = discretize0.getInvertSelection();
      assertTrue(discretize0.getUseEqualFrequency());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("]yoz'");
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode2);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode3);
      Locale locale0 = Locale.GERMAN;
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.798534689126567
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("'/!q~7p_[04/f");
      discretize0.getBinRangesString(1477);
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      discretize0.setDesiredWeightOfInstancesPerInterval(1477);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1477);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) (byte) (-28);
      doubleArray0[4] = (double) (byte) (-28);
      doubleArray0[5] = (double) (byte) (-28);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-28), doubleArray0);
      binarySparseInstance0.copy();
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[8];
      doubleArray0[0] = (double) (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize1 = new Discretize();
      String string0 = discretize1.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getFindNumBins());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.714011200211496
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("_");
      String[] stringArray0 = discretize1.getOptions();
      assertEquals(6, stringArray0.length);
      
      Discretize discretize2 = new Discretize("jjH4VMQ<1dA-HO<");
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize2.getBins());
      
      String[] stringArray1 = new String[6];
      stringArray1[0] = "jjH4VMQ<1dA-HO<";
      stringArray1[1] = "z\"[";
      stringArray1[2] = "jjH4VMQ<1dA-HO<";
      stringArray1[3] = "z\"[";
      stringArray1[4] = "z\"[";
      stringArray1[5] = "_";
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("*W5D<hSCW|8@I");
      int[] intArray0 = new int[9];
      intArray0[0] = (-1405);
      intArray0[1] = (-2938);
      intArray0[2] = (-1954);
      intArray0[3] = 9;
      intArray0[4] = 66;
      intArray0[5] = 573;
      intArray0[6] = 0;
      intArray0[7] = (-71);
      intArray0[8] = 99;
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemInUtil.addInputLine("jjH4VMQ<1dA-HO<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      StringReader stringReader0 = new StringReader("jjH4VMQ<1dA-HO<");
      StringReader stringReader1 = new StringReader("jjH4VMQ<1dA-HO<");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      discretize0.setFindNumBins(false);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = '$';
      charArray0[2] = '@';
      stringReader1.read(charArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3332);
      intArray0[1] = 0;
      intArray0[2] = (-2508);
      intArray0[3] = 0;
      intArray0[4] = (-2352);
      intArray0[5] = (-2508);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 86);
      binarySparseInstance0.insertAttributeAt(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((-2508));
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.globalInfo();
      discretize0.makeBinaryTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-28);
      doubleArray0[1] = (double) (byte) (-28);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      binarySparseInstance0.copy();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-28);
      intArray0[1] = (int) (byte) (-28);
      intArray0[2] = (int) (byte) (-28);
      intArray0[3] = 82;
      intArray0[4] = (int) (byte) (-28);
      intArray0[5] = (int) (byte) (-28);
      intArray0[6] = (int) (byte) (-28);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray0, 3148);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SystemInUtil.addInputLine("jjH4VMQ<1dA-HO<");
      Discretize discretize0 = new Discretize();
      StringReader stringReader0 = new StringReader("jjH4VMQ<1dA-HO<");
      StringReader stringReader1 = new StringReader("jjH4VMQ<1dA-HO<");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale locale0 = Locale.ENGLISH;
      locale0.getUnicodeLocaleAttributes();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jjH4VMQ<1dA-HO<";
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte byte0 = (byte) (-28);
      Discretize discretize0 = new Discretize();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      int int0 = (-2503);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2503));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setBins(5);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3332);
      intArray0[1] = (-2);
      intArray0[2] = (-2508);
      intArray0[3] = 0;
      intArray0[4] = (-2352);
      intArray0[5] = (-2508);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 86);
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2508);
      SparseInstance sparseInstance0 = new SparseInstance((-1673.642948), doubleArray0);
      sparseInstance0.dataset();
      Discretize discretize0 = new Discretize(".bsi");
      discretize0.getCapabilities();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.724454707919629
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2352);
      intArray0[1] = 0;
      intArray0[2] = (-2508);
      intArray0[0] = 0;
      intArray0[4] = (-2352);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 86);
      binarySparseInstance0.isMissing((-1073741822));
      binarySparseInstance0.insertAttributeAt(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Incorrect Multi-Instance format,mus be 'NOMINAL att,RELATIONAL att,CLASS att'!";
      stringArray0[1] = "b0E";
      discretize0.setAttributeIndices("VP=dJD(E@7");
      stringArray0[2] = "\nRandomized dataset:";
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(480.31062);
      discretize0.getFindNumBins();
      discretize0.setFindNumBins(false);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter1.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = (-2933.5673541035076);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-313.716);
      doubleArray1[5] = (-1284.0);
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 434.6;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1284.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-313.716);
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getInvertSelection();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize1 = new Discretize();
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getFindNumBins());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2352);
      intArray0[1] = 0;
      intArray0[2] = (-2508);
      intArray0[0] = 0;
      intArray0[4] = (-2352);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 86);
      binarySparseInstance0.isMissing((-1073741822));
      binarySparseInstance0.insertAttributeAt(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2352);
      doubleArray0[1] = (double) (-2352);
      doubleArray0[2] = (double) (-2508);
      doubleArray0[3] = (double) (-2352);
      doubleArray0[4] = (double) 86;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0, doubleArray0);
      binarySparseInstance3.copy();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute(";']:Qv3bG\"|NYP3G-I");
      arrayList0.add(attribute0);
      discretize0.setOutputFormat();
      Instances instances0 = new Instances("relational", arrayList0, 0);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertTrue(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9930948689671983
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = 177;
      discretize0.setUseEqualFrequency(true);
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 177;
      doubleArray1[1] = (double) 177;
      doubleArray1[2] = (double) 177;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 177;
      doubleArray2[1] = (double) 177;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 177;
      doubleArray3[1] = (double) 177;
      doubleArray2[1] = (double) 177;
      doubleArray3[3] = (double) 177;
      doubleArray3[4] = (double) 177;
      doubleArray3[5] = (double) 177;
      doubleArray3[1] = (double) 177;
      doubleArray3[7] = (double) 177;
      doubleArray3[8] = (double) 177;
      doubleArray0[2] = doubleArray3;
      doubleArray0[3] = doubleArray2;
      double[] doubleArray4 = new double[0];
      doubleArray0[4] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.listOptions();
      discretize0.setIgnoreClass(true);
      String[] stringArray0 = new String[0];
      Discretize.main(stringArray0);
      discretize0.findNumBinsTipText();
      discretize0.setInvertSelection(true);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(511);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 511
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-38);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("^}o@oGc]$&W'qi<");
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("8964", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = false;
      discretize0.setMakeBinary(false);
      discretize0.getMakeBinary();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1.0));
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 274;
      discretize0.m_ClassIndex = 274;
      Filter.makeCopy(discretize0);
      discretize0.getUseEqualFrequency();
      Discretize discretize1 = new Discretize();
      discretize1.getBins();
      Discretize discretize2 = new Discretize();
      discretize2.desiredWeightOfInstancesPerIntervalTipText();
      Discretize discretize3 = new Discretize("Sets the desired weight of instances per interval for equal-frequency binning.");
      discretize3.setUseEqualFrequency(false);
      discretize1.setUseBinNumbers(false);
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2352);
      intArray0[1] = 0;
      intArray0[2] = (-2508);
      intArray0[0] = 0;
      intArray0[4] = (-2352);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 86);
      binarySparseInstance0.isMissing((-1073741822));
      binarySparseInstance0.insertAttributeAt(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Incorrect Multi-Instance format,mus be 'NOMINAL att,RELATIONAL att,CLASS att'!";
      stringArray0[1] = "b0E";
      stringArray0[2] = "\nRandomized dataset:";
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3332);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)37;
      byteArray0[4] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("T");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((byte)37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte byte0 = (byte) (-28);
      Discretize discretize0 = new Discretize();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2352);
      intArray0[1] = 0;
      intArray0[2] = (-2508);
      intArray0[0] = 0;
      intArray0[4] = (-2352);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 86);
      binarySparseInstance0.isMissing((-1073741822));
      binarySparseInstance0.insertAttributeAt(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Incorrect Multi-Instance format,mus be 'NOMINAL att,RELATIONAL att,CLASS att'!";
      stringArray0[0] = "b0E";
      stringArray0[2] = "\nRandomized dataset:";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SystemInUtil.addInputLine("jjH4VMQ<1dA-HO<");
      Discretize discretize0 = new Discretize();
      StringReader stringReader0 = new StringReader("jjH4VMQ<1dA-HO<");
      StringReader stringReader1 = new StringReader("jjH4VMQ<1dA-HO<");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      discretize0.setOutputFormat();
      discretize0.getBinRangesString(39);
      Instances instances0 = null;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize("Incorrect Multi-Instance format, must be 'NOMINAL att, RELATIONAL att, CLASS att'!");
      int[] intArray0 = new int[6];
      intArray0[0] = (-3332);
      intArray0[1] = 0;
      intArray0[2] = (-2508);
      intArray0[3] = 0;
      intArray0[4] = (-2352);
      intArray0[5] = (-2508);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 86);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode2);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode3);
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode2);
      StringReader stringReader0 = new StringReader("9q7(=w]AO[Q9n.i5$");
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = 'Y';
      locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("4JT:TnxlP9S<f]ljh$I", list1, 1992);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2);
      Discretize discretize0 = new Discretize("Missing");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-28);
      doubleArray0[1] = (double) (byte) (-28);
      doubleArray0[2] = (double) (byte) (-28);
      doubleArray0[3] = (double) (byte) (-28);
      doubleArray0[4] = (double) (byte) (-28);
      doubleArray0[5] = (double) (byte) (-28);
      doubleArray0[6] = 2609.8201;
      doubleArray0[7] = (double) (byte) (-28);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-28), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = (BinarySparseInstance)binarySparseInstance0.copy();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance1 = new SparseInstance((-28.0), doubleArray0);
      binarySparseInstance1.dataset();
      Discretize discretize1 = new Discretize("@relation");
      // Undeclared exception!
      try { 
        discretize0.getCapabilities((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2352);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-2352);
      doubleArray0[3] = (double) (-2352);
      doubleArray0[4] = (double) (-2352);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 2;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-2352), doubleArray0);
      binarySparseInstance2.copy();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      Discretize discretize0 = new Discretize("Password:");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize("rka}M1^KOjpni");
      String string0 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
