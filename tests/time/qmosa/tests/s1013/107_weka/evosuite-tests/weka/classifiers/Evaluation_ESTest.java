/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:56:24 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedWriter;
import java.util.Properties;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.Filter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3468618197243933
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IBk iBk0 = new IBk();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      instances0.enumerateAttributes();
      double double0 = evaluation0.m_SumClass;
      evaluation0.getRevision();
      evaluation0.rootRelativeSquaredError();
      try { 
        evaluation0.evaluateModel((Classifier) iBk0, instances2, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.360282901839046
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      int int0 = 0;
      instances0.setClassIndex(0);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation1.errorRate();
      evaluation1.totalCost();
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.647532161615992
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IBk iBk0 = new IBk();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      inputMappedClassifier0.setModelHeader(instances1);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      evaluation0.weightedPrecision();
      boolean boolean0 = true;
      evaluation0.setDiscardPredictions(true);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances1, costMatrix0);
      evaluation1.incorrect();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom((-1723L));
      evaluation1.unweightedMacroFmeasure();
      instances1.resample(mockRandom0);
      evaluation1.toClassDetailsString();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.929674730830877
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.errorRate();
      textDirectoryLoader0.getRevision();
      Evaluation.main((String[]) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetStructure();
      databaseLoader0.getNextInstance(instances0);
      evaluation1.addNumericTrainClass(Double.NaN, Double.NaN);
      evaluation1.falseNegativeRate((-855));
      evaluation1.unweightedMicroFmeasure();
      Evaluation evaluation2 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation1.equals((Object) null);
      evaluation1.falsePositiveRate((-855));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7404185765854145
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      instances0.setClassIndex(0);
      boolean boolean0 = false;
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation0.weightedPrecision();
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) oneR0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7279174926771206
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      textDirectoryLoader0.getDataSet();
      evaluation0.weightedAreaUnderROC();
      evaluation1.toMatrixString();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation1.addNumericTrainClass((-427.752), Double.NaN);
      evaluation1.precision((-1878));
      evaluation0.pctCorrect();
      double double0 = evaluation1.m_SumSqrClass;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1040), Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1040
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6379940485425777
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IBk iBk0 = new IBk();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      inputMappedClassifier0.setModelHeader(instances1);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      boolean boolean0 = false;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1938L);
      instances1.resample(mockRandom0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      Evaluation evaluation0 = new Evaluation(instances1);
      Object object0 = new Object();
      try { 
        evaluation0.evaluateModel((Classifier) gaussianProcesses0, instances1, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6356504583133384
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation0.weightedPrecision();
      Evaluation evaluation2 = new Evaluation(instances0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".arff");
      textDirectoryLoader0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      stringArray0[1] = ".arff";
      stringArray0[2] = "\tOutputs detailed information-retrieval";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@relation";
      Evaluation.makeOptionString(oneR0, false);
      stringArray0[7] = "8034";
      stringArray0[8] = ".bsi";
      Evaluation.main(stringArray0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetStructure();
      databaseLoader0.getNextInstance(instances0);
      evaluation1.addNumericTrainClass(0, 3256.272);
      Evaluation evaluation3 = new Evaluation(instances0);
      int int0 = (-742);
      // Undeclared exception!
      try { 
        evaluation2.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.734271369417327
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      evaluation0.weightedAreaUnderROC();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Evaluation.makeOptionString(adaBoostM1_0, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".bsi";
      Evaluation.main(stringArray0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetStructure();
      databaseLoader0.getNextInstance(instances1);
      evaluation1.addNumericTrainClass(799.7489774152423, Double.NaN);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.kappa();
      evaluation1.falseNegativeRate((-742));
      // Undeclared exception!
      try { 
        evaluation0.m_Header.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4053132201295977
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation0.weightedPrecision();
      Evaluation evaluation2 = new Evaluation(instances0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".arff");
      textDirectoryLoader0.getRevision();
      Evaluation.main((String[]) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetStructure();
      databaseLoader0.getNextInstance(instances0);
      evaluation2.addNumericTrainClass(0, 0.95);
      evaluation2.falseNegativeRate((-855));
      CostMatrix costMatrix0 = new CostMatrix(115);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.279260709235619
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.errorRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      Evaluation.main((String[]) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetStructure();
      databaseLoader0.getNextInstance(instances0);
      evaluation2.addNumericTrainClass(Double.NaN, (-464.4908));
      // Undeclared exception!
      try { 
        evaluation1.falseNegativeRate(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9785238217999606
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_WithClass;
      evaluation0.weightedPrecision();
      Evaluation evaluation2 = new Evaluation(instances0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".arff");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".bsi", instances0, protectedProperties0);
      instances0.deleteWithMissing(attribute0);
      evaluation2.totalCost();
      evaluation2.getRevision();
      evaluation0.rootRelativeSquaredError();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      sparseInstance0.toString(attribute0);
      evaluation0.rootRelativeSquaredError();
      evaluation2.addNumericTrainClass(2, (-886.9861183736));
      evaluation0.precision((-1040));
      evaluation0.weightedRecall();
      try { 
        evaluation2.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4872703333061854
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toMatrixString();
      evaluation0.m_SumSqrErr = Double.NaN;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation2 = new Evaluation(instances1);
      instances1.stream();
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation1.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0895602671119695
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IBk iBk0 = new IBk();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      double double0 = evaluation0.weightedPrecision();
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.errorRate();
      textDirectoryLoader1.getRevision();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      Evaluation.main(stringArray0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetStructure();
      databaseLoader0.setSource("o6,C", (String) null, ".bsi");
      databaseLoader0.getNextInstance(instances0);
      AbstractClassifier.makeCopies(iBk0, 2);
      evaluation1.SFEntropyGain();
      evaluation0.correct();
      evaluation0.pctCorrect();
      evaluation0.pctIncorrect();
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2435684107204956
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      PipedWriter pipedWriter0 = new PipedWriter();
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      instances1.equalHeadersMsg(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instance instance0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        evaluation1.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7539657164192466
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.m_TotalCoverage = 0.0;
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("8qea", instances1, protectedProperties0);
      evaluation0.m_Header.deleteWithMissing(attribute0);
      evaluation0.totalCost();
      evaluation0.getRevision();
      evaluation0.rootRelativeSquaredError();
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, evaluation0.m_MarginCounts);
      instances1.add((Instance) sparseInstance0);
      evaluation0.rootRelativeSquaredError();
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getRevision();
      Evaluation.makeOptionString(naiveBayesMultinomialText0, false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("9122");
      try { 
        Filter.useFilter(instances0, (Filter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.482883041090651
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\tPreserves the order in the percentage split.\n");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      evaluation0.SFMeanSchemeEntropy();
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, evaluation0.m_MarginCounts);
      evaluation0.m_Header.add((Instance) sparseInstance0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(evaluation0.m_Header);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6222213433382957
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      double double0 = evaluation1.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      textDirectoryLoader0.getRevision();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q-62SFp`pM");
      double double1 = evaluation1.totalCost();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.getRevision();
      evaluation0.rootRelativeSquaredError();
      double[] doubleArray0 = new double[2];
      evaluation1.rootRelativeSquaredError();
      evaluation1.SFMeanPriorEntropy();
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8688897147295798
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.m_SumSqrPredicted = Double.POSITIVE_INFINITY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      evaluation0.trueNegativeRate((byte)100);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7459888703929756
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IBk iBk0 = new IBk();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.useNoPriors();
      inputMappedClassifier0.setModelHeader(instances1);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      double double0 = evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      instances0.stream();
      double double1 = evaluation1.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedFMeasure();
      assertEquals(double2, double0, 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = (-8);
      instances0.setClassIndex((-8));
      instances0.stream();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.483903329939182
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      boolean boolean0 = false;
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toMatrixString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.toString();
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Instance instance0 = null;
      MockRandom mockRandom0 = new MockRandom(325L);
      // Undeclared exception!
      try { 
        evaluation1.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.575495847219038
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.575495847219038
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-638);
      evaluation0.areaUnderPRC((-638));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.94451499860795
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.errorRate();
      textDirectoryLoader0.getRevision();
      Evaluation.main((String[]) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetStructure();
      databaseLoader0.getNextInstance(instances0);
      evaluation1.addNumericTrainClass(Double.NaN, Double.NaN);
      double double1 = evaluation1.falseNegativeRate((-855));
      double double2 = evaluation1.unweightedMicroFmeasure();
      assertEquals(double2, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation0.equals(naiveBayesMultinomialUpdateable0);
      assertFalse(evaluation0.getDiscardPredictions());
      
      double double3 = evaluation1.falsePositiveRate(1551);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.486292816199636
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation0.weightedPrecision();
      Evaluation evaluation2 = new Evaluation(instances0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".arff");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".bsi", instances0, protectedProperties0);
      evaluation2.toSummaryString("numeric", true);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      // Undeclared exception!
      try { 
        evaluation2.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.997173371420171
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.m_SumAbsErr = 0.0;
      evaluation0.setDiscardPredictions(true);
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      evaluation0.toSummaryString(".arff", true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Preserves the order in the percentage split.\n");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      evaluation0.SFMeanSchemeEntropy();
      double double2 = evaluation0.m_SumClassPredicted;
      textDirectoryLoader0.getRevision();
      SparseInstance sparseInstance0 = new SparseInstance((-565.899860631564), doubleArray0);
      evaluation0.m_Header.add((Instance) sparseInstance0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.addNumericTrainClass((-565.899860631564), 1.0E-75);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)22;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.precision((-2630));
      double double3 = evaluation0.SFMeanPriorEntropy();
      double double4 = evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9508598523379184
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\tPreserves the order in the percentage split.\n");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(" : ", evaluation0.m_Header, protectedProperties1);
      instances0.deleteWithMissing(attribute0);
      evaluation0.totalCost();
      evaluation0.getRevision();
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header, (CostMatrix) null);
      evaluation1.totalCost();
      evaluation0.getRevision();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.rootRelativeSquaredError();
      SparseInstance sparseInstance0 = new SparseInstance(4, evaluation0.m_MarginCounts);
      evaluation0.m_Header.add((Instance) sparseInstance0);
      Evaluation evaluation3 = null;
      try {
        evaluation3 = new Evaluation(evaluation0.m_Header, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5806789212792607
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.useNoPriors();
      evaluation0.weightedPrecision();
      evaluation0.incorrect();
      double double0 = evaluation0.m_SumSqrClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.errorRate();
      textDirectoryLoader0.getRevision();
      evaluation1.trueNegativeRate(1495);
      evaluation1.setNumericPriorsFromBuffer();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getNextInstance(evaluation0.m_Header);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSONLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1281264042590835
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\tPreserves the order in the percentage split.\n");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("\tPreserves the order in the percentage split.\n", instances0, protectedProperties0);
      evaluation0.m_Header.deleteWithMissing(attribute0);
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header, (CostMatrix) null);
      evaluation1.totalCost();
      evaluation0.getRevision();
      evaluation0.rootRelativeSquaredError();
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      evaluation0.m_Header.add((Instance) sparseInstance0);
      evaluation1.rootRelativeSquaredError();
      evaluation1.addNumericTrainClass(4, 0.0);
      evaluation1.precision(2);
      assertEquals(0.0, evaluation0.incorrect(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6711885790241507
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      evaluation0.weightedAreaUnderROC();
      evaluation1.toMatrixString();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation1.addNumericTrainClass((-427.752), Double.NaN);
      int int0 = (-1040);
      evaluation1.precision((-1878));
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8303272597288665
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      double double0 = evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\tPreserves the order in the percentage split.\n");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("\tPreserves the order in the percentage split.\n", instances0, protectedProperties0);
      evaluation0.m_Header.deleteWithMissing(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, evaluation0.m_MarginCounts);
      instances0.add((Instance) sparseInstance0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.addNumericTrainClass(3064.3301, 3375.745670182);
      double double3 = evaluation0.falseNegativeRate(1);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8091579157930053
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-6);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation1.errorRate();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      properties0.put(hierarchicalClusterer0, technicalInformationHandlerJavadoc0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q-62SFp`pM");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Q-62SFp`pM", instances0, protectedProperties0);
      instances0.deleteWithMissing(attribute0);
      evaluation1.totalCost();
      evaluation0.getRevision();
      evaluation0.rootRelativeSquaredError();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        evaluation1.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1162968355836624
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IBk iBk0 = new IBk();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.useNoPriors();
      evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(true);
      evaluation0.incorrect();
      double double0 = evaluation0.m_SumSqrClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.errorRate();
      evaluation1.toSummaryString();
      boolean boolean0 = true;
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.toSummaryString(", m_f=", false);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation1.weightedMatthewsCorrelation();
      wrapperSubsetEval0.getClassifier();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.389828764218859
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IBk iBk0 = new IBk();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.useNoPriors();
      instances1.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        CostMatrix.parseMatlab("@relation");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.019077647287608
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IBk iBk0 = new IBk();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.errorRate();
      textDirectoryLoader1.getRevision();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      Evaluation.main(stringArray0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetStructure();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      AbstractClassifier.makeCopies(iBk0, 2);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      evaluation1.SFEntropyGain();
      evaluation0.correct();
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2116676591133655
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      evaluation0.weightedAreaUnderROC();
      instances0.equalHeadersMsg(evaluation0.m_Header);
      double double0 = 0.0;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.weightedFalseNegativeRate();
      try { 
        inputMappedClassifier0.constructMappedInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8501349548823622
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      double double0 = evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".arff";
      stringArray0[4] = ".bsi";
      stringArray0[5] = ".bsi";
      stringArray0[6] = "8034";
      stringArray0[7] = "@data";
      stringArray0[8] = "@data";
      Evaluation.main(stringArray0);
      double double3 = evaluation0.avgCost();
      assertEquals(double3, double2, 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2713548829762695
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation1.errorRate();
      textDirectoryLoader0.getRevision();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q-62SFp`pM");
      evaluation1.totalCost();
      try { 
        evaluation1.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0509174222162208
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)62;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      instances0.enumerateAttributes();
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFMeanSchemeEntropy();
      double double3 = evaluation0.errorRate();
      assertEquals(double3, double2, 0.01);
      
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\tPreserves the order in the percentage split.\n");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(" : ", evaluation0.m_Header, protectedProperties1);
      instances0.deleteWithMissing(attribute0);
      evaluation0.totalCost();
      evaluation0.getRevision();
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      evaluation0.rootRelativeSquaredError();
      evaluation0.addNumericTrainClass(0.0, 645.73755965764);
      evaluation0.precision(2);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.567913905366312
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_WithClass;
      evaluation0.weightedPrecision();
      Evaluation evaluation2 = new Evaluation(instances0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".arff");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".bsi", instances0, protectedProperties0);
      instances0.deleteWithMissing(attribute0);
      evaluation2.totalCost();
      evaluation0.rootRelativeSquaredError();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      evaluation0.rootRelativeSquaredError();
      evaluation2.addNumericTrainClass(2, (-886.9861183736));
      evaluation0.precision((-1040));
      evaluation2.addNumericTrainClass(4649.47348, 2);
      Evaluation evaluation3 = new Evaluation(instances0);
      Evaluation evaluation4 = new Evaluation(instances0);
      try { 
        evaluation4.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.527559296044748
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      evaluation0.weightedAreaUnderROC();
      evaluation1.toMatrixString();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instance instance0 = null;
      evaluation1.addNumericTrainClass((-427.752), Double.NaN);
      int int0 = (-1040);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      int int1 = (-1878);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1040);
      intArray0[1] = (-1878);
      intArray0[2] = (-1040);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, (-1878));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation1.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance1, (-1040));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.897211607521706
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.m_SumAbsErr = 0.0;
      evaluation0.setDiscardPredictions(false);
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.SFMeanSchemeEntropy();
      double double2 = evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Preserves the order in the percentage split.\n");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      double double3 = evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      SparseInstance sparseInstance0 = new SparseInstance((-565.899860631564), doubleArray0);
      evaluation0.m_Header.add((Instance) sparseInstance0);
      double double4 = evaluation0.rootRelativeSquaredError();
      assertEquals(double4, double3, 0.01);
      
      evaluation0.addNumericTrainClass((-565.899860631564), 1.0E-75);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)22;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.precision((-2630));
      evaluation0.SFMeanPriorEntropy();
      double double5 = evaluation0.relativeAbsoluteError();
      assertEquals(double5, double2, 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5391061354704236
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IBk iBk0 = new IBk();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.useNoPriors();
      inputMappedClassifier0.setModelHeader(instances1);
      instances1.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.errorRate();
      textDirectoryLoader0.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " ";
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.793616182148303
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation1.errorRate();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      String string0 = "Q-62SFp`pM";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q-62SFp`pM");
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Q-62SFp`pM", instances0, protectedProperties0);
      instances0.deleteWithMissing(attribute0);
      evaluation1.totalCost();
      evaluation0.getRevision();
      evaluation0.rootRelativeSquaredError();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      evaluation1.rootRelativeSquaredError();
      Classifier classifier0 = null;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) oneR0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OneR oneR0 = new OneR();
      String string0 = ":C5K\\GF";
      try { 
        Evaluation.wekaStaticWrapper(oneR0, ":C5KGF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, " dt'zT3dd");
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.6697485560685172
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IBk iBk0 = new IBk();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.useNoPriors();
      inputMappedClassifier0.setModelHeader(instances1);
      instances1.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Instance instance0 = null;
      MockRandom mockRandom0 = new MockRandom(1938L);
      evaluation0.unweightedMacroFmeasure();
      instances1.resample(mockRandom0);
      evaluation0.toClassDetailsString();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.3260886280590363
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.m_SumSqrPredicted = Double.POSITIVE_INFINITY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.setDiscardPredictions(false);
      Instance instance0 = null;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "o]Vk7hn");
      RandomForest randomForest0 = new RandomForest();
      Evaluation.getGlobalInfo(randomForest0);
      long long0 = 3188L;
      MockRandom mockRandom0 = new MockRandom(3188L);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedPrecision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.317429841055548
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IBk iBk0 = new IBk();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.weightedPrecision();
      instances1.setClassIndex(1);
      instances1.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.207181681604017
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation1.errorRate();
      textDirectoryLoader0.getRevision();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q-62SFp`pM");
      evaluation1.totalCost();
      evaluation1.toClassDetailsString();
      ConditionalDensityEstimator conditionalDensityEstimator0 = null;
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.stream();
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1685115817106104
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OneR oneR0 = new OneR();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.toClassDetailsString("@data");
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation0.weightedPrecision();
      Evaluation evaluation2 = new Evaluation(instances0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".arff");
      textDirectoryLoader0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      stringArray0[1] = ".arff";
      stringArray0[2] = "\tOutputs detailed information-retrieval";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@relation";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      stringArray0[6] = "@relation";
      stringArray0[7] = "8034";
      stringArray0[8] = ".bsi";
      Evaluation.main(stringArray0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetStructure();
      databaseLoader0.getNextInstance(instances0);
      evaluation1.addNumericTrainClass(0, 3256.272);
      Evaluation evaluation3 = new Evaluation(instances0);
      int int0 = (-742);
      // Undeclared exception!
      try { 
        evaluation3.weightedTruePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8532666173856898
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IBk iBk0 = new IBk();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      instances0.enumerateAttributes();
      double double0 = evaluation0.m_SumClass;
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedAreaUnderROC();
      CoverTree coverTree0 = new CoverTree();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".arff";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel("@relation", instances0, 5103, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-3668);
      Evaluation.handleCostOption((String) null, (-3668));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OneR oneR0 = new OneR();
      try { 
        Evaluation.handleCostOption("newNominalRule", (-17));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      ConverterUtils.DataSource.read((Loader) databaseLoader0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
