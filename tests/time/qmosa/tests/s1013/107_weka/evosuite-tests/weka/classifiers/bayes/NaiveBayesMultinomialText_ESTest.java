/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:05:29 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CorrelationAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.LovinsStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 3057);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      testInstances0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.218770771174388
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = " =\n\n";
      stringArray0[3] = "@data";
      stringArray0[4] = "\t<!ELEMENT OUTCOME (#PCDATA)>\n";
      stringArray0[5] = "@relation";
      stringArray0[6] = ".arff";
      stringArray0[7] = ".arff";
      stringArray0[8] = " ";
      testInstances0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t12.0\nclass2\t10.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\n", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getRevision();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-lnorm");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setDebug(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-lnorm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -lnorm option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(2L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2L;
      doubleArray0[1] = (double) 2L;
      doubleArray0[2] = (double) 2L;
      doubleArray0[3] = (double) 2L;
      doubleArray0[4] = (double) 2L;
      doubleArray0[5] = (-2094.28462);
      doubleArray0[6] = (double) 2L;
      doubleArray0[7] = (double) 2L;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      String string0 = naiveBayesMultinomialText0.toString();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5683842939169392
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-988.56143);
      SparseInstance sparseInstance0 = new SparseInstance((-988.56143), doubleArray0);
      sparseInstance0.deleteAttributeAt(18);
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      naiveBayesMultinomialText0.m_minWordP = (-988.56143);
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      int[] intArray0 = new int[9];
      intArray0[0] = 114;
      intArray0[2] = 114;
      System.setCurrentTimeMillis(114);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      naiveBayesMultinomialText2.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText2.getUseStopList());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      testInstances0.getWords();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      System.setCurrentTimeMillis(2L);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2L;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      intArray0[4] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0, intArray0, (-2));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.161581302408632
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1));
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setUseStopList(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setNorm((-1));
      naiveBayesMultinomialText1.getUseWordFrequencies();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances";
      stringArray0[1] = "The norm of the instances after normalization.";
      stringArray0[2] = "XM\"AvnQ niyD}uLK]a$";
      stringArray0[3] = "XM\"AvnQ niyD}uLK]a$";
      stringArray0[4] = "The norm of the instances after normalization.";
      naiveBayesMultinomialText1.setDebug(true);
      stringArray0[5] = "so";
      stringArray0[6] = "XM\"AvnQ niyD}uLK]a$";
      stringArray0[7] = "/packageList.txt";
      stringArray0[8] = "XM\"AvnQ niyD}uLK]a$";
      naiveBayesMultinomialText1.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals((-1), naiveBayesMultinomialText0.getPeriodicPruning());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setLNorm((-4238.59741));
      String string0 = naiveBayesMultinomialText2.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4372671904781944
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 9.223372036854776E18;
      naiveBayesMultinomialText0.setMinWordFrequency(9.223372036854776E18);
      naiveBayesMultinomialText0.toString();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.m_periodicP = (-2);
      Instances instances0 = testInstances0.generate();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".arff";
      stringArray0[1] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[2] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[3] = "NaiveBayesMultinomialText: No model built yet.\n";
      testInstances0.setOptions(stringArray0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.normTipText();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.130456728177456
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      sGDText0.getRevision();
      sGDText0.setLNorm((-1.0));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      sGDText0.getTokenizer();
      naiveBayesMultinomialText0.normTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      instances1.add((Instance) binarySparseInstance1);
      iBk0.pruneToK(instances1, (double[]) null, (-2));
      Instances instances2 = new Instances(instances1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getNorm();
      naiveBayesMultinomialText1.listOptions();
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.054311059589197
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.reset();
      capabilities0.getOtherCapabilities();
      naiveBayesMultinomialText0.setPeriodicPruning(1279);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setDebug(true);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getOptions();
      assertEquals(1279, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.tartarus.snowball";
      stringArray0[1] = "org.tartarus.snowball";
      SnowballStemmer.main(stringArray0);
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 756;
      intArray0[1] = (-1);
      intArray0[2] = 31;
      intArray0[3] = 1235;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 384;
      intArray0[7] = 0;
      intArray0[8] = 89;
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1235;
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, double0, 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7896843142571908
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      sGDText0.getRevision();
      sGDText0.setLNorm((-1.0));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      tokenizer0.tokenize("-M");
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.getTokenizer();
      boolean boolean0 = false;
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setNorm(1);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 1;
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, 1);
      Instances instances2 = new Instances(instances1, 4);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@relation";
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(51.091799256687, doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[3];
      intArray0[0] = 11;
      intArray0[1] = 1000;
      intArray0[2] = 1508;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, 1508);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_tokenizer = tokenizer0;
      String[] stringArray0 = new String[1];
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sGDText0.setNorm(524.41293306);
      stringArray0[0] = "UxFzt%";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getLNorm();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-349);
      intArray0[2] = 18;
      intArray0[3] = 62;
      SparseInstance sparseInstance0 = new SparseInstance(0L, doubleArray0, intArray0, 933);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      sparseInstance0.mergeInstance(binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-802.9091);
      doubleArray0[1] = (-988.56143);
      SparseInstance sparseInstance0 = new SparseInstance((-802.9091), doubleArray0);
      naiveBayesMultinomialText0.m_minWordP = (-988.56143);
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.m_stopwords = null;
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      assertEquals((-988.56143), naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "GRp");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      double double0 = (-10.0);
      int int0 = 1279;
      Instance instance0 = null;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.394993443200781
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, int0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3203928312357034
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_t = 0.0;
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The stemming algorithm to use on the words.";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.setPeriodicPruning(1072);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(1072, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.230386047717229
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(0.0);
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.m_inputVector = null;
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setNorm(1467.0);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.m_leplace = (-1286.0);
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.setMinWordFrequency(1467.0);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getCapabilities();
      assertEquals(1467.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.649669942596342
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      System.setCurrentTimeMillis(2L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = (double) 2L;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(12, stringArray0.length);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.782775889348351
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText1.getStopwords();
      MockFile mockFile0 = new MockFile(file0, "&Do");
      mockFile0.getAbsolutePath();
      MockFile.createTempFile("&Do", "&Do");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) iteratedLovinsStemmer0;
      stringArray0[0] = ",i=SN,D6=V+#bh]PG";
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      iteratedLovinsStemmer0.stemString(",i=SN,D6=V+#bh]PG");
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getRevision();
      Instance instance0 = null;
      try { 
        naiveBayesMultinomialText1.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = " =\n\n";
      stringArray0[3] = "@data";
      stringArray0[4] = "\t<!ELEMENT OUTCOME (#PCDATA)>\n";
      stringArray0[5] = "@relation";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      
      String string1 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("If true, ignores all words that are on the stoplist.", string1);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      sGDText0.getRevision();
      sGDText0.setLNorm((-1.0));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(1.0, double0, 0.01);
      
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setUseStopList(false);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.useStopListTipText();
      naiveBayesMultinomialText0.setNorm(0.0);
      boolean boolean0 = naiveBayesMultinomialText0.m_lowercaseTokens;
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8034");
      Instances instances1 = new Instances(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(21);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      naiveBayesMultinomialText0.setLNorm(2);
      assertEquals(0.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      String string0 = naiveBayesMultinomialText1.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.00810108335994
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      naiveBayesMultinomialText0.m_minWordP = 0.0;
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[1] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[2] = "Use word frequencies rather than binary bag of words representation";
      stringArray0[3] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[4] = "Use word frequencies rather than binary bag of words representation";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.listOptions();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      sGDText0.getRevision();
      sGDText0.setLNorm((-1.0));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "8034";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      MockFile mockFile0 = new MockFile("");
      mockFile0.toPath();
      mockFile0.toURI();
      mockFile0.mkdirs();
      mockFile0.delete();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      MockFile mockFile1 = new MockFile("1981");
      mockFile1.setWritable(true);
      NaiveBayesMultinomialText.main(stringArray0);
      capabilities0.getClassCapabilities();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setNorm((-1345.8765954));
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      assertEquals((-1345.8765954), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7634533213188943
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-737.718);
      doubleArray0[1] = (-737.718);
      doubleArray0[2] = (-737.718);
      doubleArray0[3] = (-737.718);
      SparseInstance sparseInstance0 = new SparseInstance((-737.718), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance2);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.226865198671571
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText2.toString();
      assertEquals(1.0, naiveBayesMultinomialText2.getNorm(), 0.01);
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      assertEquals(2.0, naiveBayesMultinomialText2.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
      assertEquals(0, naiveBayesMultinomialText2.getPeriodicPruning());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), intArray0, (-1));
      binarySparseInstance0.dataset();
      testInstances0.setRelationalClassFormat((Instances) null);
      doubleArray0[8] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-1170.55249), doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9603496546361194
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      sGDText0.setLNorm((-7.525175240255039));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[1] = "NaiveBayesMultinomialText: No model built yet.\n";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      String string1 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string1);
      
      Tokenizer tokenizer1 = naiveBayesMultinomialText0.getTokenizer();
      assertSame(tokenizer1, tokenizer0);
      
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1279;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(1279);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 3.0;
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(3.0, doubleArray0, intArray0, (-874));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.811440159604542
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.tartarus.snowball.ext";
      stringArray0[1] = "org.tartarus.snowball";
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setLNorm(756);
      naiveBayesMultinomialText0.normTipText();
      assertEquals(756.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.toString();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat(10000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10000
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.tartarus.snowball";
      stringArray0[1] = "org.tartarus.snowball";
      snowballStemmer0.stem("org.tartarus.snowball");
      SnowballStemmer.main(stringArray0);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      int[] intArray0 = new int[9];
      intArray0[0] = 756;
      intArray0[1] = (-1);
      intArray0[2] = 31;
      intArray0[3] = 1235;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 384;
      intArray0[7] = 0;
      intArray0[8] = 89;
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 384;
      doubleArray0[2] = (double) 31;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(31, doubleArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("org.tartarus.snowball", "^u", protectedProperties1);
      binarySparseInstance0.value(attribute0);
      try { 
        coverTree0.kNearestNeighbours(binarySparseInstance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.tartarus.snowball.ext";
      stringArray0[1] = "org.tartarus.snowball";
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "weka/core/Capabilities.props";
      stringArray0[8] = "weka/core/Capabilities.props";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setLowercaseTokens(false);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, stringArray0[1]);
      try { 
        naiveBayesMultinomialText1.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1258529010377423
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.pruneDictionary();
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.m_normalize = false;
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.useStopListTipText();
      MockFile mockFile0 = new MockFile("If true, ignores all words that are on the stoplist.");
      mockFile0.setReadable(false);
      mockFile0.getCanonicalFile();
      mockFile0.setExecutable(true, true);
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setNorm(1.5);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.getLNorm();
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStopwords((File) null);
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      naiveBayesMultinomialText0.getUseWordFrequencies();
      String string1 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string1);
      
      String string2 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string2);
      
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(1.0, double0, 0.01);
      
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[2];
      SparseInstance sparseInstance0 = new SparseInstance((-988.56143), doubleArray0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(8);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 114;
      instances1.add((Instance) binarySparseInstance0);
      naiveBayesMultinomialText0.setLNorm(114);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(114.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder(evoSuiteFile0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "I^7";
      stringArray0[2] = "-norm";
      stringArray0[3] = "ance";
      stringArray0[4] = "%jH{*mu&=j~";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.195315165445874
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "auOG1O6Oo";
      stringArray0[1] = "auOG1O6Oo";
      stringArray0[2] = "IL5w^8 aPR8ih";
      stringArray0[3] = "auOG1O6Oo";
      stringArray0[4] = "t17ID";
      stringArray0[5] = "IL5w^8 aPR8ih";
      stringArray0[6] = "auOG1O6Oo";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray1 = naiveBayesMultinomialText1.getOptions();
      assertEquals(12, stringArray1.length);
      
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(boolean0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[2] = "";
      stringArray0[3] = "7f=Whk?#JGs~jp_5nYC";
      stringArray0[4] = " not supported (Bagging)";
      stringArray0[5] = "X9|";
      stringArray0[6] = "M@&}?Re>6Gp-=s~7x";
      stringArray0[7] = "-lowercase";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      System.setCurrentTimeMillis(2L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.setNorm(1.0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom(1735);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9654778597643245
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.normTipText();
      naiveBayesMultinomialText1.setNorm(0.0);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.getUseWordFrequencies();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText1.setOptions(stringArray0);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.m_leplace = (-6824.507265);
      naiveBayesMultinomialText3.setLNorm(0.0);
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText4.normTipText();
      naiveBayesMultinomialText1.getNorm();
      String string0 = naiveBayesMultinomialText3.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-988.56143);
      SparseInstance sparseInstance0 = new SparseInstance((-988.56143), doubleArray0);
      sparseInstance0.deleteAttributeAt(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      System.setCurrentTimeMillis((-1L));
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4851541442476526
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getRevision();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9122";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setLNorm(3.0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.stopwordsTipText();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "9122";
      stringArray1[1] = "Whether to convert all tokens to lowercase";
      stringArray1[2] = "9122";
      naiveBayesMultinomialText0.setLNorm(3.0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.setMinWordFrequency(3.0);
      naiveBayesMultinomialText0.normTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.setOptions(stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.688514447186191
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) iteratedLovinsStemmer0;
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.getStemmer();
      iteratedLovinsStemmer0.getTechnicalInformation();
      MockFile mockFile0 = new MockFile((File) null, "The independent probability of a class\n");
      mockFile0.createNewFile();
      iteratedLovinsStemmer0.globalInfo();
      mockFile0.toURL();
      mockFile0.setWritable(false);
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getCapabilities();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The independent probability of a class\n";
      NaiveBayesMultinomialText.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6298718780844146
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) lovinsStemmer0;
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Whether to convert all tokens to lowercase";
      stringArray0[1] = "Whether to convert all tokens to lowercase";
      stringArray0[2] = "Whether to convert all tokens to lowercase";
      stringArray0[3] = "Whether to convert all tokens to lowercase";
      stringArray0[4] = "Whether to convert all tokens to lowercase";
      stringArray0[5] = "The norm of the instances after normalization.";
      stringArray0[6] = "The norm of the instances after normalization.";
      stringArray0[7] = "Whether to convert all tokens to lowercase";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6082873972465448
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "weka/core/Capabilities.props";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 201.77214113186;
      doubleArray0[1] = 201.77214113186;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(201.77214113186, doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.0958067883758336
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      sGDText0.setLNorm((-7.525175240255039));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[1] = "NaiveBayesMultinomialText: No model built yet.\n";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      String string1 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string1);
      
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      String string2 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string2);
      
      naiveBayesMultinomialText0.setNorm(1);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      IBk iBk0 = new IBk();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-7.525175240255039);
      doubleArray0[1] = (-7.525175240255039);
      doubleArray0[2] = (double) 1;
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, 1);
      Instances instances2 = new Instances(instances1, 4);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.916506086868998
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(|67IB-9<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      System.setCurrentTimeMillis((-446L));
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("\tDoesn't need a class.");
      naiveBayesMultinomialText1.setStopwords(mockFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "s@[cJ@kayU!<(C5";
      stringArray0[1] = "4zPurtNr4tC";
      stringArray0[2] = "(|67IB-9<";
      stringArray0[3] = "(|67IB-9<";
      stringArray0[4] = "(|67IB-9<";
      NaiveBayesMultinomialText.main(stringArray0);
      String[] stringArray1 = naiveBayesMultinomialText1.getOptions();
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertEquals(14, stringArray1.length);
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3571740769916842
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(2L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "there";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      naiveBayesMultinomialText0.periodicPruningTipText();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[6];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[3] = 16;
      intArray0[4] = 16;
      intArray0[5] = 16;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(16, 1, intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-lowercase");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-lnorm";
      stringArray0[1] = "-lowercase";
      stringArray0[2] = "-lnorm";
      stringArray0[3] = "-lnorm";
      stringArray0[4] = "-lnorm";
      stringArray0[5] = "-lnorm";
      stringArray0[6] = "-lowercase";
      stringArray0[7] = "-lnorm";
      stringArray0[8] = "-lnorm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
