/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:48:26 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 823.216925563;
      doubleArray1[1] = 0.1;
      doubleArray1[1] = 1.03125;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.03125;
      doubleArray2[1] = 823.216925563;
      doubleArray0[1] = doubleArray2;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1411, (-1143));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VOLUME");
      mockPrintWriter0.close();
      Locale locale0 = new Locale("c@dQY:pfX!");
      mockPrintWriter0.printf(locale0, "", (Object[]) doubleArray0);
      mockPrintWriter0.print(false);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      mockPrintWriter0.println();
      matrix0.print((PrintWriter) mockPrintWriter0, numberFormat0, (-1523));
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray0, (-3), (-1143));
      matrix0.normF();
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 823.216925563;
      doubleArray3[1] = 823.216925563;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      double[] doubleArray4 = Optimization.solveTriangle(matrix0, doubleArray3, false, booleanArray0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray4, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(5, 5, (-382.45));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-382.45);
      doubleArray0[1] = (-382.45);
      doubleArray0[2] = (double) 5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      doubleArray0[3] = (-382.45);
      doubleArray0[4] = (-382.45);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      Random.setNextRandom(5);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("VOLUME");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "n:dalLh");
      doubleArray1[0] = 823.216925563;
      doubleArray1[1] = 0.1;
      doubleArray1[0] = 1.03125;
      doubleArray0[0] = doubleArray1;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("VOLUME");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      doubleArray0[1] = doubleArray1;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1411, (-1143));
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = locale0.stripExtensions();
      locale0.getDisplayCountry(locale1);
      locale0.getDisplayName();
      NumberFormat.getIntegerInstance(locale0);
      numberFormat0.setGroupingUsed(false);
      numberFormat0.setMinimumIntegerDigits(267);
      numberFormat0.setMinimumIntegerDigits(267);
      NumberFormat.getIntegerInstance();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("VOLUME");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "n:dalLh");
      doubleArray1[0] = 823.216925563;
      doubleArray1[1] = 0.1;
      doubleArray1[0] = 1.03125;
      doubleArray0[0] = doubleArray1;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("VOLUME");
      doubleArray0[1] = doubleArray1;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1411, (-1143));
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = locale0.stripExtensions();
      locale0.getDisplayCountry(locale1);
      locale0.getDisplayName();
      NumberFormat.getIntegerInstance(locale0);
      numberFormat0.setGroupingUsed(false);
      numberFormat0.setMinimumIntegerDigits(267);
      numberFormat0.setMinimumIntegerDigits(267);
      DecimalFormat decimalFormat0 = new DecimalFormat("Canada");
      matrix0.normF();
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {1.03125, 0.1, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("VOLUME");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "n:dalLh");
      doubleArray1[0] = 823.216925563;
      doubleArray1[1] = 0.1;
      doubleArray1[0] = 1.03125;
      doubleArray0[0] = doubleArray1;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("VOLUME");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "n:dalLh");
      doubleArray0[1] = doubleArray1;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1411, (-1143));
      NumberFormat.getInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.lookup(linkedList1, linkedList2);
      locale0.getDisplayVariant((Locale) null);
      locale0.getDisplayName();
      NumberFormat.getIntegerInstance(locale0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      assertArrayEquals(new double[] {1.03125, 0.1, 0.0, 0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("VOLUME");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "n:dalLh");
      doubleArray1[0] = 823.216925563;
      doubleArray1[1] = 0.1;
      doubleArray1[0] = 1.03125;
      doubleArray0[0] = doubleArray1;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("VOLUME");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, true, false);
      doubleArray0[1] = doubleArray1;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1411, (-1143));
      NumberFormat.getInstance();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CANADA;
      locale0.getDisplayScript(locale1);
      Locale locale2 = locale0.stripExtensions();
      locale0.getDisplayCountry(locale2);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("VOLUME");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "n:dalLh");
      doubleArray1[1] = 0.1;
      doubleArray1[0] = 1.03125;
      doubleArray0[0] = doubleArray1;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("VOLUME");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "n:dalLh");
      doubleArray0[1] = doubleArray1;
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "n:dalLh");
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1411, (-1143));
      NumberFormat.getInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.lookup(linkedList1, linkedList2);
      locale0.getDisplayVariant((Locale) null);
      locale0.getDisplayName();
      NumberFormat.getIntegerInstance(locale0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      assertArrayEquals(new double[] {1.03125, 0.1, 0.0, 0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 823.216925563;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      doubleArray1[1] = 0.1;
      doubleArray1[1] = 823.216925563;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.1;
      doubleArray2[1] = 823.216925563;
      doubleArray0[1] = doubleArray2;
      Random.setNextRandom((-1));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray1, true, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 823.216925563;
      doubleArray1[1] = 0.1;
      doubleArray1[2] = 0.5;
      doubleArray1[3] = 1.03125;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.03125;
      doubleArray2[1] = 823.216925563;
      doubleArray0[1] = doubleArray2;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1411, (-1143));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VOLUME");
      mockPrintWriter0.println();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      matrix0.print((PrintWriter) mockPrintWriter0, numberFormat0, (-1523));
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray0, (-3), (-1143));
      matrix0.normF();
      weka.core.matrix.Matrix matrix2 = new weka.core.matrix.Matrix(doubleArray0, 1411, (-3));
      matrix0.normF();
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray2, true, (boolean[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.044581376783342
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 0;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement((-4380));
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.addElement(2843);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(5053);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement((-745));
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      int int0 = optimization_DynamicIntArray0.elementAt(0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1094);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(1094);
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(2378);
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.addElement(2378);
      assertEquals(3, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.setNextRandom(5);
      Random.setNextRandom(8);
      Random.setNextRandom((-1893));
      Random.setNextRandom(1);
      Random.setNextRandom(10);
      Random.setNextRandom(1);
      double[] doubleArray0 = new double[6];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Random.setNextRandom(5);
      Random.setNextRandom(8);
      Random.setNextRandom((-1893));
      Random.setNextRandom(1);
      Random.setNextRandom(10);
      Random.setNextRandom(1);
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray1 = Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, booleanArray0);
      assertEquals(0, doubleArray1.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(0);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt((-1189));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1189
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 10;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(10);
      optimization_DynamicIntArray0.addElement(1696);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      int int1 = 1;
      optimization_DynamicIntArray0.addElement(1);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(2701);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement((-1245));
      assertEquals(1, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Random.setNextRandom(1);
      Random.setNextRandom(16);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(1);
      optimization_DynamicIntArray0.addElement(1);
      Random.setNextRandom(1);
      Random.setNextRandom(8);
      Random.setNextRandom(1);
      Random.setNextRandom(4);
      Random.setNextRandom(200);
  }
}
