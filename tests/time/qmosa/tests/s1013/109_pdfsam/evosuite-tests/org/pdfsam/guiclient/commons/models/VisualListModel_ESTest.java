/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:09:03 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.Color;
import java.awt.Component;
import java.awt.Insets;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JToolBar;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ListDataListener;
import javax.swing.text.DefaultEditorKit;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7756731334023246
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel0.addAllElements(1293, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndex(1293);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveUpIndexes(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.moveDownIndexes(intArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      VisualListModel visualListModel4 = new VisualListModel();
      visualListModel3.moveDownIndexes(intArray0);
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel2.reverseElements(intArray0);
      visualListModel3.getElements();
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.789779749407267
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndex(485);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = 255;
      intArray1[1] = 1;
      visualListModel0.moveDownIndexes(intArray1);
      VisualListModel visualListModel2 = new VisualListModel();
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 255;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = 1;
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel0.moveDownIndexes(intArray2);
      visualListModel3.reverseElements(intArray1);
      visualListModel1.removeElements(intArray2, true);
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 255
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6515668955689264
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndex(485);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      int[] intArray1 = new int[2];
      intArray1[0] = 255;
      intArray1[1] = 0;
      visualListModel0.moveDownIndexes(intArray1);
      VisualListModel visualListModel2 = new VisualListModel();
      int[] intArray2 = new int[7];
      intArray2[0] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel0.moveDownIndexes(intArray2);
      visualListModel3.reverseElements(intArray1);
      visualListModel0.getElements();
      visualListModel3.rotateClockwiseElements(intArray1);
      visualListModel1.addAllElements((Collection<VisualPageListItem>) linkedHashSet0);
      assertEquals(1, visualListModel1.getSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.711351131478646
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      intArray0[2] = 0;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      hashSet0.add((VisualPageListItem) null);
      hashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(1934, (Collection<VisualPageListItem>) hashSet0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(3);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getElements();
      // Undeclared exception!
      try { 
        visualListModel1.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7641674492669646
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[4];
      visualListModel0.getListDataListeners();
      intArray0[0] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-2159);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getElements();
      int[] intArray1 = new int[2];
      intArray1[0] = (-1);
      intArray1[1] = 0;
      visualListModel0.reverseElements(intArray1);
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.updateElementAt((-1), (VisualPageListItem) null);
      visualListModel0.moveUpIndex(1);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1446));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1446
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<VisualPageListItem> consumer0 = (Consumer<VisualPageListItem>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      intArray0[0] = 255;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(255, 30000, true);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 256
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.75919880710911
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndex(485);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = 255;
      intArray1[1] = 1;
      visualListModel0.moveDownIndexes(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray2 = new int[7];
      intArray1[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = 1;
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.moveDownIndexes(intArray2);
      visualListModel2.reverseElements(intArray1);
      visualListModel0.getElements();
      visualListModel2.rotateClockwiseElements(intArray1);
      assertEquals(2, intArray1.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6218475069391354
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(0, 0, true);
      boolean boolean0 = new Boolean(true);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7991124902786995
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveDownIndex(0);
      int[] intArray1 = new int[9];
      intArray1[0] = (-1954);
      intArray1[1] = (-1954);
      intArray1[2] = 1;
      intArray1[8] = 0;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 1;
      intArray1[7] = 0;
      intArray1[8] = 1;
      visualListModel0.reverseElements(intArray1);
      visualListModel0.prependAllElements(linkedHashSet0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1487));
      visualListModel0.moveUpIndex(1721);
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel1.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.135007049844418
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.ensureCapacity(568);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndex(255);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.reverseElements(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.577027664638178
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = 13;
      intArray1[0] = 0;
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.getElements();
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.665583188414471
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      intArray0[2] = 0;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      hashSet0.add((VisualPageListItem) null);
      hashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(1934, (Collection<VisualPageListItem>) hashSet0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveUpIndex(3);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, 816);
      assertEquals(4, visualListModel0.getSize());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.521121651040067
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      ComboBoxModel<Object> comboBoxModel0 = jComboBox0.getModel();
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(comboBoxModel0);
      visualListModel0.addListDataListener(jComboBox1);
      visualListModel0.rotateClockwiseElements(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateClockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      int[] intArray1 = new int[1];
      visualListModel1.subList(22, 1511, true);
      intArray1[0] = 22;
      visualListModel1.reverseElements(intArray1);
      visualListModel0.getValidElements();
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3441235360431536
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = 13;
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(13) > toIndex(1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4448836846954114
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.removeElements(92, 0, true);
      visualListModel0.removeElements(intArray0, true);
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 0;
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      visualListModel0.removeElements(intArray1, true);
      visualListModel1.undeleteElements(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.541425008225792
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      int[] intArray1 = new int[8];
      intArray1[0] = (-3945);
      intArray1[1] = (-3945);
      intArray1[2] = 0;
      intArray1[3] = 24;
      intArray1[4] = (-3945);
      intArray1[2] = (-3945);
      intArray1[6] = (-3945);
      intArray1[7] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray1);
      visualListModel0.getElements();
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5431641386605746
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      int[] intArray1 = new int[8];
      intArray1[0] = (-3945);
      intArray1[1] = (-3945);
      intArray1[2] = 0;
      intArray1[3] = 24;
      intArray1[4] = (-3945);
      intArray1[2] = (-3945);
      intArray1[6] = (-3945);
      intArray1[7] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("cS0IX");
      linkedHashSet0.retainAll(arrayList0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedHashSet0);
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray1);
      visualListModel0.getElements();
      visualListModel0.reverseElements(intArray0);
      linkedHashSet0.add((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.880022123484118
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0850162128140806
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.updateElementAt(19, (VisualPageListItem) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.addAllElements(1043, (Collection<VisualPageListItem>) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.moveDownIndex((-742));
      visualListModel0.reverseElements(intArray0);
      visualListModel0.prependAllElements(vector0);
      visualListModel0.removeElements(intArray0, true);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getSize();
      visualListModel0.addElementAt((VisualPageListItem) null, (-1048));
      visualListModel0.moveUpIndex((-5148));
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.303089053420826
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[4];
      visualListModel0.getListDataListeners();
      intArray0[0] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-2159);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.prependAllElements(linkedHashSet0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7353390710828336
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.data = vector0;
      int[] intArray0 = new int[8];
      intArray0[0] = 1000;
      visualListModel0.addAllElements(6, (Collection<VisualPageListItem>) null);
      intArray0[1] = 6;
      intArray0[2] = 0;
      intArray0[3] = (-1954);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1000;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getElements();
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getValidElements();
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8534688048928523
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      visualListModel0.getListDataListeners();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.reverseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      linkedHashSet0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.getElements();
      visualListModel0.reverseElements(intArray0);
      visualListModel1.getValidElements();
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.getElements();
      int[] intArray0 = new int[1];
      intArray0[0] = 267;
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 267
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.765976792018692
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      stack0.addAll((Collection<? extends VisualPageListItem>) arrayDeque0);
      stack0.add((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveUpIndex((-503));
      int int0 = (-1);
      int int1 = 0;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-1941), 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      assertTrue(stack0.empty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.262706372817253
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[4];
      visualListModel0.getListDataListeners();
      intArray0[0] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-2159);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.clone();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getElements();
      int[] intArray1 = new int[2];
      intArray1[0] = (-1);
      intArray1[1] = 0;
      visualListModel0.reverseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(visualListModel0);
      int int0 = (-1);
      int int1 = (-1819);
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      AffineTransform affineTransform0 = new AffineTransform();
      int int2 = (-2267);
      boolean boolean0 = false;
      visualListModel0.removeElements(0, (-2267), false);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements((int[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(24);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.subList(3007, (-503), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(3007) > toIndex(-503)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0734216475306027
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) null);
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.data = vector0;
      int[] intArray0 = new int[8];
      intArray0[0] = 1000;
      visualListModel0.addAllElements(6, (Collection<VisualPageListItem>) null);
      intArray0[1] = 6;
      vector0.addElement((VisualPageListItem) null);
      intArray0[2] = 0;
      intArray0[3] = (-1954);
      visualListModel0.moveDownIndex(1);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1000;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.getSize();
      visualListModel0.addElementAt((VisualPageListItem) null, 0);
      vector0.removeAllElements();
      visualListModel0.moveUpIndex(0);
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      EmptyBorder emptyBorder0 = new EmptyBorder((-281), 936, 171, (-281));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) consumer0;
      objectArray0[1] = (Object) emptyBorder0;
      objectArray0[2] = (Object) stack0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) emptyBorder0;
      objectArray0[6] = (Object) consumer0;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-281));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -281
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.112322947481639
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      Vector<Object> vector0 = new Vector<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(vector0);
      ComboBoxModel<Object> comboBoxModel0 = jComboBox0.getModel();
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(comboBoxModel0);
      jComboBox1.getModel();
      JComboBox<Object> jComboBox2 = new JComboBox<Object>(comboBoxModel0);
      jComboBox2.transferFocus();
      JComboBox<String> jComboBox3 = new JComboBox<String>();
      visualListModel0.addListDataListener(jComboBox3);
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel1.prependAllElements(linkedHashSet0);
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      visualListModel0.prependAllElements(vector1);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel1.addAllElements(0, (Collection<VisualPageListItem>) hashSet0);
      assertEquals(0, hashSet0.size());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[4];
      int int0 = (-1);
      visualListModel0.getListDataListeners();
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        visualListModel0.subList(1371, (-2660));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1371) > toIndex(-2660)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      int[] intArray0 = new int[4];
      visualListModel0.getListDataListeners();
      intArray0[0] = (-1);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      List<VisualPageListItem> list0 = visualListModel0.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9982142805852479
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.moveDownIndexes(intArray0);
      int int0 = 0;
      int int1 = 0;
      visualListModel0.removeElements(0, 0, true);
      int int2 = 1;
      visualListModel0.removeElements(0, 1, false);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.518615385375907
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int[] intArray1 = new int[6];
      intArray1[0] = (-684);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.clone();
      LinkedHashSet<VisualPageListItem> linkedHashSet1 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet1.add((VisualPageListItem) null);
      visualListModel0.addAllElements((-6425), (Collection<VisualPageListItem>) linkedHashSet0);
      visualListModel0.reverseElements(intArray1);
      visualListModel0.getElements();
      visualListModel0.reverseElements(intArray1);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray1);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(visualListModel0);
      EmptyBorder emptyBorder0 = new EmptyBorder((-1), 1060, 0, (-1819));
      jComboBox0.setBorder(emptyBorder0);
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.undeleteElements(intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = (-1819);
      intArray1[2] = (-1819);
      intArray1[3] = 0;
      intArray1[4] = (-1361);
      visualListModel0.moveUpIndexes(intArray1);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.363132203143378
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      DefaultEditorKit.DefaultKeyTypedAction[] defaultEditorKit_DefaultKeyTypedActionArray0 = new DefaultEditorKit.DefaultKeyTypedAction[8];
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[0] = defaultEditorKit_DefaultKeyTypedAction0;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction1 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[1] = defaultEditorKit_DefaultKeyTypedAction1;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction2 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[2] = defaultEditorKit_DefaultKeyTypedAction2;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction3 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[3] = defaultEditorKit_DefaultKeyTypedAction3;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction4 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[4] = defaultEditorKit_DefaultKeyTypedAction4;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction5 = new DefaultEditorKit.DefaultKeyTypedAction();
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction6 = new DefaultEditorKit.DefaultKeyTypedAction();
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction7 = new DefaultEditorKit.DefaultKeyTypedAction();
      DefaultEditorKit.DefaultKeyTypedAction[] defaultEditorKit_DefaultKeyTypedActionArray1 = new DefaultEditorKit.DefaultKeyTypedAction[1];
      defaultEditorKit_DefaultKeyTypedActionArray1[0] = defaultEditorKit_DefaultKeyTypedAction0;
      stack0.toArray(defaultEditorKit_DefaultKeyTypedActionArray1);
      Consumer<VisualPageListItem> consumer0 = (Consumer<VisualPageListItem>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualListModel0.setData(visualPageListItemArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.elementChanged(visualPageListItemArray0[1]);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel1.addElementAt(visualPageListItemArray0[0], 0);
      visualListModel0.getElements();
      visualListModel0.addAllElements(2, (Collection<VisualPageListItem>) stack0);
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.47980161819454
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.moveDownIndexes(intArray0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer1);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7741057932992024
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int int0 = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(visualListModel0);
      EmptyBorder emptyBorder0 = new EmptyBorder((-1), 1060, 0, (-1819));
      AbstractBorder.getInteriorRectangle((Component) jComboBox0, (Border) emptyBorder0, 0, 1247, (-1), 143);
      jComboBox0.setBorder(emptyBorder0);
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      AffineTransform affineTransform0 = new AffineTransform();
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.reverseElements(intArray0);
      visualListModel1.subList((-3545), (-1144), false);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel1.getElements();
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel1.moveDownIndexes(intArray0);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(visualListModel0);
      EmptyBorder emptyBorder0 = new EmptyBorder((-1), 1060, 0, (-1819));
      jComboBox0.setBorder(emptyBorder0);
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      AffineTransform affineTransform0 = new AffineTransform();
      visualListModel0.removeElements(1805, (-2267), false);
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5100200881344885
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      intArray0[2] = 0;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.getListDataListeners();
      visualListModel0.getSize();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      hashSet0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.undeleteElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.moveUpIndexes(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4574653869995418
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      DefaultEditorKit.DefaultKeyTypedAction[] defaultEditorKit_DefaultKeyTypedActionArray0 = new DefaultEditorKit.DefaultKeyTypedAction[8];
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[0] = defaultEditorKit_DefaultKeyTypedAction0;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction1 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[1] = defaultEditorKit_DefaultKeyTypedAction1;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction2 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[2] = defaultEditorKit_DefaultKeyTypedAction2;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction3 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[3] = defaultEditorKit_DefaultKeyTypedAction3;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction4 = new DefaultEditorKit.DefaultKeyTypedAction();
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction5 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[5] = defaultEditorKit_DefaultKeyTypedAction5;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction6 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[6] = defaultEditorKit_DefaultKeyTypedAction6;
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction7 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedActionArray0[7] = defaultEditorKit_DefaultKeyTypedAction7;
      stack0.toArray(defaultEditorKit_DefaultKeyTypedActionArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.add((VisualPageListItem) null);
      stack0.forEach(consumer0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      visualPageListItemArray0[1] = null;
      visualListModel0.setData(visualPageListItemArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.elementChanged((VisualPageListItem) null);
      visualListModel1.elementChanged(visualPageListItemArray0[0]);
      visualListModel1.addElementAt((VisualPageListItem) null, 59);
      visualListModel0.getElements();
      visualListModel1.removeElements(6, 59, true);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      jComboBox0.getModel();
      visualListModel0.addListDataListener(jComboBox0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.removeElements(0, 1805, false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      ArrayList<DefaultEditorKit.DefaultKeyTypedAction> arrayList0 = new ArrayList<DefaultEditorKit.DefaultKeyTypedAction>();
      stack0.retainAll(arrayList0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-11));
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndex(0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeListDataListener((ListDataListener) null);
      int int0 = (-512);
      visualListModel0.moveUpIndex(0);
      int int1 = (-1);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(visualListModel0);
      int int0 = 1060;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      visualListModel0.getElementAt(4);
      defaultComboBoxModel0.getIndexOf((Object) null);
      int int0 = 1060;
      EmptyBorder emptyBorder0 = new EmptyBorder(360, 1409, 690, (-1819));
      jComboBox0.setBorder(emptyBorder0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      JEditorPane jEditorPane0 = new JEditorPane();
      Color color1 = jEditorPane0.getSelectionColor();
      EtchedBorder etchedBorder0 = new EtchedBorder(color0, color1);
      JToolBar jToolBar0 = new JToolBar("=[");
      Insets insets0 = jToolBar0.getMargin();
      Insets insets1 = etchedBorder0.getBorderInsets((Component) jComboBox0, insets0);
      emptyBorder0.getBorderInsets((Component) jComboBox0, insets1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) emptyBorder0;
      objectArray0[1] = (Object) emptyBorder0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) visualListModel0;
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(objectArray0);
      jComboBox1.getVisibleRect();
      visualListModel0.addListDataListener(jComboBox1);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel0.clearData();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(1009);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0141266108053313
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1;
      visualListModel0.moveDownIndex(1);
      visualListModel0.subList(91, 1, false);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.appendAllElements(stack0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-61);
      byteArray0[0] = (byte) (-61);
      byte byte1 = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)7;
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9896217341979847
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) pdfGraphics2D_HyperLinkKey0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate3.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate0);
      predicate1.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) null);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      Predicate.isEqual((Object) defaultEditorKit_DefaultKeyTypedAction0);
      predicate5.and(predicate0);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>(8, (Comparator<? super VisualPageListItem>) null);
      priorityQueue0.removeIf(predicate4);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements(8, (Collection<VisualPageListItem>) priorityQueue0);
      visualListModel0.clearData();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<String> vector0 = new Vector<String>();
      Object object0 = visualListModel0.getElementAt(0);
      assertNull(object0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.584838202797333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(0);
      visualListModel0.clearData();
      visualListModel0.subList(0, 0);
      int[] intArray0 = new int[3];
      visualListModel0.moveDownIndex(10);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.reverseElements(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel1.removeElements((-2430), 0, true);
      visualListModel0.removeElements((-242), 1, true);
      assertFalse(visualListModel0.equals((Object)visualListModel1));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1032191624484695
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(visualListModel0);
      EmptyBorder emptyBorder0 = new EmptyBorder((-1), 1060, 0, (-1819));
      jComboBox0.setBorder(emptyBorder0);
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.rotateClockwiseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = (-1819);
      intArray1[2] = (-1819);
      intArray1[3] = 0;
      intArray1[4] = (-1361);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.subList(2794, 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2794) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.getIndexOf(visualListModel0);
      int int0 = (-1);
      int int1 = (-1819);
      int int2 = 2679;
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-1), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int int0 = 1639;
      visualListModel0.moveDownIndex(1639);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.subList(1639, (-1055), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1639) > toIndex(-1055)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5774876682173042
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      HashSet<VisualPageListItem> hashSet1 = new HashSet<VisualPageListItem>();
      hashSet1.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.subList(59, 752);
      visualListModel1.addAllElements(59, (Collection<VisualPageListItem>) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualListModel0.setData(visualPageListItemArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.elementChanged(visualPageListItemArray0[3]);
      visualListModel3.elementChanged(visualPageListItemArray0[3]);
      visualListModel3.addElementAt(visualPageListItemArray0[1], 752);
      assertEquals(0, visualListModel3.getSize());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-358), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -358
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>(vector0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) priorityQueue0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.and(predicate0);
      priorityQueue0.removeIf(predicate3);
      visualListModel0.addAllElements(573, (Collection<VisualPageListItem>) priorityQueue0);
      visualListModel0.clearData();
      visualListModel0.getElements();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[5];
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(573);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7875550098159887
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualListModel0.setData(visualPageListItemArray0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.equals((Object)stack1));
  }
}
