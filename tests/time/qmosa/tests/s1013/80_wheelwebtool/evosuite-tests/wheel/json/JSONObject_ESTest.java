/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:00:01 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9311664619685702
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject2 = jSONObject0.append(": ", ": ");
      jSONObject2.getString("false");
      jSONObject2.toString((-4631), (-4631));
      boolean boolean0 = new Boolean("{\n\"java.lang.String@0000000005\": [\"java.lang.String@0000000005\"],\n\"java.lang.String@0000000003\": {}\n}");
      jSONObject0.isNull("'");
      jSONObject2.optString((String) null);
      JSONObject jSONObject3 = jSONObject1.put("false", (-1));
      jSONObject3.opt("false");
      try { 
        jSONObject1.getBoolean("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.585404167261751
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalAnd(false, false);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      Boolean.logicalAnd(true, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('P');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) null);
      Long long0 = new Long(2083L);
      Long.getLong((String) null, long0);
      Long.getLong("v7}=x");
      JSONObject jSONObject0 = new JSONObject(stringWriter3, stringArray0);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-2884));
      Integer integer1 = new Integer((-1076));
      Function<Integer, Long> function0 = (Function<Integer, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyInt());
      hashMap0.computeIfAbsent(integer1, function0);
      stringWriter3.close();
      JSONObject jSONObject1 = jSONObject0.put("v7}=x", (Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.toString(2, 128);
      jSONObject1.length();
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.686727626151675
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "false";
      jSONObject0.put("false", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.append(": ", ": ");
      jSONObject1.getString("false");
      String string1 = null;
      jSONObject1.toString((-4631), (-4631));
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.502597604947935
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[4];
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      stringArray0[0] = "wtt#&Q7E%[-S";
      String string0 = "";
      Byte.valueOf((byte)59);
      Integer integer0 = new Integer((byte)31);
      Byte byte0 = new Byte((byte)59);
      JSONObject jSONObject1 = new JSONObject(byte0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject1.write(writer0);
      JSONObject jSONObject2 = jSONObject1.put("wtt#&Q7E%[-S", 3);
      try { 
        jSONObject2.getJSONObject("wtt#&Q7E%[-S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wtt#&Q7E%[-S\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0716492170319523
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.getBoolean("] is not a number.");
      Boolean.logicalAnd(false, false);
      JSONObject.getNames((Object) boolean0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      Float float0 = new Float(0.0);
      Float.min((-1.0F), 0.0F);
      Float.max((-1.0F), (-1.0F));
      Byte byte0 = new Byte((byte)109);
      JSONObject.numberToString(byte0);
      Byte.valueOf((byte)109);
      int int0 = (-916);
      Integer integer0 = new Integer((-916));
      Double double0 = new Double((-1031.4235));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.put((String) null, 1058);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.209446146791129
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer integer0 = new Integer(22);
      Float.sum((-99.646F), 787.0F);
      Byte.valueOf((byte)41);
      Integer integer1 = new Integer(3720);
      JSONObject jSONObject0 = new JSONObject(integer1);
      JSONObject jSONObject1 = jSONObject0.put("ca|k)n\"WKiJ", 3358);
      Short short0 = new Short((short) (-541));
      JSONObject.getNames((Object) short0);
      String string0 = "fl";
      jSONObject0.opt("fl");
      try { 
        jSONObject1.getString("fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7108646700741863
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.min(875L, 875L);
      stringArray0[0] = "";
      stringArray0[1] = " of ";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float((double) 2307L);
      JSONObject jSONObject1 = jSONObject0.accumulate("`^>QU;$Edi&:NvS", float0);
      StringWriter stringWriter1 = stringWriter0.append('m');
      stringWriter1.append((CharSequence) " of ");
      JSONObject.quote("");
      jSONObject1.names();
      Object object0 = JSONObject.NULL;
      String string0 = "LNXbB8C+p}DkFS&zxMn";
      JSONObject jSONObject2 = jSONObject1.append(" of ", "LNXbB8C+p}DkFS&zxMn");
      JSONObject jSONObject3 = jSONObject2.put("", 107L);
      jSONObject3.optLong(" of ", 875L);
      jSONObject0.optString(" of ");
      String string1 = "Missing value";
      try { 
        jSONObject0.getLong(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0226428504820566
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      jSONObject1.optLong("' and instead saw '", (-1L));
      JSONObject.valueToString("' and instead saw '", (-230), 2);
      jSONObject1.toString((-1251), 32);
      String string0 = null;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      // Undeclared exception!
      try { 
        hashMap0.compute("wtt#&Q7E%[-S", (BiFunction<? super String, ? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7949451050557124
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.min(875L, 875L);
      stringArray0[0] = "";
      stringArray0[1] = " of ";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float((double) 2307L);
      JSONObject jSONObject1 = jSONObject0.accumulate("`^>QU;$Edi&:NvS", float0);
      StringWriter stringWriter1 = stringWriter0.append('m');
      stringWriter1.append((CharSequence) " of ");
      jSONObject1.names();
      Object object0 = JSONObject.NULL;
      jSONObject0.optLong("");
      JSONObject jSONObject2 = jSONObject1.append(" of ", "LNXbB8C+p}DkFS&zxMn");
      JSONObject jSONObject3 = jSONObject2.put("", 107L);
      jSONObject3.optLong(" of ", 875L);
      jSONObject0.optString(" of ");
      String string0 = "Missing value";
      try { 
        jSONObject0.getLong(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4463719162165605
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long.getLong("U_A0~#kj");
      String string0 = " of ";
      String[] stringArray0 = new String[1];
      stringArray0[0] = " of ";
      JSONObject jSONObject0 = new JSONObject(" of ", stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[2] = 'm';
      jSONObject0.keys();
      stringWriter0.write(charArray0);
      double double0 = 1330.9612371386918;
      Float float0 = new Float(1330.9612371386918);
      Boolean boolean0 = new Boolean("`^>QU;$Edi&:NvS");
      jSONObject0.accumulate(" of ", boolean0);
      StringWriter stringWriter1 = stringWriter0.append('m');
      Boolean.logicalAnd(true, true);
      stringWriter1.append((CharSequence) " of ");
      Long.getLong("U_A0~#kj", (Long) null);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.688946123179314
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 2070.541839625;
      Double double1 = new Double(2070.541839625);
      JSONObject jSONObject0 = new JSONObject(double1);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.706782642645971
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.sum(2307L, 107L);
      Long.min(875L, 875L);
      stringArray0[0] = "";
      stringArray0[1] = " of ";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[1] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      stringWriter0.write(charArray0);
      Float float0 = new Float((double) 2307L);
      JSONObject jSONObject1 = jSONObject0.accumulate("`^>QU;$Edi&:NvS", float0);
      StringWriter stringWriter1 = stringWriter0.append('m');
      stringWriter1.append((CharSequence) " of ");
      jSONObject1.names();
      Object object0 = JSONObject.NULL;
      String string0 = "LNXbB8C+p}DkFS&zxMn";
      JSONObject jSONObject2 = jSONObject1.append(" of ", "LNXbB8C+p}DkFS&zxMn");
      jSONObject2.put("", 107L);
      jSONObject0.optString(" of ");
      jSONObject2.getLong("");
      try { 
        jSONObject0.getLong(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.260901616704218
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("V(e;#or3d?e;U?Nf0");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>(224, 5121);
      jSONArray0.put(5121, (Map) hashMap0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Short short0 = new Short((short)986);
      JSONObject.testValidity(short0);
      jSONObject0.put("co", true);
      jSONObject0.optInt("V(e;#or3d?e;U?Nf0", (int) (short)986);
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.48323304355048
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(",blG)SDGj> $?");
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.append("_hQoL(A}rh=7lw?k7", ",blG)SDGj> $?");
      JSONObject.valueToString(jSONObject1);
      jSONObject1.optInt("++,x*f0sGhj^@CcFi");
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "Bad value from toJSONString: ";
      try { 
        jSONObject0.getInt("java.lang.Long@00000000030");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@00000000030\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5637660374856472
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble(",\n", 0.0);
      Integer integer0 = new Integer((-1113));
      Integer.getInteger(",\n");
      Integer.getInteger(",\n", (-1113));
      JSONObject jSONObject1 = jSONObject0.accumulate("x2", integer0);
      Float.sum((-2310.0F), 0.0F);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1621828741054787
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Float float0 = new Float((-1722.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject1 = new JSONObject(byte0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optLong(4445);
      Float.sum((-1722.0F), (-234.0354F));
      JSONObject.valueToString(linkedList0);
      Long long0 = new Long((-2852));
      String string0 = "istrim";
      try { 
        jSONObject1.getString("istrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istrim\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9766893090132731
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long(875L);
      Long.min(2985L, 2985L);
      Long.getLong("@ID)j:;%*u2hb!~", 875L);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      Long.min(875L, 2985L);
      JSONObject.quote("uy,O2/=E7'e|j.t");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|+$CKVF/U;N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |+$CKVF/U;N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.941682402605544
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(123, 55);
      JSONObject.quote("{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
      jSONObject0.toString(55, 55);
      jSONObject0.optDouble("{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
      jSONObject0.optBoolean("", true);
      Float.min(55, 123);
      jSONObject0.toString();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      jSONObject0.append("{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }", "{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      JSONArray jSONArray1 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("q_aIYU{k64WeEy_");
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of q_aIYU{k64WeEy_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9766893090132731
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Long long0 = new Long(875L);
      String string0 = "2S 6g";
      Long.getLong("2S 6g");
      Long.min(2985L, 2985L);
      Long.getLong("@ID)j:;x*u2hb!~", 875L);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      long long1 = new Long(2985L);
      String string1 = "uy,O2/=E7'e|j.t";
      JSONObject.quote("uy,O2/=E7'e|j.t");
      Long.getLong("2S 6g", (Long) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("2S 6g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 2S 6g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.765574578258398
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(34, 34);
      jSONObject0.optDouble(">:T");
      String string0 = "true";
      jSONObject0.optBoolean("true", false);
      Float.min(34, 34);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.861214627513569
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(101);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray1, 101, (-16519105));
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9658293226252552
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-1112), 8);
      JSONObject.quote("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n        }");
      jSONObject0.toString((-2028), (-2028));
      jSONObject0.optDouble("java.lang.Float@0000000001.");
      jSONObject0.optBoolean("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n        }", true);
      Float.min((-1.0F), (-1.0F));
      jSONObject0.toString();
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>();
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}", (Map) hashMap1);
      JSONObject jSONObject2 = jSONObject0.append("\r", "java.lang.Float@0000000001.");
      jSONObject2.keys();
      jSONObject1.getString("\r");
      JSONObject jSONObject3 = new JSONObject((Object) "java.lang.Float@0000000001.");
      jSONObject3.put(")E`6T&N;C~!9i;N", true);
      try { 
        jSONObject3.getBoolean("java.lang.Float@0000000001.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@0000000001.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = Long.valueOf(2728L);
      Long long1 = Long.getLong("LD<OEhQr6(q]V`", long0);
      Integer integer0 = new Integer((-4510));
      Long.sum(1L, 1L);
      Integer.getInteger("LD<OEhQr6(q]V`", integer0);
      hashMap0.put(long1, integer0);
      Float.max(51.4F, 51.4F);
      Float float0 = new Float((double) 2.7339938F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Long.getLong("U_:0R#;j");
      Float.max(2.7339938F, 51.4F);
      Float float0 = new Float((-1459.756497));
      Float.min(51.4F, (-1.0F));
      Float.max(742.433F, (-2790.641F));
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float1 = new Float((-2827.360743755937));
      Integer integer0 = new Integer(47);
      hashMap0.put(float1, integer0);
      jSONObject0.optJSONArray("issum");
      Integer integer1 = new Integer(2008);
      hashMap0.getOrDefault((Object) null, integer1);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      boolean boolean0 = jSONObject0.isNull("U_:0R#;j");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long(0L);
      Long.remainderUnsigned(0L, 25);
      Long.min(1L, 25);
      Integer.valueOf(25);
      Integer integer0 = new Integer(25);
      hashMap0.put(long0, integer0);
      Float float0 = new Float((float) 1L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7958099902161737
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      int int0 = 34;
      jSONObject1.toString(34, 34);
      jSONObject0.optDouble(">:T");
      jSONObject0.optBoolean("true", false);
      JSONObject.valueToString(">:T");
      jSONObject0.append("toU", "");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.592048144195005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.sum(2307L, 107L);
      Long.min(875L, 875L);
      stringArray0[0] = "";
      stringArray0[1] = " of ";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      stringWriter0.write(charArray0);
      Float float0 = new Float((double) 2307L);
      jSONObject0.accumulate("`^>QU;$Edi&:NvS", float0);
      StringWriter stringWriter1 = stringWriter0.append('m');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " of ");
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.360380995184394
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "wheel.json.JSONTokener";
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONTokener");
      jSONTokener0.toString();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONTokener";
      JSONObject jSONObject0 = new JSONObject(" at character 0 of wheel.json.JSONTokener", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.length();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONTokener
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2929322920032833
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("getgetClass", false);
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject1.optInt(">6Gp-=s~7xj_d");
      try { 
        jSONObject0.getDouble("W~CY78w3u8E{@`Pu0~g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W~CY78w3u8E{@`Pu0~g\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4576921380159407
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "W~CY78w3u8E{@`Pu0~g";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("W~CY78w3u8E{@`Pu0~g", (Collection) linkedList0);
      jSONObject1.optLong("W~CY78w3u8E{@`Pu0~g", 0L);
      jSONObject1.optInt(">6Gp-=s~7xj_d");
      jSONObject0.putOpt((String) null, (Object) null);
      try { 
        jSONObject0.getDouble("W~CY78w3u8E{@`Pu0~g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W~CY78w3u8E{@`Pu0~g\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8167681715459763
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(123, 55);
      JSONObject.quote("{\"java.lang.String@0000000009\": \"java.lang.Class@0000000010\"}");
      jSONObject1.toString(55, 4);
      jSONObject0.optDouble("{\"java.lang.String@0000000009\": \"java.lang.Class@0000000010\"}");
      jSONObject0.optBoolean("", true);
      Float.min(55, 4);
      jSONObject1.toString();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      String string0 = "java.lang.Long@00000000030";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1621828741054787
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Float float0 = new Float((-1722.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject1 = new JSONObject(byte0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optLong(4445);
      Float.sum((-1722.0F), (-234.0354F));
      JSONObject.valueToString(linkedList0, 44, (-1441));
      Long long0 = new Long((-2852));
      try { 
        jSONObject1.getString("istrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istrim\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.246304923773509
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "U_A0~#kj";
      Long.getLong("U_A0~#kj");
      String string1 = " of ";
      Integer integer0 = new Integer((-4177984));
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long((-4177984));
      hashMap0.put(long0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("a'`=`%Rd0Zyek&", (double) (-4177984));
      Integer integer1 = new Integer((-1520));
      Integer.getInteger(" of ");
      Integer.getInteger(" of ", (-8323580));
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("a'`=`%Rd0Zyek&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of a'`=`%Rd0Zyek&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8767795367470372
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      Float.sum(787.0F, (-1.0F));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "tCs";
      stringArray0[1] = "4|e,%b93,UuCT'/";
      stringArray0[2] = "";
      stringArray0[3] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONObject("8XN`ntH*EG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8XN`ntH*EG\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4056529957044916
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "mA'Zzb)3r*g'#f~}Ef$";
      stringArray0[3] = ";*z-.B";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = 1928;
      jSONObject0.toString(1928, 929);
      JSONObject jSONObject1 = jSONObject0.put("\"-8T|3&&3E]qk&", 4936L);
      jSONObject1.put("getnumberToString", (double) 4936L);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7819524060289083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(2029);
      jSONObject0.accumulate("{/f%I$2n&Ah", double0);
      jSONObject0.toString(2029, 2029);
      JSONObject.quote("\t");
      String string0 = "";
      JSONObject jSONObject1 = new JSONObject((Object) "");
      jSONObject1.toString(34, 2029);
      jSONObject0.optDouble("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.optBoolean("\t", true);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Float float0 = new Float((-4393.1F));
      Float.sum((-703.357F), (-1562.0826F));
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "/r0imu@m>";
      Long.getLong("isputOpt");
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      double double0 = Double.NaN;
      JSONObject.doubleToString(Double.NaN);
      Long.toUnsignedString(1218L);
      Long long0 = new Long(1218L);
      Long.getLong("^r1un&w|&'!i>2^#k", long0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}b%|Ox\":";
      stringArray0[1] = "/r0imu@m>";
      stringArray0[2] = "/r0imu@m>";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0707152605273977
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Float.max((-1.0F), (-1.0F));
      Long long0 = new Long((-1582L));
      String[] stringArray0 = new String[2];
      String string0 = "x5[S&UqsS";
      stringArray0[0] = "x5[S&UqsS";
      String string1 = "/";
      stringArray0[1] = "/";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.getInt("?>PIgz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?>PIgz\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.854327399620225
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "U_A0~#kj";
      Long.getLong("U_A0~#kj");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " of ";
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt(" of ");
      jSONObject0.toString((-1136));
      try { 
        jSONObject0.getString(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0124282628058623
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-2028), (-2028));
      jSONObject0.optDouble("java.lang.Float@0000000001.");
      Float.min((-1.0F), (-1.0F));
      jSONObject0.toString();
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>();
      JSONObject jSONObject1 = jSONObject0.put("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}", (Map) hashMap1);
      String string0 = "\\r";
      JSONObject jSONObject2 = jSONObject0.append("\r", "java.lang.Float@0000000001.");
      jSONObject1.getString("\r");
      jSONObject2.optInt("{\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      try { 
        jSONObject1.getString("wheel.json.JSONArray@0000000008");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray@0000000008\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7277295935299986
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "U_A0~#kj";
      Long.getLong("U_A0~#kj");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " of ";
      JSONObject jSONObject0 = new JSONObject(" of ", stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("o%@CpyI");
      int int0 = (-2357);
      jSONObject0.toString((-2357), (-2578));
      jSONObject0.optDouble("{");
      jSONObject0.optBoolean("];mqmp&'B7)awIe%+F", true);
      Float.min(0.0F, (-2357));
      jSONObject0.toString();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject1 = jSONObject0.put("y9B", (Map) hashMap0);
      jSONObject1.append(" of ", jSONObject0);
      try { 
        jSONObject1.getString("java.lang.Float@00000000030");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@00000000030\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8817192109961534
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(123, 55);
      JSONObject.quote("{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
      jSONObject0.toString(55, 55);
      jSONObject0.optDouble("{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
      jSONObject0.optBoolean("", true);
      Float.min(55, 123);
      jSONObject0.toString();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      jSONObject0.put("{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }", (Map) hashMap0);
      try { 
        jSONObject0.append("{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }", "{\n                                                                                                                                                                                  \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                  \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                  \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                       }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{
         //                                                                                                                                                                                   \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,
         //                                                                                                                                                                                   \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,
         //                                                                                                                                                                                   \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"
         //                                                        }] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1755220250238723
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("y=5cS\"W=-o_y*MP");
      short short0 = (short) (-69);
      Short short1 = new Short((short) (-69));
      JSONObject jSONObject1 = jSONObject0.putOpt("y=5cS\"W=-o_y*MP", short1);
      jSONObject1.getDouble("y=5cS\"W=-o_y*MP");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = null;
      // Undeclared exception!
      try { 
        hashMap1.replaceAll((BiFunction<? super String, ? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4381469973210463
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 4445;
      jSONArray0.optLong(4445);
      Float.sum(0.0F, 0.0F);
      JSONObject.valueToString(jSONObject0, (-2852), (-2852));
      try { 
        jSONObject0.getString("zS11us9qJ3Bl`ru");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zS11us9qJ3Bl`ru\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.486792335998266
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 55;
      String string0 = "\\t";
      JSONObject jSONObject1 = new JSONObject((Object) "\t");
      jSONObject0.optBoolean("\t", true);
      Float.min((-2123.686F), 1.0F);
      jSONObject1.toString();
      try { 
        jSONObject0.getBoolean("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      Float.sum(787.0F, (-1.0F));
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(774);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "al8ZNp7iR";
      jSONArray0.put(0, (Object) null);
      stringArray0[1] = "get";
      stringArray0[2] = "OJ.y#6xr_&gl0Q";
      stringArray0[3] = "";
      stringArray0[4] = "] is not a JSONObject.";
      stringArray0[5] = "Expected a ',' or ']'";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7163094366268656
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Long.getLong("U_A0~#kj");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " of ";
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      stringWriter0.append((CharSequence) " of ");
      stringWriter0.write(charArray0);
      Float float0 = new Float((double) 2.7339938F);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.accumulate(" of ", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('');
      hashMap0.put("WFwMY!KR43\"a&rZ", " of ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) " of ");
      stringWriter0.write(charArray0);
      jSONObject2.write(stringWriter2);
      jSONObject1.optJSONArray(" of ");
      try { 
        jSONObject2.getInt(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2711139152216804
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      HashMap<JSONObject, JSONObject> hashMap1 = new HashMap<JSONObject, JSONObject>();
      JSONObject.doubleToString((-1.0));
      Long.toUnsignedString((-94L));
      Long long0 = new Long(1L);
      Long.remainderUnsigned((-94L), 1L);
      Long.getLong("18446744073709551522", long0);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-1";
      stringArray0[1] = "-1";
      stringArray0[2] = "Null key.";
      stringArray0[3] = "18446744073709551522";
      stringArray0[4] = "yc<w\"}~D0MlWovl";
      stringArray0[5] = "18446744073709551522";
      stringArray0[6] = "-1";
      stringArray0[7] = "18446744073709551522";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.remove("*L|bx]C^_*%)&V92(n");
      jSONObject0.optLong((String) null, (-1L));
      jSONObject0.optInt("18446744073709551522", 3362);
      try { 
        jSONObject0.getDouble("-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1123103344201821
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Long.getLong("U_A0~#kj");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " of ";
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject.doubleToString(2.7339938F);
      Long.toUnsignedString(0L);
      Long.getLong(" of ", (Long) null);
      Long.compareUnsigned((-2166L), 0L);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7381100700049856
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = new Integer(3638);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("cop", false);
      jSONObject2.optLong("", 0L);
      jSONObject1.optBoolean("");
      JSONObject jSONObject3 = new JSONObject();
      String string0 = ",blG)SDGj> $?";
      jSONObject3.optDouble(",blG)SDGj> $?");
      jSONObject3.keys();
      jSONObject1.has("java.lang.Long@00000000030");
      String string1 = "app";
      try { 
        jSONObject1.getJSONArray("app");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"app\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(3638);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Float.sum(0.0F, 3638);
      String string0 = "W=sj\">#~PiS76\"";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("W=sj\">#~PiS76\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of W=sj\">#~PiS76\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[4];
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      stringArray0[0] = "wtt#&Q7E%[-S";
      String string0 = "";
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyInt());
      hashMap0.compute("", biFunction1);
      stringArray0[1] = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.692777846205881
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-1111));
      Integer integer0 = new Integer((-1111));
      hashMap0.put(long0, integer0);
      jSONObject0.optDouble(",\n", 0.0);
      Integer integer1 = new Integer((-1111));
      Integer.getInteger(",\n");
      Integer.getInteger(",\n", (-1111));
      jSONObject0.accumulate("x2", integer1);
      jSONObject0.put("getapply", (Object) integer1);
      jSONObject0.optString("Unterminated string");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.append("", "Unterminated string");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5186310872822124
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 93;
      Double double0 = new Double(93);
      JSONObject.valueToString(double0, 93, 93);
      String string0 = "cen`";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("cen`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of cen`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7533805652895773
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      stringArray0[0] = "wtt#&Q7E%[-S";
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyInt());
      hashMap0.compute("", biFunction1);
      jSONObject0.optLong("getintern", (-2456L));
      Long.getLong("wtt#&Q7E%[-S");
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      HashMap<JSONObject, JSONObject> hashMap1 = new HashMap<JSONObject, JSONObject>();
      hashMap1.remove((Object) jSONObject1);
      JSONObject jSONObject2 = new JSONObject();
      hashMap1.put(jSONObject0, jSONObject2);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8535419932424695
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.optLong(101);
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray2, 101, 101);
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Missing value";
      stringArray0[1] = ";|G0~aV1\"?\" 6O";
      stringArray0[2] = "is";
      jSONObject0.put("is", 101);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.3384236657148354
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-762L));
      Integer integer0 = new Integer((-1111));
      hashMap0.put(long0, integer0);
      Long long1 = new Long((-1111));
      Integer integer1 = new Integer((-1111));
      Integer integer2 = new Integer((-1111));
      jSONObject0.optDouble(",\n", 0.0);
      Integer integer3 = new Integer((-1111));
      Integer.getInteger(",\n");
      Integer.getInteger(",\n", (-1111));
      jSONObject0.optString("x^Q");
      jSONObject0.optJSONArray("x2");
      JSONObject jSONObject1 = jSONObject0.put("x2", 61);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      hashMap0.put(long1, (Integer) null);
      jSONObject1.optBoolean("= $};0B", false);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("java.lang.Float@0000000003.", (Object) integer3);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("");
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      stringArray0[0] = "wtt#&Q7E%[-S";
      String string0 = "";
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyInt());
      hashMap0.compute("", biFunction1);
      stringArray0[1] = "";
      JSONTokener jSONTokener0 = new JSONTokener("getvalueOf");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getvalueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.2859184651668696
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Long.getLong("U_A0~#kj");
      String string0 = " of ";
      String[] stringArray0 = new String[1];
      stringArray0[0] = " of ";
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      stringWriter0.write(charArray0);
      Float float0 = new Float((double) 2.7339938F);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate(" of ", stringWriter0);
      String string1 = ".PCWw@t,Gr*Xf";
      boolean boolean0 = true;
      try { 
        jSONObject0.getBoolean("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.4990104312963832
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Long long0 = new Long(875L);
      String[] stringArray0 = new String[2];
      Long.sum(478L, 478L);
      Long.sum(2307L, 107L);
      Long.min((-2485L), (-2485L));
      stringArray0[0] = "";
      stringArray0[1] = " of ";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.isNull("/%VMt@");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7849295949697486
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*2eCAT9^m#aDxdp";
      stringArray0[1] = "*2eCAT9^m#aDxdp";
      stringArray0[2] = "*2eCAT9^m#aDxdp";
      stringArray0[3] = "*2eCAT9^m#aDxdp";
      stringArray0[4] = "*2eCAT9^m#aDxdp";
      stringArray0[5] = "*2eCAT9^m#aDxdp";
      stringArray0[6] = "*2eCAT9^m#aDxdp";
      stringArray0[7] = "*2eCAT9^m#aDxdp";
      JSONObject jSONObject0 = new JSONObject("*2eCAT9^m#aDxdp", stringArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put("*2eCAT9^m#aDxdp", (Map) hashMap0);
      jSONObject0.remove("*2eCAT9^m#aDxdp");
      Long long0 = new Long(2616L);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.589335953921771
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Long.getLong("U_A0~#kj");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " of ";
      JSONObject jSONObject0 = new JSONObject(" of ", stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[2] = 'm';
      jSONObject0.keys();
      stringWriter0.write(charArray0);
      Float float0 = new Float(1330.9612371386918);
      Boolean boolean0 = new Boolean("`^>QU;$Edi&:NvS");
      JSONObject jSONObject1 = jSONObject0.accumulate(" of ", boolean0);
      StringWriter stringWriter1 = stringWriter0.append('m');
      Boolean.logicalAnd(true, true);
      stringWriter1.append((CharSequence) " of ");
      Long.getLong("U_A0~#kj", (Long) null);
      Long.getLong(" of ");
      JSONObject jSONObject2 = new JSONObject(" of ", stringArray0);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-1076));
      Integer.compare((-30710023), (-30710023));
      Function<Integer, Long> function0 = (Function<Integer, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyInt());
      hashMap0.computeIfAbsent(integer0, function0);
      jSONObject1.put("`^>QU;$Edi&:NvS", (Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[20] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0853480590441764
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      stringArray0[0] = "wtt#&Q7E%[-S";
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyInt());
      hashMap0.compute("", biFunction1);
      stringArray0[1] = "";
      jSONObject0.optBoolean("true", true);
      stringArray0[2] = "";
      stringArray0[3] = "Unterminated string";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.isNull("Unterminated string");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Long long0 = new Long((-1L));
      try { 
        jSONObject1.getString("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Float.max(51.4F, 51.4F);
      Float float0 = new Float((double) 2.7339938F);
      Float.max((-466.9433F), (-713.04F));
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\t", (-2849));
      assertEquals((-2849), int0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = JSONObject.quote(">(}PnEHP``g");
      assertEquals("\">(}PnEHP``g\"", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.840827283190615
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject((Object) "");
      boolean boolean0 = jSONObject0.isNull("s");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.2864980018384813
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "U_:0R#;j";
      Long.getLong("U_:0R#;j");
      Float.max(2.7339938F, 51.4F);
      Float float0 = new Float((-1459.756497));
      Float.min(51.4F, (-1.0F));
      Float.max(742.433F, (-2790.641F));
      JSONObject.numberToString(float0);
      Byte.valueOf((byte)41);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("ro", (Object) null);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString("ro", (-1372), 57);
      Float float1 = new Float(1681.3474617);
      try { 
        jSONObject0.getString("YW7L~mFe ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"YW7L~mFe \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
