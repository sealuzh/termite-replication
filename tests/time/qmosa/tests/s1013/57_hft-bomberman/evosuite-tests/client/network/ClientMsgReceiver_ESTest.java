/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:29:44 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.io.File;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.sql.BatchUpdateException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLWarning;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import javax.swing.JLayeredPane;
import messages.global.GlobalStateMsg;
import messages.round.BombExplodedMsg;
import messages.round.CountdownMsg;
import messages.session.SessionParticipationMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" player", "/SoundFiles/SpielerVerliert.mp3", sQLTimeoutException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" player");
      MessageFormat messageFormat0 = new MessageFormat("/SoundFiles/SpielerVerliert.mp3");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "/SoundFiles/SpielerVerliert.mp3";
      objectArray0[1] = (Object) null;
      StringBuffer stringBuffer0 = new StringBuffer();
      SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(true, (-1319), ":D1lloE>DyjOmf");
      clientMsgReceiver0.processMsg(sessionParticipationMsg0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(7);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(inetAddress0, 0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress1);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      GlobalStateMsg globalStateMsg0 = new GlobalStateMsg(7);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalStateMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.XmlFunctions", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      mockSocket0.setReuseAddress(false);
      Stack<Integer> stack0 = new Stack<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      stack0.add(integer1);
      Vector<Integer> vector0 = new Vector<Integer>();
      Stack<Integer> stack1 = new Stack<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>(stack1);
      Vector<Integer> vector2 = new Vector<Integer>(stack1);
      vector2.add(integer0);
      vector2.ensureCapacity(0);
      BombExplodedMsg bombExplodedMsg0 = new BombExplodedMsg(0, stack0, vector2, vector1, false);
      CountdownMsg countdownMsg0 = new CountdownMsg(0);
      clientMsgReceiver0.processMsg(countdownMsg0);
      ArrayList<BombExplodedMsg> arrayList0 = new ArrayList<BombExplodedMsg>();
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      GlobalStateMsg globalStateMsg0 = new GlobalStateMsg(0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalStateMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      MockThrowable mockThrowable0 = new MockThrowable("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", mockThrowable0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("N;e,$Z|xzTRX1}$.iO", sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("AN+/Ot&S)BBD{'", "4Py0whWiV['9=D", sQLFeatureNotSupportedException1);
      SQLWarning sQLWarning0 = new SQLWarning("", "9#*B{~wfu", sQLFeatureNotSupportedException1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLFeatureNotSupportedException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
          MockInetAddress.getByName("_OC");
          mockInetSocketAddress0.getHostName();
          InetAddress inetAddress0 = MockInetAddress.getByName("192.168.1.42");
          MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress("&L*", 0);
          Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
          Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress1);
          MockSocket mockSocket0 = new MockSocket(proxy0);
          mockInetSocketAddress1.getHostName();
          mockSocket0.setTcpNoDelay(false);
          BomberClient bomberClient0 = BomberClient.getInstance();
          MockInetSocketAddress mockInetSocketAddress2 = new MockInetSocketAddress(inetAddress0, 0);
          mockInetSocketAddress2.getHostName();
          MockSocket mockSocket1 = new MockSocket(proxy0);
          mockInetSocketAddress1.getHostName();
          MockThrowable mockThrowable0 = new MockThrowable();
          SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[SUqKEq", "[SUqKEq", mockThrowable0);
          System.setCurrentTimeMillis(0);
          System.setCurrentTimeMillis(1965L);
          ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket1, bomberClient0);
          // Undeclared exception!
          try { 
            clientMsgReceiver0.closeConnection();
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("client.network.ClientMsgReceiver", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      MockThread.interrupted();
      mockSocket0.getTrafficClass();
      MockThread.interrupted();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Mj4qi#W[=m5r@Nyh;");
      File file0 = MockFile.createTempFile("N;e,$Z|xzTRX1}$.iO", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException1.printStackTrace((PrintWriter) mockPrintWriter1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", sQLTimeoutException1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLNonTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("mu.5c#^[yTf^NaXG_q", "9#*B{~wfu", sQLRecoverableException0);
      SQLWarning sQLWarning0 = new SQLWarning("L~", "Mj4qi#W[=m5r@Nyh;", sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLIntegrityConstraintViolationException0);
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(batchUpdateException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Socket socket0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver((Socket) null, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }
}
