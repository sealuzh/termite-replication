/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:35:50 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9709403022152396
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(281470681743360L);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      stringBuilder1.append(281470681743360L);
      SQLUtil.addRequiredCondition("Tx", stringBuilder2);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("PRIMARY KEY ", (String) null, versionNumber0);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "PRIMARY KEY ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder3 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      assertFalse(stringBuilder3.equals((Object)stringBuilder2));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2002856251318685
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "alter indexcan't set uery timeout neative";
      stringArray0[4] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter indexcan't set uery timeout neative", true, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = (DefaultDBTable)dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable1.getUniqueConstraint(stringArray0);
      defaultDBTable1.addUniqueConstraint(dBPrimaryKeyConstraint1);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable1, 1914, ":h");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", defaultDBTable1, (DBDataType) null, integer1, integer2);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderValue(charArrayWriter0);
      SQLUtil.normalize("alter indexcan't set uery timeout neative", true);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.638491303294936
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('v');
      StringBuilder stringBuilder1 = stringBuilder0.append(281470681743360L);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      stringBuilder1.append((-1409L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      stringBuilder1.append((float) 281470681743360L);
      stringBuilder1.append('I');
      assertEquals("v281470681743360 and null-14092.81470682E14I", stringBuilder1.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "tKBt>";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.isQuery("m]9jc%X@_wm");
      String string0 = SQLUtil.normalize("execute{3\"lyfth/>jph", true);
      assertEquals("execute { 3 \"lyfth/>jph\"", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "42XAA";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = "alter materialized viewcall";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized viewcall", true, stringArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) defaultDBTable0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.578795249863561
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('v');
      stringBuilder0.append(281470681743360L);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("v281470681743360 and null", stringBuilder0.toString());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " NOT NULL");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";e^ZVK?m&(!k:J");
      String[] stringArray0 = new String[4];
      stringArray0[0] = " NOT NULL";
      stringArray0[1] = ";e^ZVK?m&(!k:J";
      stringArray0[2] = ";e^ZVK?m&(!k:J";
      stringArray0[3] = null;
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.isQuery("(b;\u0006L");
      String string0 = SQLUtil.normalize("SELECT * FROM ;e^ZVK?m&(!k:J WHERE  NOT NULL = ' NOT NULL' AND ;e^ZVK?m&(!k:J = ';e^ZVK?m&(!k:J' AND ;e^ZVK?m&(!k:J = ';e^ZVK?m&(!k:J' AND null = null", true);
      assertEquals("SELECT * FROM ; e ^ ZVK ? m & (! k : J WHERE NOT NULL = ' NOT NULL' AND ; e ^ ZVK ? m & (! k : J = ';e^ZVK?m&(!k:J' AND ; e ^ ZVK ? m & (! k : J = ';e^ZVK?m&(!k:J' AND null = null", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9871493526448465
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "Uc#w8*|#azB:jss7r";
      stringArray0[1] = "Uc#w8*|#azB:jss7r";
      stringArray0[2] = "Uc#w8*|#azB:jss7r";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Uc#w8*|#azB:jss7r");
      boolean boolean0 = SQLUtil.isQuery("select * from null where");
      assertTrue(boolean0);
      
      String string0 = SQLUtil.normalize("select * from null where", false);
      assertEquals("select * from null where", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.421648527595642
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "b \"MC'";
      stringArray0[1] = "b \"MC'";
      stringArray0[2] = "b \"MC'";
      stringArray0[3] = "b \"MC'";
      stringArray0[4] = "b \"MC'";
      stringArray0[5] = "b \"MC'";
      stringArray0[6] = "b \"MC'";
      stringArray0[7] = "b \"MC'";
      String string0 = SQLUtil.renderColumnListWithTableName("b \"MC'", stringArray0);
      assertEquals("b \"MC'.b \"MC', b \"MC'.b \"MC', b \"MC'.b \"MC', b \"MC'.b \"MC', b \"MC'.b \"MC', b \"MC'.b \"MC', b \"MC'.b \"MC', b \"MC'.b \"MC'", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("like");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("b \"MC'", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      boolean boolean0 = SQLUtil.isQuery("org.apache.derby.iapi.store.replication.slave.SlaveFactory");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
      
      String string2 = SQLUtil.normalize("org.apache.derby.iapi.store.replication.slave.SlaveFactory", true);
      assertEquals("org.apache.derby.iapi.store.replication.slave.SlaveFactory", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.221420462725902
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'f';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      SQLUtil.isQuery("ba/-H)>2R_O6$;/G");
      SQLUtil.normalize("This SQLXML object has already been initialized, so you cannot manipulate it further.", true);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter tabler00", (String[]) null, "alter tabler00", ".DPe7E=$Q", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.449792752728442
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "alter indexcan't set query timeout negative";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop indexh~8w)'mn[:$iadlv", true, stringArray0);
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("L/aEu", dBCatalog0);
      dBSchema0.getTable("select");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ys}4Cs", (DBTable) null, (-392433880), "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string0 = SQLUtil.typeAndName(dBTable0);
      assertEquals("table null", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop indexh~8w)'mn[:$iadlv\" PRIMARY KEY (, alter indexcan't set query timeout negative)", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("-]7}ts7_WNU}\"8woCx");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-]7}ts7_WNU}\"8woCx", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-]7}ts7_WNU}\"8woCx";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-]7}ts7_WNU}\"8woCx", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CLOB", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint1);
      DBDataType dBDataType0 = null;
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-]7}ts7_WNU}\"8woCx", dBTable0, (DBDataType) null, integer1);
      String string0 = "Y;h8%(z0#A\\2o";
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("-]7}ts7_WNU}\"8woCx", defaultDBTable0, 4973, "Y;h8%(z0#A\u0002o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Y;h8%(z0#A\u0002o
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Bzu96");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      jdbcClob jdbcClob0 = new jdbcClob("jdbc[");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      assertEquals("true or null", stringBuilder1.toString());
      assertEquals("true or null", stringBuilder0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('v');
      stringBuilder0.append(281470681743360L);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = "UPDATE_RULE";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UPDATE_RULE");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0108940605206347
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s8bNYp'}$.s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYp'}$.s", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec1);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 373);
      mockPrintWriter0.checkError();
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("s8bNYp'}$.s", defaultDBTable0, (DBDataType) null, integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Ss7zd", defaultDBTable0, 373, "s8bNYp'}$.s");
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("create unique index", defaultDBTable0, (DBDataType) null, integer2, integer4);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8212565066006587
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.normalize("", false);
      DBSchema dBSchema0 = new DBSchema("-]7}ts7_WNU}\"8woCx");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectnational character varying", dBSchema0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType dBDataType0 = DBDataType.getInstance((-209), "mu;~");
      defaultDBTable0.getReferrers();
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, (Integer) null, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "zYM=y}g/=MH5Ed";
      stringArray0[1] = "@`VvHDd6~";
      stringArray0[2] = "FLOAT8";
      stringArray0[3] = "@`VvHDd6~";
      stringArray0[4] = "FLOAT8";
      stringArray0[5] = "selectnational character varying";
      stringArray0[6] = "FLOAT8";
      stringArray0[7] = "";
      stringArray0[8] = "FLOAT8";
      SQLUtil.join("", "*/", stringArray0, "MU;~", "truncate", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7181998864275512
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "Uc#w8*|#azB:jss7r";
      stringArray0[1] = "Uc#w8*|#azB:jss7r";
      stringArray0[2] = "Uc#w8*|#azB:jss7r";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Uc#w8*|#azB:jss7r");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(" ", compositeDBObject0);
      tableContainer0.getTable("select into");
      DBDataType dBDataType0 = DBDataType.getInstance((-2045354515), "Uc#w8*|#azB:jss7r");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBColumn0.getNotNullConstraint();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.491391991308826
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "alter indexcan't set uery timeout neative";
      stringArray0[4] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter indexcan't set uery timeout neative", true, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = (DefaultDBTable)dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable1.getUniqueConstraint(stringArray0);
      dBPrimaryKeyConstraint1.setTable(defaultDBTable0);
      defaultDBTable1.addUniqueConstraint(dBPrimaryKeyConstraint1);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable1, 1914, ":h");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter indexcan't set uery timeout neative");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable1, ")", false, "xfe%jd2H$;x0mi_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'xfe%jd2H$;x0mi_' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s8bNYp'}$.s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYp'}$.s", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      BasicUUID basicUUID0 = new BasicUUID("not found!");
      StringBuilder stringBuilder0 = new StringBuilder(2413);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.162409200836301
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesStructure("alter materialized view");
      SQLUtil.isQuery("");
      SQLUtil.renderValue(defaultDBTable0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "Uc#w$*|#azB:jss7r";
      DBSchema dBSchema0 = new DBSchema("Uc#w$*|#azB:jss7r");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(34, "-]7}ts7_WNU}\"8woCx");
      defaultDBTable0.getReferrers();
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1, integer2);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBColumn[] dBColumnArray0 = null;
      String[] stringArray1 = new String[9];
      stringArray1[0] = "-]7}TS7_WNU}\"8WOCX(2,1)";
      stringArray1[1] = "rF;w";
      stringArray1[2] = "-]7}TS7_WNU}\"8WOCX(2,1)";
      String[] stringArray2 = new String[3];
      stringArray2[0] = "-]7}ts7_WNU}\"8woCx";
      stringArray2[1] = "Rf";
      stringArray2[2] = "rF;w";
      String[] stringArray3 = new String[2];
      stringArray3[0] = "rename";
      stringArray0[0] = "-]7}ts7_WNU}\"8woCx";
      // Undeclared exception!
      try { 
        SQLUtil.join("-]7}TS7_WNU}\"8WOCX(2,1)", "geoP>01rOs", stringArray2, "rename", (String) null, stringArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "*/";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*/");
      boolean boolean0 = true;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("alter tabledrop index", "truncatelike", (String[]) null, (String) null, "V0B@2shgUR}Sf}_2^-d", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3654597361104446
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "s8bNYp'}$.s";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnListWithTableName("s8bNYp'}$.s", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string1 = "qG";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("qG", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'f';
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, stringArray0, "M+P@Z%_G3US0<J7iP", "1", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "[4\u0006uyzyBi{'";
      stringArray0[2] = "[4\u0006uyzyBi{'";
      stringArray0[3] = "org.firebirdsql.gds.impl.wire.JavaGDSImpl";
      stringArray0[4] = "[4\u0006uyzyBi{'";
      SQLUtil.renderColumnListWithTableName("[4\u0006uyzyBi{'", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("");
      SQLUtil.removeComments("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      SQLUtil.addOptionalCondition("org.firebirdsql.gds.impl.wire.JavaGDSImpl", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1451075854), (CharSequence) null, (-1451075854), 1798);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -1451075854
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3867961512087774
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnListWithTableName("s8bNYp'}$.s", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("qG", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 'f';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = ';';
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      jdbcClob jdbcClob0 = new jdbcClob("s8bNYp'}$.s.null");
      Reader reader0 = jdbcClob0.getCharacterStream();
      stringBuilder0.append((Object) "qG");
      jdbcClob0.getAsciiStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.addOptionalCondition(" called with unknown transaction.", stringBuilder0);
      assertEquals("CONSTRAINT qG CONSTRAINT qG qG or  called with unknown transaction.", stringBuilder0.toString());
      
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.528030410163893
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("like");
      SQLUtil.isProcedureCall("like");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "delete";
      SQLUtil.isDML("delete");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.listIterator();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SQLUtil.renderColumnNames(stringArray0);
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0687430728572083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s8bNYp'}$.s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYp'}$.s", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec1);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 373);
      mockPrintWriter0.checkError();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedWriter0, true);
      NameSpec nameSpec2 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec2, mockPrintWriter1);
      assertEquals(91, byteArrayOutputStream0.size());
      assertEquals("create table s8bNYp'}$.s (,\n\tFOREIGN KEY (s8bNYp'}$.s) REFERENCES s8bNYp'}$.s(s8bNYp'}$.s)\n", byteArrayOutputStream0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9482543405540194
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "h~8W)'mn[:$iADlv";
      SQLUtil.normalize("h~8W)'mn[:$iADlv", false);
      SQLUtil.mutatesDataOrStructure("h~8W)'mn[:$iADlv");
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "\\G=16=3$O4-OY";
      VersionNumber versionNumber0 = VersionNumber.valueOf("G=16=3$O4-OY");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Omn-(JqgHYSRDoI", "inner", versionNumber0);
      VersionNumber versionNumber1 = VersionNumber.valueOf("Omn-(JqgHYSRDoI");
      versionNumber1.toString();
      defaultDatabase0.getSequences(true);
      versionNumber0.compareTo(versionNumber1);
      defaultDatabase0.getTable((String) null, false);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.151379232208468
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized viewlike");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      mockPrintWriter0.println((-772L));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized viewlike", defaultDBTable0, 9, "drop materialized viewlike");
      defaultDBColumn0.getForeignKeyConstraint();
      VersionNumber versionNumber0 = VersionNumber.valueOf("heuYX2[hbSX}T&");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("wDtnN8 y", "]!%4@uA)zM[QUK", versionNumber0);
      Boolean boolean1 = SQLUtil.mutatesStructure("]!%4@uA)zM[QUK");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3654597361104446
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      SQLUtil.normalize("", false);
      String string1 = "-]7}ts7_WNU}\"8woCx";
      DBSchema dBSchema0 = new DBSchema("-]7}ts7_WNU}\"8woCx");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FLOAT8", dBSchema0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_PoB/[}iu");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_PoB/[}iu";
      stringArray0[1] = "FLOAT8";
      stringArray0[2] = "_PoB/[}iu";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("", stringArray0, "'rP/+(", "Unknown constraint type: ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "alter indexcan't set query timeout negative";
      stringArray0[4] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter indexcan't set query timeout negative", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", dBTable0, 1914, ":h");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", dBTable0, (DBDataType) null, integer1, integer2);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", , , , , , , , ", string0);
      
      Character character0 = Character.valueOf('W');
      String string1 = SQLUtil.substituteMarkers("rename", "alter indexcan't set query timeout negative", character0);
      assertEquals("rename", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0179605205417241
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dZC!6bpG/}A!@HhW!OK");
      boolean boolean0 = SQLUtil.isQuery("alter materialized view");
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('?');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'?'", string0);
      
      String string1 = SQLUtil.normalize("dZC!6bpG/}A!@HhW!OK", false);
      assertEquals("dZC ! 6bpG / } A ! @ HhW ! OK", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6603631172353484
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("I7F9+n}dh-");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.addOptionalCondition("G1zuWhKZ]pS", stringBuilder0);
      int int0 = 122;
      int int1 = 13;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SQLUtil.renderColumnListWithTableName("org.firebirdsql.gds.impl.wire.JavaGDSImpl", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("d", stringBuilder0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("drop indexlike", "", versionNumber0);
      stringBuilder0.append('%');
      String[] stringArray1 = new String[8];
      stringArray1[0] = "org.firebirdsql.gds.impl.wire.JavaGDSImpl";
      stringArray1[1] = "org.firebirdsql.gds.impl.wire.JavaGDSImpl., org.firebirdsql.gds.impl.wire.JavaGDSImpl., org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null";
      stringArray1[2] = "org.firebirdsql.gds.impl.wire.JavaGDSImpl., org.firebirdsql.gds.impl.wire.JavaGDSImpl., org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null";
      stringArray1[3] = "insertdelete";
      stringArray1[4] = "CHECK ";
      stringArray1[5] = "S1";
      stringArray1[6] = " join ";
      stringArray1[7] = "insertdelete";
      SQLUtil.join("insertdelete", " join ", stringArray0, "d", "S1", stringArray1);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-291354554), (CharSequence) "drop indexlike");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -291354554
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5975170300947936
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "path.separator";
      stringArray0[1] = "path.separator";
      stringArray0[2] = "path.separator";
      stringArray0[3] = "path.separator";
      stringArray0[4] = "path.separator";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "path.separator";
      stringArray1[1] = "path.separator";
      stringArray1[2] = "path.separator";
      stringArray1[3] = "path.separator";
      stringArray1[4] = "path.separator";
      SQLUtil.innerJoin("path.separator", stringArray0, "path.separator", "path.separator", stringArray1);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = "alter indexca";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("path.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "d";
      stringArray0[2] = "g0w}K";
      stringArray0[3] = ",";
      SQLUtil.renderColumnListWithTableName(",", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "\\v}ITJ%\"q3r9Jvd";
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("v}ITJ%\"q3r9Jvd", stringBuilder0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("d", "d", versionNumber0);
      stringBuilder0.append('Z');
      SQLUtil.join("d", "renamekf#[%8", stringArray0, ",", " ******* ", stringArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(585, (CharSequence) "g0w}K");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 585
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "BLOB";
      stringArray0[2] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter indexcan't set query timeout negative", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{8-#*rTt", defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.setNullable(true);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop index", defaultDBTable0, (-1907), "BLOB");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.{8-#*rTt", string0);
      
      String string1 = SQLUtil.typeAndName(dBTable0);
      assertEquals("table null", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0869615765973233
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "[4\u0006uyzyBi{'";
      String string0 = SQLUtil.renderColumnListWithTableName("org.firebirdsql.gds.impl.wire.JavaGDSImpl", stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "insert");
      String string1 = SQLUtil.join((String) null, " AND ", stringArray0, "-o^9~G", "org.firebirdsql.gds.impl.wire.JavaGDSImpl., org.firebirdsql.gds.impl.wire.JavaGDSImpl.[4\u0006uyzyBi{', org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null, org.firebirdsql.gds.impl.wire.JavaGDSImpl.null", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.countProviders();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("create table null (\n)", charArrayWriter0.toString());
      assertEquals(21, charArrayWriter0.size());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnListWithTableName("constraint", stringArray0);
      assertEquals("constraint.null", string0);
      
      defaultDBTable0.getIndex("alter session");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("qG", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = ';';
      charArray0[3] = ';';
      charArray0[5] = ';';
      charArray0[6] = 'r';
      charArray0[7] = '*';
      charArray0[8] = 'r';
      String string1 = SQLUtil.renderQuery(defaultDBTable1, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  WHERE null = null", string1);
      
      String string2 = SQLUtil.ownerDotComponent(defaultDBTable1);
      assertEquals("", string2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8tNYYp}.y");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s8tNYYp}.y";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8tNYYp}.y", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4TILle7}x7\"R !");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("4TILle7}x7\"R !", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      String string0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(281470681743360L);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      char char0 = 'U';
      StringBuilder stringBuilder3 = stringBuilder2.append('U');
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7010142885694757
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execkf#[%8");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UPDATE_RULE");
      boolean boolean1 = SQLUtil.isQuery("UPDATE_RULE");
      String string0 = SQLUtil.renderValue(boolean0);
      assertEquals("false", string0);
      assertTrue(boolean0.equals((Object)boolean1));
      
      String string1 = SQLUtil.normalize(">6Gp-=s~7xj_d", false);
      assertEquals("> 6Gp - = s ~ 7xj_d", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("aIe;4-l*#1=7,", (DBSchema) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Im=\teUI8Xn", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint1);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Iy`q[pbh|o5aLS<", dBTable0, (DBDataType) null, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("^4>_Nh)ZEhphC#h:", defaultDBTable0, 463, "aIe;4-l*#1=7,");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "l&;+*47:XQaNTsU";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("l&;+*47:XQaNTsU", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3044117254799494
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "";
      SQLUtil.normalize("", false);
      String string1 = "z`FPm[4g9";
      DBSchema dBSchema0 = new DBSchema("-]7}ts7_WNU}\"8woCx");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z`FPm[4g9", dBSchema0);
      String string2 = "_PoB/[}iu";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_PoB/[}iu");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_PoB/[}iu";
      stringArray0[0] = "z`FPm[4g9";
      stringArray0[2] = "_PoB/[}iu";
      SQLUtil.leftJoin("", stringArray0, "'rP/+(", "Unknown constraint type: ", stringArray0);
      SQLUtil.join("", "", stringArray0, "-]7}ts7_WNU}\"8woCx", "", stringArray0);
      int int0 = (-744);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-744), threadPoolExecutor_AbortPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[14];
      String string0 = "iPV";
      SQLUtil.renderColumnListWithTableName("iPV", stringArray0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) "g0w}K");
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      versionNumber0.toString();
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "insertm%04+iy";
      stringArray0[1] = "#|KrT  IT";
      stringArray0[2] = "E$|!1<Om[Gr~";
      stringArray0[3] = "B%K7L?";
      stringArray0[4] = "E$|!1<Om[Gr~";
      stringArray0[5] = "B%K7L?";
      stringArray0[6] = "truncatelike";
      stringArray0[7] = "E$|!1<Om[Gr~";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnListWithTableName("constraint", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("qG", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderQuery(defaultDBTable1, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(39);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "_PoB/[}iu";
      String string0 = "INFORMATION_SCHEMA.LOB";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "INFORMATION_SCHEMA.LOB");
      SQLUtil.leftJoin("drop materialized view", stringArray0, "drop materialized view", "_PoB/[}iu", stringArray0);
      SQLUtil.join("left join drop materialized view as _PoB/[}iu on drop materialized view.drop materialized view = _PoB/[}iu.drop materialized view and drop materialized view._PoB/[}iu = _PoB/[}iu._PoB/[}iu", "UTF8TOSTRING", stringArray0, "_PoB/[}iu", "H`R!anuv", stringArray0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      stringArray0[3] = "-";
      stringArray0[4] = "zfT{o,=BdH%i~v6>,!";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("' not found in table '", stringBuilder0);
      SQLUtil.addOptionalCondition("-", stringBuilder1);
      assertEquals("' not found in table ' or -", stringBuilder1.toString());
      
      String string0 = SQLUtil.renderValue("-");
      assertEquals("'-'", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "alter indexcan't set uery timeout neative";
      stringArray0[4] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter indexcan't set uery timeout neative", true, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = (DefaultDBTable)dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable1.getUniqueConstraint(stringArray0);
      defaultDBTable1.addUniqueConstraint(dBPrimaryKeyConstraint1);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable1, 1914, ":h");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", defaultDBTable1, (DBDataType) null, integer1, integer2);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("CONSTRAINT  ", stringBuilder0.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.492066763417564
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[2] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[4] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[5] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.impl.sql.compile.CreateSchemaNode", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      PrintWriter printWriter0 = mockPrintWriter0.append('x');
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil.renderValue("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/13_jdbacl");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-70);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SQLUtil.removeComments("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      StringBuilder stringBuilder0 = new StringBuilder(63);
      SQLUtil.join("org.apache.derby.impl.sql.compile.CreateSchemaNode", (String) null, stringArray0, "org.apache.derby.impl.sql.compile.CreateSchemaNode", "alter materialized view", stringArray0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(63, (CharSequence) "org.apache.derby.impl.sql.compile.CreateSchemaNode");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 63
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "alter indexcan't set query timeout negative";
      stringArray0[4] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter indexcan't set query timeout negative", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBPrimaryKeyConstraint0.setOwner(dBTable0);
      Integer integer0 = RawTransaction.COMMIT;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      defaultDBTable0.getUniqueConstraint("");
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("d[v+c))$FIRY98x", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('8');
      charArrayWriter1.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      DBSchema dBSchema0 = new DBSchema("~,d<SuzK+7.i3qF#M");
      dBSchema0.getTable("~,d<SuzK+7.i3qF#M");
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("~,d<SuzK+7.i3qF#M", string0);
      
      String string1 = SQLUtil.typeAndName(dBSchema0);
      assertNotNull(string1);
      assertEquals("schema ~,d<SuzK+7.i3qF#M", string1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('v');
      stringBuilder0.append(281470681743360L);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      String string0 = "tKBt>";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s8bNYp'}$.s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYp'}$.s", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4TILle7}x7\"R !");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "42XAA";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized viewcall", true, stringArray0);
      boolean boolean0 = true;
      dBPrimaryKeyConstraint0.setDoc("drop indexdrop materialized viewlike");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      int int0 = 3;
      StringBuilder stringBuilder1 = stringBuilder0.append(3);
      StringBuilder stringBuilder2 = stringBuilder1.append(1L);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1936102716), (char[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1936102716
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[5];
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('v');
      StringBuilder stringBuilder2 = stringBuilder1.append((long) 'v');
      StringBuilder stringBuilder3 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%w");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringBuilder3.append(0.0F);
      StringBuilder stringBuilder4 = stringBuilder2.append('5');
      // Undeclared exception!
      try { 
        stringBuilder3.insert(39, (CharSequence) stringBuilder4, (-1133783364), 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 39
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "_PoB/[}iu";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "INFORMATION_SCHEMA.LOB");
      SQLUtil.leftJoin("drop materialized view", stringArray0, "drop materialized view", "_PoB/[}iu", stringArray0);
      String[] stringArray1 = new String[0];
      SQLUtil.join("p*No5JbK", "oI6Fn", stringArray1, "_PoB/[}iu", " YA4,^@{;Q6v]poz.`", stringArray0);
      int int0 = (-291354554);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " YA4,^@{;Q6v]poz.`");
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'q';
      charArray0[2] = '\"';
      charArray0[3] = '?';
      charArray0[4] = 'b';
      charArray0[5] = 'P';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-291354554), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -291354554
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("");
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(65, "vxe4i)Ms#>-Q_R");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8291146517345536
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) nameSpec0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) nameSpec0;
      objectArray0[4] = (Object) defaultDBTable0;
      objectArray0[5] = (Object) defaultDBTable0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) defaultDBTable0;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("update", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("updatecreate table null (\n)", charArrayWriter0.toString());
      
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "null";
      stringArray0[1] = "table null";
      stringArray0[2] = "`Po=ZA8l`ma";
      stringArray0[3] = "table null";
      stringArray0[4] = "table null";
      stringArray0[5] = "table null";
      stringArray0[6] = "table null";
      stringArray0[7] = "table null";
      String string0 = SQLUtil.innerJoin("null", stringArray0, "u{:;y@^;[mhvIu'x", "org.apache.derby.impl.store.access.BackingStoreHashTableFromScan", stringArray0);
      assertEquals("u{:;y@^;[mhvIu'x as org.apache.derby.impl.store.access.BackingStoreHashTableFromScan on null.null = org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.null and null.table null = org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.table null and null.`Po=ZA8l`ma = org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.`Po=ZA8l`ma and null.table null = org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.table null and null.table null = org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.table null and null.table null = org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.table null and null.table null = org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.table null and null.table null = org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.table null", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "like";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.mutatesDataOrStructure("like");
      SQLUtil.isDML("like");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("like");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "Uc#w8*|#azB:jss7r";
      stringArray0[2] = stringArray0[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, stringArray0[2]);
      String string0 = SQLUtil.normalize("Uc#w8*|#azB:jss7r", false);
      assertEquals("Uc # w8 * | # azB : jss7r", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isDDL("*COt");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*COt";
      stringArray0[1] = null;
      stringArray0[2] = "*COt";
      stringArray0[3] = "*COt";
      stringArray0[4] = "*COt";
      // Undeclared exception!
      try { 
        defaultDBTable1.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (*COt, , *COt, *COt, *COt)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.3262202193216335
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[11];
      stringArray0[0] = "s8bNYp'}$.s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYp'}$.s", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 373);
      mockPrintWriter0.checkError();
      defaultDBTable0.isIdentical(dBForeignKeyConstraint0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedWriter0, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'B';
      charArray0[1] = 'o';
      charArray0[3] = '9';
      charArray0[0] = 'C';
      charArray0[5] = ' ';
      stringBuilder0.append(charArray0);
      assertEquals("CONSTRAINT s8bNYp'}$.s CONSTRAINT s8bNYp'}$.s Co\u00009\u0000 ", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT s8bNYp'}$.s FOREIGN KEY (s8bNYp'}$.s, , , , , , , , , , ) REFERENCES s8bNYp'}$.s(s8bNYp'}$.s, , , , , , , , , , )", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.204160942703659
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selectcreate materialized viewian7hv#kc");
      SQLUtil.isProcedureCall(", ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      VersionNumber versionNumber0 = VersionNumber.valueOf("drop tableexeckf#[%8");
      VersionNumber.valueOf("alter materialized viewexeckf#[%8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "X");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "execkf#[%8", versionNumber0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      String[] stringArray0 = new String[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.renderColumnListWithTableName("*/", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("M%04+IY");
      SQLUtil.addOptionalCondition("!msYMt4 .bM", stringBuilder0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("{1_Iy+>!%.#", stringBuilder0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("{1_Iy+>!%.#", "!msYMt4 .bM", versionNumber0);
      SQLUtil.join("alter materialized view", "", stringArray0, "", "*/", stringArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-291354554), (CharSequence) "tKBt>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -291354554
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "drop materialized viewlike";
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[14];
      stringArray0[0] = "Uc#w$*|#azB:jss7r";
      stringArray0[1] = "-";
      stringArray0[2] = "-";
      stringArray0[3] = "-";
      stringArray0[4] = "zfT{o,=BdH%i~v6>,!";
      SQLUtil.renderColumnNames(stringArray0);
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SQLUtil.isDDL("create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "create unique index";
      stringArray0[1] = "create unique index";
      stringArray0[2] = "create unique index";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[4] = "create unique index";
      stringArray0[5] = "create unique index";
      stringArray0[6] = "create unique index";
      stringArray0[7] = "create unique index";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'create unique index' has no foreign key with the columns (create unique index, create unique index, create unique index, , create unique index, create unique index, create unique index, create unique index)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String[] stringArray0 = new String[6];
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getSchema();
      DBPackage dBPackage0 = new DBPackage("qG", (DBSchema) null);
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(stringArray0[0], " NOT NULL", versionNumber0);
      Boolean boolean0 = SQLUtil.mutatesStructure("ian7hV#kc");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.3287099228098516
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("I7F9+n}dh-");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "G1zuWhKZ]pS";
      stringArray0[1] = "I7F9+n}dh-";
      JdbcConnectionPool.create("", "Unknown constraint type: ", "G1zuWhKZ]pS");
      Boolean boolean1 = SQLUtil.mutatesStructure("I7F9+n}dh-");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "()\n";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "()\n", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (()\n)", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.countProviders();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "[4\u0006uyzyBi{'";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(4047);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.innerJoin("", stringArray0, "last", "", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
