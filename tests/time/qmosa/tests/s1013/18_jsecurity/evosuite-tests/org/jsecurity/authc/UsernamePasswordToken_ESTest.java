/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:33:07 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-78);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("PP;", "puip:%V<[[xd ", true);
      assertTrue(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName((String) null);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, false, inetAddress0);
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Uj(^=sMzr]", (String) null);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.setUsername("PP;");
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      char[] charArray1 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, inetAddress0);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockInetAddress.getByName("");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("72k!^x+3F#!gD");
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "", false, inetAddress1);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.574464215715726
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'z';
      charArray0[2] = '\"';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Uj(^=sMzr]", charArray0);
      usernamePasswordToken0.setUsername("Uj(^=sMzr]");
      usernamePasswordToken0.toString();
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = '\u001F';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", true);
      usernamePasswordToken0.setUsername((String) null);
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getCredentials();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = 't';
      charArray0[2] = '$';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("!;+2Z\u0007,");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("fv%9a/Q]JI&&sh");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("LVmJidr:B]8J{", (String) null, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("!;+2Z\u0007,");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("fv%9a/Q]JI&&sh");
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'D';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("q", charArray0, false, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("PP;", "PP;", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", true, inetAddress0);
      MockInetAddress.getLoopbackAddress();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=true (/127.0.0.1)", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("!;+2Z\u0007,");
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("fv%9a/Q]JI&&sh");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("o&/}Ih5vieq TfC41tI");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "Rc'iCT806Eq{_,0lX<v", false, inetAddress0);
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.getByName("!;+2Z\u0007,");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("fv%9a/Q]JI&&sh");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("2vba=1T06%j@LR8}{", "[ey9}U#wxJbI6x6o", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2242578247365654
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("u,ETU%#Gyr", charArray0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = 'z';
      charArray0[2] = 'f';
      charArray0[3] = 'o';
      charArray0[4] = '{';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, charArray0, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false (cSH);D>w1V`l`L`>/200.42.42.0)", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getByName("0,d%o#b8O>");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "|Q2H\"Kc3okO}1+V", true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = '5';
      charArray0[2] = 'x';
      charArray0[3] = ':';
      charArray0[4] = 's';
      charArray0[5] = 'p';
      charArray0[6] = 'A';
      charArray0[7] = '|';
      charArray0[8] = ']';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("!Bn!:", charArray0);
      usernamePasswordToken0.setRememberMe(false);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("0$m`w*Lz<K9:P@~&", "8k[[](\fQN`mcod$@");
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '^';
      charArray0[2] = '&';
      charArray0[3] = '4';
      charArray0[4] = '|';
      charArray0[5] = '^';
      charArray0[6] = 'N';
      charArray0[7] = 'M';
      charArray0[8] = '2';
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7971377304062592
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = ')';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", true);
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.getUsername();
      char[] charArray1 = usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.setPassword(charArray1);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
      
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getPassword();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("!;+2Z\u0007,");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("fv%9a/Q]JI&&sh");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "2vba=1T06%j@LR8}{", false, inetAddress0);
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6222682140896603
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setRememberMe(false);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.getCredentials();
      assertFalse(usernamePasswordToken1.isRememberMe());
      
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.clear();
      String string0 = usernamePasswordToken0.toString();
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getByName("Dm{!Pb1]o{-%_<");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("cSH);D>w1V`l`L`>");
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", true, inetAddress0);
      MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.setUsername("#.zj;P`\"3f;ut\"");
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("0$m`w*Lz<K9:P@~&", "8k[[](\fQN`mcod$@");
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = '&';
      charArray0[3] = '4';
      charArray0[4] = '|';
      charArray0[5] = '^';
      charArray0[7] = 'M';
      charArray0[8] = '2';
  }
}
