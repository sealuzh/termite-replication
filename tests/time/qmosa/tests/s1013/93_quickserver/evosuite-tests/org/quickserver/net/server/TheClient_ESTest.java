/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 00:08:02 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.197846119469557
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      TheClient theClient0 = new TheClient();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientWriteHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setMaxConnectionMsg("S4Cfk}:");
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setTrusted(false);
      theClient0.getServer();
      theClient0.getSocketChannel();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "S4Cfk}:");
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      theClient0.getSocket();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.getServer();
      theClient0.getClientEvent();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientEvent();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      theClient0.getAuthenticator();
      theClient0.getServer();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9713931362744876
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.setMaxAuthTry(10);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getTimeoutMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.setTimeout(10);
      theClient0.getMaxAuthTryMsg();
      theClient0.setTimeoutMsg("");
      theClient0.getClientAuthenticationHandler();
      theClient0.setTimeout(10);
      theClient0.getSocketChannel();
      assertEquals(10, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.setMaxAuthTry(10);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTry((-1));
      theClient0.setTrusted(true);
      theClient0.getTrusted();
      theClient0.getMaxAuthTry();
      theClient0.toString();
      theClient0.getTimeoutMsg();
      theClient0.getSocketChannel();
      assertEquals((-1), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      SocketChannel.open();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setTimeout((-14));
      theClient0.getTimeout();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      assertEquals((-14), theClient0.getTimeout());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("os.version");
      theClient0.getMaxConnectionMsg();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      try { 
        blockingClientHandler0.isConected();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getTrusted();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(125);
      blockingClientHandler0.getClientData();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#125-ID:10>", blockingClientHandler0.getName());
      
      theClient0.setClientData((ClientData) null);
      theClient0.getClientEventHandler();
      boolean boolean0 = theClient0.getTrusted();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      Data data0 = new Data();
      theClient0.setClientData(data0);
      QuickServer quickServer0 = new QuickServer("EhphC#h:k-]/(Y");
      theClient0.setServer(quickServer0);
      theClient0.getClientData();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "EhphC#h:k-]/(Y");
      MockInetAddress.getByName("org.quickserver.net.server.TheClient");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 763);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4338006812941
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTrusted(false);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      CommandHandler commandHandler0 = new CommandHandler();
      commandHandler0.closingConnection(blockingClientHandler0);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getTimeoutMsg();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      TheClient theClient1 = new TheClient();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      theClient1.setSocketChannel((SocketChannel) null);
      theClient1.setMaxAuthTry((-3842));
      CommandHandler commandHandler1 = (CommandHandler)theClient0.getClientCommandHandler();
      commandHandler1.closingConnection(blockingClientHandler0);
      theClient0.setClientCommandHandler(commandHandler1);
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxAuthTryMsg();
      theClient1.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientBinaryHandler();
      theClient1.getClientExtendedEventHandler();
      assertEquals((-3842), theClient1.getMaxAuthTry());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxAuthTryMsg("");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTry(0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeout();
      theClient0.setMaxAuthTryMsg(">FU?QT!m(<tu+w?;{X");
      theClient0.setMaxAuthTry(101);
      theClient0.getMaxAuthTry();
      theClient0.getSocket();
      assertEquals(101, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0497978423100225
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getCommunicationLogging();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      blockingClientHandler0.getServer();
      theClient0.getClientAuthenticationHandler();
      theClient0.getTrusted();
      theClient0.getClientEvent();
      BlockingClientHandler blockingClientHandler1 = new BlockingClientHandler(125);
      blockingClientHandler1.getClientData();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#125-ID:5>", blockingClientHandler1.getName());
      
      theClient0.setClientData((ClientData) null);
      theClient0.getClientEventHandler();
      boolean boolean0 = theClient0.getTrusted();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("i.D.");
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      byte[] byteArray0 = new byte[0];
      theClient0.getMaxConnectionMsg();
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockInetAddress.anyLocalAddress();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "$]{J8n");
      theClient0.setTimeout(656);
      int int0 = theClient0.getTimeout();
      assertEquals(656, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.260960815263037
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      Data data0 = new Data();
      blockingClientHandler0.setMaxConnectionMsg("");
      data0.setUsername("");
      ClientEvent clientEvent0 = ClientEvent.READ;
      blockingClientHandler0.isClientEventNext(clientEvent0);
      data0.setLastAsked("");
      data0.setLastAsked("An");
      theClient0.setMaxConnectionMsg("An");
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getTimeoutMsg();
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.setMaxAuthTry(2661);
      theClient0.setTrusted(true);
      theClient0.setMaxAuthTry(2661);
      theClient0.getTimeoutMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxConnectionMsg("");
      theClient0.setTimeout(2661);
      theClient0.getMaxAuthTryMsg();
      theClient0.setTimeoutMsg("Could not borrow Thread from pool. Error: ");
      theClient0.getClientAuthenticationHandler();
      theClient0.setTimeout(0);
      theClient0.getSocketChannel();
      theClient0.getMaxConnectionMsg();
      theClient0.getSocketChannel();
      assertEquals(0, theClient0.getTimeout());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.260960815263037
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.getSocketChannel();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientObjectHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient1.getTrusted();
      theClient1.getClientEvent();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(125);
      blockingClientHandler0.getClientData();
      assertEquals("<ClientHandler-Pool#125-ID:1>", blockingClientHandler0.getName());
      
      theClient1.setClientData((ClientData) null);
      theClient1.getClientEventHandler();
      theClient0.getTrusted();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3787438509194208
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("m_[#nVe9GyV");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getCommunicationLogging();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setKeepAlive(true);
      theClient0.setSocket(mockSocket0);
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTry();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      QuickServer quickServer0 = new QuickServer("hMaS? #H");
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getServer();
      theClient0.getClientData();
      theClient0.getSocket();
      theClient0.getClientEvent();
      theClient0.setTrusted(true);
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxAuthTryMsg("B");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTry(0);
      assertEquals(0, theClient0.getMaxAuthTry());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setClientEvent((ClientEvent) null);
      QuickServer quickServer0 = new QuickServer();
      theClient0.setServer(quickServer0);
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1945366875886965
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      boolean boolean0 = theClient1.getCommunicationLogging();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setKeepAlive(true);
      theClient0.setSocket(mockSocket0);
      theClient0.getClientBinaryHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient1.getServer();
      theClient0.getClientCommandHandler();
      boolean boolean1 = theClient0.getTrusted();
      assertFalse(boolean1 == boolean0);
      
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientEventHandler();
      theClient1.getAuthenticator();
      theClient1.getClientExtendedEventHandler();
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QG05HcLAORq");
      TheClient theClient0 = new TheClient();
      System.setCurrentTimeMillis(0L);
      TheClient theClient1 = new TheClient();
      theClient1.getServer();
      theClient0.setServer((QuickServer) null);
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[8];
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      byteBufferArray0[0] = byteBuffer0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-106);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte)45, (int) (byte) (-106));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setMaxAuthTryMsg("");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientWriteHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(0);
      System.setCurrentTimeMillis(0);
  }
}
