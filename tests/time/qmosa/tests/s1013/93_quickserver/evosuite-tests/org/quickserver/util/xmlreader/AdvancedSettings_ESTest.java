/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:39:21 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8470956004757264
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setSocketLinger((-2853));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings1.getMaxThreadsForNioWrite();
      advancedSettings1.getCharset();
      // Undeclared exception!
      try { 
        advancedSettings2.setCharset("-_rS_1i^dP:uz8=4");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -_rS_1i^dP:uz8=4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6489001173895175
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1188));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize((-5051));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.toXML("\t<use-direct-byte-buffer>");
      advancedSettings0.toXML("b;[]7ZZ0f3]_slk>wv");
      advancedSettings0.setByteBufferSize((-2300));
      advancedSettings0.setClientIdentifier("b;[]7ZZ0f3]_slk>wv");
      advancedSettings0.setClientSocketReceiveBufferSize((-1188));
      advancedSettings0.toXML("U`7.G;");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1188));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientIdentifier("</backlog>\n");
      advancedSettings0.setPerformancePreferencesBandwidth((-2300));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("</backlog>\n");
      assertEquals((-1188), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("ISO-8859-1");
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.836521786753116
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-2362));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger((-2362));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass("DJFykjdwyJEL9.rh");
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setSocketLinger((-909));
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setCharset("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-2362), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.7000585836529645
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-2362));
      advancedSettings0.toXML("*t(\"2Klbpcv$|6>Y");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth((-1727));
      advancedSettings0.setQSObjectPoolMaker("PgcSBLz2i?NKOj4/$");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("*t(\"2Klbpcv$|6>Y");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(1577);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getCharset();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getByteBufferSize();
      advancedSettings1.getMaxThreadsForNioWrite();
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-1281));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize((-1281));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize(64);
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketSendBufferSize((-1281));
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals((-1281), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6255534653180534
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.toXML("");
      advancedSettings0.setMaxThreadsForNioWrite((-5895));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog((-3068));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesLatency((-3398));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTrafficClass("e%8 J@Ojy@>+9R");
      advancedSettings0.setClientSocketReceiveBufferSize((-3398));
      advancedSettings0.setPerformancePreferencesLatency((-1082));
      advancedSettings0.setBacklog((-1796));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setMaxThreadsForNioWrite((-3398));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.toXML("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getCharset();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getBacklog();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.toXML("e%8 J@Ojy@>+9R");
      assertEquals((-1082), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.124771615329544
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-646));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesBandwidth(1803);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(309);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize((-481));
      advancedSettings0.setClientSocketTrafficClass("af$=PziVOK:ntwd#\"e");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getDebugNonBlockingMode();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(1803, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6511351440615436
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger(857);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger(857);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientIdentifier();
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings1.setSocketLinger((-1));
      advancedSettings1.setClientSocketTrafficClass("</performance-preferences-connection-time>\n");
      advancedSettings0.setSocketLinger(0);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings1.setClientSocketTcpNoDelay(true);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.445950210786335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getCharset();
      advancedSettings0.toXML("ISO-8859-1");
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesLatency((-3435));
      advancedSettings0.setClientSocketTrafficClass("+nYr7fjMS5PLDQ6{");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setCharset("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("+nYr7fjMS5PLDQ6{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // +nYr7fjMS5PLDQ6{
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5324490213524977
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger((-1258));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger((-1373));
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setSocketLinger(527);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      advancedSettings1.setClientSocketTcpNoDelay(false);
      advancedSettings2.setClientSocketSendBufferSize(1);
      advancedSettings1.getSocketLinger();
      advancedSettings2.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      assertEquals(1, advancedSettings2.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6664350256923965
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesLatency((-357));
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientSocketReceiveBufferSize(585);
      advancedSettings0.toXML("\t<client-socket-send-buffer-size>");
      advancedSettings0.setClientSocketReceiveBufferSize((-357));
      advancedSettings0.setPerformancePreferencesBandwidth((-357));
      advancedSettings0.setMaxThreadsForNioWrite((-357));
      advancedSettings0.setMaxThreadsForNioWrite((-357));
      advancedSettings0.setClientSocketReceiveBufferSize(585);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesConnectionTime((-611));
      advancedSettings0.setQSObjectPoolMaker("R8?>qrQjQF");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize((-611));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-611), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4578498912420974
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger((-1258));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger((-1373));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setSocketLinger(527);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.net.server.impl.OptimisticClientIdentifier");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.net.server.impl.OptimisticClientIdentifier
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("c");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // c
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2183004874823533
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("U<X.p)~Zm}3u");
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.setPerformancePreferencesBandwidth(562);
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(10, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(562, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.811673503197605
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setSocketLinger(0);
      String string0 = advancedSettings0.toXML("l[.>sj6`4");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setMaxThreadsForNioWrite(1640);
      advancedSettings0.setMaxThreadsForNioWrite(296);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-connection-time>\n");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier(string0);
      advancedSettings0.setClientSocketTrafficClass(":HsG^z3E(");
      advancedSettings0.setClientSocketTrafficClass(string0);
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("l[.>sj6`4");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // l[.>sj6`4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.669589308166085
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(32);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("K.HonG ^");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesConnectionTime(201);
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.483026892304163
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize((-1455));
      advancedSettings0.toXML("'w_OMt");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTrafficClass("'w_OMt");
      assertEquals((-1), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3786367172396226
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger((-2303));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("@~=)X");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setSocketLinger((-2303));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-2303));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-2303), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9248862457686378
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency(2748);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(2748);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setSocketLinger((-4301));
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize(2748);
      advancedSettings0.getBacklog();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize((-4301));
      assertEquals(2748, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6991424665098624
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(5);
      advancedSettings0.setSocketLinger(5);
      advancedSettings0.getClientIdentifier();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getClientSocketTcpNoDelay();
      advancedSettings2.setSocketLinger(507);
      advancedSettings1.setClientSocketTrafficClass("KyPtn&.'2U=ni");
      advancedSettings0.setSocketLinger(507);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setBacklog(1);
      advancedSettings3.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings2.setClientSocketTcpNoDelay(false);
      advancedSettings2.getSocketLinger();
      assertEquals(507, advancedSettings2.getSocketLinger());
      
      advancedSettings3.getClientIdentifier();
      assertEquals(65536, advancedSettings3.getByteBufferSize());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5831222243737346
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setSocketLinger((-2145));
      advancedSettings0.getClientSocketTrafficClass();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings1.setSocketLinger((-2145));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTrafficClass("0;");
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings2.setCharset("");
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      // Undeclared exception!
      try { 
        advancedSettings3.setCharset("]g2[R/uQ5SW5M");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]g2[R/uQ5SW5M
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6930121983106288
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger((-2303));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setSocketLinger((-2303));
      advancedSettings0.setClientSocketTrafficClass("");
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger((-1258));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger((-1258));
      advancedSettings0.setClientSocketTrafficClass("*yNZNS$vmG");
      advancedSettings0.setSocketLinger((-1373));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-1373), advancedSettings0.getSocketLinger());
      
      advancedSettings2.setClientSocketTcpNoDelay(false);
      int int0 = advancedSettings2.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(142);
      advancedSettings0.setPerformancePreferencesLatency((-617));
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(142, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier(";.Q+O@jpg<b'(]Iq");
      advancedSettings0.setClientIdentifier("</performance-prferences-connection-time>\n");
      assertEquals("</performance-prferences-connection-time>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5284747661257034
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger((-1258));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger((-1373));
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setSocketLinger(527);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.toXML("Jk05`}9QXDwY`$S");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset(";Fo}HAX6OY8%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;Fo}HAX6OY8%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(3803);
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(3803, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.setPerformancePreferencesBandwidth(36);
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(36, int0);
  }
}
