/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:11:56 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.CallableStatementWrapper;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.awt.AWTEventMulticaster;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.FocusTraversalPolicy;
import java.awt.event.ComponentListener;
import java.awt.event.HierarchyListener;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "/*foo*/ select distinct * from foos foo order by foo.bar, foo.baz";
      String string1 = " DEFAULT NULL";
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/*foo*/ select distinct * from foos foo order by foo.bar, foo.baz");
      String string2 = ") has a particular foreign ";
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      CallableStatementWrapper callableStatementWrapper0 = null;
      try {
        callableStatementWrapper0 = new CallableStatementWrapper((CallableStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener1);
      AWTEventMulticaster.remove(componentListener1, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.addComponentListener((ComponentListener) null);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      containerOrderFocusTraversalPolicy0.getFirstComponent(defaultTreeCellRenderer0);
      defaultTreeCellRenderer0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getLeafIcon();
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), (-4218));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7135278823521747
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      boolean boolean0 = DBUtil.typesAreEquivalent(8, 8);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("null", "wMMWwz@nHB;F&krk", " schema=", "", 8, "wMMWwz@nHB;F&krk", 65535, 1381, 65535, (-2261), "wMMWwz@nHB;F&krk", "null", (-5), 65535, "=");
      DBUtil.isBinaryType(tableColumnInfo0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.PROC_TYPE_DBO;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType.createNewDatabaseObjectType("=");
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      ImageIcon imageIcon0 = new ImageIcon();
      boolean boolean1 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = DBUtil.typesAreEquivalent(1, 1193);
      assertFalse(boolean2);
      
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[4];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals(", , , ", string0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(8, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      int int0 = 3;
      DBUtil.typesAreEquivalent(3, 16);
      dBCopyPlugin0.getSourceSession();
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "key";
      stringArray0[1] = "key";
      String string0 = "1\\E9q-xPb{p#GvVJ";
      stringArray0[2] = "1E9q-xPb{p#GvVJ";
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("JzXs!}", "JzXs!}", (String) null, (String) null, 928, "JzXs!}", 581, 928, 928, (-7), " )", "JzXs!}", 1715, 1715, "JzXs!}");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      ComponentListener componentListener2 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      ComponentListener componentListener3 = AWTEventMulticaster.add(componentListener2, componentListener2);
      AWTEventMulticaster.remove(componentListener3, componentListener2);
      DatabaseObjectType.createNewDatabaseObjectType("RENAME TO");
      DatabaseObjectType.createNewDatabaseObjectType("null");
      DatabaseObjectType.createNewDatabaseObjectType("RENAME TO", (Icon) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.replaceDistinctDataType(2001, tableColumnInfo0, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("JzXs!}", "JzXs!}", (String) null, (String) null, 928, "JzXs!}", 581, 928, 928, (-7), "JzXs!}", "JzXs!}", 1715, 1715, "JzXs!}");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      ComponentListener componentListener2 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      AWTEventMulticaster.add(componentListener2, componentListener2);
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("Derby", (String) null, (String) null, (String) null, 928, "Derby", (-874), 1111, (-3905), (-3905), "Derby", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1715, (-7), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" that matched ", " that matched ", (String) null, "_BK4", (-2), " that matched ", 1111, (-2), (-2), 1206, (String) null, (String) null, (-1358), 493, "_BK4");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TRIGGER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginUserSettingsFolder();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      String string0 = "executeQuery: TimesTen allows a maximum fetch size of 128.  Altering preferred fetch size from ";
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("executeQuery: TimesTen allows a maximum fetch size of 128.  Altering preferred fetch size from ", "executeQuery: TimesTen allows a maximum fetch size of 128.  Altering preferred fetch size from ");
      fileWrapperFactoryImpl0.create(fileWrapperImpl0);
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      dBCopyPlugin0.getDestDatabaseObject();
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      DBUtil.typesAreEquivalent(2, 1201);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin3 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteMenuEnabled(false);
      ISession iSession0 = dBCopyPlugin3.getSourceSession();
      assertNull(iSession0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7204022064181919
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "`**Z&10J8!", "", "", 2001, "`**Z&10J8!", 2, 2, 2001, 6, "", "", (-5), 2001, "null");
      DBUtil.isBinaryType(tableColumnInfo0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.PROC_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("");
      DatabaseObjectType.createNewDatabaseObjectType("~_E`HdkrN");
      ImageIcon imageIcon0 = new ImageIcon();
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      boolean boolean1 = DBUtil.typesAreEquivalent(2001, 3239);
      assertTrue(boolean1 == boolean0);
      
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
      
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(2001, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "W[\"#X3", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-7), (String) null, (-3478), 1519, 27, (-9999), " )", (String) null, (-7), (-612), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", " )", (String) null, "-Jd@TS54(L>h0", 1304, (String) null, (-612), 38, (-1424), 2710, " )", "u)p>9", 1304, 8, "r}eYHqt{~6#[fzU***");
      // Undeclared exception!
      try { 
        DBUtil.getColumnList((TableColumnInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.FOREIGN_KEY;
      ImageIcon imageIcon0 = new ImageIcon();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("truncate", " schema=", "3;y&-Vt^<.O<V<W@", "null", (-11), "", (-29), 1158, 5, 2990, "net.soureforge.squirrel_sql.plugins.dbcopy.dbcopy", "", 777, (-29), "Tcd_%roTPScJ%");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDT_TYPE_DBO;
      boolean boolean0 = DBUtil.typesAreEquivalent(2657, (-748));
      assertFalse(boolean0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType(2657, tableColumnInfo0, (ISession) null);
      assertEquals(2657, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      ImageIcon imageIcon0 = new ImageIcon();
      TableColumnInfo tableColumnInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8137821552104612
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent((-69), (-69));
      assertTrue(boolean0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(vector0);
      DBUtil.convertTableToObjectList(list0);
      dBCopyPlugin0.setSourceDatabaseObjects(vector0);
      dBCopyPlugin0.getDestSession();
      DBUtil.getLastStatementValues();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[5];
      List<ITableInfo> list1 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertEquals(5, list1.size());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5814742493461305
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("JzXs!}", "JzXs!}", (String) null, (String) null, 928, "JzXs!}", 581, 928, 928, (-7), " )", "JzXs!}", 1715, 1715, "JzXs!}");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER;
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      ComponentListener componentListener2 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      ComponentListener componentListener3 = AWTEventMulticaster.add(componentListener2, componentListener2);
      AWTEventMulticaster.remove(componentListener3, componentListener2);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("RENAME TO");
      DatabaseObjectType.createNewDatabaseObjectType("null");
      ImageIcon imageIcon0 = new ImageIcon();
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean1 = DBUtil.typesAreEquivalent(92, 1193);
      assertFalse(boolean1);
      
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      DBUtil.getColumnList(tableColumnInfoArray0);
      DBUtil.convertObjectArrayToTableList(tableColumnInfoArray0);
      boolean boolean2 = DBUtil.typesAreEquivalent(92, 92);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LjY");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "S'BY,&(a");
      dBCopyPlugin0.getPluginAppSettingsFolder();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      dBCopyPlugin0.setSourceDatabaseObjects(arrayList0);
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "LjY");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("null", "null", "U72s", (String) null, 1143, (String) null, 1143, 1143, (-3433), 3061, (String) null, "U72s", (-3433), (-320), "p");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      String string0 = DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.08746716958
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "3I;7}7TptwiA");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      ImageIcon imageIcon0 = new ImageIcon();
      int int0 = 2001;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("!&", "!&", "DBUtil.info.bindcloblength", "@*Mu!`K@`", 1699, "W[\"#X3", 1699, 1699, 1699, 2001, "!&", "net.soureforge.squirrel_sql.plugins.dbcopy.dbcopy", (-1473), 1699, "clob");
      DBUtil.isBinaryType(tableColumnInfo0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.typesAreEquivalent((-1473), (-411));
      dBCopyPlugin0.setPasteMenuEnabled(true);
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[7];
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      tableColumnInfoArray0[2] = tableColumnInfo0;
      tableColumnInfoArray0[3] = tableColumnInfo0;
      tableColumnInfoArray0[4] = tableColumnInfo0;
      tableColumnInfoArray0[5] = tableColumnInfo0;
      tableColumnInfoArray0[6] = tableColumnInfo0;
      DBUtil.getColumnList(tableColumnInfoArray0);
      DBUtil.replaceDistinctDataType(920, tableColumnInfo0, (ISession) null);
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(tableColumnInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDT_TYPE_DBO;
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getSourceDatabaseObjects();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3877928367734838
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "`**Z&10J8!", "", "", 2001, "`**Z&10J8!", 2, 2, 2001, 6, "", "", (-5), 2001, "null");
      DBUtil.isBinaryType(tableColumnInfo0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATATYPE;
      DatabaseObjectType.createNewDatabaseObjectType("`**Z&10J8!");
      DatabaseObjectType.createNewDatabaseObjectType("");
      ImageIcon imageIcon0 = new ImageIcon();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.typesAreEquivalent(1409, 2001);
      int int0 = 796;
      DBUtil.typesAreEquivalent(2001, 796);
      ISession iSession0 = null;
      TableColumnInfo tableColumnInfo1 = null;
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0869615765973233
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Ii]1260v[1", "<Bi[}5Bhfz|iEg", "AQHZ}Bt@mD", "numeric($p)", (-8), "", 720, 1143, (-8), 1860, "9", (String) null, 720, 720, "");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.DATABASE_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      boolean boolean1 = DBUtil.typesAreEquivalent(1860, 16);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("_`Up>", "l&rIeWe!Zy!x;r|0O", "destTableName", "(zPT{7WZ", (-1744), "_`Up>", (-1744), 1193, (-1744), 1193, "l&rIeWe!Zy!x;r|0O", "l&rIeWe!Zy!x;r|0O", 928, 16, "JzXs!}");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals((-1744), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5884672563391373
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      DBUtil.typesAreEquivalent(8, 8);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("null", "wMMWwz@nHB;F&krk", " schema=", "", 8, "wMMWwz@nHB;F&krk", 65535, 1381, 65535, (-2261), "wMMWwz@nHB;F&krk", "null", (-5), 65535, "=");
      DBUtil.isBinaryType(tableColumnInfo0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.PROC_TYPE_DBO;
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      DatabaseObjectType.createNewDatabaseObjectType("TRUNCATE TABLE ", (Icon) null);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATATYPE;
      DatabaseObjectType.createNewDatabaseObjectType(" schema=");
      ImageIcon imageIcon0 = new ImageIcon();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.typesAreEquivalent((-2261), (-5));
      DBUtil.typesAreEquivalent((-1744), (-4218));
      ISession iSession0 = null;
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate((ISQLConnection) null, "UJ}y5+{SPClS&QvLb0", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("8 C`", ",z?kC4s@;eD<D j6E4", " CASCADE", (String) null, 2958465, "", (-532), (-3005), (-3005), (-291), "TJsR7Nv}#g4/=A", " CASCADE", (-1908874351), (-1165), "");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TABLE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDT;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDT_TYPE_DBO;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setCopyMenuEnabled(false);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LFj!");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.unload();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getPluginAppSettingsFolder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin1, (ITableInfo) null, "LFj!", "@j.rO", "Oaq!5D6c692Ci|5oB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "", "select ", "6", 1374, "java.lang.Integer", 1374, 32765, 23505, 1003, "7\"x1&_nT\"9|", " ableame=", 1374, 2011, "7\"x1&_nT\"9|");
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      SchemaInfo schemaInfo1 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, schemaInfo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("u1;s_-8N @CzzkGo", "", "\")EX%z'Mhr", "", (-104), "", (-104), (-104), 2, 2, "\")EX%z'Mhr", "\")EX%z'Mhr", 3089, (-104), "\")EX%z'Mhr");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType((-104), tableColumnInfo0, (ISession) null);
      assertEquals((-104), int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "W[\"#X3", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-7), (String) null, (-3478), 1519, 27, (-9999), " )", (String) null, (-7), (-612), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, "8 C`", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      ComponentListener componentListener1 = AWTEventMulticaster.add((ComponentListener) null, componentListener0);
      ComponentListener componentListener2 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener2);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener2);
      AWTEventMulticaster.add(componentListener1, componentListener2);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.addComponentListener(componentListener1);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HSQLDB");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "usernAame";
      int int0 = 2075;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, " schmQ=", "net.sourceforge.squirrel_sql.fw.util.PropertyChangeReporter", "1", 40000, " schmQ=", 40000, 40000, 40000, 40000, "X6s6|j9{RT'Jyx}", "usernAame", 40000, 2075, "DELETE FROM ");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getLeafIcon();
      Icon icon1 = defaultTreeCellRenderer0.getLeafIcon();
      DatabaseObjectType.createNewDatabaseObjectType((String) null, icon1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("net.sourceforge.squirrel_sql.fw.util.PropertyChangeReporter", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("net.sourceforge.squirrel_sql.fw.util.PropertyChangeReporter");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBUtil.isBinaryType(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("]Z@xe|2##Gkf~", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "8 C`", (String) null, 1237, (String) null, 12, 1237, 50000, (-4), (String) null, "8 C`", 8, 63, (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFocusTraversalPolicy();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener1);
      ComponentListener componentListener2 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      defaultTreeCellRenderer0.addComponentListener(componentListener2);
      defaultTreeCellRenderer0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      defaultTreeCellRenderer0.getLeafIcon();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(1237, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBUtil.typesAreEquivalent((-69), (-69));
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(vector0);
      DBUtil.convertTableToObjectList(list0);
      dBCopyPlugin0.setSourceDatabaseObjects(vector0);
      dBCopyPlugin0.getDestSession();
      DBUtil.fixCase((ISession) null, (String) null);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      ITableInfo iTableInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin1, (String) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select sequence_name from information_schema.system_sequences");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric($p,$s)");
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      DBUtil.typesAreEquivalent(16, (-2584));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      linkedList0.add((IDatabaseObjectInfo) null);
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(linkedList0);
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      assertFalse(list1.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBUtil.setLastStatement("H$sA[QT/gra)R/.+A/");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      String string0 = "ALTER TABLE $tableName$ ADD $constraint$ $constraintName$ UNIQUE $index$ $indexName$ $indexType$ ($columnName;  separator=\",\"$)";
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "H$sA[QT/gra)R/.+A/", "H$sA[QT/gra)R/.+A/", "ALTER TABLE $tableName$ ADD $constraint$ $constraintName$ UNIQUE $index$ $indexName$ $indexType$ ($columnName;  separator=\",\"$)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "/*foo*/ select distinct * from foos foo order+by foo.bar, foo.baz";
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("/*foo*/ select distinct * from foos foo order+by foo.bar, foo.baz", (String) null, "~", foreignKeyInfo0, dBCopyPlugin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.unload();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.addComponentListener((ComponentListener) null);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      defaultTreeCellRenderer0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      defaultTreeCellRenderer1.addHierarchyListener((HierarchyListener) null);
      defaultTreeCellRenderer1.getLeafIcon();
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      defaultTreeCellRenderer0.addComponentListener((ComponentListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer2.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      defaultTreeCellRenderer1.getLeafIcon();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "U=1", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "/k5>gRRHT8Am:k:;M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)8;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)8;
      byteArray1[4] = (byte)98;
      byteArray1[5] = (byte)101;
      byteArray1[6] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      DBUtil.setLastStatementValues("P;+7~2KN=l?");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      String string0 = dBCopyPlugin0.getPluginJarFilePath();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      String string1 = DBUtil.fixCase((ISession) null, "");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener1);
      AWTEventMulticaster.remove(componentListener1, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.addComponentListener((ComponentListener) null);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      containerOrderFocusTraversalPolicy0.getFirstComponent(defaultTreeCellRenderer0);
      defaultTreeCellRenderer0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("X?5nf.y!:1&", "X?5nf.y!:1&", "X?5nf.y!:1&", "X?5nf.y!:1&", Integer.MIN_VALUE, "X?5nf.y!:1&", Integer.MIN_VALUE, 244, 244, Integer.MIN_VALUE, ";]ZuP2^dfw;", "$qNH)Kc", 244, Integer.MIN_VALUE, "$qNH)Kc");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, "$qNH)Kc", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, ")is not null - this is probably a bug.", "=642", " CASCADE", 0, ")is not null - this is probably a bug.", (-290), (-7), (byte)16, 881, " CASCADE", (String) null, (-3), 93, "0");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      dBCopyPlugin0.setDestSession((ISession) null);
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("JzXs!}", "JzXs!}", (String) null, (String) null, 928, "_`Up>", 563, 928, 928, (-7), " )", "JzXs!}", 1698, 1698, "JzXs!}");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFocusTraversalPolicy();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      ComponentListener componentListener2 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      ComponentListener componentListener3 = AWTEventMulticaster.add(componentListener2, componentListener2);
      ComponentListener componentListener4 = AWTEventMulticaster.remove(componentListener3, componentListener2);
      AWTEventMulticaster.add(componentListener3, componentListener4);
      AWTEventMulticaster.remove(componentListener4, componentListener2);
      ComponentListener componentListener5 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      ComponentListener componentListener6 = AWTEventMulticaster.remove(componentListener5, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, componentListener6);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(928, int0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getSourceSession();
      String string0 = null;
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "8 C`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "z/s0]!v#A(uYM", "z/s0]!v#A(uYM", "", 1158);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      ImageIcon imageIcon0 = new ImageIcon();
      dBCopyPlugin0.setDestSession((ISession) null);
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "\"8$.fHBht1v=7", "net.soureforge.squirrel_sql.plugins.dbcopy.dbcopy", "W[\"#X3", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBUtil dBUtil0 = new DBUtil();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[4];
      String string0 = "";
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.addComponentListener((ComponentListener) null);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      containerOrderFocusTraversalPolicy0.getFirstComponent(defaultTreeCellRenderer0);
      defaultTreeCellRenderer0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.getLeafIcon();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, (String) null, "65PmMs5mY7JotX&+jM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HSQLDB");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "HSQLDB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.addComponentListener((ComponentListener) null);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      defaultTreeCellRenderer0.getFocusTraversalPolicy();
      defaultTreeCellRenderer0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getLeafIcon();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("^v]S", "m5^!*+aMNUh", "^v]S", (ISession) null, false, 1181);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
