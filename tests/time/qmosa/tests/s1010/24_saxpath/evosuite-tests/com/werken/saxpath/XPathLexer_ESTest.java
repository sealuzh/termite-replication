/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:46:53 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.249078616195083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.s]xpath.XPath2exer");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals("]", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("h", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(31, token5.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      Token token6 = xPathLexer0.rightParen();
      assertEquals("a", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.not();
      assertEquals("h", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals("2", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer0.isIdentifierChar('R');
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals("x", token11.getTokenText());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
      assertEquals("er", token12.getTokenText());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals("er", token13.getTokenText());
      assertEquals(22, token13.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.s]xpath.XPath2exer");
      xPathLexer1.mod();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.s]xpath.XPath2exer");
      xPathLexer2.getXPath();
      Token token14 = xPathLexer0.nextToken();
      assertEquals("", token14.getTokenText());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1262246766091386
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer("YPOwrL&b&u>jR");
      xPathLexer2.and();
      xPathLexer1.operatorName();
      xPathLexer2.nextToken();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("o", token2.getTokenText());
      
      xPathLexer1.isIdentifierStartChar(']');
      xPathLexer0.and();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      xPathLexer2.colon();
      xPathLexer0.star();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("e", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("r", token6.getTokenText());
      
      xPathLexer0.div();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token7 = xPathLexer0.rightParen();
      assertEquals("k", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("b", token8.getTokenText());
      
      xPathLexer2.or();
      Token token9 = xPathLexer0.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("en.saxpath.Token", token9.getTokenText());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3300287847757346
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.consume((-978));
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.791803321328631
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s)Pa}=fhL 53HK8ns\"w");
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.star();
      xPathLexer0.isIdentifierStartChar('p');
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("s)Pa}=fhL 53HK8ns\"w");
      xPathLexer1.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("s)Pa}=fhL 53HK8ns\"w");
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer1.nextToken();
      xPathLexer1.leftParen();
      xPathLexer0.isIdentifierStartChar('*');
      xPathLexer0.and();
      xPathLexer1.rightBracket();
      xPathLexer1.colon();
      xPathLexer0.star();
      xPathLexer1.plus();
      xPathLexer0.star();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.and();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.rightParen();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.953472679413021
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$:(Z`[&C~@x ");
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.or();
      Token token1 = xPathLexer0.dollar();
      assertEquals("$", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      token0.toString();
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("Z", token3.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('n');
      assertTrue(boolean0);
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("`", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.colon();
      Token token5 = xPathLexer0.star();
      assertEquals("&", token5.getTokenText());
      
      Token token6 = xPathLexer1.plus();
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer0.setPreviousToken(token2);
      assertEquals(":", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals("~@", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      char char0 = xPathLexer2.LA(2587);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9076184031003824
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('C');
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer1.star();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.setPreviousToken((Token) null);
      xPathLexer0.notEquals();
      xPathLexer2.dollar();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token0 = xPathLexer4.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6925902949623004
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")F3hl\"qsN{2)J5V");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.722761155755033
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      xPathLexer0.minus();
      xPathLexer0.star();
      xPathLexer0.isIdentifierStartChar('*');
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("?|='1cN");
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('C');
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.div();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.rightParen();
      xPathLexer0.dollar();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8634157989936275
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s)Pa}=fhL 53HK8ns\"w");
      xPathLexer0.rightBracket();
      xPathLexer0.star();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("h", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("5", token5.getTokenText());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("3", token6.getTokenText());
      
      Token token7 = xPathLexer0.equals();
      Token token8 = xPathLexer0.colon();
      assertEquals("K", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("s)Pa}=fhL 53HK8ns\"w");
      xPathLexer1.consume();
      xPathLexer0.getXPath();
      xPathLexer0.doubleColon();
      xPathLexer1.or();
      xPathLexer1.setPreviousToken(token2);
      assertEquals(19, token2.getTokenType());
      assertEquals("}=", token2.getTokenText());
      
      Token token10 = xPathLexer0.plus();
      assertEquals("\"", token10.getTokenText());
      
      String string0 = token7.toString();
      assertEquals("[ (21) (H)", string0);
      
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      assertEquals(")", token11.getTokenText());
      
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token7);
      Token token12 = xPathLexer1.notEquals();
      assertEquals("}=", token12.getTokenText());
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer1.identifier();
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1391887665298213
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.LA(476);
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.getPreviousToken();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9169660915750661
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$:(Z`[&C~@x ");
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('n');
      Token token1 = xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer1.and();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer3.notEquals();
      Token token3 = xPathLexer3.identifier();
      assertNotSame(token3, token1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8656840517364275
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$:(Z`[&C~@x ");
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('n');
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.comma();
      XPathLexer xPathLexer3 = new XPathLexer(" YHNF;2p0m'w[Cci0a");
      xPathLexer3.pipe();
      xPathLexer3.dots();
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("[ (15) ()");
      xPathLexer1.rightParen();
      xPathLexer1.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.consume(1);
      assertNotSame(xPathLexer5, xPathLexer4);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6771643546657269
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "s)Pa}=fhL 53HK8ns\"w";
      XPathLexer xPathLexer0 = new XPathLexer("s)Pa}=fhL 53HK8ns\"w");
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("s)Pa}=fhL 53HK8ns\"w");
      xPathLexer1.and();
      xPathLexer0.operatorName();
      xPathLexer0.not();
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('D');
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.colon();
      Token token0 = xPathLexer2.star();
      xPathLexer0.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer2.star();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1218529440113216
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("m.", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.rightParen();
      assertEquals("e", token5.getTokenText());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("rken.saxpath.XPathLexer", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftParen();
      assertEquals(1, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("l~fRdpf");
      xPathLexer1.setXPath("`:rxN3");
      xPathLexer0.identifier();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7784633351649746
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("c", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("2<Shb}6@~mq");
      Token token2 = xPathLexer2.at();
      assertEquals("2", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("J");
      Token token3 = xPathLexer3.dots();
      assertEquals("J", token3.getTokenText());
      
      xPathLexer3.doubleColon();
      xPathLexer3.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer1.rightBracket();
      Token token4 = xPathLexer3.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(")");
      xPathLexer4.and();
      Token token5 = xPathLexer4.leftParen();
      assertEquals(")", token5.getTokenText());
      
      xPathLexer1.operatorName();
      char char0 = xPathLexer0.LA(92);
      assertEquals('\uFFFF', char0);
      
      xPathLexer3.div();
      xPathLexer0.or();
      xPathLexer4.rightBracket();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer2.mod();
      xPathLexer3.mod();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.leftParen();
      Token token7 = xPathLexer1.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer3.getXPath();
      Token token8 = xPathLexer0.nextToken();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer3.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer4.colon();
      assertEquals(18, token10.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8443366458094153
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("c", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token1 = xPathLexer1.star();
      assertEquals("c", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("2<Shb}6@~mq");
      Token token2 = xPathLexer2.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("2", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer3.dollar();
      assertEquals("c", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer3.dots();
      Token token4 = xPathLexer3.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer1.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer3.nextToken();
      Token token7 = xPathLexer3.getPreviousToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("werken.saxpath.XPathLexer", token7.getTokenText());
      
      xPathLexer3.rightParen();
      Token token8 = xPathLexer2.dots();
      assertEquals("<", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.setXPath("2<Shb}6@~mq");
      Token token9 = xPathLexer2.leftParen();
      assertEquals(1, token9.getTokenType());
      assertEquals("S", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("#-LfM8Z)IOGl59");
      xPathLexer3.setXPath("2<Shb}6@~mq");
      xPathLexer4.identifier();
      xPathLexer2.hasMoreChars();
      Token token10 = xPathLexer4.notEquals();
      assertEquals(22, token10.getTokenType());
      assertEquals("#-", token10.getTokenText());
      
      Token token11 = xPathLexer1.rightParen();
      assertEquals(2, token11.getTokenType());
      assertEquals("m", token11.getTokenText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0420156578919113
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1xU#5]p]");
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("1xU#5]p]");
      xPathLexer0.getXPath();
      xPathLexer1.doubleColon();
      xPathLexer0.number();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer("/UpM");
      xPathLexer2.leftBracket();
      xPathLexer0.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.pipe();
      XPathLexer xPathLexer4 = new XPathLexer("29X0x|l:q");
      xPathLexer4.minus();
      xPathLexer4.dots();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer2.rightParen();
      xPathLexer5.div();
      xPathLexer5.consume(25);
      assertEquals("", xPathLexer5.getXPath());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0839064660381217
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierStartChar('*');
      XPathLexer xPathLexer1 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer1.leftParen();
      xPathLexer1.whitespace();
      xPathLexer1.relationalOperator();
      xPathLexer1.setXPath(")");
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("vY|b=k7BkCm/6");
      xPathLexer2.and();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("TCTyZT^'QuqOJPO98*g");
      xPathLexer3.nextToken();
      xPathLexer2.leftParen();
      xPathLexer0.isIdentifierStartChar('');
      xPathLexer0.and();
      xPathLexer1.rightBracket();
      xPathLexer2.colon();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer1.equals();
      xPathLexer1.div();
      xPathLexer3.and();
      XPathLexer xPathLexer4 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.rightParen();
      xPathLexer1.rightParen();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6993195797441225
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(5t");
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('C');
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer0.star();
      xPathLexer1.plus();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9622769621690397
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.isIdentifierStartChar('*');
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("");
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('C');
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.rightParen();
      xPathLexer0.dollar();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7830284589286267
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "G+R-R7H&%}%";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer3.star();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4762930118635165
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("");
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("$dEi-Nad#13");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.whitespace();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.consume(0);
      assertEquals("$dEi-Nad#13", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.077488220551265
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("$dEi-Nad#13");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.consume((-1799));
      assertEquals("$dEi-Nad#13", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9683022485933952
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(5t");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("5", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("/Bt+IS`J|8#t6At%faU");
      xPathLexer1.relationalOperator();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      Token token4 = xPathLexer2.getPreviousToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer2.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer1.setXPath("#uE!O");
      Token token7 = xPathLexer1.leftParen();
      assertEquals(1, token7.getTokenType());
      assertEquals("#", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("^Q[Vk");
      xPathLexer3.setXPath("[ (");
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer2.hasMoreChars();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer3.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("[", token10.getTokenText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1344560069174987
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("(5t");
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('C');
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer0.star();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.star();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      Token token1 = xPathLexer2.literal();
      assertNull(token1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1604994330997624
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.number();
      assertEquals("", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("R", token1.getTokenText());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals("-", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals("7", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("H", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.doubleColon();
      xPathLexer0.star();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      String string0 = token7.toString();
      assertEquals("[ (19) (}%)", string0);
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token10);
      
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token7);
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.identifier();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0520251371236844
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer0.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.pipe();
      xPathLexer0.dots();
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.consume(121);
      assertEquals("G+R-R7H&%}%", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.055084633544949
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("$^bgBH0 N&");
      xPathLexer0.getXPath();
      xPathLexer1.doubleColon();
      xPathLexer0.number();
      xPathLexer1.getXPath();
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer("[r.");
      xPathLexer2.leftBracket();
      xPathLexer1.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.pipe();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer5.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer("$^bgBH0 N&");
      xPathLexer1.rightParen();
      xPathLexer5.div();
      XPathLexer xPathLexer7 = new XPathLexer("Tu ;I");
      xPathLexer7.consume(25);
      assertNotSame(xPathLexer7, xPathLexer1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8498938923541794
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("G", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("+R", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("-", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals("R", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("7H", token5.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.getPreviousToken();
      xPathLexer0.mod();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer1.getXPath();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("G", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.113795431095789
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1xU#5]p]");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("1xU#5]p]");
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer("9.1A~^y Sx#oVBGCeC!");
      Token token2 = xPathLexer2.rightParen();
      assertEquals("9", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer1.dollar();
      assertEquals("1", token3.getTokenText());
      
      Token token4 = xPathLexer2.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
      
      xPathLexer0.colon();
      Token token5 = xPathLexer2.number();
      assertEquals("1", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.consume();
      xPathLexer1.getXPath();
      Token token6 = xPathLexer2.doubleColon();
      assertEquals("A~", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      xPathLexer2.number();
      xPathLexer1.getXPath();
      xPathLexer3.not();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer2.leftParen();
      assertEquals(1, token8.getTokenType());
      assertEquals("^", token8.getTokenText());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer3.getXPath();
      Token token10 = xPathLexer1.nextToken();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer3.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer1.colon();
      assertEquals("#", token12.getTokenText());
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5358634030102616
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      token0.toString();
      token0.toString();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.and();
      xPathLexer0.star();
      xPathLexer0.setXPath("[ (27) (m.werken.saxpath.T)");
      xPathLexer0.whitespace();
      xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.currentPosition();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.literal();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n)4oPl{>8gR:");
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.747039656690681
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer0.setXPath(") (");
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.div();
      xPathLexer1.setXPath(") (");
      xPathLexer0.identifier();
      xPathLexer1.hasMoreChars();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals(" (", token8.getTokenText());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      int int0 = (-2936);
      xPathLexer0.rightBracket();
      xPathLexer0.consume((-2936));
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.101666485088174
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.colon();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('$');
      XPathLexer xPathLexer1 = new XPathLexer("xFh8z1 \"<r5hxW$&. q");
      xPathLexer1.and();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer2.star();
      xPathLexer0.plus();
      xPathLexer2.star();
      xPathLexer1.colon();
      xPathLexer2.div();
      xPathLexer0.and();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer3.rightParen();
      xPathLexer1.dollar();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.100188207336756
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("+R", token2.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      Token token3 = xPathLexer0.rightParen();
      assertEquals("&", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer2.div();
      xPathLexer1.relationalOperator();
      Token token5 = xPathLexer2.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("G", token5.getTokenText());
      
      xPathLexer2.mod();
      xPathLexer2.mod();
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer2.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("+", token7.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer2.identifierOrOperatorName();
      Token token8 = xPathLexer2.dollar();
      assertEquals("&", token8.getTokenText());
      
      Token token9 = xPathLexer0.getPreviousToken();
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("G+R-R7H&%}%");
      Token token10 = xPathLexer3.dollar();
      assertEquals("G", token10.getTokenText());
      assertEquals(26, token10.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1724574834967414
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("+R", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("-", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("H", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("&", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("%", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("|$AN4]");
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNull(token9);
      
      Token token10 = xPathLexer2.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      xPathLexer3.getPreviousToken();
      Token token11 = xPathLexer2.dollar();
      assertEquals(26, token11.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9274851282441934
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('*');
      assertFalse(boolean0);
      
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("?|='1cN");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer1.not();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("?", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer1.isIdentifierChar(']');
      xPathLexer1.slashes();
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("|=", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("?|='1cN");
      Token token7 = xPathLexer2.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("?", token7.getTokenText());
      
      xPathLexer2.and();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("'", token8.getTokenText());
      
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals("1cN", token9.getTokenText());
      assertNotNull(token9);
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer3.comma();
      xPathLexer3.whitespace();
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer3.comma();
      assertEquals(32, token12.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2728219686342213
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume((-3155));
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('8');
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.078732197222184
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.number();
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.minus();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      xPathLexer0.setXPath("?j");
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      Token token6 = xPathLexer0.not();
      assertEquals("?", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals("j", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals("", token8.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftParen();
      assertEquals(1, token13.getTokenType());
      
      Token token14 = xPathLexer0.comma();
      assertEquals(32, token14.getTokenType());
      
      xPathLexer0.getXPath();
      Token token15 = xPathLexer0.nextToken();
      assertEquals((-1), token15.getTokenType());
      
      Token token16 = xPathLexer0.not();
      assertEquals(23, token16.getTokenType());
      
      Token token17 = xPathLexer0.colon();
      assertEquals(18, token17.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3342574818284936
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      xPathLexer0.or();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("");
      xPathLexer0.plus();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer1.star();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token11);
      
      XPathLexer xPathLexer3 = new XPathLexer("3|");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token11);
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer4.notEquals();
      assertEquals(22, token12.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.010262008616379
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.isIdentifierChar('R');
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      Token token8 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      assertEquals("com.werken.saxpath.Token", token8.getTokenText());
      
      Token token9 = xPathLexer1.equals();
      assertEquals("c", token9.getTokenText());
      assertEquals(21, token9.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0264483140581495
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.star();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.identifierOrOperatorName();
      String string0 = "";
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8398291912236586
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1xU#5]p]");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.at();
      assertEquals("1", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.or();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("1xU#5]p]");
      xPathLexer1.getPreviousToken();
      Token token3 = xPathLexer1.colon();
      assertEquals("1", token3.getTokenText());
      
      xPathLexer1.and();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('C');
      assertTrue(boolean0);
      
      xPathLexer1.and();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("x", token6.getTokenText());
      
      Token token7 = xPathLexer3.equals();
      assertEquals(21, token7.getTokenType());
      
      xPathLexer1.div();
      xPathLexer0.and();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.rightParen();
      Token token8 = xPathLexer1.rightParen();
      assertEquals("U", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      xPathLexer2.or();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.179148981190285
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.isIdentifierStartChar('6');
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.at();
      Token token1 = xPathLexer0.comma();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1626743882411628
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s)Pa}=fhL 53HK8ns\"w");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("s", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals(")", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("P", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("a", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("}=", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.rightBracket();
      xPathLexer0.whitespace();
      Token token5 = xPathLexer0.leftParen();
      assertEquals("5", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.comma();
      assertEquals("\"", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      Token token9 = xPathLexer0.whitespace();
      assertEquals((-2), token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      Token token10 = xPathLexer0.getPreviousToken();
      assertEquals("K8ns", token10.getTokenText());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.605300864486643
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("G", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.colon();
      assertEquals("&", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("%", token4.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer1.star();
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      xPathLexer4.mod();
      xPathLexer2.setPreviousToken(token2);
      assertEquals("+R", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token7 = xPathLexer4.notEquals();
      assertEquals("[ ", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      assertEquals("}", token9.getTokenText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9891517890357489
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s)Pa}=fhL 53HK8ns\"w");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.star();
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("P", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("a", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("}=", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("H", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("K8ns", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals("\"", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals("w", token8.getTokenText());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.000098279594301
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1938));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8444269250930367
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.or();
      Token token0 = xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4888559659298473
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.star();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.dots();
      xPathLexer0.consume(0);
      xPathLexer0.and();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.consume();
      xPathLexer0.setXPath("");
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.setXPath("");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.getPreviousToken();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.hasMoreChars();
      xPathLexer0.notEquals();
      xPathLexer0.consume((-1011));
      xPathLexer0.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.765903252575577
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.isIdentifierChar('T');
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer1.equals();
      xPathLexer1.identifier();
      xPathLexer1.nextToken();
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer1.slashes();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.currentPosition();
      xPathLexer0.dots();
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.mod();
      xPathLexer1.hasMoreChars();
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      xPathLexer1.currentPosition();
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
      
      int int0 = xPathLexer1.currentPosition();
      assertEquals(6, int0);
      
      Token token13 = xPathLexer0.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer0.rightBracket();
      assertEquals(4, token14.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.284575012500601
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      Token token0 = xPathLexer0.slashes();
      assertEquals("G", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("+R", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("-", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("R", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("&", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer1.mod();
      xPathLexer1.mod();
      Token token7 = xPathLexer0.comma();
      assertEquals("%", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertEquals("G", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      assertNotNull(token8);
      
      xPathLexer0.dollar();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token9 = xPathLexer0.dollar();
      assertEquals("%", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7701058037276587
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7892400071313963
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.isIdentifierStartChar('*');
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      xPathLexer0.mod();
      xPathLexer0.minus();
      xPathLexer0.minus();
      xPathLexer0.consume((-1));
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2395));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1364208589876528
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer("2<Shb}6@~mq");
      xPathLexer2.at();
      XPathLexer xPathLexer3 = new XPathLexer("J");
      xPathLexer3.dots();
      xPathLexer3.doubleColon();
      xPathLexer3.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer1.rightBracket();
      xPathLexer3.whitespace();
      XPathLexer xPathLexer4 = new XPathLexer(")");
      xPathLexer4.and();
      xPathLexer4.leftParen();
      xPathLexer1.operatorName();
      xPathLexer0.LA(92);
      xPathLexer3.div();
      xPathLexer4.colon();
      xPathLexer0.or();
      xPathLexer4.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer2.mod();
      xPathLexer3.mod();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer5.nextToken();
      xPathLexer1.comma();
      xPathLexer0.relationalOperator();
      xPathLexer2.identifierOrOperatorName();
      Token token0 = xPathLexer2.whitespace();
      xPathLexer5.getPreviousToken();
      xPathLexer3.dollar();
      Token token1 = xPathLexer3.plus();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7826388246523714
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("$dEi-Nad#13");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer1.star();
      xPathLexer1.rightParen();
      xPathLexer1.div();
      xPathLexer1.consume((-1799));
      assertNotSame(xPathLexer1, xPathLexer0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.379924051236344
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.number();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      xPathLexer0.setXPath("?j");
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      Token token8 = xPathLexer0.not();
      assertEquals("?", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals("j", token9.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.currentPosition();
      xPathLexer0.div();
      xPathLexer0.dots();
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token12 = xPathLexer0.not();
      assertEquals(23, token12.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("?j");
      Token token13 = xPathLexer2.identifier();
      assertEquals(15, token13.getTokenType());
      
      xPathLexer1.operatorName();
      Token token14 = xPathLexer0.dots();
      assertEquals(13, token14.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9203250692574616
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9948956478320894
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1xU#5]p]");
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.div();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath(")");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("4*Rv!D:Bp3Of(0S ");
      xPathLexer1.star();
      xPathLexer1.rightParen();
      xPathLexer0.div();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.706662659640568
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.dots();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.469419741862911
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G+R-R7H&%}%");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.number();
      assertEquals("", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("+R", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("7H", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.colon();
      assertEquals("&", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("%", token5.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer1.star();
      Token token6 = xPathLexer1.plus();
      assertEquals(5, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.and();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer1.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      xPathLexer4.relationalOperator();
      Token token8 = xPathLexer5.identifierOrOperatorName();
      assertNotNull(token8);
      
      Token token9 = xPathLexer5.slashes();
      assertEquals("[", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      xPathLexer2.comma();
      xPathLexer4.whitespace();
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("}", token10.getTokenText());
      
      Token token11 = xPathLexer5.comma();
      assertEquals(32, token11.getTokenType());
      assertEquals(" ", token11.getTokenText());
      
      Token token12 = xPathLexer2.rightParen();
      assertEquals(2, token12.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.0577029806499434
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.colon();
      assertEquals("c", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("o", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals("m", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.rightParen();
      assertEquals(".", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals("c", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.2115841956189664
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.identifier();
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.comma();
      Token token1 = xPathLexer1.nextToken();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.530161774479814
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Syc7.-vHexI%U5OV75`");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }
}
