/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:11:17 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader1.setIncludeExternalDTDDeclarations(true);
      MockFile mockFile0 = new MockFile("iblEc]=B*/M6C7", "!.xZv");
      mockFile0.mkdir();
      mockFile0.toPath();
      String string0 = ")?+BSdPU";
      MockFile mockFile1 = new MockFile("!.xZv");
      MockFile mockFile2 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy");
      MockFile mockFile3 = new MockFile(mockFile2, "");
      mockFile1.createNewFile();
      StringReader stringReader0 = new StringReader("wGL");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader1.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4440977644767425
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setEncoding("[58");
      String string0 = "http://xml.org/sax/features/use-locator2";
      sAXReader0.setValidation(false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(47);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"[58\". Nested exception: Invalid encoding name \"[58\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      MockFile mockFile0 = new MockFile("", "]xu%JVO");
      mockFile0.mkdir();
      mockFile0.toPath();
      String string0 = ",#{IQ?DTD~ybdw*n";
      MockFile mockFile1 = new MockFile(",#{IQ?DTD~ybdw*n");
      MockFile mockFile2 = new MockFile("org.dom4j.DefaultDocumentFactory.singleton.strategy");
      try { 
        sAXReader0.read("/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2586973529681456
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'm';
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(defaultHandler2_0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("&r{Z");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("This should never happen. Caught: ");
      sAXReader_SAXEntityResolver1.resolveEntity("This should never happen. Caught: ", "&r{Z");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver2.resolveEntity("&r{Z", "org.dom4j.io.SAXReader$SAXEntityResolver");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_0.endCDATA();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "file://");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      QName qName0 = defaultDocumentFactory0.createQName("]xu%JVO", "]xu%JVO", "");
      BeanElement beanElement0 = new BeanElement(qName0, defaultElement0);
      defaultElement0.elementTextTrim("");
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      beanElement0.element("", namespace0);
      defaultElement0.getUniquePath((Element) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDocumentFactory0.createAttribute((Element) defaultElement0, "http://xml.org/sax/features/validation", "]xu%JVO");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("]xu%JVO");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/validation", "");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.endEntity("");
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "http://xml.org/sax/features/use-locator2";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      MockFile mockFile0 = new MockFile("http://xml.org/sax/handlers/LexicalHandler", "Not supported yet.");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'x';
      charArray0[3] = '~';
      charArray0[4] = '7';
      charArray0[5] = '>';
      charArray0[6] = '~';
      xMLFilterImpl0.ignorableWhitespace(charArray0, (-1606), 47);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("http://xml.org/sax/features/string-interning", xMLFilterImpl1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'http://xml.org/sax/features/string-interning' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy");
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy";
      sAXReader_SAXEntityResolver0.resolveEntity("C[ngpg", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.endCDATA();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy/org.dom4j.io.ElementStack");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "]xu%JVO";
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      MockFile mockFile0 = new MockFile("", "]xu%JVO");
      mockFile0.mkdir();
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile(",#{IQ?DTD~ybdw*n");
      MockFile mockFile2 = new MockFile("org.dom4j.DefaultDocumentFactory.singleton.strategy");
      mockFile2.createNewFile();
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/string-interning");
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4684408338023998
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("*d=:Pc;&", "*d=:Pc;&");
      QName qName0 = QName.get("*d=:Pc;&", (Namespace) dOMNamespace0);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setMergeAdjacentText(false);
      StringReader stringReader0 = new StringReader("");
      String string0 = "S";
      try { 
        sAXReader0.read((Reader) stringReader0, "S");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2368639516889433
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("DocumentType");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver1.resolveEntity("WuXo", "O?[&w2iC\"zDF4Q");
      sAXReader_SAXEntityResolver2.resolveEntity("DocumentType", "O?[&w2iC\"zDF4Q");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader2 = new SAXReader();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      xMLReaderAdapter0.setDocumentLocator(locator2Impl1);
      SAXReader sAXReader3 = new SAXReader(true);
      try { 
        sAXReader3.configureReader(parserAdapter0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@3edc48b3 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0088';
      charArray0[1] = '{';
      charArray0[2] = '';
      charArray0[3] = '{';
      charArray0[4] = '\u0088';
      charArray0[5] = '4';
      charArray0[6] = '>';
      charArray0[7] = '{';
      xMLFilterImpl0.ignorableWhitespace(charArray0, 58, 0);
      defaultHandler2_0.endEntity("");
      try { 
        sAXReader0.setProperty("", xMLFilterImpl2);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: 
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.AbstractNode", "org.dom4j.tree.AbstractNode");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.installXMLFilter(parserAdapter0);
      sAXReader0.setEncoding("");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("@pH=F");
      sAXReader_SAXEntityResolver0.resolveEntity("@pH=F", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy");
      try { 
        parserAdapter0.setFeature("Text nodes cannot have children", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: Text nodes cannot have children
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.367603587234484
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      String string0 = " attributes: ";
      sAXReader0.setEncoding(" attributes: ");
      sAXReader0.installXMLFilter((XMLReader) null);
      String string1 = "P";
      StringReader stringReader0 = new StringReader("P");
      try { 
        sAXReader0.read((Reader) stringReader0, "P");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/P : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/62_dom4j");
      String string0 = "";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      String string1 = "['*+n^U}W0\\@Bg";
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("['*+n^U}W0@Bg");
      StringReader stringReader0 = new StringReader("['*+n^U}W0@Bg");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6846986167764855
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("xs.oQ{SKga\f");
      sAXReader_SAXEntityResolver0.resolveEntity("", "xs.oQ{SKga\f");
      sAXReader_SAXEntityResolver0.uriPrefix = "M.Qyn0,INul";
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      sAXReader_SAXEntityResolver0.resolveEntity("*d:TEYWf?5yLywy", "*d:TEYWf?5yLywy");
      sAXReader_SAXEntityResolver0.resolveEntity("*d:TEYWf?5yLywy", "E8LNM_qDOo&7");
      sAXReader_SAXEntityResolver0.resolveEntity("xs.oQ{SKga\f", "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      xMLFilterImpl0.getParent();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getDocumentFactory();
      sAXReader0.createXMLReader();
      sAXReader0.setStringInternEnabled(false);
      try { 
        sAXReader0.setFeature("[na~nUL", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: [na~nUL
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3127371030753396
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      String string0 = "P";
      StringReader stringReader0 = new StringReader("P");
      try { 
        sAXReader0.read((Reader) stringReader0, "P");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/P : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7287107014185685
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.startDocument();
      defaultHandler2_0.startDocument();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.removeHandler("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("");
      sAXReader0.createDefaultEntityResolver("");
      stringReader0.markSupported();
      defaultDocumentFactory0.createDocument("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0, 36);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.getXMLReader();
      sAXReader0.isValidating();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.setXMLReaderClassName("/ Z1(ct");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class / Z1(ct not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4440977644767417
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setXMLReader((XMLReader) null);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.addHandler("", pruningDispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("org.dom4j.tree.AbstractAttribute");
      try { 
        sAXReader0.read((Reader) stringReader0, "org.dom4j.tree.AbstractAttribute");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.AbstractAttribute : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      boolean boolean0 = false;
      ElementHandler elementHandler0 = null;
      sAXReader0.addHandler("", (ElementHandler) null);
      MockFile mockFile0 = new MockFile("");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      QName qName0 = defaultDocumentFactory0.createQName("]xu%JVO", "]xu%JVO", "");
      BeanElement beanElement0 = new BeanElement(qName0, defaultElement0);
      defaultElement0.elementTextTrim("");
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      beanElement0.element("", namespace0);
      defaultElement0.getUniquePath((Element) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDocumentFactory0.createAttribute((Element) defaultElement0, "http://xml.org/sax/features/validation", "]xu%JVO");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      
      DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("]xu%JVO");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/validation", "");
      sAXReader_SAXEntityResolver0.resolveEntity(" of document ", (String) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader1 = new SAXReader();
      boolean boolean0 = sAXReader1.isIgnoreComments();
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "}kLM@k+_1C=C";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("}kLM@k+_1C=C", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class }kLM@k+_1C=C not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4083420642013063
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.startDocument();
      defaultHandler2_0.startDocument();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      sAXReader0.getDocumentFactory();
      String string0 = "";
      sAXReader0.removeHandler("");
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.startDocument();
      defaultHandler2_0.startDocument();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.191845135233912
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("xs.oQ{SKga\f");
      sAXReader_SAXEntityResolver0.resolveEntity("", "xs.oQ{SKga\f");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("org.dom4j.tree.FlyweightProcessingInstruction");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy");
      sAXReader_SAXEntityResolver2.resolveEntity("org.dom4j.tree.FlyweightProcessingInstruction", "mrH| dMbg1");
      sAXReader_SAXEntityResolver2.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.configureReader(parserAdapter0, defaultHandler0);
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.218655583840207
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'm';
      charArray0[2] = '{';
      charArray0[3] = '>';
      charArray0[4] = '4';
      charArray0[5] = '\u0088';
      charArray0[6] = '7';
      xMLFilterImpl1.ignorableWhitespace(charArray0, 0, 0);
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      SAXReader sAXReader1 = new SAXReader();
      sAXReader0.createContentHandler(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@3d479225 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6179988782163717
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("xs.oQ{SKga\f");
      sAXReader_SAXEntityResolver0.resolveEntity("", "xs.oQ{SKga\f");
      sAXReader_SAXEntityResolver0.uriPrefix = "M.Qyn0,INul";
      String string0 = "E8LNM_qDOo&7";
      sAXReader_SAXEntityResolver0.resolveEntity("*d:TEYWf?5yLywy", "E8LNM_qDOo&7");
      sAXReader_SAXEntityResolver0.resolveEntity("xs.oQ{SKga\f", "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      try { 
        sAXReader0.configureReader(xMLFilterImpl1, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6592dda6 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      pruningDispatchHandler0.addHandler("X", pruningDispatchHandler1);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      pruningDispatchHandler0.setDefaultHandler(sAXModifyElementHandler0);
      pruningDispatchHandler0.removeHandler((String) null);
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.getDocumentFactory();
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      boolean boolean1 = sAXReader0.isIgnoreComments();
      assertFalse(boolean1 == boolean0);
      
      sAXReader0.setDefaultHandler(pruningDispatchHandler1);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3072109573039925
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      QName qName0 = defaultDocumentFactory0.createQName("]xu%JVO", "]xu%JVO", "");
      BeanElement beanElement0 = new BeanElement(qName0);
      defaultElement0.elementTextTrim("");
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      beanElement0.element("", namespace0);
      defaultElement0.getUniquePath((Element) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/properties/lexical-handler", "]xu%JVO");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      SAXReader sAXReader1 = new SAXReader();
      try { 
        sAXReader1.setFeature("", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      QName qName0 = QName.get("header");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.5381861691868464
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, false);
      sAXReader1.setValidation(false);
      sAXReader1.resetHandlers();
      String string0 = "4=S`GzG<w";
      try { 
        sAXReader1.read("4=S`GzG<w");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: 4=S`GzG<w Nested exception: no protocol: 4=S`GzG<w
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createDefaultEntityResolver("http://xml.org/sax/features/use-locator2");
      sAXReader0.getXMLReader();
      sAXReader0.setIgnoreComments(true);
      char[] charArray0 = new char[15];
      charArray0[0] = '<';
      charArray0[1] = '<';
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/features/use-locator2", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'http://xml.org/sax/features/use-locator2' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8344319225942862
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      sAXReader0.isValidating();
      String string0 = "2.0";
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("If8Ff8AEO&/z>", "2.0");
      DOMDocument dOMDocument0 = new DOMDocument(dOMDocumentType0);
      dOMDocument0.getLocalName();
      sAXReader0.getDocumentFactory();
      dOMDocument0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.getEncoding();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler("If8Ff8AEO&/z>", dispatchHandler0);
      sAXReader0.getXMLReader();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      String string1 = "";
      String string2 = "43VE#";
      try { 
        MockURL.URL("", "43VE#", 2688, "If8Ff8AEO&/z>");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      char[] charArray0 = new char[7];
      charArray0[1] = '\u0000';
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy", "");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_0.endCDATA();
      sAXReader0.removeHandler("3M\"CbpZFfs)J+rtDb5");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sAXReader0.getErrorHandler();
      sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.setStripWhitespaceText(true);
      String string0 = "eJe$T$J3+)c";
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.removeHandler("eJe$T$J3+)c");
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.isMergeAdjacentText();
      EntityResolver entityResolver0 = null;
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      String string1 = "Oh5O[6";
      try { 
        sAXReader0.setXMLReaderClassName("Oh5O[6");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class Oh5O[6 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3720491019563554
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("$4gv8Q_)E cbl");
      sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy", "Ey#H5U{");
      sAXReader_SAXEntityResolver0.resolveEntity(" : ", "B~Y``GbT|f");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setValidation(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      sAXReader0.createXMLReader();
      try { 
        sAXReader0.setFeature("", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
          sAXReader0.getXMLReader();
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor158.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor158.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'm';
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.processingInstruction("$aKfS%", "$aKfS%");
      xMLFilterImpl1.setDTDHandler(defaultHandler2_0);
      xMLFilterImpl1.characters(charArray0, 0, 2);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl2, false);
      sAXReader1.setXMLReader(xMLFilterImpl2);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl2);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      DocumentFactory documentFactory0 = sAXReader1.getDocumentFactory();
      assertNotNull(documentFactory0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      sAXReader0.createXMLReader();
      sAXReader1.getXMLReader();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(boolean0);
      
      sAXReader1.createXMLReader();
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2508570947192676
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("xs.oQ{SKga\f");
      sAXReader_SAXEntityResolver0.resolveEntity("", "xs.oQ{SKga\f");
      sAXReader_SAXEntityResolver0.uriPrefix = "M.Qyn0,INul";
      sAXReader_SAXEntityResolver0.resolveEntity("NIO24X", "C[ngpg");
      sAXReader_SAXEntityResolver0.resolveEntity("*d:TEYWf?5yLywy", "*d:TEYWf?5yLywy");
      char[] charArray0 = new char[0];
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      MockFile mockFile0 = new MockFile("['*+n^U}W0@Bg");
      URL uRL0 = mockFile0.toURL();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/['*+n^U}W0@Bg (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/['*+n^U}W0@Bg (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      MockFile mockFile0 = new MockFile("", "]xu%JVO");
      mockFile0.mkdir();
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile(")?+BSdPU");
      MockFile mockFile2 = new MockFile("wGL");
      MockFile mockFile3 = new MockFile(mockFile1, "");
      mockFile3.createNewFile();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read("wGL");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/wGL (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/wGL (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      MockFile mockFile0 = new MockFile("", "]xu%JVO");
      mockFile0.mkdir();
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile(")?+BSdPU");
      MockFile mockFile2 = new MockFile("]xu%JVO", ")?+BSdPU");
      MockFile mockFile3 = new MockFile(mockFile1, "");
      mockFile3.createNewFile();
      InputSource inputSource0 = new InputSource((Reader) null);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2610316958599697
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0088';
      charArray0[1] = '4';
      charArray0[2] = '';
      charArray0[3] = '{';
      charArray0[4] = '\u0088';
      charArray0[5] = '4';
      charArray0[6] = '>';
      charArray0[7] = '{';
      String string0 = "";
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@30537a9d Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@30537a9d Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      MockFile mockFile0 = new MockFile("", "]xu%JVO");
      mockFile0.mkdir();
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile(")?+BSdPU");
      MockFile mockFile2 = new MockFile(mockFile0, ")?+BSdPU");
      mockFile2.createNewFile();
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("]xu%JVO");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      MockFile mockFile0 = new MockFile("", "]xu%JVO");
      mockFile0.mkdir();
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile(",#{IQ?DTD~ybdw*n");
      MockFile mockFile2 = new MockFile("org.dom4j.DefaultDocumentFactory.singleton.strategy");
      mockFile2.createNewFile();
      try { 
        sAXReader0.read((File) mockFile2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      String string0 = "";
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'm';
      charArray0[2] = '{';
      charArray0[3] = '>';
      charArray0[4] = '4';
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6847854169135204
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      sAXReader0.getEntityResolver();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      sAXReader0.createDefaultEntityResolver("BH0 N&Q");
      sAXReader0.getXMLReader();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLReader(xMLFilterImpl3);
      xMLFilterImpl1.ignorableWhitespace((char[]) null, 849, (-1));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      try { 
        sAXReader0.setProperty("", bufferedInputStream0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: 
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4741050341006434
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("xs.oQ{SKga\f");
      sAXReader_SAXEntityResolver0.resolveEntity("", "xs.oQ{SKga\f");
      sAXReader_SAXEntityResolver0.uriPrefix = "M.Qyn0,INul";
      sAXReader_SAXEntityResolver0.uriPrefix = "#comment";
      sAXReader_SAXEntityResolver0.resolveEntity("NIO24X", "yWl_W\"RQwWN~sUnA");
      sAXReader_SAXEntityResolver0.resolveEntity("*d:TEYWf?5yLywy", "*d:TEYWf?5yLywy");
      sAXReader_SAXEntityResolver0.resolveEntity("*d:TEYWf?5yLywy", "E8LNM_qDOo&7");
      sAXReader_SAXEntityResolver0.resolveEntity("xs.oQ{SKga\f", "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getDocumentFactory();
      sAXReader0.createXMLReader();
      String string0 = "[na~nUL";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy";
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      QName qName0 = QName.get("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy", "K");
      DefaultElement defaultElement0 = new DefaultElement(qName0);
      defaultDocumentFactory0.createAttribute((Element) defaultElement0, qName0, "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.DefaultDocumentFactory.singleton.strategy");
      defaultHandler2_0.endCDATA();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
