/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 22:35:43 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("WdD.Qu'h5|./FvJv");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-1813));
      jSONObject0.append("{}", integer0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("{}");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8446831811117756
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("kBozj", true);
      boolean boolean0 = jSONObject0.optBoolean("kBozj");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", false);
      Object object0 = jSONObject0.opt("");
      assertEquals(false, object0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Short short0 = new Short((short)120);
      JSONObject jSONObject0 = new JSONObject(short0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2830041293692704
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      jSONObject0.put(";Y(OU", 0.0);
      jSONObject0.has(";Y(OU");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      jSONObject0.put("\f", 0.0);
      jSONObject0.getString("\f");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("kBozj", false);
      boolean boolean0 = jSONObject1.getBoolean("kBozj");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get(",:]}/\"[{;=#");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      String string0 = JSONObject.valueToString(long0, 0, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = JSONObject.valueToString("~rv#@!.T>;vy", (-1813), (-1813));
      assertNotNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(51, (-2578));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString((-3471), 12);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7913563426828252
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-956));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.testValidity(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = JSONObject.quote("\"'`y'IOD:P}^2");
      assertEquals("\"\\\"'`y'IOD:P}^2\"", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("Hn),z", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "=Di_64f");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-5964));
      JSONObject jSONObject1 = jSONObject0.putOpt("", short0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-1.0));
      hashMap0.put(jSONObject0, double0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>(2116);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("kBozj", (Collection) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Short short0 = new Short((short) (-3583));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("dou", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("dou", (Object) "dou");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.006214565944081
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte)61);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("", (Object) "");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("issplit", (-527L));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("bA@=K k:pVJu5wd%ZE", 0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("kBozj", (-656));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1580510496905323
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      jSONObject0.put("\f", 0.4726711948950849);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double(387.924848);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) (-182L));
      long long0 = jSONObject1.getLong("");
      assertEquals((-182L), long0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("getvalueOf", "getvalueOf");
      assertEquals("getvalueOf", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      String string0 = jSONObject0.optString("gEXIdge~=");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("toL", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-1031L));
      assertEquals((-1031L), long0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-46));
      JSONObject jSONObject0 = new JSONObject(byte0);
      long long0 = jSONObject0.optLong("getvalueOf", (long) (byte)117);
      assertEquals(1, jSONObject0.length());
      assertEquals(117L, long0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double(387.924848);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      long long0 = jSONObject0.optLong("", (-182L));
      assertEquals((-182L), long0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = jSONObject0.optJSONObject(stringArray0[2]);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("isequals", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("=Di_64f", (-2310));
      assertEquals((-2310), int0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 125);
      assertEquals(125, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double(387.924848);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      double double0 = jSONObject0.optDouble(";Y(OU", 0.0);
      assertEquals(3, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("] is not a Boolean.", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      double double0 = jSONObject0.optDouble("kBozj", (-4313.13582348589));
      assertEquals((-4313.13582348589), double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(3, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      JSONObject jSONObject0 = new JSONObject(byte0);
      boolean boolean0 = jSONObject0.optBoolean("H#5B&sDY*Ar_yLM", false);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      jSONObject0.opt("MIevUy*P?7''");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = new Float((float) 0L);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.has((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer(62);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      try { 
        jSONObject0.getJSONArray(stringArray0[4]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1493.2055761894));
      assertEquals("-1493.2055761894", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.347306186914454
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject0.append((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", ": ");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Short short0 = new Short((short)120);
      JSONObject jSONObject0 = new JSONObject(short0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer(671);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4511211368306685
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getDouble("8zBy\"c4WD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8zBy\\\"c4WD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("par");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of par
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(stringArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7280868748471145
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7757378012659204
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "rf[MiDX!e$~ZG;tG@ ,");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 3631, 2985);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 44, 44);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 3631, 2755);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.6707549559936354
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-1813));
      JSONObject jSONObject1 = jSONObject0.append("{}", integer0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.317688301004166
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-46));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      String string0 = JSONObject.valueToString(hashMap0, 21, 3631);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.167723997949895
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "rf[MiDX!e$~ZG;tG@ ,");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.7963116401738131
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1580510496905323
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      try { 
        jSONObject0.put(";Y(OU", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.575832360384573
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      boolean boolean0 = jSONObject0.optBoolean("=BMtsA/");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.9751797109591587
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("kBozj", true);
      String string0 = jSONObject1.toString(44, 2505);
      try { 
        jSONObject0.getJSONObject(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\njava.lang.String@0000000004\\\": java.lang.Boolean@0000000005,\\njava.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\"\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.499509409674557
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.2127556469888376
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      String string0 = jSONObject1.optString("", "");
      assertNotNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optJSONObject("H#5B&sDY*Ar_yLM");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optJSONArray("D1zv0n3ojvAD");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("'", 0.0);
      double double0 = jSONObject1.optDouble("'");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8884699676219987
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      // Undeclared exception!
      jSONObject0.toString(58, 3360);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.4085788142038693
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Byte byte0 = new Byte((byte)61);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = JSONObject.getNames((Object) stringWriter0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("", 12);
      long long0 = jSONObject0.getLong("");
      assertEquals(12L, long0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.putOpt("kBozj", jSONObject0);
      jSONObject0.getJSONObject("kBozj");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.append("] not found.", boolean0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("] not found.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.3718061232922234
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", false);
      try { 
        jSONObject1.getJSONArray("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.6761389064361045
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{}", true);
      int int0 = jSONObject1.optInt("{}");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("E3`!,=", (-1.0));
      double double0 = jSONObject1.getDouble("E3`!,=");
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6528388233121019
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("kBozj", true);
      try { 
        jSONObject0.getLong("kBozj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kBozj\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.8666734540326306
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      JSONObject jSONObject1 = jSONObject0.put("\f", 0.0);
      boolean boolean0 = jSONObject1.optBoolean("\f");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.641806559672166
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("kBozj", true);
      boolean boolean0 = jSONObject1.getBoolean("kBozj");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.0947290475276494
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", false);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.6163573927563153
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Short short0 = new Short((byte) (-109));
      JSONObject jSONObject1 = jSONObject0.putOpt("y", short0);
      try { 
        jSONObject1.getJSONObject("y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = JSONObject.doubleToString(923.84048815912);
      assertEquals("923.84048815912", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.905095159408991
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.append("*li&v", object0);
      jSONObject0.toString(2505, 44);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.4536775544255531
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = linkedList0.pollFirst();
      JSONObject jSONObject1 = jSONObject0.put(";Y(OU", 0.0);
      try { 
        jSONObject1.append(";Y(OU", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[;Y(OU] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate(": ", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.3734685941026814
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.accumulate("k<Yf", "kBozj");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.039237237666809
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("getvalueOf", (Map) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.7913563426828252
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString(65);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.9850059482205804
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      jSONObject0.optInt("\f");
      Short short0 = new Short((short)72);
      String string0 = JSONObject.valueToString(short0, (short)72, (-1638));
      assertNotNull(string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.7248301468410545
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.optInt("", 751);
      assertEquals(1, jSONObject0.length());
      assertEquals(751, int0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("_O^2b5", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      boolean boolean0 = jSONObject0.isNull("4347");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("*li&v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of *li&v
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.7260509192674385
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(123, 123);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.6228760833325933
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("y", 0.0);
      boolean boolean0 = jSONObject0.isNull("y");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";Y(OU");
      jSONObject0.put("NKu7ut|6!q7*)Q", 248L);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }
}
