/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:16:33 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5856011704822635
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ated");
      lovinsStemmer0.stemString("umpt");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("umpt");
      lovinsStemmer2.getRevision();
      lovinsStemmer0.stem("o_24RzJWSmTy,Mu\"");
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.stemString("entially");
      lovinsStemmer2.stem("thesix");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString(";)0:ouJh2kE?H-!(L%");
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6493034620436624
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("\"1g^yh*rvc");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ert";
      stringArray0[1] = "weka.core.TechnicalInformation$Type";
      stringArray0[2] = "\"1g^yH*RVC";
      stringArray0[3] = "\"1g^yh*rvc";
      stringArray0[4] = "\"1g^yh*rvc";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Ian}zO");
      lovinsStemmer0.stemString("\"1g^yh*rvc");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("rud");
      String string1 = lovinsStemmer0.stem("ert");
      assertEquals("ers", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("ex");
      assertEquals("ex", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6843684892329993
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8034");
      String string0 = lovinsStemmer0.stemString("jaqRGoGy");
      assertEquals("jaqrgog", string0);
      
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("`:rxN3");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("");
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("PS");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer2.stemString("KRr");
      assertEquals("kr", string3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6319648225688947
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("erluxax");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("allically");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("erluxac");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer2.stemString("mit");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4985282365402293
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "picax";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Y:6hEBXj");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stem("picax");
      assertEquals("picac", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.63971724355171
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pagdex");
      lovinsStemmer0.stem("acies");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("HN?^EDt:O(Zt0");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("`g{JW4");
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer2.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("`g{jw4");
      lovinsStemmer0.stem("8034end");
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("aci");
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.690820625416504
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ated");
      lovinsStemmer0.stemString("umpt");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("umpt");
      lovinsStemmer2.getRevision();
      lovinsStemmer0.stem("o_24RzJWSmTy,Mu\"");
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.stemString("o_24rzjwsmty,mu\"");
      lovinsStemmer3.getRevision();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer4.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.globalInfo();
      lovinsStemmer2.stemString("$c5");
      lovinsStemmer2.getRevision();
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8163235146672783
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "pages";
      stringArray0[1] = "8034";
      stringArray0[2] = "pages";
      stringArray0[3] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("5.7 <= 5.70001 ? ert");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("lux");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("5.7 <= 5.70001 ? pand");
      lovinsStemmer0.stemString("5.7 <= 5.70001 ? pand");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("9tqH7b,j");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6638017586549088
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lid");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("The Library of Congress Call Number. I've also seen this as lib-congress.");
      lovinsStemmer0.stemString("the library of congress call number. i've also seen this as lib-congress.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("the library of congress call number. i've also seen this as lib-congress.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer3.getRevision();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.getRevision();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.toString();
      lovinsStemmer5.globalInfo();
      lovinsStemmer3.stemString("lud");
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer7.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6084959487130457
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pagdex");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("atic");
      lovinsStemmer1.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stem("PROCEEDINGS");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("proceed");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "PROCEEDINGS";
      stringArray1[1] = "pagdic";
      LovinsStemmer.main(stringArray1);
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("istical");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.getRevision();
      LovinsStemmer.main(stringArray1);
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6046949833903428
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.stem("GD;J&):Uk");
      lovinsStemmer0.stem("The language the document is in.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("CONTENTS");
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("ional");
      assertEquals("ion", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("pand");
      String string1 = lovinsStemmer0.stemString("erid");
      assertEquals("eris", string1);
      
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6769814757374175
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core@TechniRalInormaton$Type");
      assertEquals("wek.cor@techniralinormat$typ", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("\"1g^yH*RVC");
      assertEquals("\"1g^yh*rvc", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core@TechniRalInormaton$Type";
      stringArray0[1] = "ix";
      stringArray0[2] = "weka.core@TechniRalInormaton$Type";
      stringArray0[3] = "ix";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ix");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer1.stemString("ix");
      assertEquals("ix", string2);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("ix");
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
      
      String string4 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.676677208252371
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.stem("GD;J&):Uk");
      lovinsStemmer0.stem("The language the document is in.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("CONTENTS");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("ional");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string0);
      
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.stemString("l[)Pzs%/#E|");
      assertEquals("l[)pz%/#e|", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6281545930500887
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("{5,P9\"(?Qd^i");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "|";
      stringArray0[3] = "{5,P9\"(?Qd^i";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[6] = "{5,P9\"(?Qd^i";
      stringArray0[7] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("{5,P9\"(?Qd^i");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("{5,p9\"(?qd^i");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.stemString("*s");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.lid");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.lis", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8287889991619395
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("G8vuHbb3-J-f/J%``Lt");
      assertEquals("g8vuhbb3-j-f/j%``lt", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("{-w.0<1N=W}}");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("vad");
      assertEquals("vas", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("q~cc)i}CP *il!pt");
      assertEquals("q~cc)i}cp *il!pt", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5992156114736562
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("0r~ms=P W{@f^1O#");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ix";
      stringArray0[1] = "Morgan Kaufmann Publishers";
      stringArray0[2] = "Morgan Kaufmann Publishers";
      stringArray0[3] = "Morgan Kaufmann Publishers";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("ars");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer3.stemString("ar");
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.globalInfo();
      String string0 = lovinsStemmer2.stemString("Morgan Kaufmann Publishers");
      assertEquals("morgan kaufman publishes", string0);
      
      lovinsStemmer2.stem("vad");
      String string1 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.622185739657542
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("95UI.KACfC%{OiEL.");
      lovinsStemmer0.stem("WEY]F$7eqJp+bX");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("eriset");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("eness");
      assertEquals("enes", string1);
      
      String string2 = lovinsStemmer0.stemString("F@tH#xTk&B1mI;z");
      assertEquals("f@th#xtk&b1m;z", string2);
      
      lovinsStemmer0.stem("Can't normalize array. Sum is NaN.");
      String string3 = lovinsStemmer0.stemString("f@th#xtk&b1m;z");
      assertEquals("f@th#xtk&b1m;z", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5993414010611682
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("cv-mN-e#,1XLG]");
      lovinsStemmer0.stem("luset");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6950278404679766
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("{5,P9\"(?Qd^i");
      assertEquals("{5,p9\"(?qd^", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "|";
      stringArray0[3] = "{5,P9\"(?Qd^i";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[6] = "{5,P9\"(?Qd^i";
      stringArray0[7] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.stemString("Yr 4}:](U\\");
      assertEquals("yr 4}:](u\\", string1);
      
      String string2 = lovinsStemmer0.stem("erlux");
      assertEquals("erluc", string2);
      
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer1.getRevision();
      String string4 = lovinsStemmer0.stemString("");
      assertFalse(string4.equals((Object)string1));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6675197768309102
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pagdex");
      String string0 = lovinsStemmer0.stem("acies");
      assertEquals("aci", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ix";
      stringArray0[1] = "ix";
      stringArray0[2] = "pagdic";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("O'n_Dps3UeXdZkKV");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.stemString("tex");
      assertEquals("tic", string1);
      
      lovinsStemmer1.stem("O'n_Dps3UeXdZkKV");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.stemString("qP?N@p8>b");
      assertEquals("qp?n@p8>b", string3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5659165673030218
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "A location associated with the entry, such as the city in which a conference took place.";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A Table of Contents ";
      stringArray0[1] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[2] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[3] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[4] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[5] = "A0FzXk9>O<_WIh";
      stringArray0[6] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[7] = "A location associated with the entry, such as the city in which a conference took place.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "";
      stringArray1[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[3] = "";
      stringArray1[4] = null;
      stringArray1[5] = "A location associated with the entry, such as the city in which a conference took place.";
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString(stringArray1[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6143895270776645
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Morgan Kaufmann Publishers";
      stringArray0[1] = "";
      stringArray0[2] = "D";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("atic");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("mit");
      assertEquals("mis", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("Morgan Kaufmann Publishers");
      assertEquals("morgan kaufmann publishes", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("");
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6947681524076463
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("MRNUMBER");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("title");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem(".U~X)");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("~ cTLD>zz&");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("KN((tjUtntT:");
      lovinsStemmer0.stemString("O'n_Dps3UeXdZkKV");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString(":");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("(yDdo@#`q'u");
      assertEquals("(yd@#`q'u", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7055346428573315
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("lovinsstemmerbicyz");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("lovinsstemmerbicyz");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("SKga\fl=:Lgr-agXNN.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6026198885798288
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("95UI.KACfC%{OiEL.");
      lovinsStemmer0.stem("WEY]F$7eqJp+bX");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("eriset");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("eriset");
      lovinsStemmer0.stemString("erises");
      String string0 = lovinsStemmer0.stemString("WEY]F$7eqJp+bX");
      assertEquals("wey]f$7eqjp+bx", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      assertEquals("a docum hav an author and titl, but not form publ.", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("Can't normalize array. Sum is zero.");
      assertEquals("can't norm arra. sum is zer.", string3);
      
      String string4 = lovinsStemmer0.stemString("\"%(,gYqApMXGU)");
      assertEquals("\"%(,gyqapmxgu)", string4);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5974156282018266
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pages");
      lovinsStemmer0.stem("bex");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("ihKqNCQ7(G3");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.stemString("eness");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string2 = lovinsStemmer0.stemString("bex");
      assertEquals("bic", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4459036977881525
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("D@wM+Eq&.:w-faCL_A");
      lovinsStemmer0.stemString("lovinsstemmerert");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6449018463626341
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("\"1g^yh*rvc");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ant");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("agxnonsend");
      assertEquals("agxnonsens", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.613052484440767
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      assertEquals("wek.cor.technicalinform$typ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("\"1g^yh*rvc");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ant");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("\"1g^yh*rvc");
      String string2 = lovinsStemmer0.stem("lid");
      assertEquals("lis", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.562061034773874
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pagdex");
      lovinsStemmer0.stem("acies");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("HN?^EDt:O(Zt0");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer1.stem("keyax");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer2.toString();
      lovinsStemmer1.stemString("pagdic");
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer2.getTechnicalInformation();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.615484418644633
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pagdex");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "pagdex";
      stringArray0[2] = "pagdic";
      stringArray0[3] = "pagdic";
      stringArray0[4] = "pagdic";
      stringArray0[5] = "pagdex";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("pagdic");
      lovinsStemmer0.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stem("PROCEEDINGS");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("7eqjpyt");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stem("8034");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6223351199035005
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.stem("GD;J&):Uk");
      lovinsStemmer0.stem("The language the document is in.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("CONTENTS");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("ional");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer0.stem("Gd!Q)0 !LWZ}x%5");
      String string3 = lovinsStemmer0.stemString("Gd!Q)0 !LWZ}x%5");
      assertEquals("gd!q)0 !lwz}x%5", string3);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6091514983166615
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A Table of Contents ";
      stringArray0[1] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[2] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[3] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[4] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[5] = "A0FzXk9>O<_WIh";
      stringArray0[6] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[7] = "A location associated with the entry, such as the city in which a conference took place.";
      String string0 = lovinsStemmer0.stem("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "";
      stringArray1[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[3] = "";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("A journal name. Abbreviations are provided for many journals.");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6450141245726007
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Morgan Kaufmann Publishers";
      stringArray0[1] = "";
      stringArray0[2] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stemString("W;`lK8gEA?ycoV#'^CY");
      assertEquals("w;`lk8ge?ycov#'^cy", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      lovinsStemmer1.stemString("y)m[");
      String string2 = lovinsStemmer0.stemString("ix");
      assertEquals("ix", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("");
      lovinsStemmer2.globalInfo();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer2.stemString("ementpex");
      String string4 = lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.lid");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.lis", string4);
      
      String string5 = lovinsStemmer0.stem("W;`lK8gEA?ycoV#'^CY");
      assertEquals("w;`lk8gea?ycov#'^c", string5);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7318703110844054
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "\"<JZ";
      stringArray0[1] = "ator";
      stringArray0[2] = "l";
      stringArray0[3] = "F[TK45~K!z?_as(17a";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("z<*2Ex@y!FQ$o");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("cSi'1");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("ement");
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8207228979063108
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "\"<JZ";
      stringArray0[1] = "ator";
      stringArray0[2] = "l";
      stringArray0[3] = "F[TK45~K!z?_as(17a";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("z<*2Ex@y!FQ$o");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("<9;h6tw)lwhcid");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.584492413492868
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("k! *X");
      assertEquals("k! *x", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("t<8je~Ka=Q`f+t");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("k! *x");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Bled, Slovenia");
      String string2 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("O'n_Dps3UeXdZkKV");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.stemString("bl, sloven");
      assertEquals("bl, slov", string3);
      
      lovinsStemmer0.stem("8");
      String string4 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
      
      String string5 = lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string5);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6483566233993872
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.TechnicalInformation$Type");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("\"1g^yH*RVC");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("\"1g^yh*rvc");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ant");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"1g^yH*RVC";
      stringArray0[1] = "weka.core.TechnicalInformation$Type";
      stringArray0[2] = "ant";
      stringArray0[3] = "address";
      stringArray0[4] = "\"1g^yh*rvc";
      stringArray0[5] = "weka.core.TechnicalInformation$Type";
      stringArray0[6] = "";
      stringArray0[7] = "\"1g^yh*rvc";
      LovinsStemmer.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.482750464622185
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("padex");
      assertEquals("padic", string0);
      
      String string1 = lovinsStemmer0.stem("acies");
      assertEquals("aci", string1);
      
      String[] stringArray0 = new String[22];
      stringArray0[0] = "ix";
      stringArray0[1] = "ix";
      stringArray0[2] = "padic";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("O'n_Dps3UeXdZkKV");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("tG");
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7085588894514314
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("SKga\fl=:Lgr-agXNN.");
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("erid");
      String[] stringArray1 = new String[7];
      stringArray1[0] = "erid";
      stringArray1[1] = "";
      stringArray1[2] = "erid";
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("erid");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6482430344968264
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("organization");
      assertEquals("organ", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("hu");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("O'n_Dps3UeXdZkKV");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("9E(7T(}G20PK0$+=:m");
      lovinsStemmer0.stem("");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("Bled, Slovenia");
      assertEquals("bl, sloven", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.653553180409388
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("k! *X");
      String string0 = lovinsStemmer0.stem("k! *X");
      assertEquals("k! *x", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("t<8je~Ka=Q`f+t");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("k! *x");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Bled, Slovenia");
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("O'n_Dps3UeXdZkKV");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("EFmS:tk& HTtT");
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("j=3:|'E:::,#8g,\"C");
      assertEquals("j=3:|'e:::,#8g,\"c", string3);
      
      lovinsStemmer0.stem("A Master's thesis.");
      LovinsStemmer.main((String[]) null);
      String string4 = lovinsStemmer0.stemString("a master's thesis.");
      assertEquals("a master thes.", string4);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6032221264114892
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "7eqjpond";
      lovinsStemmer0.stemString("7eqjpond");
      lovinsStemmer0.stem("WEY]F$7eqJp+bX");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ix");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("7eqjpond");
      lovinsStemmer0.stemString("A part of a book, which may be a chapter (or section or whatever) and/or a range of pages.");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("RI\"");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
