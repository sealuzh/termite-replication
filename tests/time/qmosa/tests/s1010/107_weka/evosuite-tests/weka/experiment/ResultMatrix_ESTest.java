/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:34:16 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.120221201003107
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2938, 0);
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV0.padString("", 6, false);
      resultMatrixCSV1.toStringRanking();
      resultMatrixCSV1.getDefaultStdDevWidth();
      resultMatrixCSV1.toStringRanking();
      resultMatrixCSV0.getRowOrder();
      String[] stringArray0 = new String[2];
      String[] stringArray1 = resultMatrixCSV1.getOptions();
      stringArray0[0] = " ";
      stringArray0[1] = "]";
      ResultMatrixSignificance.main(stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.958810908746607
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<Vector<String>> vector0 = new Vector<Vector<String>>();
      vector0.remove((Object) "enum-row-names");
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      assertEquals(1, resultMatrixLatex0.getColCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 2);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      String[] stringArray0 = resultMatrixGnuPlot1.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot1.listOptions();
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringSummary();
      assertTrue(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.8404538100720393
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      String string0 = resultMatrixGnuPlot0.doubleToString(1, 1);
      assertEquals("1.0", string0);
      
      resultMatrixGnuPlot0.getRowHidden(0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 15);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixCSV0.getColName(787);
      resultMatrixGnuPlot1.setMeanWidth((-2500));
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex1.getRevision();
      assertEquals(1, resultMatrixLatex1.getVisibleColCount());
      
      String string1 = resultMatrixLatex1.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & [1]\\\\\n\\hline\nrow0                      &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string1);
      
      resultMatrixLatex1.setColOrder((int[]) null);
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.8961178360622433
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.WIN_STRING = "Generates the output as plain text (for fixed width fonts).";
      resultMatrixLatex0.clearSummary();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRowName(1032);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.getRowHidden((-1165));
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixGnuPlot0.setStdDevWidth((-299));
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      String[][] stringArray0 = resultMatrixGnuPlot1.toArray();
      resultMatrixHTML0.countWidthTipText();
      resultMatrixGnuPlot0.stdDevWidthTipText();
      resultMatrixHTML0.countWidthTipText();
      resultMatrixHTML0.setPrintColNames(false);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.getDefaultEnumerateColNames();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixHTML0.setColOrder(intArray0);
      resultMatrixCSV0.getColOrder();
      resultMatrixCSV0.setPrintRowNames(true);
      resultMatrixCSV0.getColSize(stringArray0, 1);
      resultMatrixHTML0.setRowName(48, (String) null);
      resultMatrixCSV0.clearSummary();
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      intArray1[1] = null;
      intArray1[2] = null;
      intArray1[3] = intArray0;
      intArray1[4] = null;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary(intArray1, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.9142162382488257
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 2);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.toStringMatrix();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      int int0 = 3491;
      resultMatrixPlainText1.setMeanPrec(3491);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setEnumerateRowNames(true);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(0, 2);
      // Undeclared exception!
      try { 
        resultMatrixLatex1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2842228217416776
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_StdDevPrec = (-1881);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "(";
      stringArray1[1] = "*";
      stringArray1[2] = " ";
      stringArray1[3] = "*";
      resultMatrixPlainText0.m_RowNames = stringArray1;
      stringArray0[2] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[3] = " ";
      stringArray0[4] = "v";
      stringArray0[5] = "(";
      stringArray0[6] = ")";
      stringArray0[8] = ")";
      try { 
        resultMatrixPlainText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2857358645566332
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 825);
      assertEquals(0, resultMatrixCSV0.getColCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.setMeanWidth(48);
      resultMatrixGnuPlot0.setRemoveFilterName(true);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex1.getRevision();
      int[] intArray0 = new int[0];
      resultMatrixLatex1.setColOrder(intArray0);
      int int0 = resultMatrixGnuPlot0.getSignificanceWidth();
      assertEquals(48, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.153739953682319
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(69, 0);
      int[] intArray0 = new int[25];
      intArray0[0] = 2938;
      resultMatrixCSV0.setMeanWidth(69);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 0;
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.getDefaultStdDevWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV2.setMeanWidth(92);
      resultMatrixCSV2.getRowOrder();
      ResultMatrixCSV resultMatrixCSV3 = new ResultMatrixCSV(resultMatrixCSV1);
      String[] stringArray0 = resultMatrixCSV3.getOptions();
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(69, resultMatrixCSV0.getMeanWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultPrintColNames();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.globalInfo();
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.046278713668808
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = ")";
      ResultMatrixHTML.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.setRemoveFilterName(false);
      resultMatrixSignificance0.setSize(0, 2);
      resultMatrixSignificance0.meanWidthTipText();
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.m_ShowAverage = true;
      resultMatrixHTML0.getAverage(2);
      resultMatrixSignificance0.getColNameWidth();
      resultMatrixHTML0.getColHidden((-2526));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3338, 2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2910358629127177
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultEnumerateColNames();
      String string0 = resultMatrixLatex0.trimString("hspPe/']oaD3_l,QA1$", 239);
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals("hspPe/']oaD3_l,QA1$", string0);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.7885556937496965
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.WIN_STRING = "mean-width";
      resultMatrixSignificance0.setCountWidth(0);
      resultMatrixSignificance0.setStdDevPrec(0);
      resultMatrixSignificance0.toStringMatrix();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.013774930942627
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.m_PrintColNames = false;
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.setSignificanceWidth((-646));
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      
      String string0 = resultMatrixCSV0.removeFilterName((String) null);
      assertNull(string0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      resultMatrixCSV0.clearHeader();
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      resultMatrixCSV0.listOptions();
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixCSV0.getCount(1);
      int int0 = resultMatrixCSV0.getMeanPrec();
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, int0);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3451690095661823
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(97, 1);
      resultMatrixPlainText0.clearSummary();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 97;
      intArray0[2] = 1;
      intArray0[3] = 97;
      intArray0[4] = 97;
      intArray0[5] = 1;
      resultMatrixPlainText0.m_ColOrder = intArray0;
      resultMatrixPlainText0.padString(")", 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.toStringKey();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(45, 3261);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.8647162891453704
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2938, 0);
      Vector<String> vector0 = new Vector<String>();
      Vector<Vector<String>> vector1 = new Vector<Vector<String>>();
      Vector<String> vector2 = new Vector<String>();
      vector1.add(vector2);
      vector1.remove((Object) null);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.setMeanPrec(2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2926, 1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.6864982501357306
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 26;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(26, 26);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixPlainText0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance1);
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.setSignificanceWidth(2);
      resultMatrixCSV0.clearSummary();
      resultMatrixCSV0.getSignificance(5, 1);
      resultMatrixSignificance1.setSize(0, 25);
      resultMatrixPlainText0.meanPrecTipText();
      resultMatrixPlainText0.TIE_STRING = "(";
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringKey();
      resultMatrixPlainText0.getSummaryTitle(2801);
      resultMatrixHTML0.WIN_STRING = " |";
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixSignificance1.m_ColNameWidth = 2;
      // Undeclared exception!
      resultMatrixHTML0.toStringMatrix();
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.135090289859166
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText0.clear();
      Vector<Vector<String>> vector0 = new Vector<Vector<String>>();
      resultMatrixPlainText0.m_HeaderKeys = vector0;
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 2);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV1.getDefaultStdDevWidth();
      resultMatrixCSV0.toStringRanking();
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      
      resultMatrixCSV1.getRowOrder();
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV();
      String[] stringArray0 = resultMatrixCSV2.getOptions();
      assertEquals(1, resultMatrixCSV2.getVisibleColCount());
      
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(0, resultMatrixCSV2.getStdDevWidth());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3727313058206003
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText0.clear();
      Vector<Vector<String>> vector0 = new Vector<Vector<String>>();
      resultMatrixPlainText0.m_HeaderKeys = vector0;
      Vector<String> vector1 = new Vector<String>();
      vector0.add(vector1);
      resultMatrixPlainText0.TIE_STRING = "J'3^rW%";
      resultMatrixPlainText0.m_ShowAverage = true;
      vector0.remove((Object) "enum-row-names");
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0211900369175195
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.listOptions();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      vector0.remove((Object) resultMatrixGnuPlot0);
      vector0.retainAll(resultMatrixGnuPlot0.m_HeaderKeys);
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.getDefaultPrintRowNames();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.getDisplayName();
      int int0 = (-1284);
      // Undeclared exception!
      try { 
        vector0.subList(2, (-1284));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2) > toIndex(-1284)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.8204920057617255
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.doubleToString(1, 1);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.toStringSummary();
      resultMatrixCSV0.setSignificanceWidth(1);
      resultMatrixCSV0.removeFilterName("Average");
      resultMatrixCSV0.listOptions();
      assertEquals(1, resultMatrixCSV0.getSignificanceWidth());
      
      resultMatrixCSV1.getOptions();
      resultMatrixCSV1.getDefaultEnumerateColNames();
      resultMatrixCSV1.getCount(0);
      assertEquals(0, resultMatrixCSV1.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.8338970674214536
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixHTML0.getVisibleColCount();
      resultMatrixPlainText0.getDefaultStdDevPrec();
      resultMatrixPlainText0.removeFilterName("\" rK.ZFAcfpU[V9q&");
      resultMatrixPlainText0.removeFilterNameTipText();
      resultMatrixPlainText0.listOptions();
      resultMatrixPlainText0.setShowStdDev(false);
      resultMatrixHTML0.setEnumerateRowNames(false);
      resultMatrixPlainText0.getDefaultMeanWidth();
      resultMatrixHTML0.getDisplayName();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      resultMatrixGnuPlot0.m_RankingWins = intArray0;
      resultMatrixGnuPlot0.LOSS_STRING = "v";
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixGnuPlot0.getShowAverage();
      resultMatrixGnuPlot0.meanPrecTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5410197472074394
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(97, 1);
      resultMatrixPlainText0.clearSummary();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 97;
      intArray0[2] = 1;
      intArray0[3] = 97;
      intArray0[4] = 97;
      intArray0[5] = 1;
      resultMatrixPlainText0.m_ColOrder = intArray0;
      resultMatrixPlainText0.padString("BR+7}a[5]B_G", 0);
      resultMatrixPlainText0.removeFilterNameTipText();
      resultMatrixPlainText0.clearHeader();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.setStdDevPrec((-1243));
      resultMatrixSignificance0.listOptions();
      resultMatrixSignificance0.toStringKey();
      int[][] intArray1 = new int[0][9];
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setSummary(intArray1, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.445966822264249
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String string0 = resultMatrixCSV0.toStringKey();
      assertEquals("Key,\n[1],col0\n", string0);
      
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.meanPrecTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 1);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      resultMatrixHTML0.m_ColHidden = booleanArray0;
      resultMatrixHTML0.m_StdDevWidth = (-111);
      resultMatrixHTML0.getDefaultPrintColNames();
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.236049608605481
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(26, 97);
      String[][] stringArray0 = new String[3][3];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[8];
      stringArray2[0] = " ";
      stringArray2[1] = "*";
      stringArray2[2] = "v";
      stringArray2[3] = ")";
      stringArray2[4] = ")";
      stringArray2[5] = "*";
      stringArray2[6] = "(";
      stringArray2[7] = "v";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[0];
      stringArray0[2] = stringArray3;
      int int0 = resultMatrixSignificance0.getColSize(stringArray0, 26, false, true);
      assertEquals(0, int0);
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(97, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(26, resultMatrixSignificance0.getColCount());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.476788178317269
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[0][0];
      resultMatrixHTML0.setRanking(intArray0);
      String string0 = resultMatrixHTML0.toStringKey();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n   <tr><td><b>(1)</b></td><td>col0</td></tr>\n</table>\n", string0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixHTML0.getRevision();
      double double0 = resultMatrixCSV0.getMean(1949, 2);
      assertEquals(0.0, double0, 0.01);
      
      resultMatrixCSV0.getDisplayName();
      resultMatrixCSV0.setMean(0, 1, 1453.095346975402);
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5063634888884905
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 0);
      int[][] intArray0 = new int[3][2];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray2[6] = 2;
      intArray0[1] = intArray2;
      int[][] intArray3 = new int[1][1];
      intArray3[0] = intArray2;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.297158566898723
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "r8K;#i";
      stringArray0[1] = "The number of decimals after the decimal point for the mean.";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.getDefaultRowNameWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRevision();
      resultMatrixCSV1.getMean(25, 30);
      resultMatrixCSV0.getDisplayName();
      resultMatrixCSV1.setMean((-2291), (-2291), 698.4946493231632);
      assertEquals(1, resultMatrixCSV1.getRowCount());
      assertEquals(0, resultMatrixCSV1.getDefaultMeanWidth());
      assertEquals(1, resultMatrixCSV1.getColCount());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(2, resultMatrixCSV1.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3295575268368323
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.setSignificanceWidth(3155);
      resultMatrixHTML0.toStringRanking();
      resultMatrixGnuPlot0.setCountWidth(2);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML0.setShowStdDev(false);
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML(1, 1);
      // Undeclared exception!
      try { 
        resultMatrixHTML2.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2849764029305417
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.headerKeys();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 1);
      boolean boolean0 = true;
      resultMatrixHTML0.setShowStdDev(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1277953927022693
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearRanking();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = " ";
      resultMatrixLatex0.setMeanWidth((-1411));
      stringArray0[2] = "";
      stringArray0[3] = "CfC%{OiEL.Z6=";
      stringArray0[4] = "";
      stringArray0[5] = "";
      resultMatrixHTML0.m_RowNames = stringArray0;
      resultMatrixHTML0.getDefaultPrintColNames();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(6, resultMatrixHTML0.getRowCount());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2842228217416776
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[][] stringArray0 = new String[3][0];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "(";
      stringArray1[1] = "$\bullet$";
      stringArray1[2] = "  (No. of datasets where [col] >> [row])\n";
      stringArray1[3] = "(";
      stringArray1[4] = "$\bullet$";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      stringArray2[0] = "#";
      stringArray2[1] = "$\bullet$";
      stringArray2[2] = ")";
      stringArray2[3] = "$circ$";
      stringArray2[4] = "Z7n5aReJkV_}s,:bt";
      stringArray2[5] = " ";
      stringArray2[6] = "(";
      stringArray2[7] = "  (No. of datasets where [col] >> [row])\n";
      stringArray2[8] = "$\bullet$";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[4];
      stringArray3[0] = "jjb~>A?'*\">P D";
      stringArray3[1] = ")";
      stringArray3[2] = "G";
      stringArray3[3] = "Z7n5aReJkV_}s,:bt";
      stringArray0[2] = stringArray3;
      int int0 = resultMatrixLatex0.getColSize(stringArray0, (-1423), true, true);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, int0);
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2580710002507387
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.doubleToString(1, 1);
      resultMatrixGnuPlot0.getRowHidden(0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 15);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getHeader("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.9513614097339813
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_StdDevWidth = 97;
      resultMatrixSignificance0.setMeanPrec((-766));
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = (-766);
      intArray0[5] = 1;
      intArray0[6] = 2;
      intArray0[7] = 2;
      resultMatrixSignificance0.m_RankingWins = intArray0;
      resultMatrixSignificance0.clearRanking();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.setMeanWidth((-563));
      resultMatrixHTML0.m_MeanWidth = 1126;
      resultMatrixHTML0.m_PrintRowNames = false;
      resultMatrixHTML0.m_StdDevWidth = 0;
      resultMatrixSignificance0.toStringKey();
      resultMatrixHTML0.countWidthTipText();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      resultMatrixHTML0.m_RowNames = stringArray0;
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.getShowAverage();
      resultMatrixHTML0.printRowNamesTipText();
      resultMatrixHTML0.setRemoveFilterName(false);
      resultMatrixHTML0.toStringSummary();
      resultMatrixSignificance0.setSignificance(2, 0, 26);
      assertEquals(97, resultMatrixSignificance0.getStdDevWidth());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixSignificance0.addHeader("", "e");
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getShowAverage());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.338205060943012
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearSummary();
      resultMatrixLatex0.getRemoveFilterName();
      resultMatrixLatex0.getDefaultShowStdDev();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getHeader("8C'f+.R'hoy!h .(#s");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.476395223061524
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 0);
      int[][] intArray0 = new int[3][2];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[6] = 1;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray2[4] = 0;
      intArray2[1] = 1;
      intArray2[6] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 1;
      intArray3[5] = 1;
      intArray0[2] = intArray3;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.getDisplayName();
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV((-2192), 13);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.9065404248781013
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.setSignificanceWidth(3155);
      resultMatrixHTML0.toStringRanking();
      resultMatrixGnuPlot0.setCountWidth(0);
      resultMatrixHTML0.setMeanPrec(2);
      resultMatrixHTML0.getRowName(5);
      resultMatrixGnuPlot0.TIE_STRING = " ";
      resultMatrixGnuPlot0.getRowHidden((-1165));
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.setStdDevWidth((-1165));
      String[][] stringArray0 = resultMatrixGnuPlot0.toArray();
      resultMatrixHTML0.countWidthTipText();
      resultMatrixGnuPlot0.stdDevWidthTipText();
      resultMatrixHTML0.countWidthTipText();
      resultMatrixHTML0.setPrintColNames(false);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 5;
      resultMatrixCSV0.m_ShowAverage = false;
      intArray0[2] = (-1165);
      intArray0[3] = 1;
      resultMatrixHTML0.setColOrder(intArray0);
      resultMatrixCSV0.getColOrder();
      resultMatrixCSV0.setPrintRowNames(false);
      resultMatrixCSV0.getColSize(stringArray0, 0);
      resultMatrixHTML0.setRowName(26, "4uR];?WYvy)UU8m4");
      resultMatrixCSV0.clearSummary();
      assertEquals(3155, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(3155, resultMatrixCSV0.getSignificanceWidth());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.116284903729768
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 49);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-4325);
      intArray0[6] = 2938;
      intArray0[7] = 0;
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV0.clear();
      resultMatrixCSV1.m_RemoveFilterName = true;
      resultMatrixCSV1.toStringRanking();
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertFalse(resultMatrixCSV1.getShowStdDev());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      
      resultMatrixCSV0.getDefaultStdDevWidth();
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.getRowOrder();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(49, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(18, stringArray0.length);
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.6434747790423003
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 1);
      int[][] intArray0 = new int[7][0];
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 16;
      intArray1[5] = 2;
      intArray1[6] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 0;
      intArray2[2] = 23;
      intArray2[3] = 2;
      intArray2[4] = 0;
      intArray2[5] = 1;
      intArray2[6] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 1;
      intArray3[1] = 1;
      intArray3[2] = 1;
      intArray3[3] = 791;
      intArray3[4] = 0;
      intArray3[5] = 2;
      intArray3[6] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 1;
      intArray4[1] = 23;
      intArray4[2] = 23;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = 1;
      intArray6[1] = 3302;
      intArray6[2] = 16;
      intArray6[3] = 16;
      intArray6[4] = 23;
      intArray6[5] = 1;
      intArray6[6] = 791;
      intArray6[7] = 2;
      intArray6[8] = 1;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      intArray7[0] = 1;
      intArray7[1] = 791;
      intArray7[2] = 3302;
      intArray0[6] = intArray7;
      resultMatrixGnuPlot0.m_NonSigWins = intArray0;
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      String string0 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"col0\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string0);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(32, 2);
      resultMatrixLatex0.getRevision();
      assertEquals(2, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.224275308629334
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String string0 = resultMatrixCSV0.colNameWidthTipText();
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      
      resultMatrixCSV0.m_PrintColNames = true;
      resultMatrixCSV0.stdDevWidthTipText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(97, 1);
      Vector<String> vector0 = new Vector<String>(1);
      resultMatrixLatex0.m_HeaderValues = vector0;
      resultMatrixLatex0.getDefaultPrintColNames();
      String string1 = resultMatrixLatex0.stdDevPrecTipText();
      assertEquals("The number of decimals after the decimal point for the standard deviation.", string1);
      
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = new int[1];
      intArray1[0] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 97;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray2[4] = 97;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 0;
      intArray4[1] = 12;
      intArray4[2] = 97;
      intArray0[3] = intArray4;
      resultMatrixSignificance0.m_Significance = intArray0;
      resultMatrixSignificance0.getRevision();
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(97, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.901824195577876
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.m_PrintColNames = false;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getRowHidden(111);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]";
      ResultMatrixCSV.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3435470471826703
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setShowAverage(true);
      boolean boolean0 = resultMatrixSignificance0.isSignificance((-667));
      assertTrue(resultMatrixSignificance0.getShowAverage());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.015262675965733
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.m_PrintColNames = false;
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.setSignificanceWidth((-646));
      resultMatrixCSV0.removeFilterName((String) null);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      resultMatrixCSV0.listOptions();
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.getDefaultEnumerateColNames();
      double double0 = resultMatrixCSV0.getCount((-1361));
      assertEquals(0.0, double0, 0.01);
      
      resultMatrixCSV0.clear();
      resultMatrixCSV0.getDefaultRowNameWidth();
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getRowCount());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.240611702228474
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      resultMatrixGnuPlot0.m_ColHidden = booleanArray0;
      resultMatrixGnuPlot0.setMeanWidth(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.getRevision();
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1837;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 1;
      resultMatrixLatex0.setColOrder(intArray0);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      
      resultMatrixGnuPlot0.clear();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.8968779973580157
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.doubleToString(1, 1);
      resultMatrixGnuPlot0.getRowHidden(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[";
      stringArray0[1] = "]";
      stringArray0[2] = "1.0";
      stringArray0[3] = " ";
      stringArray0[4] = "*";
      resultMatrixCSV0.setStdDevPrec(2);
      stringArray0[5] = "]";
      ResultMatrixCSV.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.9680861823217732
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "r8K;#i";
      stringArray0[1] = "The number of decimals after the decimal point for the mean.";
      stringArray0[2] = "count-width";
      stringArray0[3] = "";
      stringArray0[4] = "JOR}My?[1>q";
      stringArray0[5] = "hline\nend{tabular} \footnotesize par\nend{table}}";
      stringArray0[6] = "$w7]\"$x-O*{$^wl";
      stringArray0[7] = "$3}!m&2@EY*)pzQ";
      ResultMatrixPlainText.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=4.106959508106728
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_StdDevPrec = (-1881);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "<td><b>";
      stringArray0[2] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[3] = " ";
      stringArray0[4] = "v";
      stringArray0[5] = "(";
      stringArray0[6] = ")";
      stringArray0[7] = " ";
      stringArray0[8] = ")";
      resultMatrixPlainText0.setOptions(stringArray0);
      resultMatrixPlainText0.setCountWidth((-1867));
      resultMatrixPlainText0.m_Significance = null;
      resultMatrixPlainText0.setEnumerateRowNames(false);
      resultMatrixPlainText0.getDefaultSignificanceWidth();
      resultMatrixPlainText0.setShowAverage(false);
      resultMatrixPlainText0.toString();
      resultMatrixPlainText0.getDefaultRemoveFilterName();
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.getDisplayRow((-1867));
      resultMatrixPlainText0.getRevision();
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV((-1), (-587));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.337588728123289
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.showStdDevTipText();
      boolean boolean0 = false;
      int[][] intArray0 = new int[0][4];
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }
}
