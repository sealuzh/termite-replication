/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:12:09 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8197303775959504
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~ cTLD>zz&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      discretize0.setIgnoreClass(true);
      discretize0.m_DefaultCols = "D";
      discretize0.invertSelectionTipText();
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(69);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance1.toString(2, 2);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.819730377595951
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~ cTLD>zz&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      discretize0.setIgnoreClass(true);
      discretize0.m_DefaultCols = "D";
      discretize0.invertSelectionTipText();
      discretize0.getOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~ cTLD>zz&");
      Instances instances0 = null;
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      intArray0[0] = 1095;
      intArray0[1] = 30;
      discretize0.setAttributeIndicesArray(intArray0);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.246304923773509
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-I9$5qqK%6xvAC!");
      Discretize discretize0 = new Discretize("R");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = new Instances("/1B", arrayList0, 1);
      Instances instances1 = new Instances(instances0, 1);
      Instances instances2 = Instances.mergeInstances(instances1, instances0);
      try { 
        discretize0.setInputFormat(instances2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{`3uO=9.aNs9^'JP>";
      stringArray0[1] = "43*";
      stringArray0[2] = "";
      stringArray0[3] = "Attribute names are not unique! Causes: ";
      stringArray0[4] = "-";
      stringArray0[1] = "43*";
      stringArray0[6] = "{`3uO=9.aNs9^'JP>";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-I9$5qqK%6xvAC!");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~ cTLD>zz&");
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = null;
      discretize0.useEqualFrequencyTipText();
      double double0 = 0.0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 4072;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (double) 59;
      double double1 = (-1074.3);
      doubleArray0[5] = (-1074.3);
      doubleArray0[6] = (double) 4072;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(0.0, doubleArray0, (int[]) null, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7259520807289133
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "nd}4C6PHq";
      stringArray0[1] = "uSO!-'$<U+;g";
      stringArray0[2] = "";
      stringArray0[3] = "-I9$5qqK%6xvAC!";
      stringArray0[4] = "All";
      stringArray0[5] = "\nClass name: ";
      stringArray0[6] = "Number of bins.";
      discretize0.setOptions(stringArray0);
      discretize0.listOptions();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(0);
      discretize0.setOutputFormat();
      discretize0.getCapabilities();
      String[] stringArray0 = new String[13];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "M? ";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "Set attribute selection mode. If false,only selected (numeric) attributes in the range will be discretized; if true,only non-selected attributes will be discretized.";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[1];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4072);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2);
      binarySparseInstance0.toString(2, 2);
      binarySparseInstance0.toString(4072);
      Discretize discretize0 = new Discretize();
      binarySparseInstance1.isMissingSparse(2);
      double[] doubleArray0 = new double[9];
      binarySparseInstance1.deleteAttributeAt(2);
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 2668.781111283129;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(2668.781111283129, doubleArray0);
      binarySparseInstance0.dataset();
      Discretize discretize1 = new Discretize("@relation");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.getInvertSelection();
      AllFilter allFilter0 = new AllFilter();
      allFilter0.toString();
      String[] stringArray0 = new String[0];
      Filter.runFilter(allFilter0, stringArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getCutPoints(3156);
      Discretize discretize1 = new Discretize();
      Discretize discretize2 = new Discretize();
      assertFalse(discretize2.getUseEqualFrequency());
      assertFalse(discretize2.getUseBinNumbers());
      assertFalse(discretize2.getFindNumBins());
      assertEquals(10, discretize2.getBins());
      assertFalse(discretize2.getMakeBinary());
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.getBinRangesString(4);
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = " is not compatible with ";
      SystemInUtil.addInputLine("#5N+c=o}");
      SystemInUtil.addInputLine("6{czJ}nTu#Axb.");
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 4072;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4072);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.958375710599929
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AX#my";
      stringArray0[1] = "";
      stringArray0[2] = "~ cTLD>zz&";
      Discretize discretize0 = new Discretize("wxQx19;u/:fGq9;J");
      discretize0.useBinNumbersTipText();
      Filter.makeCopy(discretize0);
      discretize0.invertSelectionTipText();
      Discretize discretize1 = new Discretize("");
      discretize1.getOptions();
      discretize1.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4072);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance1.mergeInstance(binarySparseInstance0);
      binarySparseInstance0.toString(2, 2);
      binarySparseInstance0.toString(4072);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Train:");
      Discretize discretize0 = new Discretize();
      binarySparseInstance1.isMissingSparse(2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance1.isMissing(2);
      binarySparseInstance0.toString(2);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AX#my";
      stringArray0[1] = "";
      stringArray0[2] = "~ cTLD>zz&";
      DenseInstance denseInstance0 = new DenseInstance((-1252), (double[]) null);
      DenseInstance denseInstance1 = new DenseInstance(89);
      DenseInstance denseInstance2 = new DenseInstance(denseInstance1);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("Problem instantiating package manager. Using DefaultPackageManager.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      discretize0.getBinRangesString(122);
      discretize0.getCutPoints(3156);
      discretize0.setOutputFormat();
      AllFilter allFilter0 = new AllFilter();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.882372207858138
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("Problem instantiating package manager. Using DefaultPackageManager.");
      DenseInstance denseInstance0 = new DenseInstance((-1112.39), (double[]) null);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      
      Discretize discretize1 = new Discretize("Problem instantiating package manager. Using DefaultPackageManager.");
      String string0 = discretize1.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      String string1 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string1);
      
      String string2 = discretize0.binsTipText();
      assertEquals("Number of bins.", string2);
      
      String string3 = discretize1.attributeIndicesTipText();
      assertEquals(10, discretize1.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string3);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-I9$5qqK%6xvAC!");
      Discretize discretize0 = new Discretize("R");
      discretize0.setUseEqualFrequency(false);
      int int0 = 86;
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9627983150225337
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      discretize0.m_MakeBinary = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      discretize0.getOptions();
      discretize0.useBinNumbersTipText();
      Filter.makeCopy(discretize0);
      discretize0.setIgnoreClass(false);
      discretize0.invertSelectionTipText();
      discretize0.getOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.findNumBinsTipText();
      int int0 = (-1402);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1402));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mw>VBRV>?d");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      Discretize discretize0 = new Discretize("hLMYN+)=");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "J8W{<3g)@";
      stringArray0[1] = "3";
      stringArray0[2] = "mw>VBRV>?d";
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("f#s[0DXMkd55bfXB'@o");
      discretize0.m_ClassIndex = (-3083);
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("8964", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize("Problem instatiating package maager. Using DefaulPackageManager.");
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 2.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[19];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 2.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 1.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = 2.0;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.makeBinaryTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize("~ cTLD>zz&");
      discretize1.setDesiredWeightOfInstancesPerInterval(641.35132);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(79);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance1);
      assertEquals(2, denseInstance0.numAttributes());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize("1XIr/");
      discretize0.setMakeBinary(false);
      DenseInstance denseInstance0 = new DenseInstance(2578);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      boolean boolean0 = discretize0.m_IgnoreClass;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4072);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance1.mergeInstance(binarySparseInstance0);
      binarySparseInstance0.toString(2, 2);
      Discretize discretize0 = new Discretize();
      binarySparseInstance1.isMissingSparse(2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance1.isMissing(2);
      binarySparseInstance0.toString(2);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8836404106149494
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize("-B");
      discretize0.binsTipText();
      discretize0.getCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-B";
      stringArray0[1] = "-B";
      stringArray0[2] = "AttributeTest";
      stringArray0[3] = "-B";
      stringArray0[4] = "-B";
      stringArray0[5] = "";
      stringArray0[6] = "Number of bins.";
      discretize0.toString();
      stringArray0[7] = "-B";
      stringArray0[8] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.263154759975629
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("~ cTLD>hRQ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'& ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WT5OZ]g]U03");
      Discretize discretize1 = new Discretize("?v_DJD\u0003tXs/>pr9pL");
      discretize1.setIgnoreClass(true);
      discretize0.invertSelectionTipText();
      String[] stringArray0 = discretize1.getOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize1.setOptions(stringArray0);
      assertTrue(discretize1.getIgnoreClass());
      
      discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4072);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance1.mergeInstance(binarySparseInstance0);
      binarySparseInstance0.toString(2, 2);
      binarySparseInstance0.toString(4072);
      Discretize discretize0 = new Discretize();
      binarySparseInstance1.isMissingSparse(2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance1.isMissing(2);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(4072, intArray0, 1);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2007);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.invertSelectionTipText();
      discretize0.setAttributeIndices("");
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2728.316018665), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        sparseInstance1.relationalValue(124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7257318471278027
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize("]=tWWFb*^N2/uzASQu-");
      discretize0.setInvertSelection(true);
      assertFalse(discretize0.getMakeBinary());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "PQu|~xyj8[6tl`:";
      stringArray0[1] = "]=tWWFb*^N2/uzASQu-";
      stringArray0[2] = "]=tWWFb*^N2/uzASQu-";
      stringArray0[3] = "]=tWWFb*^N2/uzASQu-";
      stringArray0[4] = "PQu|~xyj8[6tl`:";
      stringArray0[5] = "PQu|~xyj8[6tl`:";
      stringArray0[6] = "PQu|~xyj8[6tl`:";
      stringArray0[7] = "]=tWWFb*^N2/uzASQu-";
      discretize0.setOptions(stringArray0);
      Discretize discretize1 = new Discretize();
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(62);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      sparseInstance0.toString(62);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4072);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2);
      binarySparseInstance0.toString(2, 2);
      binarySparseInstance0.toString(4072);
      Discretize discretize0 = new Discretize();
      binarySparseInstance1.isMissingSparse(2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance1.isMissing(2);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      Discretize discretize1 = new Discretize("~ #:kX~@_8Ql)+2");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "AX#my";
      stringArray0[1] = "";
      stringArray0[2] = "~ cTLD>zz&";
      stringArray0[3] = "      else if (format.attribute(i).isNumeric())\n";
      stringArray0[4] = "";
      stringArray0[5] = "Y";
      stringArray0[6] = "-R";
      stringArray0[7] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[8] = "";
      Discretize.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      boolean boolean0 = false;
      AllFilter allFilter0 = new AllFilter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      discretize0.setBins(17);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "help";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemInUtil.addInputLine("Att:");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2081.2962415416);
      doubleArray1[2] = 140.9;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2081.2962415416);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 140.9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 140.9;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 872.2188936605745;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 140.9;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-3028.383441796);
      doubleArray5[2] = (-2081.2962415416);
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 872.2188936605745;
      doubleArray5[6] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-2081.2962415416);
      doubleArray6[1] = 2211.908;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 140.9;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 872.2188936605745;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 2211.908;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.toString();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4072);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "]DOA=Q?~hQPO>d";
      stringArray0[1] = "";
      stringArray0[2] = "~ cTLD>zz&";
      stringArray0[3] = "";
      stringArray0[4] = "Y";
      stringArray0[5] = "Y";
      stringArray0[6] = "Y";
      stringArray0[7] = "J0/i'p~Rii:>";
      Discretize.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = new Discretize("O");
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, int0);
  }
}
