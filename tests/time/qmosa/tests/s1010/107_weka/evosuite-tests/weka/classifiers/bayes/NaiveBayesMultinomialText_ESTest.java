/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:43:21 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CorrelationAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.setClassType((-1));
      testInstances1.setMultiInstance(false);
      IBk iBk0 = new IBk((-1));
      Capabilities capabilities0 = iBk0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setMultiInstance(true);
      Instances instances0 = testInstances2.generate("O9%?n/oTj`\"");
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getLNorm();
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      SparseInstance sparseInstance2 = new SparseInstance((-4397.919226), doubleArray0);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      naiveBayesMultinomialText0.pruneDictionary();
      binarySparseInstance1.setMissing(6);
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = 653;
      intArray0[2] = 6;
      intArray0[3] = 6;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("org.tartarus.snowball.ext", arrayList0, 2105);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.328124383167719
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setMinWordFrequency(3.0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      Discretize discretize0 = new Discretize();
      discretize0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1155.3939351);
      doubleArray0[2] = (-1155.3939351);
      SparseInstance sparseInstance0 = new SparseInstance((-1155.3939351), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      naiveBayesMultinomialText0.pruneDictionary();
      sparseInstance0.setMissing(4035);
      int[] intArray0 = new int[9];
      intArray0[0] = (-237);
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 4035;
      intArray0[4] = 6;
      intArray0[5] = 0;
      intArray0[6] = 6;
      intArray0[7] = 215;
      intArray0[8] = 6;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2.0, intArray0, (-461));
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      naiveBayesMultinomialText0.setPeriodicPruning(10);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9012735713814104
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      File file0 = MockFile.createTempFile("X$Zc`sC6!O%pZ<LP64r", (String) null);
      naiveBayesMultinomialText0.setStopwords(file0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.943052917634059
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_stopwords = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "F@hA-#n8&hskrqnQzb";
      Tokenizer.runTokenizer((Tokenizer) null, stringArray0);
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.setNorm((-169.1081416877));
      naiveBayesMultinomialText0.setNorm((-1.0));
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setLNorm((-2742.9163));
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.normTipText();
      assertEquals((-2742.9163), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2761492744002068
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W";
      stringArray0[1] = "";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getLNorm();
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      SparseInstance sparseInstance2 = new SparseInstance((-4397.919226), doubleArray0);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      naiveBayesMultinomialText0.pruneDictionary();
      binarySparseInstance1.setMissing(6);
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      naiveBayesMultinomialText0.periodicPruningTipText();
      intArray0[1] = 653;
      intArray0[2] = 6;
      doubleArray0[1] = (double) 6;
      intArray0[4] = 6;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-4397.919226), intArray0, 6);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.961542260479888
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText0.setPeriodicPruning(93);
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ym~-b15b2bG5zxr<th";
      stringArray0[1] = "(~";
      stringArray0[2] = "ym~-b15b2bG5zxr<th";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "ym~-b15b2bG5zxr<th";
      stringArray0[8] = "ym~-b15b2bG5zxr<th";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setNorm(0.693147181);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setLNorm(0.693147181);
      naiveBayesMultinomialText0.setNorm(5179.35110451033);
      double double0 = naiveBayesMultinomialText1.getNorm();
      assertEquals(0.693147181, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.786100866302153
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "l]P4OhX:]#w#-6'qw,";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(93);
      naiveBayesMultinomialText0.m_t = (double) 93;
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      Tokenizer.runTokenizer(tokenizer0, stringArray0);
      Tokenizer tokenizer1 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer1);
      naiveBayesMultinomialText0.setNorm(2956.6);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getLNorm();
      File file0 = MockFile.createTempFile("The LNorm to use for document length normalization.", (String) null, (File) null);
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getLNorm();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getStemmer();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "";
      stringArray0[1] = "l]P4OhX:]#w#-6'qw,";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.setPeriodicPruning(93);
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      Tokenizer.runTokenizer(tokenizer0, stringArray0);
      sGDText0.setUseStopList(true);
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.setNorm(93);
      naiveBayesMultinomialText0.setMinWordFrequency(1.0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3593718791894864
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getLNorm();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = 0.0;
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setTokenizer(tokenizer0);
      naiveBayesMultinomialText1.setNorm(0.0);
      naiveBayesMultinomialText1.setNorm(0.0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setMinWordFrequency(579.59648968629);
      naiveBayesMultinomialText2.pruneDictionary();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.setOptions(stringArray0);
      Discretize discretize0 = new Discretize();
      discretize0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.344945648581272
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      String[] stringArray0 = new String[5];
      naiveBayesMultinomialText0.setPeriodicPruning(93);
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      stringArray0[0] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[1] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[2] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[3] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[4] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      Tokenizer.runTokenizer(alphabeticTokenizer0, stringArray0);
      naiveBayesMultinomialText0.setTokenizer(alphabeticTokenizer0);
      naiveBayesMultinomialText0.setNorm(2956.6);
      naiveBayesMultinomialText0.setNorm((-1711.5374615));
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals((-1711.5374615), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getLNorm();
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      Random.setNextRandom(6);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      String[] stringArray0 = new String[5];
      naiveBayesMultinomialText0.setPeriodicPruning(93);
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      stringArray0[0] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[1] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[2] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      naiveBayesMultinomialText0.setLNorm(3.0);
      naiveBayesMultinomialText0.setUseStopList(true);
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertEquals(93, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0478340851970716
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) wordTokenizer0;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      File file0 = sGDText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getRevision();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 99.0;
      doubleArray0[3] = 99.0;
      doubleArray0[4] = 1.0;
      SparseInstance sparseInstance0 = new SparseInstance(99.0, doubleArray0);
      try { 
        coverTree0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9737955386768893
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.setMinWordFrequency(2472.23713611);
      naiveBayesMultinomialText0.getOptions();
      System.setCurrentTimeMillis(0L);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.LNormTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.476822644024398
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      AbstractClassifier.makeCopies(classifier0, 5);
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getPeriodicPruning();
      String[] stringArray0 = new String[2];
      naiveBayesMultinomialText0.setPeriodicPruning((-2236));
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[1] = "If true then document length is normalized according to the settings for norm and lnorm";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      nGramTokenizer0.setNGramMinSize(86);
      Tokenizer.tokenize((Tokenizer) nGramTokenizer0, stringArray0);
      nGramTokenizer0.setDelimiters("");
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.setPeriodicPruning((-2236));
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setLNorm(3620.960499084);
      assertEquals(3620.960499084, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9710863640582432
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      nGramTokenizer0.setNGramMaxSize((-167));
      nGramTokenizer0.getRevision();
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.normTipText();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-127);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
      
      SparseInstance sparseInstance0 = new SparseInstance(0);
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Instance instance0 = null;
      naiveBayesMultinomialText0.m_periodicP = (-2889);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.108872968847436
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.setNumNominalValues((-2));
      IBk iBk0 = new IBk(609);
      Instances instances0 = testInstances1.generate(" ");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(1076.3, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.987739820187409
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "l]P4OhX:]#w#-6'qw,";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getLNorm();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 93;
      SparseInstance sparseInstance0 = new SparseInstance(93, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      int[] intArray0 = new int[5];
      intArray0[0] = 93;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-1933.0797394024), intArray0, 6);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      sparseInstance1.mergeInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(6);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4747309914704094
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getLNorm();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      String[] stringArray0 = new String[0];
      Tokenizer.runTokenizer((Tokenizer) null, stringArray0);
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText1.tokenizerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setOptions(stringArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_norm = 0.0;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) wordTokenizer0;
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      
      String string1 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string1);
      
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.setLNorm(1460.70799728545);
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.setNorm((-1112.7178307317483));
      naiveBayesMultinomialText0.stemmerTipText();
      assertEquals((-1112.7178307317483), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "l]P4OhX:]#w#-6'qw,";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(93);
      naiveBayesMultinomialText0.m_t = (double) 93;
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      Tokenizer.runTokenizer(tokenizer0, stringArray0);
      Tokenizer tokenizer1 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer1);
      naiveBayesMultinomialText0.setNorm(2956.6);
      Discretize discretize0 = new Discretize();
      discretize0.getTechnicalInformation();
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7228120764467145
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getLNorm();
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      SparseInstance sparseInstance2 = new SparseInstance((-4397.919226), doubleArray0);
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      naiveBayesMultinomialText0.pruneDictionary();
      binarySparseInstance1.setMissing(6);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.pruneDictionary();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.tartarus.snowball.ext";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "ekL5t(SSsV";
      stringArray0[3] = "org.tartarus.snowball.ext";
      stringArray0[4] = "org.tartarus.snowball.ext";
      stringArray0[5] = "org.tartarus.snowball.ext";
      stringArray0[6] = "org.tartarus.snowball.ext";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom(254);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-757.181270675);
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (-757.181270675);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.lowercaseTokensTipText();
      naiveBayesMultinomialText1.getMinWordFrequency();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2427276237316462
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      MockFile mockFile0 = new MockFile(file0, "t:\":COH6eY}");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      double[] doubleArray0 = new double[2];
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getLNorm();
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      SparseInstance sparseInstance2 = new SparseInstance((-4397.919226), doubleArray0);
      SparseInstance sparseInstance3 = new SparseInstance(6);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      naiveBayesMultinomialText0.pruneDictionary();
      binarySparseInstance1.setMissing(6);
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = 657;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-4397.919226), intArray0, 6);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.188947438429127
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[2];
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getLNorm();
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      SparseInstance sparseInstance1 = new SparseInstance((-4397.919226), doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance0);
      naiveBayesMultinomialText0.pruneDictionary();
      binarySparseInstance1.setMissing(6);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
      
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.delete();
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      String string1 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string1);
      
      String string2 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string2);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(201);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      naiveBayesMultinomialText0.listOptions();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "aical";
      naiveBayesMultinomialText0.reset();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText0.pruneDictionary();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.108872986584512
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "r&rdI9A8A|I$x%O=;#A";
      naiveBayesMultinomialText1.setOptions((String[]) null);
      Discretize discretize0 = new Discretize();
      discretize0.getTechnicalInformation();
      naiveBayesMultinomialText1.setOptions(stringArray0);
      Random.setNextRandom(79);
  }
}
