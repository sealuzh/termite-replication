/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:35:33 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGD;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.Vote;
import weka.classifiers.rules.OneR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.LMT;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckGOE;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2868594972571565
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Evaluation.makeOptionString(lMT0, false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      C45Loader c45Loader0 = new C45Loader();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1226757988207967
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities1 = attributeSelectedClassifier0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      mockRandom0.longs();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.935895446832097
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1));
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation2 = new Evaluation(instances0);
      instances0.getRevision();
      evaluation1.numTrueNegatives(21);
      evaluation1.relativeAbsoluteError();
      evaluation0.priorEntropy();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation1.unclassified();
      evaluation0.recall(1);
      evaluation3.unweightedMicroFmeasure();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.071048296522635
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      textDirectoryLoader0.getOptions();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation2 = new Evaluation(instances0);
      instances1.getRevision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) gaussianProcesses0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 122;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      int int1 = (-1045);
      int int2 = 796;
      binarySparseInstance0.deleteAttributeAt(796);
      int int3 = 456;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) null, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7500165734978617
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      evaluation0.falseNegativeRate(48);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1117);
      Evaluation.handleCostOption((String) null, 1126);
      evaluation1.recall(48);
      evaluation0.toSummaryString();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.260501167468153
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      evaluation0.falseNegativeRate(0);
      Object object0 = new Object();
      textDirectoryLoader0.getDataSet();
      SGD sGD0 = new SGD();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(sGD0);
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances2 = testInstances0.generate("getUnpruned");
      Evaluation evaluation1 = new Evaluation(instances2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(536);
      try { 
        Evaluation.handleCostOption("\tUse cross-validation for boosting at all nodes (i.e., disable heuristic)", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 456;
      doubleArray0[1] = (double) 456;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(456, doubleArray0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader3.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.KBInformation();
      evaluation0.weightedFalsePositiveRate();
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4033948079084486
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".arff";
      stringArray0[2] = "listOptions";
      stringArray0[0] = "@data";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 938.189252346;
      doubleArray0[1] = (double) '}';
      doubleArray0[2] = 938.189252346;
      doubleArray0[3] = (double) '}';
      doubleArray0[4] = (double) 'Z';
      doubleArray0[5] = (double) '}';
      doubleArray0[6] = (double) 'Z';
      doubleArray0[7] = (double) 'Z';
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.6, doubleArray0);
      binarySparseInstance0.setWeight(288.6014176524045);
      binarySparseInstance0.isMissing((-534));
      Evaluation.main(stringArray0);
      C45Loader c45Loader0 = new C45Loader();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "-no-cv\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "vp");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.592965132436166
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      evaluation0.falseNegativeRate(48);
      Object object0 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedRecall();
      evaluation0.weightedMatthewsCorrelation();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5115339632265277
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'F';
      charArray0[2] = 'Z';
      charArray0[3] = 'G';
      charArray0[4] = 'F';
      charArray0[5] = '<';
      evaluation0.num2ShortID(97, charArray0, 97);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2073.2692738351234, intArray0, (-246));
      try { 
        evaluation0.updateStatsForPredictor(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6964338652581576
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      int int0 = 48;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(48);
      DataFlavor dataFlavor0 = DataFlavor.stringFlavor;
      StringSelection stringSelection0 = new StringSelection("@data");
      Reader reader0 = dataFlavor0.getReaderForText(stringSelection0);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(reader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@data\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0549626987123517
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      binarySparseInstance0.toString((-1045), 456);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 796;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 456;
      doubleArray2[3] = (double) 456;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 456;
      doubleArray2[6] = (double) 122;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray3[1] = (double) (-1045);
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) (-1045);
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (double) 122;
      evaluation0.toMatrixString();
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (double) 456;
      doubleArray3[8] = (double) 122;
      doubleArray0[2] = doubleArray3;
      gaussianProcesses0.m_L = doubleArray0;
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, 796);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.352114766509122
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities1 = attributeSelectedClassifier0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      mockRandom0.longs();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Vote vote0 = new Vote();
      Evaluation.makeOptionString(vote0, false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      C45Loader c45Loader0 = new C45Loader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      CheckGOE checkGOE0 = new CheckGOE();
      checkGOE0.setIgnoredProperties("getUnpruned");
      evaluation0.equals("");
      evaluation0.SFMeanPriorEntropy();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.653794972736169
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LMT lMT0 = new LMT();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      textDirectoryLoader0.setCharSet("4{&bhzTr*Dd");
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(1147.05, 1147.05);
      evaluation0.getClassPriors();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      libSVMLoader0.setUseRelativePath(false);
      evaluation0.kappa();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".arff";
      stringArray0[1] = "   * Runs the classfier from commandline.\n";
      stringArray0[2] = "Q58N]";
      evaluation0.weightedRecall();
      evaluation0.weightedMatthewsCorrelation();
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8499067947208396
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation2 = new Evaluation(instances0);
      instances1.getRevision();
      evaluation1.numTrueNegatives(1220);
      evaluation0.relativeAbsoluteError();
      evaluation2.priorEntropy();
      Evaluation evaluation3 = new Evaluation(instances0);
      double double0 = evaluation2.m_SumPriorEntropy;
      evaluation3.recall(0);
      evaluation1.unweightedMicroFmeasure();
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1342536816006463
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = new Capabilities(cfsSubsetEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(3864L);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.longs();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 122;
      doubleArray0[2] = (-1590.2217132961623);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) 122;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-2));
      evaluation1.weightedPrecision();
      double double0 = (-4490.1);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.606921945980302
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getNumBoostingIterations";
      stringArray0[1] = "4";
      stringArray0[2] = "w-d{";
      stringArray0[3] = "\tInitial class value count (default 0)";
      stringArray0[4] = "F#>b867<Q";
      stringArray0[5] = "Kappa statistic                    ";
      stringArray0[6] = "Class for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instances) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\n";
      stringArray0[7] = "maxBoostingIterationsTipText";
      stringArray0[8] = "getErrorOnProbabilities";
      textDirectoryLoader0.setOptions(stringArray0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Evaluation.makeOptionString(decisionStump0, true);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      C45Loader c45Loader0 = new C45Loader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      CheckGOE checkGOE0 = new CheckGOE();
      evaluation0.toMatrixString("graphType");
      evaluation0.trueNegativeRate(1757);
      evaluation0.incorrect();
      evaluation0.pctCorrect();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6042948040975085
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      MockRandom mockRandom0 = new MockRandom((-1));
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      evaluation0.falseNegativeRate((-1));
      Object object0 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Object object1 = new Object();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.longs();
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.errorRate();
      evaluation1.toClassDetailsString(" ");
      // Undeclared exception!
      try { 
        evaluation0.precision(108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances.forCapabilities(capabilities0);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities1 = attributeSelectedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      lMT0.getCapabilities();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      mockRandom0.longs();
      lMT0.listOptions();
      int[] intArray0 = new int[22];
      intArray0[0] = 700;
      intArray0[1] = (-2);
      intArray0[2] = (-1);
      intArray0[3] = (-429);
      intArray0[4] = (-2);
      intArray0[5] = (-1);
      intArray0[6] = (-429);
      intArray0[7] = (-429);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      binarySparseInstance0.toString((-1045), 456);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2918661334396027
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getNumBoostingIterations";
      stringArray0[1] = "4";
      stringArray0[2] = "w-d{";
      stringArray0[3] = "\tInitial class value count (default 0)";
      stringArray0[4] = "F#>b867<Q";
      stringArray0[5] = "Kappa statistic                    ";
      stringArray0[6] = "Class for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instances) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\n";
      stringArray0[7] = "maxBoostingIterationsTipText";
      stringArray0[8] = "getErrorOnProbabilities";
      textDirectoryLoader0.setOptions(stringArray0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      String string0 = Evaluation.makeOptionString(decisionStump0, true);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      C45Loader c45Loader0 = new C45Loader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      CheckGOE checkGOE0 = new CheckGOE();
      checkGOE0.setIgnoredProperties(string0);
      evaluation0.equals(checkGOE0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.236155081977357
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 796;
      double[] doubleArray2 = new double[7];
      gaussianProcesses0.getTechnicalInformation();
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 456;
      doubleArray2[3] = (double) 456;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 456;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray3[1] = (double) (-1045);
      doubleArray3[2] = (double) 1;
      doubleArray2[2] = (double) (-1045);
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (double) 0;
      evaluation0.toMatrixString(".arff");
      evaluation0.trueNegativeRate(8);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.makeOptionString(classifier0, false);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[6];
      textDirectoryLoader0.setCharSet("3D,3~");
      stringArray0[0] = "@data";
      KStar kStar0 = new KStar();
      Capabilities capabilities0 = kStar0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-977L));
      mockRandom0.longs();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1.7976931348623157E308));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.878119976013433
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      MockRandom mockRandom0 = new MockRandom((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1590.2217132961623), (-3857.058));
      evaluation0.getClassPriors();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      libSVMLoader0.reset();
      LibSVMLoader libSVMLoader1 = new LibSVMLoader();
      try { 
        libSVMLoader1.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances.forCapabilities(capabilities0);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities1 = attributeSelectedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      mockRandom0.longs();
      int[] intArray0 = new int[22];
      intArray0[0] = 700;
      intArray0[1] = (-2);
      intArray0[2] = (-1);
      intArray0[3] = (-429);
      intArray0[4] = (-2);
      intArray0[5] = (-1);
      intArray0[6] = (-429);
      intArray0[7] = (-429);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      binarySparseInstance0.toString((-1045), 456);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 796;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 456;
      doubleArray2[3] = (double) 456;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 456;
      doubleArray2[6] = (double) 122;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray3[1] = (double) (-1045);
      evaluation0.fMeasure(122);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance((Instances) null);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 436.7349117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5357537518264803
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      evaluation0.falseNegativeRate(35);
      MockRandom mockRandom0 = new MockRandom();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Evaluation.makeOptionString((Classifier) null, true);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "distributionForInstance";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "qC8hE+,bx)'\"jj?";
      Evaluation.main(stringArray0);
      C45Loader c45Loader0 = new C45Loader();
      assertEquals("Use relative rather than absolute paths", c45Loader0.useRelativePathTipText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.501730978302286
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      evaluation0.falseNegativeRate(0);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Object[] objectArray0 = new Object[9];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) evaluation0;
      mockRandom0.ints();
      mockRandom0.nextGaussian();
      objectArray0[3] = (Object) null;
      objectArray0[5] = (Object) cVParameterSelection0;
      mockRandom0.longs();
      objectArray0[6] = (Object) cVParameterSelection0;
      objectArray0[8] = (Object) Double.NaN;
      evaluation0.toSummaryString(".bsi", true);
      try { 
        evaluation0.evaluateModelOnce((Classifier) cVParameterSelection0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2756769509335335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 796;
      double[] doubleArray2 = new double[7];
      gaussianProcesses0.getTechnicalInformation();
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 456;
      doubleArray2[3] = (double) 456;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 456;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      binarySparseInstance0.s_numericAfterDecimalPoint = 2;
      doubleArray3[1] = (double) (-1045);
      doubleArray3[2] = (double) 1;
      doubleArray2[2] = (double) (-1045);
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (double) 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.toMatrixString(".arff");
      evaluation0.trueNegativeRate(8);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      try { 
        evaluation0.evaluateModelOnce((Classifier) gaussianProcesses0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3914337620844703
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      binarySparseInstance0.toString((-1045), 456);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[3];
      instances0.add((Instance) binarySparseInstance0);
      stringArray0[0] = ".bsi";
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2085716838811673
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      int int0 = 48;
      evaluation0.falseNegativeRate(48);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "measureMean_points_visited");
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(48, (char[]) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@data";
      stringArray0[1] = ".arff";
      stringArray0[2] = "listOptions";
      stringArray0[3] = "listOptions";
      stringArray0[4] = ".bsi";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("listOptions");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "listOptions");
      textDirectoryLoader1.setDebug(true);
      stringArray0[5] = "@relation";
      textDirectoryLoader0.setOptions(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      textDirectoryLoader1.reset();
      try { 
        Evaluation.handleCostOption("listOptions", 123);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7440492601665603
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getNumBoostingIterations";
      stringArray0[1] = "4";
      stringArray0[2] = "w-d{";
      stringArray0[3] = "\tInitial class value count (default 0)";
      stringArray0[4] = "F#>b867<Q";
      stringArray0[5] = "Kappa statistic                    ";
      stringArray0[6] = "Class for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instances) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\n";
      stringArray0[7] = "maxBoostingIterationsTipText";
      stringArray0[8] = "getErrorOnProbabilities";
      textDirectoryLoader0.setOptions(stringArray0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(24);
      evaluation0.relativeAbsoluteError();
      evaluation0.priorEntropy();
      evaluation0.unclassified();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.recall(10001);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3265171534282083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Evaluation.makeOptionString(decisionStump0, true);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      C45Loader c45Loader0 = new C45Loader();
      assertEquals("C4.5 data files", c45Loader0.getFileDescription());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      MockRandom mockRandom0 = new MockRandom((-1));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1208, charArray0, (-46));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      binarySparseInstance0.toString((-1045), 456);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = '';
      charArray0[2] = '&';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[3] = '&';
      charArray0[4] = ';';
      charArray0[5] = ')';
      charArray0[6] = '0';
      charArray0[7] = ':';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-556), charArray0, 477);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3377277902783415
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      evaluation0.falseNegativeRate(0);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Object[] objectArray0 = new Object[9];
      MockRandom mockRandom1 = new MockRandom();
      Object object1 = new Object();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      Object object2 = new Object();
      mockRandom0.longs();
      Evaluation evaluation1 = new Evaluation(instances0);
      Object object3 = new Object();
      try { 
        evaluation1.crossValidateModel((Classifier) cVParameterSelection1, instances1, 469, (Random) mockRandom1, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.085515758348578
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[6];
      textDirectoryLoader0.setCharSet("3D,3~");
      stringArray0[0] = "@data";
      stringArray0[1] = ".arff";
      stringArray0[2] = "listOptions";
      stringArray0[3] = "listOptions";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@relation";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(37.7095063, 1147.05);
      evaluation0.getClassPriors();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      libSVMLoader0.setUseRelativePath(true);
      evaluation0.kappa();
      evaluation0.m_Correct = 1.0;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.5422334087853553
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.longs();
      mockRandom0.longs();
      evaluation0.toClassDetailsString();
      try { 
        evaluation0.crossValidateModel((Classifier) lMT0, instances0, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.12833456529567
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      Vote vote0 = new Vote();
      Evaluation.makeOptionString(vote0, true);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      C45Loader c45Loader0 = new C45Loader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      CheckGOE checkGOE0 = new CheckGOE();
      // Undeclared exception!
      try { 
        checkGOE0.setIgnoredProperties((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.CheckGOE", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8435387000488044
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.longs();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6753760674923666
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 456;
      doubleArray0[1] = (double) 456;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(456, doubleArray0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader3.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      BayesNet bayesNet0 = new BayesNet();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5403304108653817
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      Instances instances2 = instances1.stringFreeStructure();
      double double0 = evaluation0.falseNegativeRate((-2560));
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      instances0.addAll((Collection<? extends Instance>) instances2);
      Object object0 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Object object1 = new Object();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation1.toSummaryString("hk7S@\"qu}M'", false);
      assertEquals("hk7S@\"qu}M'\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      
      double double1 = evaluation1.correct();
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.areaUnderROC(0);
      boolean boolean0 = evaluation1.equals("hk7S@\"qu}M'\nTotal Number of Instances                0     \n");
      assertFalse(boolean0);
      assertTrue(evaluation1.equals((Object)evaluation0));
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.748897745015045
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation2 = new Evaluation(instances0);
      instances1.getRevision();
      evaluation1.numTrueNegatives(1220);
      evaluation0.relativeAbsoluteError();
      gaussianProcesses0.setNoise((-352.2));
      double double1 = evaluation2.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.unclassified();
      assertEquals(0.0, double2, 0.01);
      
      System.setCurrentTimeMillis(1);
      double double3 = evaluation0.correct();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      binarySparseInstance0.toString((-1045), 456);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 796;
      doubleArray0[1] = (double) 796;
      doubleArray0[2] = (double) (-1045);
      doubleArray0[3] = (double) 2;
      int[] intArray0 = new int[7];
      intArray0[0] = 796;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = (-1045);
      intArray0[5] = (-1045);
      intArray0[6] = (-429);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-3151.650274585), intArray0, (-350));
      try { 
        evaluation0.updateStatsForPredictor((-429), binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.33209629393307
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      instances0.parallelStream();
      evaluation0.falseNegativeRate(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      evaluation0.falseNegativeRate(0);
      Object object0 = new Object();
      Object object1 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(0);
      mockRandom1.longs();
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.errorRate();
      evaluation1.toClassDetailsString(".arff");
      evaluation0.precision(0);
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) null;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) mockRandom1;
      objectArray0[4] = (Object) textDirectoryLoader0;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) converterUtils_DataSource0;
      objectArray0[7] = object0;
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      binarySparseInstance0.toString((-1045), 456);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      binarySparseInstance0.setMissing(6);
      String[] stringArray0 = new String[3];
      instances0.add((Instance) binarySparseInstance0);
      stringArray0[0] = ".bsi";
      stringArray0[1] = "0.0";
      stringArray0[2] = ".arff";
      MockRandom mockRandom0 = new MockRandom(2);
      try { 
        evaluation0.crossValidateModel("6QF&i[xd9p1O2", instances0, 122, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: 6QF&i[xd9p1O2
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 122;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Missing class values", arrayList0, 122);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.1188256724405585
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      int int0 = 10;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      textDirectoryLoader0.listOptions();
      String[] stringArray0 = new String[0];
      DecisionStump.main(stringArray0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.numFalseNegatives(10);
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4199341068223927
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1));
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      evaluation0.falseNegativeRate((-1));
      Object object0 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Object object1 = new Object();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.longs();
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom2 = new MockRandom(2565L);
      mockRandom0.longs();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 1.2000000029802322);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 456;
      doubleArray0[1] = (double) 456;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(456, doubleArray0);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader3.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      evaluation0.truePositiveRate(3159);
      double double0 = evaluation0.m_SumErr;
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1426));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.recall((-1325));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1325
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.205352756319893
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".arff";
      stringArray0[2] = "listOptions";
      stringArray0[0] = "@data";
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[7] = '}';
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      assertEquals(1.0, evaluation1.kappa(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8934284047624406
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      binarySparseInstance0.toString((-1045), 456);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(".bsi", true);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5403304108653817
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.weightedFalseNegativeRate();
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(double1, double0, 0.01);
      
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      evaluation0.falseNegativeRate(35);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Object object1 = new Object();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      String string0 = evaluation0.toSummaryString((String) null, false);
      assertEquals("null\nTotal Number of Instances                0     \n", string0);
      
      evaluation1.setDiscardPredictions(true);
      assertEquals(Double.NaN, evaluation1.weightedFalseNegativeRate(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.3074153952359477
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      Instances instances2 = instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      evaluation0.falseNegativeRate(48);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Object object1 = new Object();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.longs();
      evaluation0.unweightedMacroFmeasure();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) cVParameterSelection0, instances2, 48, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      converterUtils_DataSource0.nextElement(instances0);
      textDirectoryLoader0.reset();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(97, charArray0, 97);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5053886852351914
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CostMatrix costMatrix0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'F';
      charArray0[2] = 'Z';
      charArray0[3] = 'G';
      charArray0[4] = 'F';
      charArray0[5] = '<';
      evaluation0.num2ShortID(97, charArray0, 97);
      int int0 = (-2152);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix1 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.4273451721596009
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 122;
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      boolean boolean0 = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Evaluation.makeOptionString(decisionStump0, true);
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Decision Stump: No model built yet.";
      stringArray0[1] = string0;
      DecisionStump.main(stringArray0);
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation.makeOptionString(cVParameterSelection0, false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[2] = ".gz";
      stringArray0[5] = ".libsvm";
      Evaluation.main(stringArray0);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        Evaluation.evaluateModel((Classifier) cVParameterSelection0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      evaluation0.falseNegativeRate(48);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      evaluation0.truePositiveRate(48);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances1);
      int[] intArray0 = new int[8];
      intArray0[0] = 48;
      intArray0[1] = 48;
      intArray0[2] = 48;
      intArray0[3] = 48;
      intArray0[4] = 2180;
      intArray0[5] = 48;
      intArray0[6] = 48;
      intArray0[7] = 48;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(48, 2180, intArray0, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.441032212417929
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = new Capabilities(lMT0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1));
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      evaluation0.falseNegativeRate((-1));
      evaluation0.falseNegativeRate((-1));
      Object object0 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.longs();
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom2 = new MockRandom((-1801L));
      MockRandom mockRandom3 = new MockRandom(391L);
      Instances instances1 = instances0.resampleWithWeights((Random) mockRandom3);
      instances1.listIterator();
      int int0 = 30;
      try { 
        evaluation0.crossValidateModel((Classifier) cVParameterSelection0, instances1, 88, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      try { 
        Evaluation.evaluateModel("", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.deleteAttributeAt(796);
      binarySparseInstance0.toString((-1045), 456);
      binarySparseInstance0.setValueSparse(2, 10.0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1903.1113725), doubleArray0);
      binarySparseInstance1.setWeight(796);
      binarySparseInstance0.isMissing(796);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Q_]5K!%# 1";
      stringArray0[1] = "Q_]5K!%# 1";
      Evaluation.main(stringArray0);
      C45Loader c45Loader0 = new C45Loader();
      assertFalse(c45Loader0.getUseRelativePath());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5107669586101957
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".arff";
      stringArray0[2] = "\nOptions specific to ";
      stringArray0[3] = ".bsi";
      stringArray0[4] = ".arff";
      textDirectoryLoader0.setOptions(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource((Instances) null);
      textDirectoryLoader0.reset();
      try { 
        Evaluation.handleCostOption(".bsi", 7);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      instances1.stringFreeStructure();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      Object object0 = new Object();
      BayesNet bayesNet0 = new BayesNet();
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[2];
      intArray0[0] = 48;
      intArray0[1] = 746;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-0.5), intArray0, 16);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String string0 = Evaluation.getGlobalInfo(additiveRegression0);
      assertEquals("\nSynopsis for weka.classifiers.meta.AdditiveRegression:\n\n Meta classifier that enhances the performance of a regression base classifier. Each iteration fits a model to the residuals left by the classifier on the previous iteration. Prediction is accomplished by adding the predictions of each classifier. Reducing the shrinkage (learning rate) parameter helps prevent overfitting and has a smoothing effect but increases the learning time.\n\nFor more information see:\n\nJ.H. Friedman (1999). Stochastic Gradient Boosting.", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ConverterUtils.DataSource.read((InputStream) byteArrayInputStream0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.439720770839918
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 122;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(122);
      binarySparseInstance0.dataset();
      binarySparseInstance0.setValueSparse((-542), (-4963.78));
      binarySparseInstance0.setWeight(1158.3);
      binarySparseInstance0.toString(112, 2);
      Evaluation.handleCostOption("", (-1078));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
