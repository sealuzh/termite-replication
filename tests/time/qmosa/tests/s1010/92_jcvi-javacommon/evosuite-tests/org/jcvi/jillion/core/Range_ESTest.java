/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 22:18:41 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.648559802285645
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775781L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775781L, 9223372036854775781L);
      range_Builder0.expandEnd(9223372036854775781L);
      Range range1 = Range.ofLength(330L);
      range1.startsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 0 .. 9223372036854775781 ]/SB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-352L), 2490L);
      Range.parseRange("[ 0 .. 9223372036854775781 ]/SB");
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-893L));
      Range range2 = Range.parseRange("[ 0 .. 9223372036854775781 ]/SB");
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      
      long long0 = range2.getLength();
      //  // Unstable assertion: assertEquals(9223372036854775781L, long0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.795445819164575
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854739289L);
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      List<Range> list1 = range1.complementFrom(list0);
      Range range2 = Range.ofLength(9223372036854739289L);
      range2.complementFrom(list0);
      Range.CoordinateSystem.values();
      Object object1 = new Object();
      Range range3 = Range.ofLength(9223372036854739289L);
      range3.equals(list1);
      Range.of((-128L), 65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.spliterator();
      Range.Comparators.values();
      Range range4 = Range.of((-186L));
      Range range5 = range4.intersection(range3);
      Range.of(1670L);
      range4.complement(range5);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.262778740671332
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775646L);
      Long long0 = new Long(9223372036854775646L);
      Object object1 = new Object();
      Range range0 = Range.of(2147483647L, 9223372036854775646L);
      range0.equals((Object) null);
      Range range1 = Range.of(32767L, 9223372036854775646L);
      Range.ofLength(2490L);
      Range range2 = range1.asRange();
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.112251040213321
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2147483647L;
      Range range0 = Range.of(range_CoordinateSystem0, (-788L), 2147483647L);
      Long long1 = new Long(2147483647L);
      range0.equals(long1);
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4085822640121797
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(range1.isEmpty());
      assertTrue(list0.contains(range0));
      
      Range.Comparators.values();
      Range range2 = range0.intersection(range0);
      Range.of(range_CoordinateSystem0, 293L, 293L);
      Object object0 = new Object();
      Range.of(4294967295L);
      range2.equals((Object) null);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.345377145648029
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 9223372036854775646L);
      range1.isSubRangeOf(range0);
      Object object1 = new Object();
      Object object2 = new Object();
      range0.toString();
      Range.parseRange("[ 32767 .. 32767 ]/0B", range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.880478156833429
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775646L);
      Long long0 = new Long(9223372036854775646L);
      Object object1 = new Object();
      range0.equals(object1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 1283L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.615143534358197
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      range1.endsBefore(range0);
      long long0 = 255L;
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = range_Builder0.shift(255L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.expandBegin(9223372036854775807L);
      range_Builder1.expandEnd((-9223372036854775808L));
      range0.toString(range_CoordinateSystem0);
      range_Builder1.copy();
      range_Builder2.shift((-128L));
      range1.isSubRangeOf(range0);
      Range.of(296L);
      long long1 = (-41L);
      Range range2 = Range.of((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range2.complement(range1);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.518276774230327
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4386L), (-2476L));
      List<Range> list0 = range0.split(9223372036854772057L);
      Range range1 = Range.of((-2476L), (-2476L));
      Range range2 = range1.intersection(range0);
      range2.getEnd();
      range2.getEnd(range_CoordinateSystem0);
      range0.complementFrom(list0);
      Range range3 = range0.intersection(range1);
      range0.split(9223372036854769568L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      range1.getEnd(range_CoordinateSystem0);
      range2.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of((-2475L), 9223372036854769568L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, (-3206L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3207 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.576286407504466
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775781L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775781L, 9223372036854775781L);
      range_Builder0.expandEnd(9223372036854775781L);
      long long0 = 330L;
      Range range1 = Range.ofLength(330L);
      range1.startsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      long long1 = 32767L;
      Range range2 = Range.of(range_CoordinateSystem0, 32767L, 9223372036854772056L);
      Object object0 = new Object();
      long long2 = 2490L;
      Range.of(2490L);
      range2.equals("Tx-8Qx&/'XA?U?3/G");
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0890552998538734
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      range0.getEnd();
      range0.isEmpty();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 0L, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2567787762531655
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      range0.iterator();
      Range range1 = Range.ofLength(9223372036854775210L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.33099322773545
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(9223372036854775781L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775781L);
      Range.of(9223372036854775781L);
      Range range1 = Range.ofLength(9223372036854775781L);
      Range.Comparators.values();
      range1.complement(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.copy();
      Range.ofLength(9223372036854775781L);
      // Undeclared exception!
      try { 
        Range.ofLength((-957L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5424383212612334
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      range0.getLength();
      range_Builder0.shift(563L);
      Range range1 = Range.of(162L);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.copy();
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4104086836950382
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range range1 = Range.of((-211L));
      long long0 = 0L;
      Range range2 = Range.ofLength(0L);
      range2.isEmpty();
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      range0.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 1878L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1878L, (-211L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.881886088170851
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854772057L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(3409L);
      range_Builder1.expandEnd(1273L);
      Range range1 = Range.ofLength(3409L);
      range1.isEmpty();
      range0.startsBefore(range1);
      range0.endsBefore(range1);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1834L), 3751L);
      range0.isSubRangeOf(range2);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 3408 ]/0B", string0);
      
      Range.CoordinateSystem.values();
      List<Range> list0 = range2.split(3409L);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(0, list1.size());
      assertEquals(2, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string1 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 9223372036854772056 ]/0B", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3985582260051928
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(2147483647L);
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-352L), 2147483647L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = Range.of((-352L));
      assertFalse(range2.isEmpty());
      
      range1.equals(object3);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9694435252646096
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(2147483649L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(2147483649L);
      Range.of(2147483649L);
      Range.ofLength(65535L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.508124571793095
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(9223372036854775781L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(9223372036854775781L);
      Range.ofLength(330L);
      Range range1 = Range.of(330L, 9223372036854775781L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.complement(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      long long0 = 2578L;
      // Undeclared exception!
      try { 
        Range.of(3899L, (-480L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2224106775160113
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      range0.getEnd();
      range0.isEmpty();
      range0.endsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6501733284065114
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(656L);
      Range range2 = Range.of((-1L), 6818L);
      range2.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-2147486741L), 1L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 3409L, 6818L);
      range3.isSubRangeOf(range0);
      range0.toString();
      Range.CoordinateSystem.values();
      List<Range> list0 = range1.split(1L);
      // Undeclared exception!
      range1.complementFrom(list0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.097692884481582
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2147483647L);
      range0.equals(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967295L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 4294967295L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.285955012141046
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      range0.getEnd();
      range0.isEmpty();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.isEmpty();
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 2147483646L, 2147483646L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1406L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.695722484943548
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(2361L);
      range0.getLength();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2361L, 2867L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range0.getLength();
      range_Builder0.shift(2867L);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.expandBegin(2867L);
      Range.Builder range_Builder2 = new Range.Builder(2361L);
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 2361 .. 2867 ]/SB", string0);
      
      range_Builder0.copy();
      range_Builder1.shift(1L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.of(1L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of((-41L), 1L);
      range3.complement(range0);
      Range.Comparators.values();
      Range range4 = range0.intersection(range1);
      assertFalse(range4.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, 296L, 2867L);
      Object object0 = new Object();
      Range range6 = Range.of(2361L);
      range5.equals(range6);
      assertSame(range6, range0);
      assertFalse(range6.equals((Object)range1));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6568812519311478
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      range0.equals(linkedList0);
      Range range1 = Range.of((-1313L), 2147483647L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range1.spliterator();
      Range.Comparators.values();
      Range range2 = range0.intersection(range1);
      Range.of(3944L);
      range1.complement(range0);
      range2.complementFrom(linkedList0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.439309418757038
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      List<Range> list0 = range1.split(2553L);
      List<Range> list1 = range1.complementFrom(list0);
      range0.complementFrom(list1);
      Long long0 = new Long((-128L));
      Object object0 = new Object();
      range1.equals(object0);
      range0.complement(range0);
      Range.Comparators.values();
      Range range2 = range0.intersection(range1);
      range2.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1313L), (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0785026894537206
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(9223372036854775781L);
      Range range1 = Range.ofLength(9223372036854775781L);
      Range.Comparators.values();
      Range range2 = range0.intersection(range1);
      Range.of(32767L);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(object1);
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range0));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3095862908534874
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(9223372036854775781L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift((-841L));
      range_Builder0.expandEnd(9223372036854775781L);
      Range range1 = Range.of(9223372036854775781L);
      Range range2 = Range.ofLength(9223372036854775781L);
      Range.Comparators.values();
      Range range3 = range1.intersection(range2);
      Range.of(32767L);
      Object object0 = new Object();
      Range.of(1L);
      range3.equals(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd((-841L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.452613641304443
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(3751L);
      range1.isEmpty();
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 3409L, 3751L);
      Range range3 = Range.of(range_CoordinateSystem0, 3751L, 2147483647L);
      range1.isSubRangeOf(range2);
      Object object0 = new Object();
      range3.equals(object0);
      Range range4 = Range.of(656L);
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.673315792251639
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(3751L);
      range1.isEmpty();
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 3409L, 3751L);
      Range range3 = Range.of(range_CoordinateSystem0, 3751L, 2147483647L);
      range1.isSubRangeOf(range2);
      range0.toString();
      Range.CoordinateSystem.values();
      List<Range> list0 = range1.split(3409L);
      List<Range> list1 = range3.complementFrom(list0);
      assertTrue(list0.contains(range2));
      assertFalse(list1.contains(range3));
      assertEquals(1, list1.size());
      assertFalse(list0.contains(range1));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range2.toString(range_CoordinateSystem2);
      assertEquals("[ 3409 .. 3750 ]/0B", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.248045354597022
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.isEmpty();
      boolean boolean1 = range0.isSubRangeOf(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      boolean boolean2 = range0.startsBefore(range1);
      assertFalse(boolean2 == boolean1);
      
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of((-2349L));
      assertFalse(range3.isEmpty());
      
      Object object0 = new Object();
      range2.equals("zIv>D");
      Object object1 = new Object();
      boolean boolean3 = range1.equals(range2);
      assertSame(range2, range1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9512516113626925
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(9223372036854775807L);
      Range.ofLength(300L);
      range0.isEmpty();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6142027935996386
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, (-1L));
      Range.of(1893L);
      Range range1 = Range.ofLength(9223372036854774648L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      boolean boolean0 = range2.endsBefore(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range3 = Range.of((-1L));
      Range range4 = Range.ofLength(2866L);
      boolean boolean1 = range4.intersects(range3);
      assertFalse(range3.isEmpty());
      
      boolean boolean2 = range2.isSubRangeOf(range4);
      assertNotSame(range4, range2);
      assertFalse(range2.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3634950142437416
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.ofLength(3409L);
      Range range0 = Range.of(3409L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-4251L);
      Range.of(range_CoordinateSystem2, (-4251L), (-237L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 3409L, 2670L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4653005688892407
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(634L);
      Range range1 = Range.ofLength(3751L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
      
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 634L, 3409L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      boolean boolean0 = range1.equals(range2);
      Long long0 = new Long(1160L);
      boolean boolean1 = range2.equals(long0);
      assertTrue(boolean1 == boolean0);
      assertSame(range2, range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.663808110009934
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 3636L;
      Range range1 = Range.of(range_CoordinateSystem0, 3636L, 3636L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.getBegin();
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      List<Range> list0 = range2.complement(range1);
      range2.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.parseRange("[ 1 .. 1 ]/RB");
      range0.intersection(range2);
      Range.Builder range_Builder1 = new Range.Builder(0L, 0L);
      range3.getLength();
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(1128L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.493432022880082
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-947L), 0L);
      Range.ofLength(0L);
      long long0 = 0L;
      long long1 = (-1L);
      Range.of(0L, 6818L);
      Range.of(6818L);
      long long2 = (-22L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2595246639933446
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(9223372036854775781L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift((-841L));
      range_Builder0.expandEnd(9223372036854775781L);
      Range range1 = Range.of(9223372036854775781L);
      Range range2 = Range.ofLength(9223372036854775781L);
      Range.Comparators.values();
      Range range3 = range1.intersection(range2);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertNotSame(range3, range1);
      
      Range.of(32767L);
      Object object0 = new Object();
      Range range4 = Range.of(1L);
      Range range5 = Range.of(1L);
      boolean boolean0 = range4.equals((Object) null);
      //  // Unstable assertion: assertSame(range4, range5);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.427033277507291
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(3751L);
      range1.isEmpty();
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      range0.startsBefore(range1);
      Long long0 = new Long(3409L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 836L, 3751L);
      Object object1 = new Object();
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of(656L, 656L);
      Range range3 = Range.ofLength(1519L);
      Range range4 = range3.asRange();
      boolean boolean1 = range0.isSubRangeOf(range4);
      assertSame(range0, range2);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3186021890455444
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(2147483647L, 2147483647L);
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-352L), 1283L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = Range.of((-352L));
      assertFalse(range2.isEmpty());
      
      Object object4 = new Object();
      range1.equals(object4);
      assertNotSame(range1, range2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3982229258608485
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(3751L);
      range1.isEmpty();
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 3409L, 3751L);
      Range.of(range_CoordinateSystem0, 3751L, 2147483647L);
      range1.isSubRangeOf(range2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.335175632092512
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L), 314L);
      Object object1 = new Object();
      Range.of(1L);
      Range.ofLength(1L);
      Object object2 = new Object();
      Object object3 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2973894117283176
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2147483647L);
      range0.equals(range_CoordinateSystem1);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      Range.of(2147483647L, 2147483647L);
      range1.isSubRangeOf(range0);
      long long0 = range2.getLength();
      //  // Unstable assertion: assertEquals(9223372034707292000L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem3);
      //  // Unstable assertion: assertEquals("[ 1 .. 2147483647 ]/RB", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.6630299921210714
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3636L, 3636L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range0.getBegin();
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      List<Range> list0 = range2.complement(range1);
      range2.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range4 = Range.of(range_CoordinateSystem1, (-2922L), 255L);
      range4.intersects(range3);
      // Undeclared exception!
      try { 
        range3.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2595693344322374
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.of((-1171L), 3409L);
      Range range0 = Range.of((-2055L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.416473122449809
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      Range range2 = range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.ofLength(0L);
      Range.of(0L, 0L);
      range0.equals(range_CoordinateSystem0);
      Range range4 = Range.of(32759L, 32759L);
      Range.ofLength(0L);
      Range.ofLength(32759L);
      range4.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.543496770927488
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.ofLength(656L);
      Range range0 = Range.of((-201L));
      Range range1 = Range.ofLength(0L);
      Range.Comparators.values();
      range0.intersection(range1);
      Range range2 = Range.of(3730L);
      Object object0 = new Object();
      range1.equals(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range range3 = range_Builder0.build();
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.618705964913504
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-947L), 0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = Range.of(0L, 0L);
      Range range3 = range0.intersection(range2);
      boolean boolean0 = range1.equals(range3);
      boolean boolean1 = range2.isSubRangeOf(range0);
      assertFalse(boolean1 == boolean0);
      
      range0.split(1243L);
      Range range4 = Range.of((-163L));
      assertFalse(range4.isEmpty());
      
      range2.asRange();
      Range range5 = range2.asRange();
      range5.startsBefore(range2);
      boolean boolean2 = range1.isSubRangeOf(range3);
      assertFalse(range0.isEmpty());
      assertTrue(boolean2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3257167430357915
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(2147483647L);
      Object object1 = new Object();
      range0.equals(object1);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-352L), 1283L);
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = Range.of((-352L));
      Object object4 = new Object();
      range1.equals(object4);
      assertNotSame(range1, range2);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = 9223372036854775781L;
      Range.of(9223372036854775781L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-445L), 9223372036854775781L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.6726676150786517
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      range0.isEmpty();
      range0.startsBefore(range0);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 656L, 3751L);
      Range range2 = Range.of(range_CoordinateSystem0, 3751L, 2147483647L);
      range0.isSubRangeOf(range1);
      Range.of((-32768L));
      range1.isSubRangeOf(range0);
      List<Range> list0 = range1.complement(range2);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4236308672346483
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(3751L);
      Range range2 = Range.of(1160L, 32767L);
      range1.complement(range0);
      Range.Comparators.values();
      range2.intersection(range0);
      range1.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("RzPPms)QgE$Is");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.RzPPms)QgE$Is
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.110236521387714
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      long long0 = 3409L;
      range_Builder0.expandEnd(9223372036854775807L);
      Range range1 = Range.ofLength(3409L);
      range1.isEmpty();
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 3409L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0308372592153177
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.of(3751L);
      Range range1 = Range.ofLength(32767L);
      Range.Comparators.values();
      Range range2 = range0.intersection(range1);
      Range.of(3751L);
      Object object0 = new Object();
      range2.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3895039628745627
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-140L), 3648L);
      long long0 = (-2457L);
      Range range2 = Range.of((-2457L));
      range0.intersects(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.isSubRangeOf(range2);
      range1.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.471517584257664
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range range1 = Range.of(656L);
      range0.intersects(range1);
      Range range2 = Range.ofLength(3751L);
      Range range3 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range3.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("RzPPms)QgE$Is");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.RzPPms)QgE$Is
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.299472235883228
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      Range.of((-2147483648L), (-2147483648L));
      Object object1 = new Object();
      Range.of(1089L);
      // Undeclared exception!
      try { 
        Range.ofLength((-947L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9370665455009894
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5008480558274213
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-947L), 0L);
      Range.ofLength(0L);
      Range range1 = Range.of((-947L), 0L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range1);
      
      Range range3 = Range.ofLength(0L);
      range0.equals(range_CoordinateSystem0);
      Range range4 = Range.of(32767L, 32767L);
      Range range5 = Range.ofLength(0L);
      Range range6 = range5.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range6.getEnd(range_CoordinateSystem1);
      assertEquals(0L, long0);
      
      range4.isSubRangeOf(range3);
      boolean boolean0 = range6.isSubRangeOf(range0);
      assertNotSame(range0, range2);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2796489921384167
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(0L);
      List<Range> list0 = range0.split(1L);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      assertTrue(list2.isEmpty());
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6452128078922934
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(3751L);
      range1.isEmpty();
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), (-748L));
      boolean boolean0 = range2.startsBefore(range0);
      List<Range> list0 = range1.split(656L);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range3 = Range.of((-2147483648L));
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      
      boolean boolean1 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.586914517173373
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854772057L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(9223372036854772057L);
      Range range1 = Range.ofLength(3409L);
      range1.isEmpty();
      range0.startsBefore(range1);
      boolean boolean0 = range0.endsBefore(range1);
      boolean boolean1 = range1.startsBefore(range0);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1834L), 3751L);
      range0.isSubRangeOf(range2);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 3408 ]/0B", string0);
      
      Range.CoordinateSystem.values();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(9223372036854772057L);
      range_Builder4.contractEnd(162L);
      range_Builder3.copy();
      Range.Builder range_Builder5 = new Range.Builder(range1);
      Range range3 = range_Builder5.build();
      assertSame(range3, range1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5177833103521308
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.intersects(range1);
      Range range2 = Range.ofLength(3751L);
      Range range3 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range3.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("RzPPms)QgE$Is");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.RzPPms)QgE$Is
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.7198093322444423
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      assertTrue(list2.isEmpty());
      
      Range range2 = Range.ofLength(255L);
      range0.isEmpty();
      range2.startsBefore(range1);
      range1.endsBefore(range2);
      range2.intersects(range0);
      boolean boolean0 = range2.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-810L), 255L);
      Range range3 = Range.of(range_CoordinateSystem0, 255L, 3751L);
      boolean boolean1 = range3.isSubRangeOf(range2);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals((Object) null);
      assertFalse(range2.isEmpty());
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.519927993628517
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      List<Range> list0 = range1.split(2553L);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      range1.complementFrom(list2);
      Range.CoordinateSystem.values();
      Long long0 = new Long((-128L));
      Object object0 = new Object();
      range1.equals(object0);
      Range range2 = Range.of((-1313L), (-128L));
      range0.complement(range2);
      Range.Comparators.values();
      range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1313L), (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.263113208772819
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(9223372036854775781L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(9223372036854775781L);
      range0.isEmpty();
      Range range1 = Range.of(9223372036854775781L);
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775781L, 9223372036854775781L);
      range2.isSubRangeOf(range0);
      range2.toString();
      // Undeclared exception!
      try { 
        Range.of(5829L, (-4289L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.563107184075734
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(3751L);
      range1.isEmpty();
      boolean boolean0 = range0.startsBefore(range1);
      range1.endsBefore(range0);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 3409L, 3751L);
      Range range3 = Range.of(range_CoordinateSystem0, 3751L, 2147483647L);
      assertFalse(range3.isEmpty());
      
      boolean boolean1 = range1.isSubRangeOf(range2);
      assertFalse(boolean1);
      
      Range.of((-32768L));
      boolean boolean2 = range2.isSubRangeOf(range1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.559768863143218
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      range1.complementFrom(list2);
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      range1.equals(object0);
      Range range2 = Range.of((-1313L), (-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.spliterator();
      Range.Comparators.values();
      Range range3 = range0.intersection(range2);
      Range.of((-1313L));
      range0.complement(range3);
      range2.complementFrom(list1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.225040697863853
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.ofLength(3751L);
      Range.of(3751L, 3751L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("RzPPms)QgE$Is");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.RzPPms)QgE$Is
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.7157557338288636
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      range1.complementFrom(list2);
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      range1.equals(object0);
      Range range2 = Range.of((-1313L), (-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.spliterator();
      Range.Comparators.values();
      Range range3 = range0.intersection(range2);
      Range range4 = Range.of(982L);
      List<Range> list3 = range3.complement(range4);
      range2.complementFrom(list3);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.583443219510231
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(656L);
      Range.of((-1L), 6818L);
      Range range2 = Range.of((-1L));
      range2.complement(range1);
      Range.Comparators.values();
      range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 255L, 3409L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 6818L, 3409L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.4721444670722095
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854772057L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(3409L);
      Range.Builder range_Builder2 = new Range.Builder(9223372036854772057L);
      Range range1 = Range.ofLength(3409L);
      range1.isEmpty();
      range0.startsBefore(range1);
      range0.endsBefore(range1);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1834L), 3751L);
      range0.isSubRangeOf(range2);
      Range.ofLength(286L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("?>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.?>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.4577350154126756
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range range1 = Range.of((-211L));
      long long0 = 0L;
      Range range2 = Range.ofLength(0L);
      range2.isEmpty();
      range1.startsBefore(range0);
      range0.intersects(range1);
      range0.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 1895L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1895L, (-211L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.5043920430927145
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(3751L);
      range1.isEmpty();
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 3409L, 3751L);
      Range.of(3409L);
      range1.isSubRangeOf(range2);
      Range.of((-32768L));
      range2.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.6782944591551474
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      List<Range> list0 = range0.split(2553L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list0);
      range0.complementFrom(list0);
      Range.CoordinateSystem.values();
      Long long0 = new Long((-9223372036854775808L));
      Object object0 = new Object();
      Range.Builder range_Builder1 = range_Builder0.shift(1190L);
      Range range1 = Range.of((-9223372036854775808L));
      range0.complement(range1);
      Range range2 = Range.ofLength(2553L);
      range2.complementFrom(list1);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder0.copy();
      assertNotSame(range_Builder3, range_Builder1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9206870268936393
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      List<Range> list0 = range0.split(3409L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.489118514225597
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 656L;
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(3751L);
      range1.isEmpty();
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-6908L), 656L);
      long long1 = (-2147483648L);
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), (-748L));
      // Undeclared exception!
      try { 
        range2.split((-6908L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.446472349273693
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      long long0 = 2553L;
      List<Range> list0 = range0.split(2553L);
      range0.complementFrom(list0);
      range0.complementFrom(list0);
      range0.complementFrom(list0);
      Range.CoordinateSystem.values();
      Long long1 = new Long((-9223372036854775808L));
      Object object0 = new Object();
      range0.equals(list0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.293951382635712
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.getEnd();
      range0.isEmpty();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range1.equals(range0);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.startsBefore(range0);
      range1.spliterator();
      Range.Comparators.values();
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(2490L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.2812683153930293
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 656L;
      Range range0 = Range.ofLength(3750L);
      Range range1 = Range.ofLength(2147483647L);
      range1.getEnd();
      range0.isEmpty();
      range1.startsBefore(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1271L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.1445801968384903
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(4255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift(0L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2333331244694
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.of(1065L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-43L), (-43L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift((-3535L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(4255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.9678674685340356
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-1524L), (-1524L));
      long long0 = range0.getBegin();
      assertEquals((-1524L), long0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.1102365213877143
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2361L, 2867L);
      range_Builder0.expandBegin(2361L);
      range_Builder0.build();
      range_Builder0.shift(2867L);
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(2361L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.380177717418273
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      Range.of(16L, 2147483647L);
      Object object1 = new Object();
      Range.of((-32768L));
      Range range0 = Range.ofLength(322L);
      range0.getBegin();
      Object object2 = new Object();
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.208131751545272
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(656L, 656L);
      range_Builder0.expandEnd(3409L);
      range0.getLength();
      Range.Builder range_Builder1 = range_Builder0.shift(563L);
      Range.of(162L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder0.copy();
      assertNotSame(range_Builder3, range_Builder1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.4369218918979825
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(656L, 656L);
      Range.Builder range_Builder0 = new Range.Builder(656L, 656L);
      long long0 = 3409L;
      range_Builder0.expandEnd(3409L);
      range_Builder0.shift(563L);
      Range range1 = Range.of(162L);
      range0.getBegin();
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$Comparators");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$Comparators
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.4153965024280115
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-211L));
      Range range2 = Range.ofLength(0L);
      Range.Comparators.values();
      Range range3 = range1.intersection(range2);
      Range range4 = Range.of(3730L);
      Object object0 = new Object();
      range2.equals(range4);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range3.getBegin(range_CoordinateSystem0);
      assertTrue(range3.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.2959362496084523
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775646L);
      Long long0 = new Long(9223372036854775646L);
      Object object1 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1308L, 1830L);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.425487595655983
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-947L), 0L);
      Range range1 = Range.of((-947L));
      Range range2 = Range.of(0L, 0L);
      long long0 = new Long(0L);
      boolean boolean0 = range2.endsBefore(range0);
      assertFalse(boolean0);
      
      Range range3 = range2.asRange();
      assertFalse(range3.isEmpty());
      
      range0.isSubRangeOf(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.4871126725887587
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(1329L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-1067L));
      Range range1 = Range.ofLength(1329L);
      range0.isEmpty();
      range1.startsBefore(range0);
      range1.endsBefore(range0);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1067L), (-831L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 3782L, 1329L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.0424758762113324
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.shift(656L);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(3751L);
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      range0.startsBefore(range1);
      range1.isSubRangeOf(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.0140772805713656
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(330L, 330L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 331L, (-332L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.4580458622024506
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      Range.of(2147483635L, 2147483635L);
      Object object1 = new Object();
      Range range0 = Range.of((-32768L));
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.0344094410931834
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775646L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775646L, 324L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.641881298872845
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854772057L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(9223372036854772057L);
      Range range1 = Range.ofLength(3409L);
      range1.isEmpty();
      range0.startsBefore(range1);
      range0.endsBefore(range1);
      range1.startsBefore(range0);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list1.size());
      
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder1.contractEnd(3751L);
      range_Builder0.copy();
      Range range2 = range_Builder2.build();
      //  // Unstable assertion: assertSame(range2, range0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.158039775219435
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.060287092608695
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(656L, 656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(3409L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(2147483647L);
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-947L), 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.expandBegin((-947L));
      assertSame(range0, range1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.086715272448053
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.of(656L, 1755L);
      Object object0 = new Object();
      Range.of(539L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-519L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.of((-398L));
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange(",U=^w PC^-t+T", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ,U=^w PC^-t+T into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Comparators.values();
      Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.9678674685340356
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1960L), 0L);
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.077816806102434
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = 2420L;
      Range range0 = Range.of((-9L), 2420L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("LIC", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse LIC into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.parseRange("I53ZT[p~EE7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse I53ZT[p~EE7 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.9487837204523966
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range.of((-9223372036854775808L));
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.967112896979192
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2742L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.158039775219435
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.expandBegin(0L);
      range_Builder0.shift(0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1L);
      Range.of(0L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(1L);
      assertSame(range_Builder2, range_Builder0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.3355695260773097
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3448L, 3448L);
      range_Builder0.expandEnd(9223372036854775806L);
      range_Builder0.expandBegin((-1L));
      range_Builder0.contractBegin(88L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 88L, 3448L);
      Range range0 = Range.of(2719L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3338L, 3338L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(3338L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
