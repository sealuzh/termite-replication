/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:16:41 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.783832390173086
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.toString();
      long long0 = 163L;
      Long long1 = new Long(163L);
      range0.equals(long1);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range1 = Range.ofLength(163L);
      range1.intersection(range0);
      range1.spliterator();
      // Undeclared exception!
      try { 
        Range.parseRange("[ -1 .. -1 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -1 .. -1 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.9015348735891333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of((-93L), 255L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-93L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ -93 .. 255 ]/0B", range_CoordinateSystem2);
      Range range3 = range0.intersection(range2);
      Range.of(range_CoordinateSystem1, 65535L, 4294967295L);
      Range.of((-4182L), (-93L));
      range3.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(255L);
      range_Builder0.shift(2876L);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        range0.split((-954L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.993367363004688
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.iterator();
      Range range1 = Range.of(2147483647L);
      range0.intersection(range1);
      range0.complement(range1);
      Range.of((-32768L), 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("z", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse z into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3047092905944826
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = 770L;
      Range range0 = Range.ofLength(770L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.toString();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.087494066886195
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.2182569453349945
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-2493L));
      Range range1 = range0.asRange();
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Range.of(range_CoordinateSystem1, (-2493L), 2538L);
      range0.iterator();
      range1.complement(range0);
      String string0 = "ggx";
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("m*/gz(C]7C+&(>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse m*_/gz(C]7C+&(> into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.035574635767172
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.ofLength(32793L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      Range range1 = range0.asRange();
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 560L, 32793L);
      List<Range> list0 = range2.split(9223372036854775152L);
      range1.startsBefore(range0);
      range0.complementFrom(list0);
      String string0 = "6H%{ukf*J";
      // Undeclared exception!
      try { 
        Range.parseRange("6H%{ukf*J", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 6H%{ukf*J into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.417734643205616
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      long long0 = 1022L;
      Range.Builder range_Builder0 = new Range.Builder(1022L, 2147483647L);
      range_Builder0.expandBegin(0L);
      long long1 = (-1L);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.17663983752341
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.expandBegin(29L);
      range_Builder0.shift(29L);
      range_Builder0.expandEnd(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(29L);
      range0.toString(range_CoordinateSystem0);
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.ofLength(9223372036854775779L);
      Range range2 = range1.intersection(range0);
      range2.spliterator();
      range1.endsBefore(range2);
      Range range3 = Range.parseRange("[ 29 .. 30 ]/SB");
      Range range4 = range3.intersection(range2);
      Range.ofLength(255L);
      range0.complement(range4);
      Range.of((-2056L), 1L);
      range1.complement(range0);
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.892345276097782
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      Range range1 = range0.asRange();
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem3);
      Range range2 = Range.ofLength(32766L);
      Range range3 = range1.intersection(range0);
      range3.spliterator();
      range1.endsBefore(range3);
      Range range4 = range1.intersection(range2);
      range1.complement(range4);
      range3.getLength();
      // Undeclared exception!
      try { 
        Range.of(32766L, 4066L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.720703875181808
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-2493L));
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      Range range2 = Range.of(2876L, 4294967295L);
      range1.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      range_Builder0.shift((-2743L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-2743L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.155242433951448
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(2147483646L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.Builder range_Builder0 = new Range.Builder(1022L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      range_Builder0.shift((-1L));
      range_Builder1.expandEnd((-1L));
      Range range1 = Range.of(1022L);
      List<Range> list0 = range1.split(324L);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      
      List<Range> list1 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      Range range2 = Range.ofLength(2805L);
      range1.intersects(range2);
      List<Range> list2 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list2.size());
      
      List<Range> list3 = range1.complementFrom(linkedList0);
      //  // Unstable assertion: assertEquals(2, list3.size());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1105L);
      range_Builder0.expandBegin((-1105L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.9273404251532416
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      long long0 = range0.getEnd();
      assertEquals(2147483646L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-2493L));
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      Range range2 = Range.of(2881L, 4294967295L);
      range1.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      range_Builder0.shift((-2743L));
      Range.CoordinateSystem.values();
      List<Range> list0 = range1.split(2420L);
      long long1 = range2.getLength();
      assertEquals(4294964415L, long1);
      
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range2.complementFrom(list0);
      assertTrue(range1.isEmpty());
      assertTrue(list2.equals((Object)list1));
      
      boolean boolean0 = range2.isSubRangeOf(range0);
      boolean boolean1 = range0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.739053280995114
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.iterator();
      Range.of((-1L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.9496974215294642
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.of((-2479L));
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      range_Builder0.contractBegin(0L);
      long long0 = 4294967295L;
      Range.ofLength(4294967295L);
      range0.equals("0B");
      Range range1 = Range.of((-2743L), (-2479L));
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-856L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7485862561915426
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of((-2479L));
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2479L), (-2479L));
      range0.equals(range1);
      Range range2 = Range.of((-3477L));
      range2.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Range range3 = Range.of((-3L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range3.toString(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.ofLength((-3477L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.8797516513590304
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = (-93L);
      Range range0 = Range.of((-93L), 255L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-93L), 0L);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ -93 .. 255 ]/0B", range_CoordinateSystem2);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=4.063480071883558
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.expandBegin(29L);
      range_Builder0.shift(29L);
      range_Builder0.expandEnd(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(29L);
      range0.toString(range_CoordinateSystem0);
      range0.toString(range_CoordinateSystem0);
      long long0 = 9223372036854775779L;
      Range range1 = Range.ofLength(9223372036854775779L);
      Range range2 = range1.intersection(range0);
      range2.spliterator();
      range1.endsBefore(range2);
      Range range3 = Range.parseRange("[ 29 .. 30 ]/SB");
      Range range4 = range0.intersection(range3);
      Range range5 = Range.ofLength(29L);
      range5.complement(range4);
      // Undeclared exception!
      try { 
        Range.of((-3755L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.105910633547403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.Builder range_Builder0 = new Range.Builder(1022L, 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift((-1L));
      range_Builder1.expandEnd((-1L));
      Range range1 = Range.of(1022L);
      List<Range> list0 = range1.complement(range1);
      range0.complementFrom(linkedList0);
      Range range2 = Range.ofLength(396L);
      range1.intersects(range0);
      List<Range> list1 = range2.complementFrom(list0);
      range0.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-434L), (-2621L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.9772406249920076
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.ofLength(770L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      range0.toString();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 770 ]/SB", string0);
      
      Range range1 = Range.ofLength(770L);
      Range range2 = range1.intersection(range0);
      range1.spliterator();
      boolean boolean0 = range0.endsBefore(range2);
      assertFalse(boolean0);
      
      Range range3 = range0.intersection(range1);
      List<Range> list0 = range1.complement(range3);
      assertTrue(list0.isEmpty());
      
      range1.spliterator();
      Range range4 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean1 = range4.startsBefore(range0);
      boolean boolean2 = range0.intersects(range0);
      assertFalse(boolean2 == boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range3.getBegin(range_CoordinateSystem2);
      List<Range> list1 = range2.complement(range3);
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.008900565097622
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(5369L, 5369L);
      Range range1 = Range.of(5369L);
      range0.intersects(range1);
      range0.asRange();
      long long0 = 0L;
      Range.of(0L);
      range0.complement(range1);
      Range range2 = Range.of((-9223372036854773083L), 0L);
      range2.iterator();
      String string0 = "bjk)f@nE";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("bjk)f@nE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.bjk)f@nE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.641112631739918
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(29L);
      Range.Builder range_Builder2 = range_Builder0.shift(29L);
      range_Builder0.expandEnd(1L);
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = Range.of(29L, 29L);
      range0.endsBefore(range1);
      range0.intersects(range1);
      range_Builder1.build();
      range_Builder0.shift(4354L);
      Range.Builder range_Builder3 = range_Builder2.expandEnd(3648L);
      range0.equals(range_Builder3);
      long long1 = (-2743L);
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 3648L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.004110221420019
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.expandBegin(0L);
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(1L);
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 0L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      range0.isSubRangeOf(range1);
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of((-2978L));
      range2.getEnd(range_CoordinateSystem0);
      Range range3 = Range.ofLength(3521L);
      range3.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getEnd(range_CoordinateSystem1);
      range1.complement(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2978L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.073448785884684
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2198L), (-2198L));
      Range range1 = Range.of((-2457L));
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.isSubRangeOf(range1);
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ -2457 .. -2456 ]/SB", string0);
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range2 = Range.of((-2457L), 0L);
      Range range3 = range2.intersection(range0);
      assertFalse(range3.isEmpty());
      
      range_Builder0.expandBegin(663L);
      range1.getLength();
      Range range4 = Range.of(range_CoordinateSystem1, (-128L), 0L);
      range2.isSubRangeOf(range4);
      assertFalse(range4.isEmpty());
      
      long long0 = range1.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.907771703348426
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.toString();
      range0.equals(range_CoordinateSystem0);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(900L);
      range3.spliterator();
      range0.endsBefore(range1);
      Range range4 = range2.intersection(range3);
      Range range5 = Range.ofLength(0L);
      range0.complement(range5);
      range3.spliterator();
      Range range6 = Range.of(1L, 1L);
      range5.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range4.getBegin(range_CoordinateSystem3);
      assertSame(range4, range5);
      assertTrue(range4.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      String string1 = range6.toString(range_CoordinateSystem4);
      assertFalse(range6.isEmpty());
      assertEquals("[ 2 .. 2 ]/RB", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.221779953022035
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(0L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      List<Range> list0 = range0.complement(range0);
      Range range2 = Range.of(1590L);
      range2.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 313L, 2565L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range3 = Range.of(0L, 313L);
      Range range4 = range1.intersection(range0);
      range_Builder2.expandBegin(1590L);
      Range.of(range_CoordinateSystem1, (-2458L), 1L);
      range0.getLength();
      range4.iterator();
      range0.endsBefore(range3);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 2565L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8047969455504544
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 32767L, 32767L);
      List<Range> list0 = range1.split(9223372036854775152L);
      range0.startsBefore(range0);
      range0.complementFrom(list0);
      String string0 = "6H%{ukf*J";
      // Undeclared exception!
      try { 
        Range.parseRange("6H%{ukf*J", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 6H%{ukf*J into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.819372792264656
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-9223372036854775808L));
      long long0 = 317L;
      Range range1 = Range.ofLength(317L);
      long long1 = 0L;
      Range range2 = Range.of(0L);
      range2.startsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString(range_CoordinateSystem0);
      range0.startsBefore(range1);
      range2.spliterator();
      range1.toString();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.724304490147392
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-574L);
      Range.of(range_CoordinateSystem0, (-574L), 0L);
      long long2 = 2135L;
      Range.of((-2147483648L), 2135L);
      Range range1 = Range.of((-2147483648L), 2420L);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 3213L, (-574L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 3252L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=4.003171618334446
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 278L;
      Range.of(range_CoordinateSystem1, 278L, 32767L);
      List<Range> list0 = range0.complement(range0);
      range1.startsBefore(range0);
      range0.complementFrom(list0);
      String string0 = "6H%{ukf*J";
      // Undeclared exception!
      try { 
        Range.parseRange("6H%{ukf*J", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 6H%{ukf*J into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.120317996438568
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Range.of((-1L), 2147483647L);
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.023153500204674
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(2147483646L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.Builder range_Builder0 = new Range.Builder(1036L, 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift((-1L));
      range_Builder1.expandEnd((-1L));
      Range range1 = Range.of(1036L);
      List<Range> list0 = new LinkedList<Range>();
      List<Range> list1 = range0.complementFrom(linkedList0);
      Range range2 = Range.ofLength(396L);
      boolean boolean0 = range1.intersects(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      List<Range> list2 = range2.complementFrom(list0);
      range0.complementFrom(list2);
      List<Range> list3 = range1.complementFrom(list1);
      //  // Unstable assertion: assertEquals(1, list3.size());
      //  // Unstable assertion: assertFalse(list3.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      boolean boolean1 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.955784618077114
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Range.of((-1L), 2147483647L);
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.852743251905392
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-3217L));
      range_Builder1.shift((-3217L));
      range_Builder1.expandEnd(1L);
      Range range0 = Range.of(1L, 1L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483646L), (-2147483646L));
      Range range2 = Range.of((-6104L), (-1L));
      Range range3 = Range.ofLength(985L);
      assertFalse(range3.isEmpty());
      
      boolean boolean0 = range1.startsBefore(range2);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.604356093415014
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-2218L));
      range_Builder1.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, (-2479L), 1140L);
      range_Builder2.expandEnd(0L);
      Range.of(2420L);
      // Undeclared exception!
      try { 
        range0.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3953121312016408
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of((-1L));
      Range.of(1650L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2262L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.5293002139529306
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = 330L;
      Range range0 = Range.ofLength(330L);
      long long1 = 0L;
      Range range1 = Range.ofLength(0L);
      range1.getBegin();
      range1.startsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.spliterator();
      range0.toString();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 329 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 329 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1461992987389253
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.5255031059909543
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.Builder range_Builder0 = new Range.Builder(1022L, 2147483647L);
      range_Builder0.expandBegin(0L);
      range_Builder0.build();
      range_Builder0.shift((-1L));
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2754649677876353
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range.of(9223372036854775807L);
      Range range0 = Range.ofLength(0L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.5418576757157867
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of(656L, 656L);
      long long0 = range0.getEnd();
      assertEquals(656L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2742L), 0L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.6508437234844013
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      Range range1 = Range.of(1022L, 1022L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775553L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.088378693370885
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(29L);
      range_Builder0.shift(29L);
      range_Builder0.expandEnd(1L);
      Range range0 = Range.of(0L);
      Range range1 = Range.of(29L, 29L);
      range0.endsBefore(range1);
      range0.intersects(range1);
      Range range2 = range_Builder1.build();
      range2.intersection(range1);
      Range range3 = Range.ofLength(1L);
      range0.complement(range2);
      Range.of((-2988L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range4 = Range.of(1L);
      range4.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$1", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$1 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3035770196432024
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.build();
      range_Builder0.expandEnd(0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Hy$F9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Hy$F9
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.357284162522736
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of((-1524L), (-1524L));
      long long0 = range0.getBegin();
      assertEquals((-1524L), long0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.8569071809284776
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(255L);
      range2.getEnd();
      Range.of((-1217L));
      range2.getEnd(range_CoordinateSystem0);
      Range range3 = Range.ofLength(255L);
      range3.getLength();
      range1.intersects(range3);
      range1.getEnd(range_CoordinateSystem1);
      range2.complement(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1715L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.8073458285386113
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of(770L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.toString();
      range0.equals("[ 770 .. 770 ]/0B");
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range1 = Range.ofLength(770L);
      Range range2 = range1.intersection(range0);
      range1.startsBefore(range2);
      range1.spliterator();
      range0.endsBefore(range2);
      Range range3 = range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range1.complement(range3);
      range0.spliterator();
      Range.ofLength(2537L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Xb\"7a|_C(L<C0GY-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Xb\"7a|_C(L<C0GY-
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.774396817731306
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.expandBegin(0L);
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(1L);
      Range range0 = Range.of(0L);
      List<Range> list0 = range0.split(1L);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertEquals(2, list2.size());
      //  // Unstable assertion: assertFalse(list2.contains(range0));
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=4.098536285990768
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.of(656L, 656L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(3409L);
      Range range1 = Range.ofLength(656L);
      Range range2 = Range.of((-1080L));
      Range range3 = range1.intersection(range2);
      List<Range> list0 = range3.complement(range2);
      range3.complementFrom(list0);
      range2.isSubRangeOf(range0);
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of((-2978L));
      range4.getEnd(range_CoordinateSystem0);
      range0.intersects(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getEnd(range_CoordinateSystem1);
      range4.complement(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1080L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.916405997333468
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 278L;
      Range range1 = Range.of(range_CoordinateSystem1, 278L, 32767L);
      List<Range> list0 = range1.split(9223372036854775152L);
      range0.startsBefore(range0);
      range0.complementFrom(list0);
      String string0 = "6H%{ukf*J";
      // Undeclared exception!
      try { 
        Range.parseRange("6H%{ukf*J", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 6H%{ukf*J into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=4.034791082456023
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(255L);
      range2.getEnd();
      Range.of((-1217L));
      range2.getEnd(range_CoordinateSystem0);
      Range.ofLength(255L);
      Range.of(255L, 255L);
      Range range3 = Range.of(range_CoordinateSystem0, (-2471L), 256L);
      range3.endsBefore(range0);
      Range.ofLength(698L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-2471L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.784459595610496
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-3217L));
      range_Builder1.shift((-3217L));
      range_Builder1.expandEnd(1L);
      long long0 = (-6104L);
      Range range0 = Range.of((-6104L));
      Range range1 = Range.of(1L, 1L);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 481L, (-6104L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.581268255036592
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(656L, 656L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2681L), 0L);
      range1.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 656L, (-1952L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.512415868309143
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 3648L, 3648L);
      long long1 = 5431L;
      Range.of(range_CoordinateSystem0, 3648L, 5431L);
      // Undeclared exception!
      try { 
        Range.of(5431L, 2420L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.5354452970571644
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-1L), 9223372036854775778L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.parseRange("IA|[2H:hT4sYz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse IA|[2H:hT4sYz into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.6390601062183165
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.of((-2479L));
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-2479L));
      range_Builder0.copy();
      Range range1 = Range.of((-2479L), (-2479L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.7325485002830328
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(1L, long0);
      
      range_Builder0.expandEnd((-1217L));
      range_Builder0.contractEnd((-1217L));
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.expandEnd(319L);
      Range range1 = Range.of(range_CoordinateSystem1, (-2742L), 0L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6355157810411405
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.of((-1L), 2535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      Range.Builder range_Builder2 = range_Builder0.expandBegin(2147483647L);
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.4031781322919614
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.build();
      Range.of(1021L, 1021L);
      range_Builder0.expandEnd(0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Hy$F9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Hy$F9
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.7970152070286343
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of((-2479L));
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      range_Builder0.contractBegin((-2479L));
      long long0 = 4294967295L;
      range0.equals("0B");
      Range range1 = Range.of((-2743L), (-2479L));
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-856L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.ofLength(3252L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.4927061982214767
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1L);
      Range.Builder range_Builder2 = range_Builder0.shift(1L);
      range_Builder0.expandEnd(1L);
      long long0 = 0L;
      Range.of(1L, 1L);
      range_Builder1.build();
      range_Builder0.shift(4354L);
      range_Builder2.expandEnd(3648L);
      long long1 = (-2743L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("ckzyA/GM{F>", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ckzyA/GM{F> into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.4673668715138737
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1022L, 1022L);
      Range range0 = Range.ofLength(1991L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      assertNotNull(spliterator0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.561055471998925
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(1L);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1700L, 9223372036854775807L);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 54L, 1259L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.624313559332394
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.of((-2479L));
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range1 = Range.of((-2479L), (-2479L));
      assertSame(range1, range0);
  }
}
