/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:47:00 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5074106139046988
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize((-28));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("</client-socket-tcp-no-delay>\n");
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setPerformancePreferencesLatency((-2052));
      advancedSettings0.setMaxThreadsForNioWrite(65536);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("</client-socket-tcp-no-delay>\n");
      advancedSettings0.getCharset();
      advancedSettings0.getBacklog();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("#I2(6~");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #I2(6~
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketReceiveBufferSize((-676));
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-676), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.484537280558242
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(844);
      String string0 = advancedSettings0.toXML("|n*c,4tgks3");
      advancedSettings0.setBacklog((-751));
      advancedSettings0.setClientSocketReceiveBufferSize((-751));
      String string1 = advancedSettings0.toXML("|n*c,4tgks3");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.toXML(string0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML(string1);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.toXML((String) null);
      advancedSettings0.getCharset();
      advancedSettings0.getBacklog();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("|n*c,4tgks3");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getQSObjectPoolMaker();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3553045499264167
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.getBacklog();
      advancedSettings0.toXML("ISO-8859-1");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientIdentifier("k':B-Ax)BLDj]");
      assertEquals("k':B-Ax)BLDj]", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2874021458321834
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings1.setClientSocketTrafficClass("kBozj");
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings1.getByteBufferSize();
      advancedSettings1.getUseDirectByteBuffer();
      advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
      
      int int0 = advancedSettings1.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8400453949278868
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("C_~[e(B[mX");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      advancedSettings4.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings6 = new AdvancedSettings();
      int int0 = advancedSettings6.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.582601384955972
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.setPerformancePreferencesConnectionTime(2907);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketSendBufferSize(1273);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.toXML("");
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(2907, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.047989938539106
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("_eT=fP*");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setUseDirectByteBuffer(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setCharset("");
      assertEquals("_eT=fP*", advancedSettings0.getClientIdentifier());
      
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings1.getByteBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      advancedSettings1.getClientSocketTcpNoDelay();
      int int0 = advancedSettings4.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(1745);
      advancedSettings0.getBacklog();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(1745, advancedSettings0.getBacklog());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4318130310755945
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.toXML("1#WXrrh");
      advancedSettings0.setByteBufferSize(6);
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(65536, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.620816874260707
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-2413));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.toXML("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setSocketLinger((-2413));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setBacklog((-2485));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(boolean0);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3042644954097065
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize((-116));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setBacklog(1);
      advancedSettings0.setClientSocketSendBufferSize((-283));
      advancedSettings0.setSocketLinger((-2237));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setQSObjectPoolMaker("Sd60;zNQ[ J");
      advancedSettings0.setPerformancePreferencesBandwidth((-531));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.setByteBufferSize((-283));
      advancedSettings0.setByteBufferSize((-2237));
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientSocketReceiveBufferSize((-2237));
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals((-531), advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.878666739983584
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setByteBufferSize(474);
      advancedSettings0.setSocketLinger(85);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTrafficClass("&:|=");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier((String) null);
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.537052785857989
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setPerformancePreferencesLatency(2981);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite(2981);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("Vlbdq-sYXL,}TE?bx4");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketSendBufferSize(2981);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.toXML("Y7>qz~uAS9Xu>");
      advancedSettings0.getClientIdentifier();
      assertEquals(2981, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.486238310680613
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.toXML("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setBacklog((-1));
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize((-1229));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(2041);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings3.setBacklog(403);
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      advancedSettings5.getClientSocketTrafficClass();
      AdvancedSettings advancedSettings6 = new AdvancedSettings();
      advancedSettings5.setClientSocketTrafficClass((String) null);
      AdvancedSettings advancedSettings7 = new AdvancedSettings();
      AdvancedSettings advancedSettings8 = new AdvancedSettings();
      AdvancedSettings advancedSettings9 = new AdvancedSettings();
      advancedSettings9.setClientSocketSendBufferSize(65536);
      AdvancedSettings advancedSettings10 = new AdvancedSettings();
      advancedSettings8.getClientSocketTcpNoDelay();
      int int0 = advancedSettings9.getClientSocketSendBufferSize();
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("</client-socket-tcp-no-delay>\n");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals("</client-socket-tcp-no-delay>\n", advancedSettings0.getClientIdentifier());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4361224471497165
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1440));
      advancedSettings0.toXML("org.quickserver.util.xmlreader.AdvancedSettings");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("1#WXrrh");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals((-1440), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings3.setCharset("Rd");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Rd
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(1694);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1310));
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals((-1310), int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.92819476520619
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(1865);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientSocketTrafficClass();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTrafficClass((String) null);
      advancedSettings2.getMaxThreadsForNioWrite();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setBacklog(10);
      advancedSettings3.setClientIdentifier("");
      advancedSettings3.getClientSocketReceiveBufferSize();
      assertEquals(10, advancedSettings3.getBacklog());
      
      advancedSettings2.setClientIdentifier("");
      assertTrue(advancedSettings2.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.947200218571973
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(2099);
      advancedSettings0.setByteBufferSize((-1229));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings1.setClientSocketReceiveBufferSize(0);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketSendBufferSize((-1229));
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings2.setBacklog(2099);
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      AdvancedSettings advancedSettings6 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass((String) null);
      advancedSettings2.getByteBufferSize();
      AdvancedSettings advancedSettings7 = new AdvancedSettings();
      AdvancedSettings advancedSettings8 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(2099, advancedSettings0.getByteBufferSize());
      
      AdvancedSettings advancedSettings9 = new AdvancedSettings();
      advancedSettings8.getDebugNonBlockingMode();
      int int0 = advancedSettings4.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0257505895352668
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(1600);
      advancedSettings0.setPerformancePreferencesBandwidth(1600);
      advancedSettings0.setSocketLinger(1600);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(442);
      advancedSettings0.setBacklog(442);
      advancedSettings0.setCharset("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setBacklog(1);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setSocketLinger(1600);
      assertEquals(1600, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.816875729276324
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("e,U=");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setByteBufferSize(351);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketReceiveBufferSize(217);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(217);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTrafficClass(">U](X 3FT");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setSocketLinger(217);
      advancedSettings0.setPerformancePreferencesBandwidth((-491));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("R@");
      advancedSettings0.setClientSocketSendBufferSize(217);
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesConnectionTime((-491));
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6256878823154617
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setBacklog((-3256));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setPerformancePreferencesBandwidth(351);
      assertEquals(351, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      int int1 = advancedSettings0.getPerformancePreferencesLatency();
      assertTrue(int1 == int0);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, int1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("ep|5[1U8v<V0c");
      advancedSettings0.getClientIdentifier();
      assertEquals("ep|5[1U8v<V0c", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(1273);
      advancedSettings0.setByteBufferSize(1273);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(65536);
      advancedSettings1.setBacklog(7);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings1.getClientSocketTrafficClass();
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      advancedSettings2.setClientSocketTrafficClass((String) null);
      assertEquals(65536, advancedSettings2.getClientSocketSendBufferSize());
      
      advancedSettings5.getByteBufferSize();
      AdvancedSettings advancedSettings6 = new AdvancedSettings();
      AdvancedSettings advancedSettings7 = new AdvancedSettings();
      advancedSettings3.setClientIdentifier((String) null);
      AdvancedSettings advancedSettings8 = new AdvancedSettings();
      AdvancedSettings advancedSettings9 = new AdvancedSettings();
      advancedSettings6.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings10 = new AdvancedSettings();
      int int0 = advancedSettings10.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.683836228069014
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize((-1229));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setMaxThreadsForNioWrite(0);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(2041);
      advancedSettings0.setBacklog(0);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings1.getClientSocketTrafficClass();
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      advancedSettings5.toXML("aP|DM");
      advancedSettings5.setQSObjectPoolMaker((String) null);
      advancedSettings1.setClientSocketTrafficClass((String) null);
      advancedSettings4.getByteBufferSize();
      AdvancedSettings advancedSettings6 = new AdvancedSettings();
      AdvancedSettings advancedSettings7 = new AdvancedSettings();
      advancedSettings6.setClientIdentifier((String) null);
      AdvancedSettings advancedSettings8 = new AdvancedSettings();
      AdvancedSettings advancedSettings9 = new AdvancedSettings();
      advancedSettings8.setClientSocketTcpNoDelay(false);
      advancedSettings8.getClientSocketTcpNoDelay();
      advancedSettings8.getClientSocketSendBufferSize();
      advancedSettings4.setClientIdentifier("9>;g'fz=Q");
      assertEquals("9>;g'fz=Q", advancedSettings4.getClientIdentifier());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }
}
