/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:51:29 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(303, (String) null, (String) null, 4919);
      player0.id = 303;
      player0.toString();
      String string0 = "=b,9U.i9+;f^w%*^k";
      Player player1 = new Player(1758, "", "=b,9U.i9+;f^w%*^k", 502, (-251));
      player1.setX(303);
      player1.setDead(1L, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      player0.boss = (Party) player1;
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(2380, "state.Player$JoinInfo", 2380);
      player0.setY(481);
      Player player1 = new Player(481, "state.Player$JoinInfo", "state.Player$JoinInfo", (short)4919);
      player0.boss = (Party) player1;
      player0.boss = (Party) player1;
      player1.setDead();
      player1.setX(362.68F);
      player0.setDead((-694L));
      player0.toString();
      player0.prev = (Party) player1;
      player0.getY();
      player1.toString();
      player1.getZ();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player1.isJoinOK(player0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray0, (int) (short)4919, (int) (byte) (-110));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "gui.ModuleBrowserDialog$ModuleFilter";
      Player player0 = new Player(5, "gui.ModuleBrowserDialog$ModuleFilter", ")mX5Nf-VRr", 5, 5);
      player0.setDead(0L);
      player0.isDead();
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1945366875886965
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.pack();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#6v7?yx(z3bf0RW");
      player0.setDead((-1L));
      player0.setDead();
      player0.toString();
      player0.setY((-1L));
      player0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jt7V0n>^=2dW");
      player0.setX(0.0F);
      player0.getStrength();
      player0.getY();
      player0.getZ();
      player0.isConnected();
      float float0 = player0.getX();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("N.");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N.", true);
      mockFileOutputStream0.getChannel();
      mockFileOutputStream0.close();
      Player player0 = new Player(2265, "", "N.", 2576, 0);
      player0.setY(1744.0052F);
      player0.gangStrength();
      player0.getZ();
      Party party0 = player0.head;
      MockFile mockFile0 = new MockFile(")S");
      mockFileOutputStream0.flush();
      MockFile mockFile1 = new MockFile(mockFile0, ")S");
      MockFile.createTempFile("Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "N.");
      mockFile1.setReadOnly();
      player0.getX();
      player0.getX();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream1);
      DataOutputStream dataOutputStream1 = new DataOutputStream(mockFileOutputStream0);
      try { 
        player0.pack(dataOutputStream1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-1022L));
      Player player0 = new Player(1747, "", "", (-16243), 2488);
      player0.getSubparty();
      player0.type();
      player0.toString();
      player0.getZ();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)72;
      try { 
        pipedOutputStream0.write(byteArray0, 2707, 4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1040026700508068
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((-3167), "^U}W0@Bg8", "^U}W0@Bg8", (-3167), (-3167));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^U}W0@Bg8");
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(pushbackInputStream0);
      player0.unpack(dataInputStream1);
      player0.setConnected(true);
      player0.gangStrength();
      player0.unpack(byteArray0);
      player0.reset(false);
      player0.pack();
      player0.setDead((long) (-3167), false);
      player0.getTimeOfDeath();
      player0.unpack(dataInputStream1);
      assertEquals((-3167L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1761414031011608
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((-3167), "^U}W0@Bg8", "sf=@$ca6/$rMd1Vij^", (-3167), (-3167));
      byte[] byteArray0 = player0.pack();
      Party party0 = player0.next;
      player0.gangBoss();
      player0.setDead(3931L);
      player0.reset(false);
      Player player1 = new Player((byte)0, "module.ModuleBrowserDialog$ModuleFilter", "sf=@$ca6/$rMd1Vij^", (short)4919);
      player1.isJoinOK(player0, true);
      player0.unpack(byteArray0);
      player1.setDead((long) (byte)116, true);
      player1.isJoinOK(player0, true);
      player1.unpack(byteArray0);
      System.setCurrentTimeMillis(15000L);
      player1.getPictureId();
      int int0 = player1.gangStrength();
      assertEquals(116L, player1.getTimeOfDeath());
      assertEquals((-3167), int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Player player0 = new Player((-789), "&[EJW~-UY$j", "&[EJW~-UY$j", (-510), 311);
      player0.id = (-4322);
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      player0.pack();
      player0.pack();
      assertTrue(player0.isConnected());
      assertEquals((-510), player0.getPictureId());
      assertEquals(311, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "Y-#:nvY";
      String string1 = "[V9q&Vg[Hu^3eg4?T";
      Player player0 = new Player(1138, " ", "Y-#:nvY", 256);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.698058455669754
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(2558, " ", " ", 2558, (-1));
      player0.id = (-1);
      player0.isDead();
      Player player1 = new Player((-1), "l&Nmt,AdLm", " ", (-1), (-907));
      player0.setJoinOK(player1, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      player0.id = 0;
      Player player2 = new Player((-1), " ", 0);
      player0.isJoinOK(player2, true);
      Player player3 = new Player((-1), " ", "", (-3681), 1010);
      player2.pack();
      System.setCurrentTimeMillis(1664L);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.69674006410746
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(2558, " ", " ", 2558, 2558);
      player0.isDead();
      player0.setJoinOK(player0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      player0.pack();
      Player player1 = new Player(2558, " ", (-2002));
      player0.isJoinOK(player1, true);
      Player player2 = new Player((short)4919, " ", " ", (-789), 164);
      player1.pack();
      System.setCurrentTimeMillis(1149L);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.437192602354846
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(0L, true);
      player0.getStrength();
      Player player1 = new Player();
      player0.boss = (Party) player1;
      player0.setJoinOK(player1, true);
      player0.getMoney();
      player1.getY();
      player0.reset(true);
      player1.setDead();
      Player player2 = new Player((short)4919, (String) null, (String) null, (short)4919, (short)4919);
      player2.isJoinOK(player0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Player player3 = new Player((short)4919, (String) null, (String) null, 84, (-1));
      player3.getSubparty();
      player3.getTimeOfDeath();
      player3.getZ();
      Player player4 = new Player((short)4919, "", "", 289);
      player4.getSubparty();
      player4.getIP();
      player2.setDead();
      player3.getX();
      int int0 = player2.getStrength();
      assertEquals(1392409281320L, player2.getTimeOfDeath());
      assertEquals(4919, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((-3167), "^U}W0@Bg8", "sf=@$ca6/$rMd1Vij^", (-3167), (-3167));
      byte[] byteArray0 = player0.pack();
      Party party0 = player0.next;
      player0.head = null;
      Party party1 = new Party((short)4919);
      player0.next = party1;
      player0.id = 84;
      player0.unpack(byteArray0);
      boolean boolean0 = player0.isDead();
      assertEquals((-95), player0.getId());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.384198918389992
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(0L, true);
      player0.getStrength();
      Player player1 = new Player();
      player0.boss = (Party) player1;
      player0.setJoinOK(player1, true);
      float float0 = Player.MOVE_DISTANCE;
      player0.getY();
      player0.reset(true);
      player0.setDead();
      Player player2 = new Player((short)4919, "", "AV$*HtyP{.DTDmnWROz", (short)4919, 1);
      Player player3 = new Player((short)4919, "", "AV$*HtyP{.DTDmnWROz", (short)4919, (short)4919);
      player0.isJoinOK(player3, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Player player4 = new Player((short)4919, "AV$*HtyP{.DTDmnWROz", "[r.", 1, (-1));
      Player player5 = new Player();
      player5.getSubparty();
      player0.getTimeOfDeath();
      player0.getZ();
      Player player6 = new Player((short)4919, "", "[r.", 490);
      player3.getIP();
      player5.setDead();
      assertEquals(1392409281320L, player5.getTimeOfDeath());
      
      Player player7 = new Player();
      float float1 = player7.getX();
      assertEquals(10.0F, float1, 0.01F);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.102117063514037
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      player0.gangStrength();
      Player player1 = new Player();
      Party party0 = player1.prev;
      player1.isDead();
      player1.type();
      player0.setMoney(1);
      player1.getName();
      player1.setDead(0L);
      player0.getMoney();
      player0.getY();
      Player player2 = new Player();
      player1.setJoinOK(player0, false);
      player2.getX();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.105426495394898
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player((-990), (String) null, (String) null, 0, 4919);
      Player player1 = new Player((short)4919, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "", 452, 0);
      player0.setJoinOK(player1, true);
      player1.getMoney();
      Player player2 = new Player();
      float float0 = player2.getY();
      assertEquals(0.0F, float0, 0.01F);
      
      player2.reset(true);
      player2.reset(true);
      Player player3 = new Player((short)4919);
      player2.setMoney(0.0F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(0.0F, player2.getMoney(), 0.01F);
      assertFalse(player2.isDead());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2132), (-2132));
      player0.gangStrength();
      player1.setJoinOK(player3, false);
      assertEquals(452, player1.getPictureId());
      assertEquals("Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", player1.getIP());
      
      int int0 = player0.gangStrength();
      assertEquals(4919, int0);
      
      player0.getIP();
      int int1 = player3.type();
      assertEquals(1, player3.getStrength());
      assertEquals(0, player3.getPictureId());
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertEquals("Player4919", player3.getName());
      assertEquals(5, int1);
      assertEquals("0.0.0.0", player3.getIP());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.127429422638514
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(1535, (String) null, (-2175));
      player0.setMoney((-2185.164F));
      player0.getIP();
      player0.setDead((long) (-2175));
      player0.setZ(2814.4722F);
      player0.getIP();
      player0.setZ(0.2F);
      Player player1 = new Player((-321), (String) null, 1535);
      player0.getName();
      player0.setDead((-3558L));
      player0.getMoney();
      player1.getY();
      Player player2 = new Player();
      player0.setJoinOK(player1, true);
      player0.getX();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((-1769), "3b-a", "MW1eT`;TiW`R&8r{y_", 485, (-702));
      byte[] byteArray0 = new byte[5];
      player0.setDead(0L, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      dataInputStream0.readUnsignedByte();
      player0.unpack(dataInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      byteArray0[0] = (byte)1;
      player0.setConnected(true);
      player0.gangStrength();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)0;
      player0.unpack(byteArray0);
      boolean boolean0 = player0.isDead();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(2558, " ", " ", 2558, (-1));
      player0.id = (-1);
      player0.isDead();
      player0.setJoinOK(player0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      player0.id = 0;
      int int0 = (-1984);
      Player player1 = new Player((-1), " ", (-1984));
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player1.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(14081);
      boolean boolean0 = player0.isConnected();
      assertTrue(boolean0);
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player14081", player0.getName());
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player(0, (String) null, 0);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)1);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = ")u2()9C7l65tmv";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")u2()9C7l65tmv", false);
      mockFileOutputStream0.getChannel();
      mockFileOutputStream0.close();
      Player player0 = new Player((-1), " ", "", 2248, (-1606));
      player0.setY((-1606));
      player0.gangStrength();
      player0.getZ();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(3379, "7#P5xck3y8e>", 3379);
      player0.getStrength();
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(14081, "[(Z6C<ZK-4p3", 256);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)105;
      player0.unpack(byteArray0);
      player0.toString();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(256, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)20;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("Pn^,Xv~`+2;&g=&xG", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ");
      URI uRI0 = MockURI.aFTPURI;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      Player player0 = new Player((-3866), "Pn^,Xv~`+2;&g=&xG", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-3866));
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(515, "", "", 515, 515);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)87;
      byteArray1[4] = (byte) (-84);
      byteArrayInputStream0.read(byteArray1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      pushbackInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      bufferedInputStream0.read(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      player0.unpack(dataInputStream0);
      player0.setZ((-1.0F));
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player((-1494));
      player0.setZ((-1494));
      Player player1 = new Player((short)4919, ".*[.]class$", "GVxI4=", (-1494));
      player0.add(player1);
      player0.setZ((-742.0F));
      assertEquals((-742.0F), player0.getZ(), 0.01F);
      
      float float0 = player1.getZ();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(311, "&[EJW~-UY$j", 2372);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(2526, ")u2()9C7l65tmv", "-", 151);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)55;
      player0.unpack(byteArray0);
      player0.getPictureId();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      try { 
        pipedInputStream0.connect(pipedOutputStream1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9693172226721773
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(2558, " ", " ", 2558, (-1));
      player0.id = (-1);
      player0.isBoss();
      Player player1 = new Player((-1), "l&Nmt,AdLm", " ", (-1), (-1));
      player0.setJoinOK(player1, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      player0.id = 0;
      Player player2 = new Player((-1), " ", (-2002));
      boolean boolean0 = player0.isJoinOK(player2, true);
      assertTrue(boolean0);
      assertEquals((-1), player0.getStrength());
      
      player2.next = (Party) player1;
      int int0 = player2.gangStrength();
      assertEquals(1, int0);
      
      player1.unpack(byteArray0);
      player2.reset(true);
      assertEquals(0.0F, player2.getMoney(), 0.01F);
      assertEquals((-2002), player2.getPictureId());
      assertEquals(0L, player2.getTimeOfDeath());
      assertFalse(player2.isDead());
      
      Player player3 = new Player(0, "l&Nmt,AdLm", " ", (byte)0, (byte)0);
      player3.pack();
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertEquals(0.0F, player3.getY(), 0.01F);
      assertTrue(player3.isConnected());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((-28639), "", (String) null, 16347, (-28639));
      player0.setDead((-2844L), false);
      Player player1 = new Player();
      Player player2 = new Player((-28639), "", "Y-#:nvY", (-2173), 1773);
      player2.getTimeOfDeath();
      Player player3 = new Player(1, "6O* yn/fRb>j", 16347);
      player3.getZ();
      Player player4 = new Player(1, "6O* yn/fRb>j", (-28639));
      player3.getIP();
      player4.setDead();
      assertEquals(1392409281320L, player4.getTimeOfDeath());
      
      float float0 = player1.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(174, "", "b:XR+JPrMA", (-1), 118);
      Player player1 = new Player((short)4919, "b:XR+JPrMA", "Player", 83);
      player1.setMoney(83);
      Player player2 = new Player(835, "Player", "b:XR+JPrMA", (-1037), 329);
      player2.setX((-283.60724F));
      assertEquals((-283.60724F), player2.getX(), 0.01F);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player(0, "", (-1471));
      player0.setDead((long) 0, false);
      player0.reset(false);
      player0.reset(true);
      player0.getSubparty();
      player0.reset(true);
      player0.getTimeOfDeath();
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0);
      player0.reset(false);
      player0.getName();
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((-990), (String) null, (String) null, 0, 4919);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player1 = new Player(4919, "", 0);
      Party party0 = player1.boss;
      player1.getSubparty();
      player0.boss = null;
      player0.reset(true);
      player0.getPictureId();
      player1.setY(0.0F);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      player1.unpack(byteArray0);
      player1.setZ(0.0F);
      player0.setConnected(true);
      Player player2 = new Player(4919, "~zp0<^\"`#-P.ez", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (byte)33);
      boolean boolean0 = player1.isJoinOK(player2, true);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(33, player2.getPictureId());
      assertEquals(0.0F, player1.getZ(), 0.01F);
      assertFalse(boolean0);
      assertEquals("~zp0<^\"`#-P.ez", player2.getIP());
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      
      float float0 = player0.getMoney();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(4919, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("N.");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("N.", true);
      mockFileOutputStream0.getChannel();
      mockFileOutputStream0.close();
      Player player0 = new Player(2265, "", "N.", 2576, 0);
      player0.setY(1744.0052F);
      player0.setDead(1392409296320L);
      player0.gangStrength();
      player0.getZ();
      Party party0 = player0.head;
      MockFile mockFile0 = new MockFile("Player.unpack(): *** WARNING *** [EOF] data was incomplete: ");
      mockFileOutputStream0.flush();
      MockFile mockFile1 = new MockFile(mockFile0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player((-1), "&[EJW~-UY$j", 1598);
      Player player1 = new Player((-1));
      player0.isJoinOK(player1, true);
      String string0 = "";
      try { 
        MockFile.createTempFile((String) null, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Player player0 = new Player((-3167), "^U}W0@Bg8", "sf=@$ca6/$rMd1Vij^", (-3167), (-3167));
      player0.pack();
      Player player1 = new Player(2515);
      player0.setJoinOK(player1, true);
      Player player2 = new Player();
      player2.isJoinOK(player1, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = new MockFile("^U}W0@Bg8", "9dGW,!6");
      File file0 = MockFile.createTempFile("@4wn$XLcC", "9dGW,!6", (File) mockFile0);
      mockFile0.setReadOnly();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      player2.pack(dataOutputStream1);
      assertEquals(29L, file0.length());
      assertEquals(0.0F, player2.getY(), 0.01F);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.455760027083268
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(2558, " ", " ", 2558, (-1));
      player0.id = (-1);
      player0.isDead();
      String string0 = "l&Nmt,AdLm";
      Player player1 = new Player((-1), "l&Nmt,AdLm", " ", (-1), (-907));
      player0.setJoinOK(player1, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      player0.id = 0;
      Player player2 = new Player((-1), " ", (-2002));
      player0.isJoinOK(player2, false);
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)20;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "state.Party");
      MockFile.createTempFile("Pn^,Xv~`+2;&g=&xG", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ");
      URI uRI0 = MockURI.aFTPURI;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player((byte)20, "gh]^J~d", (-368));
      player0.reset(false);
      player0.setZ(2077.1057F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "state.Party");
      player0.setDead(1392409281320L, false);
      assertTrue(player0.isDead());
  }
}
