/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 22:23:32 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5941666991180168
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-2717));
      SystemInUtil.addInputLine("]`vS{tV[:)dX1");
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSSubstitution0.add((Object) "/T9.");
      Object object1 = new Object();
      jSTerm0.remove((Object) jSSubstitution2);
      jSSubstitution1.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution3);
      jSTerm0.add((Object) jSSubstitution1);
      jSTerm0.add((Object) null);
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0316063850792587
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("<");
      SystemInUtil.addInputLine("<");
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("<");
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.retainAll(jSTerm1);
      jSTerm0.remove((Object) "->");
      jSTerm1.isEmpty();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      jSTerm1.equals(jSTerm2);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("t5#D`Ft");
      jSTerm0.isGround();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-2717));
      SystemInUtil.addInputLine("]`vS{tV[:)dX1");
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSSubstitution0.add((Object) "/T9.");
      Object object1 = new Object();
      jSTerm0.remove((Object) jSSubstitution2);
      jSSubstitution1.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution3);
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.contains(jSSubstitution4);
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.050705726455745
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("<");
      SystemInUtil.addInputLine("<");
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("<");
      SystemInUtil.addInputLine("->");
      StringReader stringReader0 = new StringReader("->");
      stringReader0.reset();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals(jSTerm1);
      jSTerm1.isGround();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2397458666084575
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      SystemInUtil.addInputLine("/T9.");
      jSSubstitution3.add((Object) jSSubstitution1);
      SystemInUtil.addInputLine((String) null);
      Object object0 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      SystemInUtil.addInputLine("");
      jSTerm0.remove((Object) jSSubstitution4);
      jSTerm1.equals(jSSubstitution4);
      jSSubstitution3.add((Object) null);
      SystemInUtil.addInputLine((String) null);
      jSTerm1.add((Object) "/T9.");
      jSTerm1.equals(jSTerm0);
      jSTerm1.toStr();
      jSTerm0.remove((Object) "OaXq^E290IPf3*QgJ");
      jSSubstitution3.add((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm2.add((Object) jSSubstitution6);
      jSTerm1.equals(jSTerm2);
      jSTerm0.cloneT();
      jSTerm2.standardizerTerm();
      assertEquals(1, jSTerm2.size());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6826161324302253
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSSubstitution2.instance(jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.ensureCapacity(0);
      SystemInUtil.addInputLine("1a'k_OzYkf4u");
      SystemInUtil.addInputLine((String) null);
      Object object0 = new Object();
      jSSubstitution1.clear();
      jSSubstitution4.addElement(jSTerm1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.add((Object) jSTerm0);
      Object object1 = new Object();
      jSSubstitution4.add((Object) "1a'k_OzYkf4u");
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSSubstitution1.retainAll(jSPredicateForm0);
      jSTerm1.remove((Object) "call");
      jSTerm2.isEmpty();
      jSTerm0.add((Object) jSSubstitution1);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.equals(jSTerm0);
      jSTerm1.isGround();
      jSTerm0.toStr();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-2717));
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSSubstitution0.addElement(object0);
      jSSubstitution3.add((Object) jSSubstitution1);
      Object object1 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.remove((Object) null);
      jSSubstitution3.add((Object) "/T9.");
      jSTerm0.add((Object) "/T9.");
      jSTerm0.equals(jSTerm1);
      jSTerm0.add((Object) "list");
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2793801628943036
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(1);
      SystemInUtil.addInputLine("'F5_?#/EC");
      JSJshopVars.minus = 1;
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution0 = null;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isGround();
      SystemInUtil.addInputLine("list");
      StringReader stringReader0 = new StringReader("word");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.203299020486301
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemInUtil.addInputLine("");
      StringReader stringReader0 = new StringReader(">=");
      StringReader stringReader1 = new StringReader("aS Da.O)=P.n0cgYT[@");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(stringReader0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isGround();
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis((-1560L));
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0160085311135825
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(I!N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(1544);
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(1544, 227);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4586));
      streamTokenizer1.commentChar(227);
      StringReader stringReader1 = new StringReader(" Term expected");
      stringReader0.reset();
      StringReader stringReader2 = new StringReader("caLl");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.whitespaceChars((-2), (-1006));
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.44815508852816
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChar(113);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.commentChar(113);
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar(127);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      streamTokenizer2.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(32);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.toStr();
      jSTerm2.equals(jSTerm3);
      jSTerm2.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2124273887035923
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      SystemInUtil.addInputLine("/T9.");
      jSSubstitution3.add((Object) jSSubstitution1);
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution4);
      jSSubstitution2.add((Object) "q>7Ef/G_8~");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.removeElement(jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution0);
      jSTerm1.equals(jSSubstitution4);
      jSSubstitution3.add((Object) null);
      jSTerm1.add((Object) "/T9.");
      jSTerm1.equals(jSTerm0);
      jSTerm1.toStr();
      SystemInUtil.addInputLine("6 $ieOR.t*-K ");
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution4.iterator();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.standardizerTerm();
      jSTerm2.add((Object) "/T9.");
      assertEquals("[/T9.]", jSTerm1.toString());
      
      jSTerm0.cloneT();
      jSTerm1.equals(jSTerm2);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(7, stringBuffer0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3778116152577686
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChar(113);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.commentChar(113);
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar(127);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      streamTokenizer2.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(32);
      jSTerm2.matches(jSTerm1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer4);
      jSTerm3.parseList(streamTokenizer4);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm3, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.7858198373220868
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-2717));
      SystemInUtil.addInputLine("word");
      SystemInUtil.addInputLine("expecting");
      Object object0 = new Object();
      jSSubstitution0.addElement(object0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.clone();
      jSSubstitution4.spliterator();
      jSSubstitution0.add(0, (Object) jSSubstitution4);
      jSSubstitution3.add((Object) "expecting");
      jSSubstitution2.add((Object) "q>7Ef/G_8~");
      jSSubstitution3.add((Object) jSSubstitution1);
      Object object1 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.setSize(0);
      jSTerm0.remove((Object) jSSubstitution5);
      jSSubstitution2.add((Object) "q>7Ef/G_8~");
      jSSubstitution3.add((Object) null);
      StringReader stringReader0 = new StringReader("(W {\"\"");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9721037385162659
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-2717));
      SystemInUtil.addInputLine("]`vS{tV[:)dX1");
      SystemInUtil.addInputLine("expecting");
      Object object0 = new Object();
      jSSubstitution0.addElement(object0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Object object1 = jSTerm1.clone();
      jSSubstitution0.remove(object1);
      jSSubstitution0.add(0, (Object) jSSubstitution4);
      jSSubstitution3.add((Object) jSSubstitution1);
      Object object2 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution5);
      jSTerm1.add((Object) "]`vS{tV[:)dX1");
      jSSubstitution3.add((Object) null);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.add((Object) "expecting");
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm2, jSSubstitution4);
      assertTrue(jSSubstitution6.fail());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.284929477270969
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSJshopVars.exclamation = 0;
      JSTerm jSTerm1 = new JSTerm();
      SystemInUtil.addInputLine("%%%");
      jSTerm1.addElement(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.call();
      assertTrue(jSTerm2.isFunction());
      
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      
      JSTerm jSTerm4 = jSTerm3.cloneT();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm4);
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEval());
      assertNotSame(jSTerm4, jSTerm3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0488828279013447
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-2717));
      SystemInUtil.addInputLine("]`vS{tV[:)dX1");
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSSubstitution0.addElement(object0);
      jSSubstitution3.add((Object) jSSubstitution1);
      Object object1 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution4);
      jSSubstitution2.add((Object) "q>7Ef/G_8~");
      jSTerm0.clone();
      jSTerm1.add((Object) "]`vS{tV[:)dX1");
      jSSubstitution3.add((Object) null);
      jSTerm1.add((Object) "/T9.");
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-2717));
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSSubstitution0.addElement(object0);
      jSSubstitution3.add((Object) jSSubstitution1);
      Object object1 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution4);
      jSSubstitution2.add((Object) "q>7Ef/G_8~");
      jSTerm1.add((Object) "]`vS{tV[:)dX1");
      jSSubstitution3.add((Object) "]`vS{tV[:)dX1");
      jSTerm1.add((Object) "/T9.");
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemInUtil.addInputLine("?");
      SystemInUtil.addInputLine("%%%");
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7721393884375285
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      SystemInUtil.addInputLine("/T9.");
      jSSubstitution3.add((Object) jSSubstitution1);
      SystemInUtil.addInputLine((String) null);
      Object object0 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      SystemInUtil.addInputLine("");
      jSTerm1.add((Object) jSSubstitution3);
      jSTerm1.equals(jSSubstitution4);
      jSSubstitution3.add((Object) null);
      SystemInUtil.addInputLine((String) null);
      jSTerm1.add((Object) "/T9.");
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.200516493092306
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChar(113);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.commentChar(113);
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar(127);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      streamTokenizer2.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-4));
      jSTerm2.removeAllElements();
      System.setCurrentTimeMillis(32);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5757460565236046
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) "q>7Ef/G_8~");
      Object object0 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.remove((Object) null);
      jSSubstitution0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSTerm1.removeElement(jSTerm0);
      jSSubstitution1.add((Object) "q>7Ef/G_8~");
      jSTerm0.add((Object) "call");
      jSTerm0.makeVariable();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader(" Term expected");
      SystemInUtil.addInputLine("q>7Ef/G_8~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      jSSubstitution1.add((Object) "call");
      jSTerm1.makeVariable();
      jSTerm1.isGround();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm2);
      jSSubstitution4.add((Object) stringBuffer0);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution5);
      jSTerm4.call();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm3.matches(jSTerm1, jSSubstitution6);
      boolean boolean0 = jSTerm1.isVariable();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.44815508852816
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.ncgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      SystemInUtil.addInputLine(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.ncgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.commentChar(92);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader3 = new StringReader("h9");
      stringReader3.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer2.commentChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.isGround();
      System.setCurrentTimeMillis(1L);
      StringReader stringReader4 = new StringReader(">=");
      stringReader4.markSupported();
      System.setCurrentTimeMillis(824L);
      jSTerm2.matches(jSTerm1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer5);
      jSTerm3.print();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8910531113768327
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm0);
      SystemInUtil.addInputLine(")qYE@u,P.*n3h[a_");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-854L));
      System.setCurrentTimeMillis((-854L));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSSubstitution1;
      jSSubstitution0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%W<@esfKAKP.el-Hu2");
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer3.lineno());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.754105330999288
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("<");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      String string0 = "[ ";
      SystemInUtil.addInputLine("[ ");
      Object object0 = new Object();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.remove((Object) "<");
      jSSubstitution0.add((Object) "<");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object object1 = new Object();
      jSSubstitution0.removeElement(object1);
      jSSubstitution0.add((Object) "[ ");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution3);
      jSTerm1.add((Object) jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RQ:9T]");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9269145052641095
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("<");
      JSJshopVars.VarCounter = 62;
      SystemInUtil.addInputLine("<");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChar(113);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.commentChar(113);
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar(127);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) streamTokenizer0;
      jSSubstitution1.toArray(objectArray0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.377431292050959
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChar(113);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.commentChar(113);
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar(127);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(32);
      jSTerm2.matches(jSTerm1);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm2.matches(jSTerm3);
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.550362344248447
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChar(113);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.commentChar(113);
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar(127);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      streamTokenizer2.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.spliterator();
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(32);
      jSTerm2.matches(jSTerm1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer4);
      jSTerm3.parseList(streamTokenizer4);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      JSTerm jSTerm5 = jSTerm4.parseList(streamTokenizer3);
      jSTerm5.matches(jSTerm0);
      assertTrue(jSTerm0.isVariable());
      assertEquals("[., [aS], [., [Da.O], [nil]]]", jSTerm5.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.067188784530552
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("<");
      JSTerm jSTerm1 = jSTerm0.call();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-1L));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSTerm1;
      jSTerm0.toArray(objectArray0);
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "<";
      objectArray1[1] = (Object) jSTerm1;
      objectArray1[2] = (Object) "<";
      jSSubstitution0.toArray(objectArray1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.059306028129147
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isGround();
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(2328L);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.257184675410602
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      SystemInUtil.addInputLine("]`vS{tV[:)dX1");
      SystemInUtil.addInputLine("/T9.");
      jSSubstitution3.add((Object) jSSubstitution1);
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution4);
      jSSubstitution3.removeElements(jSSubstitution2);
      jSSubstitution2.add((Object) "q>7Ef/G_8~");
      jSTerm0.removeElement(object0);
      jSSubstitution3.add((Object) null);
      jSTerm1.add((Object) "/T9.");
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean1);
      
      jSTerm1.toStr();
      SystemInUtil.addInputLine("6 $ieOR.t*-K ");
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isFunction());
      
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.iterator();
      jSTerm1.remove((Object) jSTerm0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution4);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("(/T9. )", stringBuffer0.toString());
      
      boolean boolean2 = jSTerm4.equals(jSTerm3);
      assertTrue(jSTerm4.isFunction());
      assertNotSame(jSTerm4, jSTerm3);
      assertFalse(jSTerm3.isEval());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(37);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(2157L);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) streamTokenizer1;
      jSSubstitution0.add((Object) null);
      jSSubstitution0.toArray(objectArray0);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = (-4);
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-2717));
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSSubstitution0.addElement(object0);
      jSSubstitution3.add((Object) jSSubstitution1);
      Object object1 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution4);
      jSSubstitution2.add((Object) "q>7Ef/G_8~");
      jSTerm1.add((Object) "]`vS{tV[:)dX1");
      jSSubstitution3.add((Object) "]`vS{tV[:)dX1");
      jSTerm1.add((Object) "/T9.");
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-2717));
      SystemInUtil.addInputLine("]`vS{tV[:)dX1");
      SystemInUtil.addInputLine("expecting");
      Object object0 = new Object();
      jSSubstitution0.addElement(object0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSSubstitution0.remove((Object) jSTerm2);
      jSSubstitution0.add(0, (Object) jSSubstitution4);
      jSSubstitution3.add((Object) jSSubstitution1);
      Object object1 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution5);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2148896539491203
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(271);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-1));
      stringReader0.mark(213);
      streamTokenizer0.ordinaryChars((-2388), 213);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader0.skip(1706L);
      streamTokenizer1.commentChar((-4));
      StringReader stringReader1 = new StringReader("*Y2)m=!S`o");
      stringReader0.reset();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.257184675410602
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      SystemInUtil.addInputLine("/T9.");
      jSSubstitution3.add((Object) jSSubstitution1);
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution4);
      jSSubstitution2.add((Object) "q>7Ef/G_8~");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.removeElement(jSSubstitution5);
      jSSubstitution3.add((Object) jSSubstitution0);
      jSTerm1.equals(jSSubstitution4);
      jSSubstitution3.add((Object) null);
      jSTerm1.add((Object) "/T9.");
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean1);
      
      jSTerm1.toStr();
      SystemInUtil.addInputLine("6 $ieOR.t*-K ");
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution4.iterator();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("(/T9. )", stringBuffer0.toString());
      
      boolean boolean2 = jSTerm1.equals(jSTerm2);
      assertTrue(boolean2 == boolean0);
      assertFalse(jSTerm2.isVariable());
      
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution3);
      assertFalse(jSTerm4.isEval());
      assertNotSame(jSTerm2, jSTerm4);
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4839740027033503
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.n0cgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChar(113);
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer1.commentChar(113);
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = null;
      streamTokenizer0.commentChar(127);
      streamTokenizer2.whitespaceChars((-4), (-3038));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      streamTokenizer2.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.iterator();
      jSTerm2.remove((Object) streamTokenizer3);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution1);
      jSTerm1.parseList(streamTokenizer4);
      assertEquals(41, streamTokenizer4.ttype);
      assertFalse(jSTerm0.equals((Object)jSTerm4));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      String string0 = "q>7Ef/G_8~";
      jSSubstitution0.add((Object) "q>7Ef/G_8~");
      Object object0 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.remove((Object) null);
      jSSubstitution0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSTerm1.removeElement(jSTerm0);
      jSSubstitution1.add((Object) "q>7Ef/G_8~");
      String string1 = "call";
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.162225544921092
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("<");
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(70, (-3224));
      stringReader0.mark(1);
      streamTokenizer0.ordinaryChars(1, (-1263));
      StringReader stringReader1 = new StringReader("not");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.commentChar(42);
      StringReader stringReader2 = new StringReader("*Y2)m=!S`o");
      stringReader2.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ttype = (-3224);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*Kz2f{y,g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-3));
      streamTokenizer0.commentChar((-1));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution2);
      jSSubstitution2.add((Object) jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.equals(jSSubstitution3);
      jSSubstitution3.add((Object) "*Kz2f{y,g");
      jSTerm0.add((Object) stringReader0);
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) "q>7Ef/G_8~");
      Object object0 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.remove((Object) null);
      jSSubstitution0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.removeElements(jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution3);
      jSTerm1.removeElement(jSTerm0);
      jSSubstitution1.add((Object) "q>7Ef/G_8~");
      jSTerm0.add((Object) "call");
      jSTerm0.makeVariable();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader(" Term expected");
      SystemInUtil.addInputLine("q>7Ef/G_8~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.iterator();
      // Undeclared exception!
      try { 
        jSTerm2.elementAt((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.264496703644901
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      SystemInUtil.addInputLine("]`vS{tV[:)dX1");
      SystemInUtil.addInputLine("/T9.");
      jSSubstitution3.add((Object) jSSubstitution1);
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution4);
      jSSubstitution2.add((Object) "q>7Ef/G_8~");
      jSTerm0.removeElement(object0);
      jSSubstitution3.add((Object) null);
      jSTerm1.add((Object) "/T9.");
      jSTerm1.equals(jSTerm0);
      jSTerm1.toStr();
      SystemInUtil.addInputLine("6 $ieOR.t*-K ");
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.iterator();
      jSSubstitution1.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution4);
      assertFalse(jSTerm3.isVariable());
      
      jSTerm3.makeVariable();
      jSTerm1.toStr();
      boolean boolean0 = jSTerm3.equals(jSTerm2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0866739010750055
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("((tjUntT:{W'K");
      StringReader stringReader1 = new StringReader(">=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ordinaryChar(274);
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.pushBack();
      streamTokenizer2.ordinaryChars(227, (-4586));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      stringReader1.skip((-966L));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader2 = new StringReader("caLl");
      stringReader0.reset();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine((String) null);
      jSTerm0.add((Object) stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer4);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(boolean1 == boolean0);
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(4, stringBuffer0.length());
      assertFalse(jSTerm1.isEval());
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.43752129433314
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("<");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.equals(jSTerm1);
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis(45);
      jSTerm2.iterator();
      jSTerm1.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm0.add((Object) "<");
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.add((Object) jSTerm3);
      jSTerm4.makeConstant();
      jSTerm3.equals(jSTerm0);
      jSTerm3.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("((tjUtntT:{W'K");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ordinaryChars(40, 40);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.7751292747786216
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(VtjUnt[T:{uK");
      StringReader stringReader1 = new StringReader("(VtjUnt[T:{uK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChar(37);
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.ordinaryChars(227, (-4586));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      stringReader1.skip((-966L));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader2 = new StringReader("caLl");
      stringReader0.reset();
      streamTokenizer1.commentChar(37);
      StringReader stringReader3 = new StringReader("word");
      stringReader3.reset();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer3.ordinaryChars(35, 238);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("((tjUtntT:{W'K");
      StringReader stringReader1 = new StringReader("((tjUtntT:{W'K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChar(37);
      streamTokenizer1.ordinaryChar(127);
      streamTokenizer1.commentChar(3975);
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.8979457248567797
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("((tjUtntT:{W'K");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.instance(jSTerm0);
      StringReader stringReader1 = new StringReader("Undefined function to be evaluated  in Call statement");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.commentChar((-2038));
      streamTokenizer0.ordinaryChar((-3));
      streamTokenizer0.commentChar(36);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.commentChar((-4502));
      StringReader stringReader2 = new StringReader("@c*H;c+");
      stringReader2.reset();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.2203191012797943
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.makeEval(true);
      jSTerm0.print();
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0);
      jSSubstitution3.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSTerm1, jSSubstitution3);
      jSTerm0.matches(jSTerm1, jSSubstitution4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.050705726455745
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      SystemInUtil.addInputLine("aS Da.O)=P.ncgYT[@");
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine("aS Da.O)=P.ncgYT[@");
      SystemInUtil.addInputLine("}; B`]");
      StringReader stringReader0 = new StringReader(") ");
      stringReader0.reset();
      SystemInUtil.addInputLine(") ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertFalse(jSTerm2.isVariable());
      
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[nil]", jSTerm2.toString());
      assertTrue(jSTerm2.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9721037385162659
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSJshopVars.exclamation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSSubstitution0.instance(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.ensureCapacity((-2717));
      SystemInUtil.addInputLine("]`vS{tV[:)dX1");
      SystemInUtil.addInputLine("/T9.");
      Object object0 = new Object();
      jSSubstitution0.addElement(object0);
      jSSubstitution3.add((Object) jSSubstitution1);
      Object object1 = new Object();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.isFunction();
      jSSubstitution2.add((Object) "q>7Ef/G_8~");
      jSTerm1.add((Object) "]`vS{tV[:)dX1");
      jSSubstitution3.add((Object) null);
      jSTerm1.add((Object) "/T9.");
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8946891171539901
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("<");
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isFunction();
      jSTerm1.standardizerTerm();
      char char0 = 'p';
      StringReader stringReader0 = new StringReader("udQ|qCx#}");
      char[] charArray0 = new char[2];
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm0);
      // Undeclared exception!
      try { 
        predicate0.and((Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.7751292747786216
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(VtjUnt[T:{uK");
      StringReader stringReader1 = new StringReader("(VtjUnt[T:{uK");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChar(37);
      stringReader0.mark(32);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.ordinaryChars(227, (-4586));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      stringReader1.skip((-966L));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader2 = new StringReader("caLl");
      stringReader0.reset();
      streamTokenizer1.commentChar(37);
      StringReader stringReader3 = new StringReader("word");
      stringReader3.reset();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer3.ordinaryChars(48, 238);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.capacity());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tjutntt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".fCue(?[\"<fURG54");
      StringReader stringReader1 = new StringReader(".fCue(?[\"<fURG54");
      StringReader stringReader2 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      streamTokenizer0.sval = ".fCue(?[\"<fURG54";
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.sval = " ";
      streamTokenizer1.ordinaryChar(63);
      streamTokenizer1.commentChar((-1616126542));
      stringReader1.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 60;
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.ncgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      SystemInUtil.addInputLine(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.ncgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.commentChar(92);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader3 = new StringReader("h9");
      stringReader3.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer2.commentChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.commentChar((-4));
      StringReader stringReader4 = new StringReader(">=");
      stringReader4.reset();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader4);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader1);
      streamTokenizer5.whitespaceChars(2032, (-969));
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer9);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b'?A$/Yb%z(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5367224694372192
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RQ:9T]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[4] = (Object) "RQ:9T]";
      objectArray0[5] = (Object) "RQ:9T]";
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      char[] charArray0 = new char[0];
      jSTerm0.lastElement();
      // Undeclared exception!
      try { 
        jSSubstitution0.set(845, "%%%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 845
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6216679171123505
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("((tjUtntT:{W'K");
      StringReader stringReader1 = new StringReader(">=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChar(37);
      streamTokenizer1.ordinaryChar(127);
      streamTokenizer1.commentChar(3975);
      stringReader0.close();
      StringReader stringReader2 = new StringReader("YY'o\"");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      streamTokenizer0.commentChar((-2));
      StringReader stringReader3 = new StringReader(">=");
      stringReader2.reset();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1988493129136213
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.ncgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      SystemInUtil.addInputLine(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.ncgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.commentChar(92);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader3 = new StringReader("h9");
      stringReader3.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer2.commentChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.ordinaryChar((-4));
      System.setCurrentTimeMillis(376L);
      StringReader stringReader4 = new StringReader("0NFAS. o~#9PpY");
      stringReader2.markSupported();
      System.setCurrentTimeMillis(376L);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer5);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer4);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertEquals(32, streamTokenizer5.ttype);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.196392514341509
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aS Da.O)=P.ncgYT[@");
      StringReader stringReader1 = new StringReader(">=");
      SystemInUtil.addInputLine(">=");
      StringReader stringReader2 = new StringReader("aS Da.O)=P.ncgYT[@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.commentChar(92);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.commentChar((-4));
      StringReader stringReader3 = new StringReader("h9");
      stringReader3.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      streamTokenizer2.commentChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.isGround();
      System.setCurrentTimeMillis(1L);
      StringReader stringReader4 = new StringReader(">=");
      stringReader4.markSupported();
      System.setCurrentTimeMillis(824L);
      jSTerm2.matches(jSTerm1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader4);
      streamTokenizer6.nval = (-1626.40881731);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.484457535817486
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yd1O691@Mh");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      StringReader stringReader1 = new StringReader("yd1O691@Mh");
      stringReader0.reset();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      System.setCurrentTimeMillis(3264L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SystemInUtil.addInputLine("word");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = 623;
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      SystemInUtil.addInputLine("@%l");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      System.setCurrentTimeMillis((-498L));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("<");
      JSJshopVars.VarCounter = 62;
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "tju$ntt");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
  }
}
