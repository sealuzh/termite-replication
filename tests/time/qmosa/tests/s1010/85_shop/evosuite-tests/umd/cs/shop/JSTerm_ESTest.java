/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:11:52 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("%Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[5];
      char char0 = 'z';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-3), (-305));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6426223016259613
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      int int0 = 1526;
      JSJshopVars.exclamation = 1526;
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      jSTerm0.makeEval(false);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSJshopVars.semicolon = 1526;
      jSTerm2.addAll(0, (Collection) jSTerm0);
      jSTerm0.print();
      StringReader stringReader1 = new StringReader("caPz");
      // Undeclared exception!
      try { 
        jSTerm2.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.test(streamTokenizer0);
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      stringReader0.reset();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "?m");
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6457265144862716
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.exclamation = 1526;
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm0.isEval();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.makeEval(false);
      jSTerm0.add((Object) null);
      StringReader stringReader1 = new StringReader("");
      jSTerm2.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8544919899591754
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate.isEqual((Object) stringReader0);
      Predicate<JSSubstitution> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<JSSubstitution> predicate2 = predicate1.negate();
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      predicate5.test(streamTokenizer0);
      jSTerm0.add((Object) predicate0);
      StringReader stringReader1 = new StringReader("6");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2, jSSubstitution1);
      assertEquals(2, jSTerm0.size());
      
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      assertTrue(jSTerm2.equals((Object)jSTerm0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9374751429887782
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) stringReader0);
      Predicate<JSSubstitution> predicate2 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      Predicate<JSSubstitution> predicate4 = predicate3.and(predicate1);
      Predicate<JSSubstitution> predicate5 = predicate4.or(predicate2);
      predicate5.and(predicate0);
      Predicate<JSSubstitution> predicate6 = predicate2.negate();
      predicate6.negate();
      predicate4.test(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution3);
      jSTerm0.add((Object) "?m");
      StringReader stringReader1 = new StringReader("?m");
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.755727560797907
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.exclamation = 1526;
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm0.isEval();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.makeEval(false);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSJshopVars.semicolon = 0;
      jSTerm0.print();
      jSTerm3.makeEval(true);
      jSTerm0.isGround();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.lastElement();
      jSTerm3.add((Object) "%%%");
      StringReader stringReader1 = new StringReader("notequal");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.554873422121751
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader(".n7.nd].s)a6'N9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Object[] objectArray0 = new Object[0];
      jSTerm0.toArray(objectArray0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "wbV,#/'W%>7i>J?qB");
      predicate1.and(predicate0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) streamTokenizer0);
      StringReader stringReader1 = new StringReader(".n7.nd].s)a6'N9");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("?/<kXLxv3x");
      stringReader2.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.call();
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.254423781990184
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity((-1));
      char[] charArray0 = new char[2];
      jSTerm0.parallelStream();
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      stringReader0.read(charArray0);
      jSTerm0.isEval();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.equals(jSTerm1);
      Predicate.isEqual((Object) stringReader0);
      jSTerm0.add((Object) "?m");
      StringReader stringReader1 = new StringReader(")");
      StringReader stringReader2 = new StringReader("nil");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StringReader stringReader3 = new StringReader("?m");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9972663012231866
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      int int0 = 1526;
      JSJshopVars.exclamation = 1526;
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm0.isEval();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.makeEval(false);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      JSJshopVars.semicolon = 1526;
      jSTerm0.print();
      StringReader stringReader1 = new StringReader("caPz");
      jSTerm4.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.call();
      jSTerm5.matches(jSTerm3, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4194714731958813
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      JSJshopVars.colon = (-29);
      JSJshopVars.plus = 46;
      jSTerm0.clear();
      JSJshopVars.greaterT = (-1720);
      JSJshopVars.lessT = 1156;
      JSJshopVars.rightPar = 1156;
      jSTerm0.isGround();
      jSTerm0.isEval();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9927357889302324
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate1.negate();
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      Object object0 = jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.print();
      StringReader stringReader1 = new StringReader("n");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      jSTerm1.toArray(objectArray0);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.call();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.375117265526805
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.test((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<JSSubstitution> predicate4 = Predicate.isEqual((Object) jSSubstitution0);
      predicate4.and(predicate2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      predicate4.test(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) null);
      predicate4.test(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution4);
      jSTerm1.add((Object) "o9+>~h%");
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("-");
      stringReader1.markSupported();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "(";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<JSSubstitution> predicate1 = Predicate.isEqual((Object) "(");
      Predicate<JSSubstitution> predicate2 = predicate1.negate();
      predicate2.or(predicate1);
      predicate0.test(jSSubstitution0);
      predicate2.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) predicate1);
      StringReader stringReader0 = new StringReader("4.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.elementAt((-862));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8386993527521223
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate.isEqual((Object) stringReader0);
      Predicate<JSSubstitution> predicate1 = Predicate.isEqual((Object) jSTerm0);
      predicate1.or(predicate0);
      Predicate<JSSubstitution> predicate2 = predicate1.negate();
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate4 = predicate0.negate();
      predicate0.and(predicate3);
      predicate0.and(predicate4);
      predicate0.test("?m");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      predicate0.test(jSTerm1);
      jSTerm0.add((Object) predicate3);
      StringReader stringReader1 = new StringReader("6");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSTerm1.toStr();
      StringReader stringReader2 = new StringReader("M]iK^*F`]=)");
      jSTerm0.matches(jSTerm1);
      assertEquals(2, jSTerm0.size());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.960044498869427
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      int int0 = 0;
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.exclamation = 1526;
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm0.isEval();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.makeEval(false);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      JSJshopVars.semicolon = 0;
      jSTerm0.print();
      jSTerm4.makeEval(true);
      jSTerm0.isGround();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm4.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.call();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4749023296443107
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity((-1));
      JSJshopVars.apostrophe = (-1);
      char[] charArray0 = new char[2];
      jSTerm0.parallelStream();
      charArray0[0] = 'O';
      charArray0[1] = ']';
      jSTerm0.size();
      jSTerm0.capacity();
      jSTerm0.isVariable();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.VarCounter = 60;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.isGround();
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.519978478102515
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      predicate2.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSTerm0.isGround();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("1+80{9@C/");
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8854751649939008
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      StringReader stringReader1 = new StringReader(",");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm0, jSSubstitution2);
      assertEquals("[?%%%, null]", jSTerm0.toString());
      assertFalse(jSTerm3.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6090502146723553
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) predicate1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      predicate0.test(jSSubstitution5);
      jSTerm0.add((Object) predicate2);
      jSSubstitution2.removeAll(jSSubstitution3);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution3);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$45/636637915 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9951406093783994
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate.isEqual((Object) stringReader0);
      Predicate<JSSubstitution> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<JSSubstitution> predicate2 = predicate1.negate();
      predicate2.or(predicate0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      predicate3.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate4.test(streamTokenizer0);
      jSTerm0.add((Object) predicate0);
      jSTerm0.print();
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSUtil");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7636021729853053
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate.isEqual((Object) stringReader0);
      Predicate<JSSubstitution> predicate1 = Predicate.isEqual((Object) jSTerm0);
      predicate1.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) jSTerm0);
      predicate0.or(predicate2);
      jSTerm0.get(0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) "?%%%");
      Predicate<Object> predicate4 = predicate3.negate();
      predicate3.and(predicate0);
      predicate4.test(predicate1);
      Object object0 = new Object();
      jSTerm0.add(object0);
      StringReader stringReader1 = new StringReader("?m");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) "nil");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution1);
      predicate2.test(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.19759279820448
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("l[2JBybp@&\",;&G:e?L");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.isEval());
      assertEquals("[nil]", jSTerm1.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6394727327976537
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      jSTerm0.clone();
      jSTerm1.isGround();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.print();
      jSTerm2.makeEval(true);
      jSTerm0.isGround();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm3.lastElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4431633337638496
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.trimToSize();
      jSTerm0.matches(jSPredicateForm0);
      CharBuffer charBuffer0 = CharBuffer.allocate(41);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.call();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2564941753649252
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate.isEqual((Object) stringReader0);
      Predicate<JSSubstitution> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<JSSubstitution> predicate2 = predicate1.negate();
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution0);
      predicate0.and(predicate4);
      jSTerm0.equals(jSTerm0);
      jSTerm0.add((Object) predicate0);
      StringReader stringReader1 = new StringReader("6");
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1531782505128936
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@eJl+f#sO0D");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4316244347695988
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate.isEqual((Object) stringReader0);
      Predicate<JSSubstitution> predicate1 = Predicate.isEqual((Object) jSTerm0);
      predicate1.or(predicate0);
      Predicate<JSSubstitution> predicate2 = predicate1.negate();
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate4 = predicate0.negate();
      predicate0.and(predicate3);
      predicate3.test((Object) null);
      predicate0.and(predicate4);
      predicate0.test("?m");
      Object object0 = jSTerm0.clone();
      predicate0.test(object0);
      jSTerm0.add((Object) predicate3);
      StringReader stringReader1 = new StringReader("6");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("M]iK^*F`]=)");
      jSTerm0.cloneT();
      assertEquals(2, jSTerm0.size());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.734527604650969
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      StringReader stringReader1 = new StringReader(",");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.lastElement();
      jSTerm1.add((Object) "umd.cs.shop.JSEvaluate");
      StringReader stringReader2 = new StringReader("");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.isGround();
      jSTerm1.standardizerTerm();
      jSTerm0.call();
      assertEquals("[?%%%, null]", jSTerm0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution0.clear();
      jSSubstitution0.add((Object) jSSubstitution1);
      predicate3.test(jSSubstitution0);
      jSTerm0.add((Object) predicate3);
      predicate0.negate();
      Predicate<JSSubstitution> predicate4 = predicate0.negate();
      predicate4.test(jSSubstitution2);
      Predicate<JSSubstitution> predicate5 = predicate4.and(predicate2);
      jSSubstitution2.add((Object) predicate5);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(61, stringBuffer0.length());
      
      StringReader stringReader0 = new StringReader("M]iK^*F`]=)");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.367420033319239
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.containsAll(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@eJl+f#sO0D");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = null;
      jSTerm0.makeConstant();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.713459573557023
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.call();
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isConstant());
      
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm1);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertNotSame(jSTerm1, jSTerm4);
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(1, jSTerm1.size());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6275758796393918
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3288274798399655
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution1);
      predicate3.test(jSSubstitution0);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate3);
      predicate0.negate();
      predicate2.or(predicate1);
      Predicate<JSSubstitution> predicate4 = predicate0.negate();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution3);
      predicate4.and(predicate2);
      predicate4.or(predicate0);
      StringReader stringReader0 = new StringReader("1*,@tmL^X4/w3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      predicate3.and(predicate2);
      jSSubstitution2.add((Object) predicate0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.toStr();
      StringReader stringReader1 = new StringReader("1*,@tmL^X4/w3");
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<JSSubstitution> predicate2 = predicate0.and(predicate1);
      Predicate<JSSubstitution> predicate3 = predicate2.negate();
      Predicate<JSSubstitution> predicate4 = predicate3.or(predicate2);
      Predicate<JSSubstitution> predicate5 = predicate4.and(predicate2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution2.add((Object) "n)4oPl{>8gR:");
      predicate0.test(jSSubstitution0);
      Predicate.isEqual((Object) predicate2);
      jSTerm0.add((Object) null);
      assertEquals("[n, null]", jSTerm0.toString());
      
      predicate4.negate();
      predicate5.negate();
      predicate4.and(predicate0);
      predicate0.or(predicate2);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4535852199977475
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) stringReader0);
      Predicate<JSSubstitution> predicate1 = Predicate.isEqual((Object) jSTerm0);
      predicate1.negate();
      Predicate.isEqual((Object) predicate0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate1.test(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) stringReader0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.add((Object) "?m");
      jSTerm0.isFunction();
      Object object0 = new Object();
      Predicate.isEqual((Object) "}q7-7'dyRs\"");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution6);
      StringReader stringReader1 = new StringReader("?m");
      jSTerm1.isGround();
      jSTerm1.applySubstitutionT(jSSubstitution4);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.eolIsSignificant(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5688603433446962
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer1.ordinaryChar(41);
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@eJl+f#s[0D");
      stringReader0.skip(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.dot = (-324);
      char[] charArray0 = new char[1];
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@eJl+f#s[0D");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("n");
      StringReader stringReader2 = new StringReader("@eJl+f#s[0D");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars(91, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      predicate0.or(predicate1);
      jSTerm0.isConstant();
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate0.test(jSSubstitution0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      charArray0[7] = 'V';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-331), (-331));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7246480111593305
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.exclamation = 1526;
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm0.isEval();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.makeEval(false);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSJshopVars.semicolon = 0;
      jSTerm0.print();
      jSTerm3.makeEval(true);
      jSTerm1.isConstant();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.lastElement();
      jSTerm3.add((Object) "%%%");
      StringReader stringReader1 = new StringReader("notequal");
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.21798344858705
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      predicate0.or(predicate1);
      predicate1.test(predicate0);
      predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate0.test(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      Predicate.isEqual(object0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) "Line : ");
      predicate0.test(jSSubstitution2);
      StringReader stringReader0 = new StringReader("Undefined function to be evaluated  in Call statement");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("nil");
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.call();
      assertEquals(32, streamTokenizer0.ttype);
      assertTrue(jSTerm1.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate3 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution0.add((Object) jSSubstitution1);
      predicate3.test(jSSubstitution0);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate3);
      predicate0.negate();
      Predicate<JSSubstitution> predicate4 = predicate0.negate();
      predicate4.and(predicate2);
      predicate4.or(predicate0);
      StringReader stringReader0 = new StringReader("1*,@tmL^X4/w3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution3.fail());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(32, streamTokenizer0.ttype);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0750585205611203
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "?m");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate.isEqual((Object) stringReader0);
      Predicate<JSSubstitution> predicate1 = Predicate.isEqual((Object) jSTerm0);
      predicate1.or(predicate0);
      Predicate<JSSubstitution> predicate2 = predicate1.negate();
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate0);
      predicate3.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      predicate5.test(streamTokenizer0);
      jSTerm0.add((Object) predicate0);
      StringReader stringReader1 = new StringReader("p6");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate.isEqual((Object) "");
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StringReader stringReader0 = new StringReader("4.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = 'Y';
      charArray0[2] = '&';
      System.setCurrentTimeMillis(0L);
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = 0;
      JSJshopVars.backquote = 945;
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.leftPar = 45;
      JSJshopVars.rightPar = 0;
      jSSubstitution0.add((Object) "_~)=_c<y");
      jSSubstitution0.addElement(jSTerm0);
      Object[] objectArray0 = new Object[2];
      jSSubstitution0.toArray(objectArray0);
      char[] charArray0 = new char[1];
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertFalse(jSSubstitution1.equals((Object)jSSubstitution0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.020920441546136
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSJshopVars.exclamation = 0;
      StringReader stringReader0 = new StringReader("notequal");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      int int0 = 1526;
      JSJshopVars.exclamation = 1526;
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.isEval();
      jSTerm2.isVariable();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.makeEval(false);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm1.print();
      StringReader stringReader1 = new StringReader("4.0");
      jSTerm2.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm3.call();
      jSTerm2.matches(jSTerm5, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
