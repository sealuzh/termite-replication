/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:48:28 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.List;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.function.Consumer;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbc.JdbcSQLException;
import org.h2.tools.SimpleResultSet;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.443505356881815
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(2373, "org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[3];
      stringArray0[1] = " NOT";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.BitTypeCompiler", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".class", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.innerJoin("t=2s%6p8", stringArray0, "|WY-[CoMK", "d\"6=IY~I2'E)dQ4y", stringArray0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.derby.impl.sql.compile.BitTypeCompiler");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        constantActionActivation0.getTransactionController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.411790981644422
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.normalize("", false);
      SQLUtil.isQuery("renamenot");
      SQLUtil.isProcedureCall("renamenot");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType.getInstance((-2704), "c:");
      defaultDBTable0.toString();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "renamenot", false, stringArray0);
      Integer integer0 = RawTransaction.ABORT;
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-2704), threadFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("column_type smallint");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2373, "`zbWOlBq");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`zbWOlBq", defaultDBTable1, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder(2);
      defaultDBTable0.getColumnNames();
      stringBuilder0.reverse();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "`zbWOlBq";
      objectArray0[1] = (Object) dBColumnArray0[0];
      objectArray0[2] = (Object) "`zbWOlBq";
      objectArray0[3] = (Object) "`zbWOlBq";
      objectArray0[4] = (Object) dBColumnArray0[0];
      objectArray0[5] = (Object) "column_type smallint";
      objectArray0[6] = (Object) dBColumnArray0[0];
      SQLUtil.isDML("column_type smallint");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5036859602348813
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|}9JEVa");
      SQLUtil.leftJoin((String) null, stringArray0, "0Ku.I{F]a{{uz%", "0Ku.I{F]a{{uz%", stringArray0);
      SQLUtil.renderColumnListWithTableName("!.JB\"T1", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray1 = defaultDBTable0.getColumnNames();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("left join 0Ku.I{F]a{{uz% as 0Ku.I{F]a{{uz% on ", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.insert(39, (CharSequence) "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y/", defaultDBTable0, (-1181738690), "y/");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      SQLUtil.innerJoin("0Ku.I{F]a{{uz%", stringArray1, "setLong(String,long)", "setLong(String,long)", stringArray0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      defaultDBColumn0.toString();
      SQLUtil.renderColumnNames(list0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder3);
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0Ku.I{F]a{{uz%");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        constantActionActivation0.getTransactionController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8125138204849098
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("R/&", false);
      assertEquals("R / &", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "R/&";
      stringArray0[1] = "R / &";
      stringArray0[2] = "6bqhU[C{nVo:";
      stringArray0[3] = "6bqhU[C{nVo:";
      stringArray0[4] = "R/&";
      stringArray0[5] = "6bqhU[C{nVo:";
      stringArray0[6] = "";
      stringArray0[7] = "R / &";
      stringArray0[8] = "R / &";
      String string1 = SQLUtil.join("", "6bqhU[C{nVo:", stringArray0, "mgAKBu", "R / &", stringArray0);
      assertEquals("mgAKBu as R / & on 6bqhU[C{nVo:.R/& = R / &.R/& and 6bqhU[C{nVo:.R / & = R / &.R / & and 6bqhU[C{nVo:.6bqhU[C{nVo: = R / &.6bqhU[C{nVo: and 6bqhU[C{nVo:.6bqhU[C{nVo: = R / &.6bqhU[C{nVo: and 6bqhU[C{nVo:.R/& = R / &.R/& and 6bqhU[C{nVo:.6bqhU[C{nVo: = R / &.6bqhU[C{nVo: and 6bqhU[C{nVo:. = R / &. and 6bqhU[C{nVo:.R / & = R / &.R / & and 6bqhU[C{nVo:.R / & = R / &.R / &", string1);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-734), "BY&~db2Vo%ZBr$iH");
      SQLUtil.removeComments("/*pUuPbe&~(R9Zi");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=+*u");
      Integer integer0 = new Integer((-734));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table,mk-", defaultDBTable0, dBDataType0, integer0);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create table,mk- BY&~DB2VO%ZBR$IH(-734) NULL", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q&xBT]?uQ9eT!G9Rk;");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Q&xBT]?uQ9eT!G9Rk;", true, defaultDBTable0, "INTEGER");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("INTEGER", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) dBCheckConstraint0);
      int int0 = (-2040434221);
      StringBuilder stringBuilder3 = stringBuilder2.append((-2040434221));
      // Undeclared exception!
      try { 
        stringBuilder3.insert((-2040434221), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2040434221
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "delete";
      SQLUtil.mutatesDataOrStructure("delete");
      StringBuilder stringBuilder0 = new StringBuilder("delete");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6851023616607392
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = SQLUtil.isDDL("");
      String string0 = SQLUtil.normalize("R/&", false);
      assertEquals("R / &", string0);
      
      DBDataType.getInstance(40, "");
      Integer integer0 = RawTransaction.ABORT;
      boolean boolean1 = SQLUtil.isQuery("R / &");
      assertTrue(boolean1 == boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "R / &";
      stringArray0[1] = "execute";
      stringArray0[2] = "R/&";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8uml?", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (R / &, execute, R/&)", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-58351823), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setType(dBDataType0);
      defaultDBTable0.setSchema((DBSchema) null);
      defaultDBTable0.setOwner((CompositeDBObject<?>) null);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8314516895760984
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin((String) null, stringArray0, "0Ku.I{F]a{{uz%", "0Ku.I{F]a{{uz%", stringArray0);
      SQLUtil.renderColumnListWithTableName("!.JB\"T1", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.innerJoin("sg8i,pjZMCTC*I", stringArray0, "deleteorg.h2.result.resultremote", "0Ku.I{F]a{{uz%", stringArray0);
      SQLUtil.innerJoin("0Ku.I{F]a{{uz%", stringArray0, "deleteorg.h2.result.resultremote", (String) null, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "Fhw}up<JxXu%0da\u0007", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.innerJoin("org.apache.derby.impl.sql.execute.HashScanResultSet", stringArray0, "deleteorg.h2.result.resultremote as 0Ku.I{F]a{{uz% on ", "Fhw}up<JxXu%0da\u0007", stringArray0);
      SQLUtil.typeAndName(defaultDBTable1);
      Character character0 = Character.valueOf('>');
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("sg8i,pjZMCTC*I", (String) null, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "create unique index";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xEV$ CS-t**;nbaA#yd");
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7244547079196284
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|}9JEVa");
      SQLUtil.leftJoin((String) null, stringArray0, "0Ku.I{F]a{{uz%", "0Ku.I{F]a{{uz%", stringArray0);
      SQLUtil.renderColumnListWithTableName("!.JB\"T1", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray1 = defaultDBTable0.getColumnNames();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("left join 0Ku.I{F]a{{uz% as 0Ku.I{F]a{{uz% on ", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.insert(39, (CharSequence) "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y/", defaultDBTable0, (-1181738690), "y/");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      SQLUtil.innerJoin("0Ku.I{F]a{{uz%", stringArray1, "setLong(String,long)", "setLong(String,long)", stringArray0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder3);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("0Ku.I{F]a{{uz%", (String) null, "|}9JEVa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(2373, "rename");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(" NOT");
      StringBuilder stringBuilder1 = new StringBuilder(" NOT");
      defaultDBTable0.getColumnNames();
      SQLUtil.addOptionalCondition("k!", stringBuilder0);
      stringBuilder0.append(true);
      DBDataType.getInstance(2373, "VQ A%l+jsH7|");
      Integer integer0 = new Integer(90103);
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Nm&0/-W l|o^U|", defaultDBTable0, dBDataType0, (Integer) null, integer1);
      defaultDBColumn1.setDefaultValue("]4Y _Z]P.Fxmc,");
      defaultDBColumn1.toString();
      SQLUtil.renderColumn(defaultDBColumn1);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DBDataType.getInstance(2373, "org.apache.derby.impl.sql.compile.BitTypeCompiler");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i1K/GmR{WJ'|'");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-495), "?#%?z;}[jpm?D.");
      Integer integer0 = new Integer((-495));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updatedeletde", defaultDBTable1, dBDataType0, integer0, (Integer) null);
      SQLUtil.isQuery("updatedeletde");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9662969137433333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "org.apache.derby.impl.sql.compile.BitTypeCompiler";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.BitTypeCompiler";
      stringArray0[4] = null;
      SQLUtil.leftJoin("org.apache.derby.impl.sql.compile.BitTypeCompiler", stringArray0, stringArray0[1], "selectdeletdjb;+m[de\"jf^7", stringArray0);
      SQLUtil.renderColumnListWithTableName(stringArray0[0], stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      SQLUtil.innerJoin(stringArray0[1], stringArray0, "create unique index", "org.apache.derby.impl.sql.compile.BitTypeCompiler", stringArray0);
      SQLUtil.innerJoin("2057c01b-0103-0e39-b8e7-00000010f010", stringArray0, "2r0U?, ?s$", "getNestedLoopLeftOuterJoinResultSet", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.innerJoin("left", stringArray0, "@Cz+zNk;}AKG", "'MAXTRANS'", stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("getNestedLoopLeftOuterJoinResultSet", defaultDBTable1, (-54552646), " NOT");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setSize(integer0);
      defaultDBColumn0.setNullable(true);
      SQLUtil.typeAndName(defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, , org.apache.derby.impl.sql.compile.BitTypeCompiler, org.apache.derby.impl.sql.compile.BitTypeCompiler, , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DBDataType dBDataType0 = DBDataType.getInstance(2373, "org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType.getInstance((-495), "?#%?z;}[jpm?D.");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updatedeletde", defaultDBTable1, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.equals(dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("executecreate unique index", defaultDBTable1, 2373, "execdelete");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.260492550510888
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "create unique index";
      stringArray0[4] = null;
      stringArray0[5] = "n";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("column_type smallint");
      String[] stringArray1 = new String[3];
      stringArray1[0] = ";eK*/";
      stringArray1[1] = null;
      stringArray1[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique index", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("org.apache.derby.impl.sql.compile.OptimizerImpl");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("pididz/3", (DBSchema) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.654308236115124
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(2373, "rename");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "rename");
      StringBuilder stringBuilder1 = new StringBuilder(" NOT");
      String[] stringArray0 = defaultDBTable0.getColumnNames();
      SQLUtil.addOptionalCondition("k!", stringBuilder0);
      char[] charArray0 = new char[21];
      StringBuilder stringBuilder2 = stringBuilder0.append(true);
      charArray0[0] = 'R';
      charArray0[1] = 'n';
      charArray0[2] = '#';
      charArray0[3] = '9';
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      SQLUtil.innerJoin("UNIQUE ", stringArray0, "SYSTEM_SAVEPOINT_", "SYSTEM_SAVEPOINT_", stringArray0);
      SQLUtil.addRequiredCondition("UNIQUE ", stringBuilder0);
      assertEquals("rename or k!trueRENAME and UNIQUE ", stringBuilder0.toString());
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("VG6\".=r6iypJ3A", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT VG6\".=r6iypJ3A FOREIGN KEY () REFERENCES  NOT()", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "create unique index";
      stringArray0[4] = null;
      stringArray0[5] = "n";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("column_type smallint");
      boolean boolean0 = true;
      String[] stringArray1 = new String[3];
      stringArray1[0] = ";eK*/";
      stringArray1[1] = null;
      stringArray1[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique index", true, stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[0], true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5653948371180277
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "create unique index");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " or ");
      SQLUtil.isDML("create unique index");
      DBCatalog dBCatalog0 = new DBCatalog("log trunk", (Database) null);
      dBCatalog0.setName(" or ");
      dBCatalog0.getTables();
      DBSchema dBSchema0 = new DBSchema("truncatee;)5r64 #&");
      dBSchema0.setDoc("alter materialized view");
      dBCatalog0.addSchema(dBSchema0);
      dBCatalog0.addSchema(dBSchema0);
      dBCatalog0.removeSchema(dBSchema0);
      DBDataType.getInstance(903, "callc:");
      String[] stringArray0 = new String[4];
      stringArray0[0] = " or ";
      stringArray0[1] = "truncatee;)5r64 #&";
      stringArray0[2] = "-vR";
      stringArray0[3] = " NOT";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "-vR";
      stringArray1[1] = "-vR";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(" NOT", stringArray0, "-vR", "truncatee;)5r64 #&", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.isDML("e;)5r64 #&");
      String[] stringArray0 = new String[18];
      stringArray0[0] = "e;)5r64 #&";
      stringArray0[13] = "e;)5r64 #&";
      stringArray0[2] = stringArray0[1];
      stringArray0[3] = "e;)5r64 #&";
      stringArray0[4] = "e;)5r64 #&";
      stringArray0[5] = "e;)5r64 #&";
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "delete";
      SQLUtil.mutatesDataOrStructure("delete");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "delete");
      SQLUtil.isDML("delete");
      DBCatalog dBCatalog0 = new DBCatalog("delete", (Database) null);
      dBCatalog0.setName("`|h*nrl:%'-qkmHMD&@");
      TableContainer tableContainer0 = new TableContainer("9H$[9)4Vazes[\"");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rule size_uom", (DBSchema) null);
      DBDataType.getInstance(310, " NOT");
      DBDataType dBDataType0 = DBDataType.getInstance(45, " NOT");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("GtR6wEi$9V*", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "GtR6wEi$9V*");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rule size_uom";
      stringArray0[1] = "A;K10>Uu";
      stringArray0[2] = " NOT";
      String string0 = SQLUtil.join("re:Dn9Fgs&YB", "]dU5", stringArray0, "create materialized", "ii6y/", stringArray0);
      assertEquals("re:Dn9Fgs&YB join create materialized as ii6y/ on ]dU5.rule size_uom = ii6y/.rule size_uom and ]dU5.A;K10>Uu = ii6y/.A;K10>Uu and ]dU5. NOT = ii6y/. NOT", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT", (DBSchema) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[3];
      stringArray0[1] = " NOT";
      stringArray0[2] = "7N";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.BitTypeCompiler", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "LbfN~U.0YEI{4?", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      Integer integer0 = RawTransaction.ABORT;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      String string0 = "42ZA3";
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("42ZA3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '42ZA3'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9456645463488123
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "create unique index";
      stringArray0[4] = null;
      stringArray0[6] = "o";
      SQLUtil.innerJoin("e,((", stringArray0, "select intobo8n,t*i)c,%0\"&4", "!F@_{u", stringArray0);
      SQLUtil.innerJoin("org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics", stringArray0, "org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics", "o", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique index", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, , , create unique index, , , o)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7475957984128405
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBDataType.getInstance(0, "H. @GV8(KQ-K");
      Integer integer0 = new Integer(7);
      Integer integer1 = RawTransaction.ABORT;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "H. @GV8(KQ-K";
      SQLUtil.renderColumnListWithTableName("deletes_$]ad@a@[w:tebzs", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Integer integer2 = RawTransaction.COMMIT;
      constraintDescriptorList0.add((Object) integer2);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FromVTI fromVTI0 = new FromVTI();
      Consumer<DBUniqueConstraint> consumer0 = (Consumer<DBUniqueConstraint>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[2] = null;
      DBDataType.getInstance(34, "deletepididz/3s0");
      Integer integer0 = new Integer(7);
      Integer integer1 = RawTransaction.ABORT;
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("m", (String[]) null, stringArray0[2], "PRIMARY KEY ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesStructure("executeselect max(id) from information_schema.lobs");
      SQLUtil.isProcedureCall("executeselect max(id) from information_schema.lobs");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "executeselect max(id) from information_schema.lobs";
      stringArray0[1] = "executeselect max(id) from information_schema.lobs";
      stringArray0[2] = "executeselect max(id) from information_schema.lobs";
      stringArray0[3] = "executeselect max(id) from information_schema.lobs";
      stringArray0[4] = "executeselect max(id) from information_schema.lobs";
      stringArray0[5] = "executeselect max(id) from information_schema.lobs";
      stringArray0[6] = "executeselect max(id) from information_schema.lobs";
      stringArray0[7] = "executeselect max(id) from information_schema.lobs";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("executeselect max(id) from information_schema.lobs", true, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "n";
      stringArray0[6] = null;
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2373, "org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.BitTypeCompiler", defaultDBTable0, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder(2373);
      String[] stringArray0 = defaultDBTable0.getColumnNames();
      stringBuilder0.reverse();
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("org.apache.derby.impl.sql.compile.BitTypeCompiler = 'org.apache.derby.impl.sql.compile.BitTypeCompiler'", string0);
      
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.COMPILE.BITTYPECOMPILER", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = null;
      String string1 = "alter tableleft join 0ku.i{f]a{{uz% as 0ku.i{f]a{{uz% on";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("column_type smallint");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2373, "`zbWOlBq");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`zbWOlBq", defaultDBTable1, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder(2);
      String[] stringArray0 = defaultDBTable0.getColumnNames();
      stringBuilder0.reverse();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "`zbWOlBq";
      objectArray0[1] = (Object) dBColumnArray0[0];
      objectArray0[2] = (Object) "`zbWOlBq";
      objectArray0[3] = (Object) "`zbWOlBq";
      objectArray0[4] = (Object) dBColumnArray0[0];
      objectArray0[5] = (Object) "column_type smallint";
      objectArray0[6] = (Object) dBColumnArray0[0];
      String string1 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2373, "`zbWOlBq");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`zbWOlBq", defaultDBTable1, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder(2);
      String[] stringArray0 = defaultDBTable0.getColumnNames();
      stringBuilder0.reverse();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "`zbWOlBq";
      objectArray0[1] = (Object) dBColumnArray0[0];
      objectArray0[2] = (Object) "`ZBWOLBQ";
      objectArray0[3] = (Object) "`ZBWOLBQ";
      objectArray0[4] = (Object) dBColumnArray0[0];
      objectArray0[5] = (Object) "column_type smallint";
      objectArray0[6] = (Object) dBColumnArray0[0];
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "create unique index";
      String string1 = " or ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "drop indexnot");
      String string2 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DBDataType.getInstance(2373, "call");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2318), "org.apache.derby.impl.sql.compile.BitTypeCompiler");
      Integer integer0 = new Integer(13);
      TableContainer tableContainer0 = new TableContainer("org.apache.derby.impl.sql.compile.BitTypeCompiler");
      tableContainer0.getTable("getBigDecimal(");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("renamecolumn_typ mallint", (DBTable) null, dBDataType0, (Integer) null, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("renamecolumn_typ mallint ORG.APACHE.DERBY.IMPL.SQL.COMPILE.BITTYPECOMPILER NULL", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("column_type smallint");
      DBDataType dBDataType0 = DBDataType.getInstance((-72), "select intocreate unique index");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer((-1802));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intocreate unique index", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("select intocreate unique index SELECT INTOCREATE UNIQUE INDEX(2,-1802) NULL", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|}9JEVa");
      SQLUtil.leftJoin((String) null, stringArray0, "0Ku.I{F]a{{uz%", "0Ku.I{F]a{{uz%", stringArray0);
      SQLUtil.renderColumnListWithTableName("!.JB\"T1", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getColumnNames();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("left join 0Ku.I{F]a{{uz% as 0Ku.I{F]a{{uz% on ", stringBuilder1);
      stringBuilder2.insert(39, (CharSequence) "");
      DBDataType.getInstance(39, "");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "l<";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.removeComments("l<");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "l<";
      stringArray0[1] = "l<";
      stringArray0[2] = "l<";
      stringArray0[3] = "l<";
      stringArray0[4] = "l<";
      stringArray0[5] = "l<";
      stringArray0[6] = "l<";
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("l<", stringArray0, "l<", "CHECK ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "C*";
      SQLUtil.parseColumnTypeAndSize("q+~$ja");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "create unique index";
      stringArray0[4] = null;
      stringArray0[5] = "n";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("column_type smallint");
      String[] stringArray1 = new String[3];
      stringArray1[0] = ";eK*/";
      stringArray1[1] = null;
      stringArray1[2] = null;
      DBCatalog dBCatalog0 = new DBCatalog();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) stringArray0[0], (-110270721), (-110270721));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -110270721, end -110270721, s.length() 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9230178578828925
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("#&|b%Wl9&SW", compositeDBObject0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      SQLUtil.removeComments("#&|b%Wl9&SW");
      SQLUtil.mutatesDataOrStructure("_xi:Kh8yWl_W\"RQwWN~s");
      SQLUtil.isDML("DjB;+_my[dE\"j6F^7");
      StringBuilder stringBuilder0 = new StringBuilder("#&|b%Wl9&SW");
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '\"';
      charArray0[2] = '[';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      StringBuilder stringBuilder2 = stringBuilder1.append('\"');
      stringBuilder2.chars();
      stringBuilder2.reverse();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("", (DBSchema) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("<5n F*xr", false, defaultDBTable0, stringArray0, defaultDBTable1, (String[]) null);
      stringBuilder2.insert(0, (Object) dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"<5n F*xr\" FOREIGN KEY () REFERENCES ()\"[\"5WS&9lW%b|&#", stringBuilder2.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/l7pp]-";
      stringArray0[1] = "exec";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = null;
      dBColumnArray0[1] = null;
      dBColumnArray0[2] = null;
      dBColumnArray0[3] = null;
      dBColumnArray0[4] = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "Sx#oVBGCeC!S";
      SQLUtil.renderValue("Sx#oVBGCeC!S");
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = "AT%Zjz_. *GXZ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AT%Zjz_. *GXZ");
      StringBuilder stringBuilder0 = new StringBuilder("AT%Zjz_. *GXZ");
      int int0 = 45;
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      String string2 = " RENAME ";
      try { 
        simpleResultSet0.getCharacterStream(" RENAME ");
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Feature not supported: null [50100-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("R/&");
      SQLUtil.renderValue(jMXPrincipal0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "~Qg'm%0F13;";
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getTable("l\"GL");
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "COLUMN_TYPE SMALLINT";
      SQLUtil.mutatesStructure("COLUMN_TYPE SMALLINT");
      DBColumn dBColumn0 = null;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "COLUMN_TYPE SMALLINT");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(2373, "org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = new String[3];
      stringArray0[1] = " NOT";
      stringArray0[2] = "7N";
      StringBuilder stringBuilder0 = new StringBuilder();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "LbfN~U.0YEI{4?", true, stringArray0);
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.BitTypeCompiler", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      DBDataType dBDataType1 = DBDataType.getInstance(1827, "9");
      assertEquals("9", dBDataType1.getName());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.isDDL("create unique index");
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DBCatalog dBCatalog0 = new DBCatalog("create unique index", (Database) null);
      dBCatalog0.setName("V=dw");
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("create unique index");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'create unique index'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.normalize("E \"LD]>A`", false);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      String string0 = null;
      String string1 = null;
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "COLUMN_TYP MALLINT";
      byte[] byteArray0 = new byte[7];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.mutatesStructure("COLUMN_TYP MALLINT");
      DBColumn dBColumn0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "COLUMN_TYP MALLINT");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("COLUMN_TYP MALLINT");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "COLUMN_TYP MALLINT";
      stringArray0[1] = "COLUMN_TYP MALLINT";
      stringArray0[2] = "COLUMN_TYP MALLINT";
      stringArray0[3] = "COLUMN_TYP MALLINT";
      stringArray0[4] = "COLUMN_TYP MALLINT";
      stringArray0[5] = "COLUMN_TYP MALLINT";
      stringArray0[6] = "COLUMN_TYP MALLINT";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "COLUMN_TYP MALLINT", false, stringArray0);
      SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-183673425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.052883640333539
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "SELECT MAX(ID) FROM INFORMATION_SCHEMA.LOBS";
      SQLUtil.normalize("SELECT MAX(ID) FROM INFORMATION_SCHEMA.LOBS", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("SELECT MAX(ID) FROM INFORMATION_SCHEMA.LOBS");
      SQLUtil.mutatesDataOrStructure("selectdelete");
      SQLUtil.isDML("wlKp");
      StringBuilder stringBuilder0 = new StringBuilder(",7S");
      char char0 = '\"';
      StringBuilder stringBuilder1 = stringBuilder0.append((-4322));
      // Undeclared exception!
      try { 
        stringBuilder1.append((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'n';
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "#&|b%Wl9&S\\W";
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("#&|b%Wl9&SW", compositeDBObject0);
      tableContainer0.getTable("=X')QW");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.327732405703302
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Boolean boolean0 = new Boolean("\u0001\u0139");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SQLUtil.mutatesStructure("-pg");
      StringBuilder stringBuilder0 = new StringBuilder("-pg");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[4] = "-pg";
      stringArray0[1] = "\u0001\u0139";
      stringArray0[3] = "-pg";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " WHERE ");
      stringArray0[4] = "-pg";
      stringArray0[5] = "-pg";
      stringArray0[6] = "-pg";
      stringArray0[7] = "-pg";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1954382384), (CharSequence) "SELECT * FROM null WHERE null = null AND \u0001\u0139 = '\u0001\u0139' AND null = null AND -pg = '-pg' AND -pg = '-pg' AND -pg = '-pg' AND -pg = '-pg' AND -pg = '-pg'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1954382384
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.3831928658094723
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.normalize("", false);
      SQLUtil.normalize("1|", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "1|";
      stringArray0[2] = "drop materialized viewdelete";
      stringArray0[3] = "";
      SQLUtil.renderColumnListWithTableName("update", stringArray0);
      SQLUtil.mutatesDataOrStructure("\"Z6F;k.Lx@^h");
      Object object0 = new Object();
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("org.h2.jdbc.JdbcStatement", false, "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.ANTLRStringStream", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType.getInstance(1208, ",mk-");
      String string0 = SQLUtil.normalize("Jsqz`Rm<#d;", false);
      assertEquals("Jsqz ` Rm < # d ;", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create materialized viewselectdelete");
      StringBuilder stringBuilder0 = new StringBuilder("create materialized viewselectdelete");
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = '~';
      charArray0[2] = '7';
      charArray0[3] = '.';
      charArray0[4] = 'n';
      charArray0[5] = 'H';
      charArray0[6] = 'U';
      charArray0[7] = ')';
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, (-1091598173), (-70107288));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("R/&", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(982, '/');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(0L);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      SQLUtil.addRequiredCondition("R/&", stringBuilder1);
      int int0 = 982;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(982, 0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 982
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("efnMsah,e`!$0kh", "_UfGKi,lVy", versionNumber0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%a5^c!FUN^08c5/";
      stringArray0[1] = "DATE";
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'D';
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("DATE", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      Integer.getInteger("mbV@k6P5GMKe", integer1);
      String string0 = SQLUtil.substituteMarkers("mbV@k6P5GMKe", "drop table", integer0);
      assertEquals("mbV@k6P5GMKe", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8212565066006587
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "create unique index");
      String string0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      SQLUtil.leftJoin("create unique index", stringArray0, "callcreate unique index", "org.databene.jdbacl.model.DBDataType", stringArray0);
      String string1 = "!.JB\"T1";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("!.JB\"T1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execcolumn_typ mallint");
      defaultDBTable0.getColumnNames();
      SQLUtil.addOptionalCondition(" or ", stringBuilder0);
      SQLUtil.addRequiredCondition(".null", stringBuilder0);
      int int0 = 39;
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-883), (CharSequence) "org.databene.jdbacl.model.DBDataType");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -883
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "!.JB\"T1";
      stringArray0[1] = "0Ku.I{F]a{{uz%";
      stringArray0[2] = "0Ku.I{F]a{{uz%";
      stringArray0[3] = null;
      stringArray0[4] = " ";
      stringArray0[5] = null;
      stringArray0[6] = "setTypeMap(";
      stringArray0[7] = null;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "";
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.removeComments("RQ:9T]");
      String string1 = "- ";
      VersionNumber versionNumber0 = null;
      try {
        versionNumber0 = new VersionNumber((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.version.VersionNumber", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "";
      String string1 = " meta:";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition(" meta:", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLUtil.removeComments(",mK-");
      SQLUtil.isQuery(",mK-");
      String string0 = "drop materialized view'buffer_pool'";
      DBConstraint dBConstraint0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DBDataType.getInstance((-495), "7N");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("updateDouble", (DBSchema) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create unique indexcreate unique index");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "updateDouble";
      stringArray0[1] = "updateDouble";
      stringArray0[2] = "create unique indexcreate unique index";
      stringArray0[3] = "updateDouble";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "drop materialized viewdelete", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"drop materialized viewdelete\" ", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOT", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(2373, "org.apache.derby.impl.sql.compile.BitTypeCompiler");
      DBDataType.getInstance((-495), "7N");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.BitTypeCompiler", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.apache.derby.impl.sql.compile.BitTypeCompiler");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "k!";
      stringArray0[1] = "k!";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join(" NOT", "A;K10>Uu", stringArray0, "A;K10>Uu", "org.apache.derby.impl.sql.compile.BitTypeCompiler", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6352234241825716
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3>YKjk1N@5,}++";
      stringArray0[1] = "7";
      stringArray0[2] = "DATE";
      stringArray0[3] = "updatedrop indexdelete";
      stringArray0[4] = "drop materialized view";
      stringArray0[5] = "ALTER TABLE ";
      stringArray0[6] = "u&R*gbs*.[";
      stringArray0[7] = "";
      stringArray0[8] = "0`pY";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "drop materialized view";
      stringArray1[1] = "drop materialized view";
      stringArray1[2] = "`mAn";
      stringArray1[3] = "DATE";
      stringArray1[4] = "execute";
      stringArray1[5] = "insertorg.h2.result.resultremote";
      SQLUtil.renderColumnNames(stringArray1);
      String string0 = SQLUtil.substituteMarkers(">/nr0LWf:}", "DATE", "3>YKjk1N@5,}++");
      assertEquals(">/nr0LWf:}", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }
}
