/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:10:50 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0905146706729578
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(89);
      simpleNode0.toString();
      simpleNode0.setIdentifier("<<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*lshft");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*lshft");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*lshft");
      StringWriter stringWriter0 = new StringWriter(89);
      simpleNode0.toString();
      simpleNode0.setIdentifier("ReturnStatement");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("<<", stringWriter1);
      assertEquals("<ReturnStatement>\n  <identifier>*lshft</identifier>\n  <identifier>ReturnStatement</identifier>\n</ReturnStatement>\n", stringWriter1.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("ReturnStatement : << : ReturnStatement", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode0.jjtSetParent(nodeArray0[0]);
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetParent();
      simpleNode0.toString();
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        simpleNode0.dump("U$", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7962209059715708
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine((String) null);
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      simpleNode0.setIdentifier("+$aJpm2OG5");
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.dump("{6c", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>+$aJpm2OG5</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6783481923330825
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2666);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(");
      stringWriter0.write((-14482067));
      SystemInUtil.addInputLine((String) null);
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.toString();
      JavaParser javaParser0 = new JavaParser((Reader) null);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 10);
      simpleNode1.dump("\"this\"", stringWriter0);
      simpleNode1.setIdentifier(";");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode1.dump("EnumConstant", stringWriter0);
      simpleNode0.dump("+=J", stringWriter1);
      simpleNode1.toString();
      simpleNode0.jjtGetParent();
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.002663334987299
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.toString();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'T';
      charArray0[2] = 'i';
      charArray0[3] = '&';
      charArray0[4] = '<';
      stringWriter1.write(charArray0);
      simpleNode0.dump(">", stringWriter0);
      simpleNode0.dump((String) null, stringWriter1);
      assertEquals("ITi&<<EnumConstant>\n  <identifier>*gt</identifier>\n</EnumConstant>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.233504898246879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(31);
      simpleNode0.toString();
      simpleNode0.setIdentifier("{.(");
      StringWriter stringWriter0 = new StringWriter(2644);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l&Nmt,AdLm");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lterpl");
      StringWriter stringWriter1 = new StringWriter(31);
      simpleNode0.toString("Lterpl");
      simpleNode0.setIdentifier("&");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      SystemInUtil.addInputLine("LterplTypeArguments : {.(");
      arrayList1.add("xKPo6BQrz");
      StringReader stringReader0 = new StringReader("xKPo6BQrz");
      stringReader0.mark(31);
      StringReader stringReader1 = new StringReader("l&Nmt,AdLm");
      stringReader0.mark(31);
      stringReader1.ready();
      SystemInUtil.addInputLine("LterplTypeArguments : {.(");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("\"\r\"", stringWriter2);
      assertEquals("<TypeArguments>\n  <identifier>{.(</identifier>\n  <identifier>*amp</identifier>\n</TypeArguments>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1521985043470706
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1135);
      SimpleNode simpleNode1 = new SimpleNode(15);
      simpleNode1.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter(1135);
      StringWriter stringWriter1 = new StringWriter(128);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<=");
      stringWriter0.write((-14482067));
      SimpleNode simpleNode2 = new SimpleNode(1135);
      simpleNode1.setIdentifier("}");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode1.dump("<=", stringWriter1);
      simpleNode2.jjtAddChild(simpleNode0, 15);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0853864655447525
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      simpleNode0.setIdentifier("CompilationUnit");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"catch\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l&Nmt,AdLm");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l&Nmt,AdLm");
      StringWriter stringWriter0 = new StringWriter(1);
      simpleNode0.toString();
      simpleNode0.setIdentifier("{");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.remove((Object) "CompilationUnit : CompilationUnit");
      arrayList0.add("A, H[r!YZ&5WmMj2>5");
      StringReader stringReader0 = new StringReader("J\"I!D&kGy>i(2FZ");
      stringReader0.mark(1999);
      stringReader0.ready();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("Cw", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>CompilationUnit</identifier>\n  <identifier>A, H[r!YZ&5WmMj2>5</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1431487305914145
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      simpleNode0.setIdentifier(".(");
      StringWriter stringWriter0 = new StringWriter(2644);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".(");
      simpleNode0.dump("]bwtxJ:ZI|2!F6hPOZ7", stringWriter0);
      simpleNode0.jjtGetParent();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      arrayList0.add(">>");
      StringReader stringReader0 = new StringReader(".(");
      stringReader0.mark(2644);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.ready();
      JavaParser javaParser1 = new JavaParser(stringReader0);
      StringReader stringReader1 = new StringReader("%=");
      StringReader stringReader2 = new StringReader("`.Ez");
      stringReader2.ready();
      SystemInUtil.addInputLine("FieldDeclaration");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append((CharSequence) "CompilationUnit");
      assertEquals("<CompilationUnit>\n  <identifier>.(</identifier>\n</CompilationUnit>\nCompilationUnit", stringWriter0.toString());
      
      simpleNode0.dump("AYxZn)*W", stringWriter1);
      assertEquals("<CompilationUnit>\n  <identifier>.(</identifier>\n  <identifier>*rshft</identifier>\n</CompilationUnit>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 15;
      SimpleNode simpleNode0 = new SimpleNode(15);
      String string0 = "<=";
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter(17);
      String string1 = "Lterpl";
      simpleNode0.dump("<=", stringWriter0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Lterpl", "5=GXIU%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"5=GXIU%\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3129809585039767
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(15);
      simpleNode0.dump("", (Writer) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.dump("C+H_", (Writer) null);
      simpleNode0.toString("`;VEvI_i 2~'y");
      simpleNode0.setIdentifier((String) null);
      Node node0 = simpleNode0.jjtGetParent();
      Node[] nodeArray0 = new Node[3];
      simpleNode0.identifiers.add((String) null);
      nodeArray0[0] = null;
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode0.identifiers.add("<=");
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtAddChild(node0, 640);
      assertEquals(641, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(15);
      SimpleNode simpleNode1 = new SimpleNode(15);
      simpleNode0.jjtAddChild(simpleNode0, 15);
      Node node0 = simpleNode0.jjtGetChild(15);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(node0, (-827));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -827
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6836666726732625
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      SimpleNode simpleNode1 = new SimpleNode(8);
      SimpleNode simpleNode2 = new SimpleNode(1);
      simpleNode0.jjtAddChild(simpleNode2, 1);
      simpleNode2.jjtAddChild(simpleNode1, 10);
      StringWriter stringWriter0 = new StringWriter(3045);
      simpleNode0.dump("Expression", stringWriter0);
      simpleNode2.jjtGetChild(10);
      simpleNode0.jjtAddChild(simpleNode2, 2);
      simpleNode0.jjtGetParent();
      SimpleNode simpleNode3 = new SimpleNode(8);
      simpleNode3.jjtGetNumChildren();
      simpleNode1.dump("^)OCBgP", stringWriter0);
      simpleNode0.jjtGetNumChildren();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.11318731278164
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode0, 2666);
      simpleNode0.toString();
      simpleNode0.setIdentifier("(");
      StringWriter stringWriter0 = new StringWriter(2666);
      stringWriter0.write("6M8W~m");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l&Nmt,AdLm");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CompilationUnit");
      // Undeclared exception!
      simpleNode0.dump((String) null, stringWriter0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1901673943042492
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 17;
      int int1 = 1;
      SimpleNode simpleNode0 = new SimpleNode(1);
      String string0 = "";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 17);
      simpleNode1.dump("", (Writer) null);
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      arrayList0.add("");
      String string1 = "Lterpl";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".!`'*YsX<;JG");
      String string2 = "*le";
      // Undeclared exception!
      try { 
        simpleNode1.dump("*le", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5350813079469845
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("+\"F%rSZXsE(-g3");
      StringBuffer stringBuffer0 = new StringBuffer(1866);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = '~';
      stringWriter1.write(charArray0);
      simpleNode0.dump("+\"F%rSZXsE(-g3", stringWriter1);
      simpleNode0.toString("abstract");
      simpleNode0.dump("abstract", stringWriter1);
      assertEquals("+\"F%rSZXsE(-g3=~", stringWriter1.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("EnumBody", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      String string0 = "(";
      StringWriter stringWriter0 = new StringWriter(2666);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      String string1 = "l&Nmt,AdLm";
      String string2 = "Lterpl";
      String string3 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string4 = "]bwtxJ:ZI|2!F6hPOZ7";
      int int1 = 99;
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9715503473033111
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 0);
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      arrayList0.add("");
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 2797);
      simpleNode0.jjtSetParent(simpleNode2);
      simpleNode0.jjtGetParent();
      arrayList0.add("WhileStatement");
      StringReader stringReader0 = new StringReader("*1b+*%");
      StringReader stringReader1 = new StringReader(".~$D6n`&nVqOm9c\"G");
      stringReader0.skip(0);
      StringReader stringReader2 = new StringReader("--");
      JavaParser javaParser1 = new JavaParser(stringReader2);
      StringWriter stringWriter0 = new StringWriter(2797);
      stringWriter0.append((CharSequence) "--");
      simpleNode2.dump("EnumConstant", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild((-187));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.jjtClose();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SimpleNode simpleNode0 = new SimpleNode(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 1);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode0.jjtGetParent();
      StringReader stringReader0 = new StringReader(".~$D6n`&nVqOm9c\"G");
      StringReader stringReader1 = new StringReader(">=");
      JavaParser javaParser1 = new JavaParser(stringReader1);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemInUtil.addInputLine("+qo[[F~&3FC52[");
      StringReader stringReader0 = new StringReader("M]c=-j;$[))");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1852);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1852
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte) (-58);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-907), 2336);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-2826));
      // Undeclared exception!
      try { 
        simpleNode0.toString("*rshft");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2826
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("Gl59||PtS'5", "#57)v1Y87zB", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)31;
      mockFileInputStream0.read(byteArray0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 112);
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-21));
      simpleNode0.setIdentifier("<=");
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter(17);
      String string0 = "Lterpl";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<=");
      // Undeclared exception!
      try { 
        simpleNode0.dump("<=", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -21
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      SimpleNode simpleNode0 = new SimpleNode(17);
      // Undeclared exception!
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2728);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.jjtAddChild(simpleNode0, 2728);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "*gt";
      String string1 = "PackageDeclaration";
      // Undeclared exception!
      try { 
        simpleNode0.dump("PackageDeclaration", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2728
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.7962209059715708
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2666);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 83);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("(");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add("");
      StringReader stringReader0 = new StringReader("dditiveExpression");
      stringReader0.mark(83);
      JavaParser javaParser1 = new JavaParser(stringReader0);
      stringReader0.ready();
      JavaParser javaParser2 = new JavaParser(stringReader0);
      StringReader stringReader1 = new StringReader("\"&=\"");
      stringReader1.ready();
      SystemInUtil.addInputLine("|u}K6=y4K[~(DT/");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "");
      simpleNode0.dump("|u}K6=y4K[~(DT/", stringWriter2);
      assertEquals("<ForStatement>\n  <identifier>(</identifier>\n</ForStatement>\n", stringWriter2.toString());
      assertEquals("<ForStatement>\n  <identifier>(</identifier>\n</ForStatement>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 17;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 17);
      pipedOutputStream0.write(1469);
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      int int1 = 159;
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1));
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtAddChild(simpleNode1, 4098);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, (-2021310968));
      SimpleNode simpleNode3 = (SimpleNode)javaParser0.currNode;
      // Undeclared exception!
      try { 
        simpleNode2.jjtAddChild(simpleNode3, (-2028533235));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7130415601881177
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(119);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 119);
      simpleNode0.jjtAddChild((Node) null, 119);
      simpleNode0.jjtGetChild(119);
      simpleNode0.jjtAddChild((Node) null, 119);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetNumChildren();
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(120, int0);
  }
}
