/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:28:53 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.MindIcon;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.FocusTraversalPolicy;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.dnd.DropTarget;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.io.PrintStream;
import java.sql.Timestamp;
import java.text.ParsePosition;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JToolTip;
import javax.swing.MenuElement;
import javax.swing.text.DefaultCaret;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import org.apache.xerces.parsers.SoftReferenceSymbolTableConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.274246544102149
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      intArray0[1] = 0;
      jDayChooser_DecoratorButton0.firePropertyChange("_=,lyS!CL':\"", '(', '2');
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 9999, (-30), 0, 250);
      hashMap0.put(jDayChooser_DecoratorButton0, mockGregorianCalendar0);
      hashtable0.putAll(hashMap0);
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(0, 0, intArray0, 0, 9999, hashtable0);
      Image image0 = jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      jDayChooser_DecoratorButton0.getVerifyInputWhenFocusTarget();
      jDayChooser0.prepareImage(image0, (ImageObserver) jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.isFocusable();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setYear(0);
      jDayChooser0.addListeners(0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDaysInMonth();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar('(', 0, 0, (-30), '2');
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3611594824409154
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      jDayChooser_DecoratorButton0.firePropertyChange("_=,lyS!CL':\"", '(', '2');
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 9999, (-30), 0, 250);
      hashMap0.put(jDayChooser_DecoratorButton0, mockGregorianCalendar0);
      hashtable0.putAll(hashMap0);
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(0, 0, intArray0, 0, 9999, hashtable0);
      Image image0 = jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      jDayChooser_DecoratorButton0.getVerifyInputWhenFocusTarget();
      jDayChooser0.prepareImage(image0, (ImageObserver) jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.isFocusable();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setYear(0);
      jDayChooser0.addListeners(0);
      jDayChooser0.getMinSelectableDate();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(29, int0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 534L, 810, (-188), 'e');
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = Color.getColor("day", (-188));
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.15095160531416
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0540989150393463
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.repaint((long) 0);
      jDayChooser0.validate();
      jDayChooser0.setDay(0);
      SystemColor systemColor0 = SystemColor.menu;
      systemColor0.getColorSpace();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      systemColor0.getRGBColorComponents(floatArray0);
      // Undeclared exception!
      try { 
        Timestamp.valueOf("BP~[p_4{I@9]U/|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.206329341228922
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addFocusListener(jDayChooser0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowOutputBinary0;
      PrintStream printStream0 = mockPrintStream0.printf("day", objectArray0);
      DebugGraphics.setLogStream(printStream0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setAlwaysFireDayProperty(true);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2216908241967506
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isFocusOwner();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.setWeekOfYearVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2742));
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      JButton jButton0 = new JButton();
      MindIcon.factory("year");
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawDays();
      MindIcon.factory("Windows");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2007), 90, 1652, 21, 'K');
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent(jButton0, (-49), (-2742), (-1917), (-1), '+', (-1917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "year");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      Color.getColor("u{-][_yW}Q~ 7PO", 18);
      jDayChooser0.setSundayForeground(systemColor0);
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      try { 
        Cursor.getSystemCustomCursor("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2054857020763965
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.setWeekOfYearVisible(false);
      int int0 = (-2742);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2742));
      focusEvent0.paramString();
      JButton[] jButtonArray0 = new JButton[2];
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      focusEvent0.paramString();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JButton jButton0 = new JButton();
      MindIcon.factory("");
      jDayChooser0.weeks = jButtonArray0;
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.drawDays();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1699550666946883
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      JPanel jPanel0 = new JPanel();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDecorationBackgroundVisible();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputVerifier();
      jDayChooser0.grabFocus();
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      Graphics graphics0 = bufferedImage0.getGraphics();
      jDayChooser0.paint(graphics0);
      jDayChooser0.initDecorations();
      jDayChooser0.getWeekdayForeground();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.235886510327336
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      osmTileSource_CycleMap0.getTilePath(3161, 3161, 0);
      osmTileSource_CycleMap0.getTileUrl(3161, 0, (-1741));
      int int0 = (-1789);
      int int1 = 213;
      jDayChooser0.imageUpdate((Image) null, (-1789), (-1789), (-1789), 213, 262);
      jDayChooser0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      jDayChooser0.getToolkit();
      jDayChooser0.setMonth(3648);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setEnabled(true);
      SoftReferenceSymbolTableConfiguration softReferenceSymbolTableConfiguration0 = null;
      try {
        softReferenceSymbolTableConfiguration0 = new SoftReferenceSymbolTableConfiguration();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // fLoadFactor
         //
         verifyException("org.apache.xerces.util.SoftReferenceSymbolTable", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setDecorationBordersVisible(true);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1153, 0L, 8776, (-3269), '&', (-2939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Color color0 = jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        debugGraphics0.setXORMode(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0966166083347697
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createToolTip();
      Locale locale0 = JComponent.getDefaultLocale();
      jDayChooser0.createToolTip();
      jDayChooser0.getAlignmentY();
      jDayChooser0.getDay();
      jDayChooser0.drawWeeks();
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setDropTarget((DropTarget) null);
      jDayChooser_DecoratorButton0.isFocusPainted();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser_DecoratorButton0.addMouseListener(defaultCaret0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("", locale0);
      dateTimeFormatter0.getResolverFields();
      // Undeclared exception!
      try { 
        MockLocalTime.parse((CharSequence) "day", dateTimeFormatter0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'day' could not be parsed, unparsed text found at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint(90, 0, (-3333), (-2825));
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.keyTyped((KeyEvent) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2401873239899905
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addFocusListener(jDayChooser0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowOutputBinary0;
      PrintStream printStream0 = mockPrintStream0.printf("day", objectArray0);
      DebugGraphics.setLogStream(printStream0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      jDayChooser0.getMaxDayCharacters();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2612, true, jToolTip0);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 2612);
      jDayChooser0.focusLost(focusEvent1);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.169993336394016
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.setWeekOfYearVisible(false);
      int int0 = (-2742);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2742));
      focusEvent0.paramString();
      JButton[] jButtonArray0 = new JButton[2];
      JButton jButton0 = new JButton();
      jButtonArray0[0] = jButton0;
      MindIcon mindIcon0 = MindIcon.factory("");
      ImageIcon imageIcon0 = mindIcon0.getIcon();
      JButton jButton1 = new JButton((String) null, imageIcon0);
      jButtonArray0[1] = jButton1;
      jButton1.getTransferHandler();
      jDayChooser0.weeks = jButtonArray0;
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.drawDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2404634190850943
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addFocusListener(jDayChooser0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) rowOutputBinary0;
      PrintStream printStream0 = mockPrintStream0.printf("day", objectArray0);
      DebugGraphics.setLogStream(printStream0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 652, 652, 0, 1, '}');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.202800811480045
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.repaint((long) 0);
      jDayChooser0.validate();
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayCountry();
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage(locale0);
      jDayChooser0.setLocale(locale1);
      StringContent stringContent0 = new StringContent(650);
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      plainDocument0.getDefaultRootElement();
      ParsePosition parsePosition0 = new ParsePosition(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      mockSimpleDateFormat0.parse("day", parsePosition0);
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date1 = jDayChooser1.setMinSelectableDate(date0);
      jDayChooser1.setSelectableDateRange(date1, date1);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertSame(date0, date1);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.231669316850135
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      StringContent stringContent0 = new StringContent(160);
      PlainDocument plainDocument0 = new PlainDocument(stringContent0);
      plainDocument0.getDefaultRootElement();
      ParsePosition parsePosition0 = new ParsePosition(160);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.parse("day", parsePosition0);
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date1 = jDayChooser1.setMinSelectableDate((Date) null);
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser1.setFocus();
      Date date2 = jDayChooser1.getMinSelectableDate();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertSame(date2, date1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2742465441021493
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      jDayChooser_DecoratorButton0.firePropertyChange("_=,lyS!CL':\"", '(', '2');
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 2161, (-30), 0, 234);
      hashMap0.put(jDayChooser_DecoratorButton0, mockGregorianCalendar0);
      hashtable0.putAll(hashMap0);
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(0, 0, intArray0, 0, 9999, hashtable0);
      Image image0 = jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      jDayChooser_DecoratorButton0.getVerifyInputWhenFocusTarget();
      jDayChooser0.prepareImage(image0, (ImageObserver) jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.isFocusable();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setYear(0);
      jDayChooser0.addListeners(0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0918293977637266
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.decorationBordersVisible = false;
      int int0 = 59;
      jDayChooser0.removeAll();
      jDayChooser0.setDay(59);
      SystemColor systemColor0 = SystemColor.menu;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 59;
      systemColor0.getColorSpace();
      floatArray0[1] = (float) 59;
      // Undeclared exception!
      try { 
        Timestamp.valueOf("BP~[p_4{I@9]U/|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1699550666946883
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1143));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3028992707756135
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      jDayChooser_DecoratorButton0.firePropertyChange("_=,lyS!CL':\"", '(', '2');
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 9999, (-30), 0, 250);
      hashMap0.put(jDayChooser_DecoratorButton0, mockGregorianCalendar0);
      hashtable0.putAll(hashMap0);
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(0, 0, intArray0, 0, 9999, hashtable0);
      Image image0 = jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      jDayChooser_DecoratorButton0.getVerifyInputWhenFocusTarget();
      jDayChooser0.prepareImage(image0, (ImageObserver) jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.isFocusable();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setYear(0);
      jDayChooser0.addListeners(0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 534L, 810, (-188), 'e');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(9);
      jDayChooser0.drawWeeks();
      assertEquals(9, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.274246544102149
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.getToolTipText();
      jDayChooser0.getName();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getPreferredSize();
      boolean boolean1 = false;
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSundayForeground();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      int int0 = 0;
      jDayChooser0.setMonth(0);
      jDayChooser0.getDecorationBackgroundColor();
      long long0 = 600000L;
      int int1 = 0;
      int int2 = 10119;
      char char0 = '.';
      MenuElement[] menuElementArray0 = new MenuElement[5];
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }
}
