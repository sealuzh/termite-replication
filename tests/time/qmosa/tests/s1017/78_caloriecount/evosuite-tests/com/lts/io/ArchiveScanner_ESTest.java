/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:54:40 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Enumeration;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile0 = new ImprovedFile("!g3b");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ZIP");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "!g3b");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile2 = new ImprovedFile(improvedFile1);
      MockFile.createTempFile("!g3b", ".wEar", (File) improvedFile2);
      improvedFile0.setReadable(true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      improvedFile1.getAbsoluteFile();
      improvedFile1.createTempDir();
      improvedFile2.setExecutable(true);
      improvedFile0.createTempDir();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      improvedFile0.setReadable(false);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile2, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUEZ", ";uUEZ");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("not imMlemev-ed", (String) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ZIP");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile1);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUEZ", ";uUEZ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark(6);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 4041);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream2, 1420);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream2);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) sequenceInputStream2);
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis(1957L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(improvedFile0);
      System.setCurrentTimeMillis((-368L));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ImprovedFile improvedFile0 = new ImprovedFile("!g3b");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ZIP");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "1+2h");
      ImprovedFile improvedFile2 = new ImprovedFile(improvedFile1);
      improvedFile0.setReadable(true);
      improvedFile0.setWritable(true, true);
      improvedFile1.createTempDir();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 1);
      pushbackInputStream0.read(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, dataInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(dataInputStream0, 1);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      improvedFile0.toPath();
      Vector<Object> vector1 = new Vector<Object>();
      File file0 = archiveScanner1.basedir;
      // Undeclared exception!
      try { 
        archiveScanner1.scanArchive((File) null, "!g3b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ImprovedFile", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUEZ", ";uUEZ");
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(improvedFile0);
      String string0 = "slvi( ]\\Y:r8;\\=/O<";
      String string1 = "repository";
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUE/", ";uUE/");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      sequenceInputStream0.read();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream1, sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1139);
      bufferedInputStream0.read();
      sequenceInputStream0.mark((-1));
      pipedInputStream1.skip(0L);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pipedInputStream0, bufferedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 6, (byte)1);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream1, 509);
      improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "No basedir set");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUEZ", ";uUEZ");
      String string0 = null;
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("not imMlemev-ed", (String) null);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUEZ", ";uUEZ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "not imMlemev-ed");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";uUEZ");
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-2505L));
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      MockFile.createTempFile("@$$X6 ", "A{v0.jar", (File) improvedFile0);
      archiveScanner0.getBasedir();
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ZIP");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".WAR.jar");
      archiveScanner0.toFileType(improvedFile0);
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUE/", ";uUE/");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      sequenceInputStream0.read();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream1, sequenceInputStream0);
      pipedInputStream1.skip((-1));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1139);
      bufferedInputStream0.read();
      sequenceInputStream0.mark((-1));
      pipedInputStream1.skip(0L);
      pipedOutputStream1.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(pipedInputStream0, bufferedInputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 642, (-26));
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      pipedOutputStream1.flush();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1, (byte)29);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(";uUE/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUE/", ";uUE/");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      sequenceInputStream0.read();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream1, sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream1, 1139);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector1 = new Vector<Object>();
      try { 
        archiveScanner0.scandir(improvedFile0, ";uUE/", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/;uUE/;uUE
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUE/", ";uUE/");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream1.connect(pipedOutputStream0);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)107;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-92), (byte)19);
      byteArrayInputStream0.skip((byte)19);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      vector0.add((InputStream) byteArrayInputStream1);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteArrayInputStream1, pipedInputStream0);
      vector0.removeAllElements();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 1354, 3);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 3);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      archiveScanner0.scandir(improvedFile1, "Z@2Vb.jar", true);
      assertFalse(improvedFile1.isHidden());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUE/", ";uUE/");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark((-1778));
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2771, (byte)107);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.skip(1L);
      byteArrayInputStream0.mark((-4662));
      byteArrayInputStream0.mark((-4662));
      Vector<InputStream> vector0 = new Vector<InputStream>();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream1, 2);
      vector1.add((InputStream) bufferedInputStream0);
      vector1.add((InputStream) sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream0);
      vector0.removeAllElements();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 465, (byte)19);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null, (byte)107);
      Vector<InputStream> vector2 = new Vector<InputStream>();
      Vector<Object> vector3 = new Vector<Object>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "The node, ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/;uUE/;uUE
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUE/", ";uUE/");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark((-146584045));
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream1);
      pipedInputStream0.mark((-5387));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, (byte)19);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream2, (byte)19);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) bufferedInputStream0);
      System.setCurrentTimeMillis((-65243263));
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(improvedFile0);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUE/", ";uUE/");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      sequenceInputStream0.read();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-120193131));
      byteArrayInputStream0.skip((-1));
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.add((InputStream) pipedInputStream1);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-2981), (byte)4);
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream2, 3695);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(";uUE/", ";uUE/");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark((-146584045));
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2771, (byte)107);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.skip(1L);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      vector1.add((InputStream) sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(dataInputStream0, pipedInputStream1);
      vector1.removeAllElements();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (byte)107, 0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream0);
      Vector<InputStream> vector2 = new Vector<InputStream>();
      vector1.add((InputStream) sequenceInputStream0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "P", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      ImprovedFile improvedFile0 = new ImprovedFile("!g3b");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".ZIP");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "1+2h");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile2 = new ImprovedFile(improvedFile1);
      MockFile.createTempFile("!g3b", ".war", (File) improvedFile2);
      improvedFile0.setReadable(true);
      improvedFile0.setWritable(true, true);
      improvedFile1.getAbsoluteFile();
      improvedFile1.createTempDir();
      improvedFile2.setExecutable(true);
      improvedFile0.createTempDir();
      ImprovedFile.createTempImprovedFile("source file is neither directory nor file.  File: 1source file is neither directory nor file.  File: .jar.jar", "source file is neither directory nor file.  File: 1source file is neither directory nor file.  File: .jar.jar", improvedFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      improvedFile0.setReadable(true);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile2, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }
}
