/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:32:53 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6576524365050493
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.toString("");
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.toString();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      simpleNode0.setIdentifier("ah");
      simpleNode0.toString("%a5.H;9v3.F5]i");
      StringReader stringReader0 = new StringReader("%a5.H;9v3.F5]i");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("@wOlgS%=;|", stringWriter0);
      simpleNode0.setIdentifier("@wOlgS%=;|");
      simpleNode0.setIdentifier("<<");
      simpleNode0.dump("X<L~pG1U", stringWriter0);
      simpleNode0.jjtGetChild(0);
      simpleNode0.toString("@wOlgS%=;|");
      simpleNode0.toString("{unc&A48>DDB");
      simpleNode0.toString("IrICqXm#4)ykBB.L$A,CompilationUnit");
      assertEquals(2, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6332004508871008
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier("}");
      simpleNode0.toString("}");
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '$';
      charArray0[2] = '4';
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('4');
      String string0 = "aPMT]r2_";
      simpleNode0.dump("aPMT]r2_", stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter(0);
      stringWriter0.flush();
      StringWriter stringWriter4 = new StringWriter();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "Statement", 90, 2239);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      SimpleNode simpleNode0 = new SimpleNode(1);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtSetParent(nodeArray0[0]);
      simpleNode0.parser = null;
      simpleNode0.jjtGetParent();
      String string0 = "N'j=wx<84o";
      // Undeclared exception!
      try { 
        simpleNode0.dump("N'j=wx<84o", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 11;
      SimpleNode simpleNode0 = new SimpleNode(11);
      simpleNode0.setIdentifier("E*");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      char[] charArray0 = new char[10];
      char char0 = 'M';
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = '`';
      charArray0[3] = '$';
      simpleNode0.identifiers = null;
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      String string0 = "Statement";
      StringWriter stringWriter2 = new StringWriter(11);
      // Undeclared exception!
      try { 
        simpleNode0.dump("E*", stringWriter2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6598463812176427
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("");
      simpleNode0.jjtAddChild(simpleNode0, 1);
      simpleNode0.toString();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 1);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.id = 1;
      stringWriter0.append((CharSequence) "");
      simpleNode0.setIdentifier("h");
      simpleNode0.toString("%a5.H;9v3.F5]i");
      StringReader stringReader0 = new StringReader("%a5.H;9v3.F5]i");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.setIdentifier("@wOlgS%=;|");
      simpleNode0.setIdentifier("<<");
      simpleNode0.dump("X<L~pG1U", stringWriter0);
      simpleNode0.jjtGetChild(0);
      simpleNode0.toString("@wOlgS%=;|");
      simpleNode0.toString("{unc&A48>DDB");
      simpleNode0.toString("IrICqXm#4)ykBB.L$A,CompilationUnit");
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.toString("");
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1074787335));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1074787335
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.457772564389889
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      simpleNode0.toString();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
      
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('j');
      stringWriter0.append((CharSequence) "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.close();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = stringWriter1.append('j');
      simpleNode0.dump((String) null, stringWriter4);
      simpleNode0.setIdentifier("&");
      simpleNode0.dump("K", stringWriter2);
      String string0 = simpleNode0.toString("-");
      assertEquals("-CompilationUnit : &", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4983393353896088
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(54);
      simpleNode0.toString("IrICqXm#4)ykBB.L$A,");
      String string0 = "{";
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) ",");
      char[] charArray0 = new char[1];
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.flush();
      StringWriter stringWriter2 = new StringWriter(2);
      simpleNode0.dump("IrICqXm#4)ykBB.L$A,", stringWriter1);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter(54);
      StringWriter stringWriter5 = stringWriter1.append('$');
      stringWriter2.flush();
      stringWriter5.flush();
      stringWriter0.write(charArray0);
      StringWriter stringWriter6 = new StringWriter();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) ",", 0, 1126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5511620836589715
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      String string0 = "";
      simpleNode0.toString("");
      simpleNode0.setIdentifier("");
      simpleNode0.toString("");
      StringReader stringReader0 = new StringReader("CompilationUnit : ");
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.dump("", stringWriter0);
      simpleNode0.setIdentifier("CompilationUnit");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 6);
      PipedOutputStream pipedOutputStream2 = null;
      try {
        pipedOutputStream2 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7039917864324616
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2675);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6lgn(");
      SimpleNode simpleNode1 = new SimpleNode(10);
      StringReader stringReader0 = new StringReader("'<Qx\"[4YGp");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode1.parser = javaParser0;
      simpleNode0.parent = (Node) simpleNode1;
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode1.jjtAddChild(simpleNode0, 10);
      simpleNode1.parent = simpleNode0.parent;
      simpleNode0.jjtAddChild(simpleNode1, 10);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2675
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8282495135936656
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("+^");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1097);
      StringWriter stringWriter0 = new StringWriter(1097);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('V');
      stringWriter0.append((CharSequence) "+^");
      simpleNode0.dump("+^", stringWriter0);
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtAddChild(simpleNode1, 1097);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.jjtGetChild(0);
      assertEquals(1098, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9740566129674715
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      simpleNode0.toString(",");
      simpleNode0.toString(",NameList");
      SimpleNode simpleNode1 = new SimpleNode(4234);
      simpleNode1.jjtAddChild(simpleNode0, 1310);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('G');
      StringWriter stringWriter1 = new StringWriter(1093);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ",NameListNameList");
      simpleNode0.dump("!EZ0]3eFU", stringWriter2);
      simpleNode1.jjtGetChild(1310);
      assertEquals(1311, simpleNode1.jjtGetNumChildren());
      
      String string0 = simpleNode0.toString();
      assertEquals("NameList", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.384226442681793
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(54);
      simpleNode0.toString();
      simpleNode0.jjtAddChild(simpleNode0, 54);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) ",");
      StringWriter stringWriter1 = stringWriter0.append('j');
      stringWriter0.append((CharSequence) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.close();
      int int0 = 85;
      int int1 = 1589;
      sequenceInputStream0.read(byteArray0, 1589, 85);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.read(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 67);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      stringWriter1.append('6');
      StringWriter stringWriter2 = new StringWriter();
      // Undeclared exception!
      simpleNode0.dump("%a5.H;9v3.F5]i", stringWriter2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("");
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-3131));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(106);
      SimpleNode simpleNode1 = new SimpleNode(106);
      simpleNode0.jjtSetParent(simpleNode1);
      Node node0 = simpleNode0.jjtGetParent();
      assertNotSame(simpleNode0, node0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(";P@&:=qN$kTy+7GZ!");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ";P@&:=qN$kTy+7GZ!";
      stringArray0[1] = ";P@&:=qN$kTy+7GZ!";
      stringArray0[2] = ";P@&:=qN$kTy+7GZ!";
      stringArray0[3] = ";P@&:=qN$kTy+7GZ!";
      stringArray0[4] = ";P@&:=qN$kTy+7GZ!";
      stringArray0[5] = ";P@&:=qN$kTy+7GZ!";
      JavaParser.main(stringArray0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 879);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0, (int) (byte) (-15), (int) (byte) (-52));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, (byte)68);
      pushbackInputStream0.available();
      pushbackInputStream0.read();
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)28);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 60;
      SimpleNode simpleNode0 = new SimpleNode(60);
      simpleNode0.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte byte0 = (byte) (-15);
      sequenceInputStream0.markSupported();
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0, (int) (byte) (-15), (int) (byte) (-52));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, (byte)44);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-1077887544));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1514);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 2599);
      // Undeclared exception!
      try { 
        simpleNode0.toString("PrimitiveType");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1514
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("+^");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1097);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(1097);
      stringWriter1.append('V');
      stringWriter0.append((CharSequence) "+^");
      simpleNode0.dump("+^", stringWriter0);
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtAddChild(simpleNode1, 1097);
      // Undeclared exception!
      try { 
        simpleNode1.jjtAddChild(simpleNode0, (-1493));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1493
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node[] nodeArray0 = new Node[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      String string0 = simpleNode0.toString();
      assertEquals("PackageDeclaration", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(11);
      simpleNode0.setIdentifier("E*");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = '`';
      charArray0[3] = '$';
      stringWriter0.write(charArray0);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter2 = new StringWriter(11);
      simpleNode0.dump("E*", stringWriter2);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter(11);
      StringWriter stringWriter5 = stringWriter2.append('`');
      stringWriter5.flush();
      StringWriter stringWriter6 = new StringWriter();
      StringWriter stringWriter7 = stringWriter4.append('M');
      assertFalse(stringWriter7.equals((Object)stringWriter1));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{");
      simpleNode0.toString("");
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.parent = nodeArray0[2];
      simpleNode0.jjtAddChild(nodeArray0[1], 1);
      simpleNode0.toString("sY}Y^SGv");
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1762));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1762
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-34);
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte)52;
      byteArray1[4] = (byte)5;
      byteArrayInputStream0.read(byteArray1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleNode simpleNode0 = new SimpleNode(3);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((byte)5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(16);
      simpleNode0.jjtOpen();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("^b&3fNJOd");
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, 1097);
      StringWriter stringWriter0 = new StringWriter();
      char char0 = 'f';
      try { 
        javaParser1.PrimaryPrefix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0, (int) (byte) (-15), (int) (byte) (-52));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, (byte)68);
      pushbackInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (byte)28);
      String string0 = simpleNode0.toString("?3zs5J8D");
      assertEquals("?3zs5J8DType", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-662);
      SimpleNode simpleNode0 = new SimpleNode((-662));
      String string0 = "s\\Y}Y^SGv";
      simpleNode0.setIdentifier("sY}Y^SGv");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "sY}Y^SGv");
      // Undeclared exception!
      try { 
        simpleNode0.dump("&=", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2559440401278517
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(54);
      simpleNode0.toString(",");
      simpleNode0.setIdentifier(",");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ",");
      String string0 = "-{T{<&Y<D%z:Z.";
      simpleNode0.dump("-{T{<&Y<D%z:Z.", stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      simpleNode0.toString("</identifier>");
      charArray0[1] = 'O';
      charArray0[2] = '%';
      charArray0[3] = 'K';
      charArray0[4] = 'M';
      charArray0[5] = '8';
      charArray0[6] = 'U';
      charArray0[7] = 'd';
      stringWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "*amp", 2183, 1305);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2559440401278517
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("Q");
      simpleNode0.setIdentifier("#6");
      simpleNode0.toString();
      StringReader stringReader0 = new StringReader("CompilationUnit : #6");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("Q", stringWriter0);
      simpleNode0.setIdentifier("#6");
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 7);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1938);
      simpleNode0.jjtClose();
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node[] nodeArray0 = new Node[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{");
      int int0 = 1;
      int int1 = (-1762);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        javaParser0.PrimitiveType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
