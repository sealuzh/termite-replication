/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:51:16 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8551532991147828
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.ofLength(2147483648L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getLength();
      Range.CoordinateSystem.values();
      Range range1 = Range.ofLength(2147483646L);
      range0.complement(range1);
      Range.of(9223372036854775787L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.107328087903581
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-56L), (-56L));
      Range range1 = Range.of(range_CoordinateSystem0, 2005L, 2005L);
      range0.iterator();
      range1.isSubRangeOf(range0);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem2);
      range0.isSubRangeOf(range1);
      long long0 = (-233L);
      Long long1 = new Long((-233L));
      range0.equals(long1);
      range2.isSubRangeOf(range0);
      range1.isEmpty();
      List<Range> list0 = range1.complement(range2);
      range1.complementFrom(list0);
      range0.intersects(range2);
      Range.CoordinateSystem.values();
      range0.complement(range2);
      range0.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-233L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.069776583892103
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.ofLength(2147483651L);
      Range range1 = Range.of((-1828L), (-31L));
      range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals((-30L), long0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 2147483651 ]/RB", string0);
      
      range0.isSubRangeOf(range1);
      range1.equals("");
      boolean boolean0 = range0.isSubRangeOf(range1);
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1);
      
      range0.getEnd();
      range0.complement(range1);
      range0.complementFrom(list0);
      boolean boolean2 = range1.intersects(range0);
      assertTrue(boolean2 == boolean0);
      
      Range.CoordinateSystem.values();
      List<Range> list1 = range0.complement(range1);
      assertTrue(list1.contains(range0));
      
      range0.startsBefore(range1);
      Range.ofLength(4294967295L);
      Range range2 = Range.of((-2363L), 2147483647L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.8174640827820827
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.equals(list0);
      assertTrue(list0.contains(range0));
      
      range0.getEnd();
      Range range2 = Range.ofLength(2147483647L);
      long long0 = range2.getLength();
      assertEquals(2147483647L, long0);
      
      Range.of(2147483646L);
      Range.of((-2587L), 2147483647L);
      Range range3 = Range.of(2147483647L);
      boolean boolean0 = range0.endsBefore(range3);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6441511769867607
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(32767L);
      Range.of((-78L), 32767L);
      // Undeclared exception!
      try { 
        Range.parseRange("NFdk!C2Z\"-E~j`ww(", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse NFdk!C2Z\"-E~j`ww( into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.305401005051319
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 3044L;
      Range range0 = Range.ofLength(3044L);
      range0.iterator();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6390718222628173
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      range0.split(2147483647L);
      long long1 = 2147483648L;
      Range range1 = Range.ofLength(2147483648L);
      range1.equals(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.02048635558817
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-56L), (-56L));
      Range range1 = Range.of(range_CoordinateSystem0, (-56L), 0L);
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem2);
      //  // Unstable assertion: assertEquals((-55L), long0);
      
      range2.toString(range_CoordinateSystem0);
      boolean boolean0 = range1.isSubRangeOf(range2);
      boolean boolean1 = range0.equals(range_CoordinateSystem1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      range2.isSubRangeOf(range1);
      range2.isEmpty();
      range0.getEnd();
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range2.complementFrom(list0);
      //  // Unstable assertion: assertEquals(4, list1.size());
      
      range2.intersects(range1);
      Range.CoordinateSystem.values();
      List<Range> list2 = range1.complement(range2);
      //  // Unstable assertion: assertEquals(2, list2.size());
      
      range2.startsBefore(range1);
      Range range3 = Range.ofLength(2147483646L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.000173017738563
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.ofLength(32774L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      range1.endsBefore(range0);
      range2.endsBefore(range0);
      Range range3 = Range.of(1L);
      List<Range> list0 = range1.complement(range3);
      assertEquals(2, list0.size());
      
      Range.of(1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      List<Range> list1 = range0.complement(range1);
      assertEquals(0, list1.size());
      
      Range.of(7426L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.606412264774314
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.ofLength(4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.056114527197411
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.ofLength(2147483651L);
      long long0 = (-1828L);
      Range range1 = Range.of((-1828L), (-31L));
      range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483651L, (-9223372036854775808L));
      range2.complement(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-295L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.485960712956883
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      range0.equals(list0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-1855L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.695555585215021
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = 4294967295L;
      Range range1 = Range.ofLength(4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.getEnd();
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      range0.intersects(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-924L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.9362349387705526
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range0.endsBefore(range1);
      range1.intersects(range0);
      Range.of(1L);
      range1.complement(range0);
      Range range2 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of(0L);
      range3.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6037083411154933
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      long long0 = 32726L;
      Range range0 = Range.of(32726L, 32726L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-274L));
      range_Builder1.shift((-274L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2402880620543772
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(32767L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.876153539176674
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.equals(list0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      range0.getEnd();
      Range range2 = Range.ofLength(2147483647L);
      long long0 = range2.getLength();
      //  // Unstable assertion: assertEquals(2147483647L, long0);
      
      Range.of(2147483646L);
      List<Range> list1 = range2.complement(range0);
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range1));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6650013588021895
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.ofLength(0L);
      long long0 = (-1102L);
      Range.of((-1102L), 4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange("unable to mkdir for ", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse unable to mkdir for  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.8202144474141257
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.split(2147483647L);
      range0.equals((Object) null);
      Range.of(2147483647L, 2147483647L);
      long long0 = (-2147483648L);
      Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("n/{ih09M<E", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse n/{ih09M<E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.8961205983237255
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(679L, 679L);
      long long0 = (-1L);
      Range range1 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.intersects(range0);
      long long1 = 9223372036854775807L;
      Range range2 = Range.of(range_CoordinateSystem0, 9966L, 9223372036854775807L);
      range2.startsBefore(range0);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = (-2076L);
      Range.of((-2076L), (-471L));
      range0.toString(range_CoordinateSystem1);
      range1.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7570403794070857
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.ofLength(3380L);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      long long0 = 1015L;
      range_Builder0.expandEnd(1015L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder2.shift(1178L);
      range_Builder3.expandEnd(1878L);
      range_Builder3.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3380L, 3379L);
      range1.getLength();
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-2373L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.875973893477901
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-56L), (-56L));
      Range range1 = Range.of(range_CoordinateSystem0, (-56L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-56L), 1894L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem2);
      //  // Unstable assertion: assertEquals((-55L), long0);
      
      long long1 = range1.getLength();
      //  // Unstable assertion: assertEquals(57L, long1);
      
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      Range range3 = Range.of((-56L));
      boolean boolean0 = range3.endsBefore(range2);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.7947896634241367
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range.ofLength(2147483647L);
      Range range2 = Range.of(32767L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      List<Range> list1 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(2, list1.size());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.7462614432605776
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(21L);
      range1.complement(range0);
      range1.startsBefore(range0);
      Range range2 = Range.ofLength(21L);
      long long0 = new Long((-128L));
      range1.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.9589465681337237
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      range1.endsBefore(range0);
      range2.endsBefore(range0);
      Range range3 = Range.of(1L);
      List<Range> list0 = range1.complement(range3);
      assertEquals(2, list0.size());
      
      Range range4 = Range.of(1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      boolean boolean0 = range4.endsBefore(range0);
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      List<Range> list1 = range0.complement(range1);
      assertTrue(list1.isEmpty());
      
      boolean boolean1 = range1.startsBefore(range4);
      assertFalse(boolean1 == boolean0);
      
      Range.ofLength(1224L);
      range4.asRange();
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6500118855322032
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.endsBefore(range0);
      long long0 = 3042L;
      Range.of((-128L), 3042L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("V-^)Vyo+r", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse V-^)Vyo+r into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4041438419458347
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      range1.endsBefore(range0);
      range2.endsBefore(range0);
      Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("vTYY0o_%wY6<i}7", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse vTYY0o_%wY6<i}7 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.226347648829042
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = 65535L;
      Range.of(65535L);
      // Undeclared exception!
      try { 
        Range.parseRange("].v?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ].v? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.13808333660458
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range1.toString();
      Range range2 = Range.of(0L, 0L);
      range0.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 0L, 0L);
      range0.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem3, 0L, 0L);
      range4.equals("[ 1 .. 1 ]/RB");
      range2.isSubRangeOf(range0);
      Range range5 = Range.parseRange("[ 0 .. 0 ]/0B");
      range5.isEmpty();
      Range range6 = Range.of(range_CoordinateSystem3, (-2122L), 0L);
      range6.getEnd();
      Range range7 = Range.of(0L);
      List<Range> list0 = range7.complement(range2);
      range0.complementFrom(list0);
      range4.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long0 = 241L;
      Range.Builder range_Builder1 = new Range.Builder(241L);
      long long1 = 2017L;
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(2017L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.8138895433893705
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      range0.equals((Object) null);
      Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of((-2147483648L));
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.768059448389126
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-56L), (-56L));
      Range range1 = Range.of(range_CoordinateSystem0, (-56L), 0L);
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-56L), 0L);
      range2.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8287391805387445
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range1.toString();
      Range range2 = Range.of(255L, 934L);
      range0.startsBefore(range2);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.parseRange("[ 0 .. 0 ]/0B", range_CoordinateSystem0);
      range3.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of(32767L, (-1267L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.5687201612031845
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getBegin();
      Range range1 = Range.of(19L);
      range1.intersects(range0);
      Range range2 = Range.of((-128L));
      range2.split(2158L);
      Object object0 = new Object();
      Range.of(19L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-737L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.8113879040438166
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range0.intersects(range1);
      Range.of(1L);
      Range range3 = Range.of(1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Long long0 = new Long(1L);
      Range.CoordinateSystem.values();
      List<Range> list0 = range2.complement(range4);
      assertEquals(2, list0.size());
      
      boolean boolean1 = range3.startsBefore(range1);
      assertTrue(range3.isEmpty());
      assertSame(range1, range2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4387416036394236
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = (-413L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd((-413L));
      range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.shift((-1588L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.99957026032638
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range0.intersects(range1);
      Range range3 = Range.of(1L);
      Range range4 = Range.of(1L, 0L);
      Range range5 = Range.of(32767L);
      long long0 = range5.getEnd();
      assertEquals(32767L, long0);
      
      List<Range> list0 = range2.complement(range5);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      range3.intersects(range0);
      Range.CoordinateSystem.values();
      range1.complement(range0);
      boolean boolean1 = range4.startsBefore(range1);
      assertFalse(boolean1 == boolean0);
      assertSame(range1, range2);
      
      Range range6 = Range.ofLength(2147483646L);
      assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.05906620267794
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.split(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.ofLength(2147483647L);
      range0.isSubRangeOf(range1);
      range0.equals(range1);
      range1.isSubRangeOf(range0);
      Range range2 = Range.of(951L);
      range2.isEmpty();
      range0.getEnd();
      Range range3 = Range.parseRange("[ 1 .. 2147483647 ]/RB", range_CoordinateSystem0);
      List<Range> list0 = range1.complement(range3);
      range3.complementFrom(list0);
      range2.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(1181L);
      Range.Builder range_Builder1 = new Range.Builder(9993L);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(2147483646L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.8655940455653885
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range1.toString();
      Range range2 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range2.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range2.equals(range2);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("@\u0007bmm 8)AFo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.@\u0007bmm 8)AFo
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.971524898312738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-1102L), (-1102L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1102L), (-1102L));
      Range range2 = Range.of(0L, 0L);
      range2.equals(range0);
      range1.startsBefore(range2);
      range1.intersection(range2);
      Long long0 = new Long((-1102L));
      Range.of(0L);
      List<Range> list0 = new LinkedList<Range>();
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.7196614055081985
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.ofLength(3380L);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      long long0 = 1015L;
      range0.split(3379L);
      Range.Builder range_Builder3 = range_Builder2.copy();
      range_Builder0.expandEnd(1015L);
      Range.Builder range_Builder4 = range_Builder3.copy();
      Range.Builder range_Builder5 = range_Builder4.shift(1178L);
      range_Builder5.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3380L, (-3271L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.728525906298828
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.of((-128L), (-128L));
      Range range0 = Range.of(21L);
      Range range1 = Range.of((-128L));
      range1.split(2158L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of(0L, 2639L);
      Range.ofLength(2639L);
      // Undeclared exception!
      try { 
        range1.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.7679161832884787
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range1.spliterator();
      Long.getLong("]#MH8 >=?cH_");
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem2);
      assertEquals(0L, long0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem3.getAbbreviatedName();
      long long1 = range1.getEnd();
      assertFalse(range1.isEmpty());
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.073127483523252
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(21L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range1));
      
      List<Range> list2 = range1.complement(range1);
      assertFalse(list2.equals((Object)list1));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1229L), 21L);
      Range.of(range_CoordinateSystem0, (-1229L), (-128L));
      boolean boolean0 = range1.endsBefore(range2);
      assertFalse(boolean0);
      
      Range range3 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-128L), long0);
      assertSame(range0, range3);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.9962971313486793
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = range0.asRange();
      range1.intersection(range0);
      range0.intersects(range1);
      Range range2 = Range.of(1L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 32767L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range4.complementFrom(linkedList0);
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = range1.startsBefore(range3);
      assertTrue(boolean0);
      
      long long0 = range4.getBegin();
      assertEquals(32767L, long0);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=4.0400596244103175
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      range0.getBegin();
      Range range1 = Range.of((-1102L), (-1102L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1102L), (-1102L));
      Range.ofLength(2147483647L);
      Range range2 = Range.of(0L, 0L);
      range2.equals(range0);
      range1.startsBefore(range2);
      range1.intersection(range2);
      Long long0 = new Long((-1102L));
      Range range3 = Range.of(0L);
      range3.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.199448659539377
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(651L, (-1043L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.136459013535293
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.ofLength(3380L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      range0.endsBefore(range2);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      
      Range range3 = Range.of(3380L);
      List<Range> list0 = range0.complement(range2);
      assertTrue(list0.isEmpty());
      
      Range.of((-843L), 230L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range2.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      List<Range> list1 = range1.complement(range3);
      assertTrue(list1.contains(range0));
      assertSame(range1, range2);
      
      Range range4 = Range.ofLength(9223372036854772763L);
      range3.startsBefore(range4);
      Range range5 = Range.ofLength(9223372036854775807L);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.101334939424171
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.ofLength(846L);
      range2.complement(range1);
      Range range3 = Range.of(range_CoordinateSystem0, (-240L), 0L);
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range0.intersects(range3);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 3442L, 3442L);
      range1.getLength();
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(2523L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.9662679808738575
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 0L;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.ofLength(846L);
      range2.complement(range1);
      Range.of(range_CoordinateSystem0, (-240L), 0L);
      Range.Comparators.values();
      Range.ofLength(534L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("n/{ih09M<E", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse n/{ih09M<E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.416748105957088
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.6536819179426274
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range range1 = Range.ofLength(32767L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.isEmpty();
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.ofLength(32767L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.8412551815151454
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range1.toString();
      Range range2 = Range.of(0L, 0L);
      range0.startsBefore(range2);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      range3.isSubRangeOf(range0);
      range0.equals(range_CoordinateSystem1);
      range3.isSubRangeOf(range1);
      range0.isEmpty();
      long long0 = range2.getEnd();
      assertEquals(0L, long0);
      
      List<Range> list0 = range2.complement(range1);
      range3.complementFrom(list0);
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = range0.intersects(range2);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(2120L);
      range_Builder1.contractEnd((-542L));
      List<Range> list1 = range2.complement(range0);
      assertSame(range2, range1);
      assertTrue(list1.contains(range1));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.7422155338841865
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem2);
      Long.getLong("]#MH8 >=?cH_");
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Z3/Q'*}?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Z3/Q'*}?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.7976851302645898
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(679L, 679L);
      long long0 = (-1L);
      Range range1 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 9223372036854775807L;
      Range range2 = Range.of(range_CoordinateSystem0, 9966L, 9223372036854775807L);
      range2.startsBefore(range0);
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = (-2076L);
      Range.of((-2076L), (-471L));
      range0.toString(range_CoordinateSystem1);
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$LongStartIntLengthRange", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$LongStartIntLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.8877083612341092
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      range0.intersects(range1);
      Range range3 = Range.of(1L);
      Range.of(1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1L, 0L);
      Long long0 = new Long(1L);
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.complement(range3);
      assertEquals(2, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 0L, 9223372036854775787L);
      boolean boolean0 = range2.startsBefore(range4);
      assertFalse(range4.isEmpty());
      assertFalse(boolean0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.8268490072490318
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      range_Builder0.copy();
      Range range1 = Range.of((-3240L));
      range1.complement(range0);
      range1.complement(range0);
      Range.Builder range_Builder1 = new Range.Builder(65535L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.944091295098492
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      long long0 = (-32768L);
      Range range1 = Range.of((-32768L));
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      long long1 = 4294967310L;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-681L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.9693908821656443
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      range0.intersects(range1);
      Range range3 = Range.of(1L);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(1L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, 32767L, 4294967295L);
      assertFalse(range5.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      boolean boolean0 = range1.startsBefore(range4);
      assertTrue(boolean0);
      assertSame(range1, range2);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.8556491479091064
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      range1.endsBefore(range0);
      range2.endsBefore(range0);
      Range range3 = Range.of(1L);
      List<Range> list0 = range1.complement(range3);
      assertEquals(2, list0.size());
      
      Range range4 = Range.of(1L, 0L);
      assertTrue(range4.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem1);
      assertSame(range2, range0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        range0.split((-604L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.179717510400483
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(32767L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(32767L, long0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.4710853477456234
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.split(2147483647L);
      Range.of(2147483647L, 2147483647L);
      Range.ofLength(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1104L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.5773342087048436
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      long long0 = 32767L;
      Range.of(32767L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(1855L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1123579782134505
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-2971L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-928L), 1552L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = range_Builder1.shift(0L);
      assertSame(range_Builder1, range_Builder2);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=4.114521721111025
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.ofLength(3380L);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.copy();
      Range range1 = Range.of((-32768L));
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range0.complementFrom(list1);
      Range.Builder range_Builder4 = new Range.Builder(3380L);
      Range.Builder range_Builder5 = range_Builder4.contractEnd((-1104L));
      assertFalse(range_Builder5.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      long long0 = 32767L;
      long long1 = (-32768L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=4.112172039656868
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(21L);
      Range range2 = Range.of((-128L));
      List<Range> list0 = range2.split(2158L);
      Object object0 = new Object();
      range1.equals(object0);
      Range.of(0L, 2639L);
      Range.ofLength(3076874L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      range2.complementFrom(linkedList0);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.183615538893396
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.ofLength(2147483648L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.653318721745384
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.of(32767L, 32767L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-274L));
      range_Builder1.shift((-274L));
      range_Builder1.copy();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("max cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.max cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.4586300385810778
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-56L);
      Range.of(range_CoordinateSystem0, (-56L), (-56L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      long long1 = 1015L;
      long long2 = 2582L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem1, 2582L, (-371L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.72325378807438
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(0L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.750485022494374
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range range0 = Range.ofLength(3380L);
      Long long0 = new Long(3380L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range0.split(3380L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.expandEnd(13L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder3.shift(1007L);
      range_Builder3.build();
      Range.ofLength(1007L);
      Range.Builder range_Builder4 = range_Builder1.contractBegin(3380L);
      range_Builder4.copy();
      Range.Builder range_Builder5 = new Range.Builder(3380L);
      Range.Builder range_Builder6 = range_Builder3.contractEnd(3380L);
      assertFalse(range_Builder6.equals((Object)range_Builder5));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=4.073607410007176
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-56L), (-56L));
      Range range1 = Range.of(range_CoordinateSystem0, (-56L), 0L);
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.ofLength(846L);
      range2.complement(range1);
      long long0 = (-240L);
      Range range3 = Range.of(range_CoordinateSystem0, (-240L), 0L);
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range0.intersects(range3);
      range_Builder0.copy();
      long long1 = 177L;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.360581954356773
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3452L), (-413L));
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3978727387400776
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32764L, 2685L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.6479963643953983
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 32767L, 32767L);
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854772427L);
      Range.ofLength(32767L);
      range_Builder1.expandBegin(2324L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.expandBegin(14L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3887919394065844
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-56L), (-56L));
      Range.of(range_CoordinateSystem0, (-56L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1894L;
      Range.of(range_CoordinateSystem1, (-56L), 1894L);
      String string0 = "n/{i\\h09M<E";
      // Undeclared exception!
      try { 
        Range.parseRange("n/{ih09M<E", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse n/{ih09M<E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
