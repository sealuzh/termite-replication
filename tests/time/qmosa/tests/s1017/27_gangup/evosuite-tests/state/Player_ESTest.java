/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 04:46:45 GMT 2020
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((-315), "1yPU@7+XFOO63.C;:d", 23647);
      Player player1 = new Player();
      long long0 = (-1L);
      player1.setDead((-1L), true);
      player1.setDead((-1L), false);
      player1.boss = (Party) player0;
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, true);
      EvoSuiteFile evoSuiteFile0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3^\"qM.+a.2:coA64`");
      mockFileOutputStream0.close();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        player1.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(5, "state.Party", 4919);
      Player player1 = new Player(5, "state.Party", 4919);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)17;
      player1.unpack(byteArray0);
      Player player2 = new Player((byte)0);
      player2.pack();
      player2.setMoney((short)4919);
      Player player3 = new Player((short)4919, "", "", (short)4919);
      player3.isJoinOK(player1, false);
      player0.setMoney((short)4919);
      player3.type();
      player1.setJoinOK(player2, false);
      Player player4 = new Player(913);
      player3.isBoss();
      player2.isJoinOK(player1, false);
      assertEquals(4919.0F, player2.getMoney(), 0.01F);
      
      Player player5 = new Player((byte)60, ";_", "g:hD%!", 982, (-3185));
      player5.gangStrength();
      Player player6 = new Player((byte)17);
      player5.getStrength();
      int int0 = player3.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3393717343898155
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(5, "state.Party", 4919);
      Player player1 = new Player(5, "state.Party", 4919);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "state.Party");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)17;
      player1.unpack(byteArray0);
      Player player2 = new Player((byte)0);
      player0.setMoney(579.023F);
      player2.pack();
      player2.setMoney((short)4919);
      Player player3 = new Player((short)4919, "", "", (short)4919);
      player3.prev = (Party) player2;
      player3.isJoinOK(player1, false);
      player0.setMoney(2785.486F);
      int int0 = Packable.GAME_EVENT;
      player1.setJoinOK(player2, false);
      Player player4 = new Player(913);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Party party0 = new Party();
      player1.boss = party0;
      player1.isJoinOK(player2, false);
      // Undeclared exception!
      try { 
        player1.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(1250, "", "H\"Tp4?S97S$W,", 1250, (-304));
      player0.setDead((long) 1250, false);
      player0.setDead((-4042L), false);
      Player player1 = new Player((-304), "H\"Tp4?S97S$W,", (-304));
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player1, false);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "state.Party";
      int int0 = 4919;
      Player player0 = new Player(5, "state.Party", 4919);
      Player player1 = new Player(5, "state.Party", 4919);
      player1.setDead((long) 4919, false);
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("state.Party");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(228, "", "", (-1), 1907);
      Party party0 = player0.next;
      player0.remove((Party) null);
      Player player1 = new Player((short)4919, "", "", (-1566), (-1));
      Player player2 = new Player((-24815), "", "", 4, 827);
      player2.pack();
      Player player3 = (Player)player2.gangBoss();
      Player player4 = new Player(4, (String) null, "", (short)4919);
      player0.isJoinOK(player3, false);
      int int0 = player4.type();
      assertEquals(5, int0);
      assertEquals(1, player4.getStrength());
      
      player3.getZ();
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
      
      int int1 = player1.gangStrength();
      assertFalse(player1.isDead());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals((-1566), player1.getPictureId());
      assertEquals((-1), int1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".*[.]class$");
      Player player0 = new Player(0, ".*[.]class$", "", 0, 0);
      Player player1 = new Player((-1));
      player0.prev = (Party) player1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.setConnected(false);
      player1.setDead((long) (-1));
      player0.getX();
      player0.setX((-1.0F));
      System.setCurrentTimeMillis(520L);
      player0.getX();
      player0.getY();
      player0.getX();
      player1.gangStrength();
      player1.getStrength();
      player0.pack();
      player0.getX();
      player1.type();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      // Undeclared exception!
      try { 
        pipedInputStream0.connect((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(23647, "", "H\"Tp4?S97S$W,", (-304), 23647);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 876);
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      party0.boss = (Party) player0;
      player0.setX(0.0F);
      party0.boss = (Party) player0;
      party0.prev = (Party) player0;
      party0.prev.getSubparty();
      party0.id = (int) (short)4919;
      Player player1 = new Player(815, "^", "^", 2315, 2072);
      player1.pack();
      player1.gangBoss();
      player0.getSubparty();
      byte[] byteArray0 = player1.pack();
      player1.setMoney(0.0F);
      Player player2 = new Player(2072, (String) null, (String) null, 0);
      player0.isJoinOK(player1, false);
      player1.type();
      player0.getZ();
      player1.setX(1075.7F);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      System.setCurrentTimeMillis(2072);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(1938);
      byte[] byteArray0 = new byte[1];
      player0.setX(0.0F);
      byteArray0[0] = (byte)95;
      player0.unpack(byteArray0);
      Player player1 = new Player();
      Player player2 = new Player(25600, "state.Player", 1938);
      Player player3 = new Player(0, "", 0);
      player3.setConnected(true);
      Player player4 = new Player(2665, "", "state.Player", (-1614), 1);
      player4.isJoinOK(player1, true);
      player3.toString();
      player3.getName();
      Player player5 = new Player(0, "state.Player", (short)4919);
      // Undeclared exception!
      try { 
        player1.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      party0.boss = (Party) player0;
      player0.setX(0.0F);
      party0.boss = (Party) player0;
      party0.prev = (Party) player0;
      party0.prev.getSubparty();
      party0.id = (int) (short)4919;
      party0.prev.remove(party0.boss);
      party0.prev.prev = party0.prev;
      party0.prev.prev.head = party0.boss;
      party0.prev.boss = party0.prev.prev;
      player0.setY(0.0F);
      player0.add(party0.prev.prev);
      player0.setZ((-782.7493F));
      player0.setDead(1261L);
      player0.pack();
      player0.toString();
      player0.setDead(0L);
      float float0 = player0.getZ();
      assertEquals((-782.7493F), float0, 0.01F);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 4919;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(343, "+Zb\"Y2", "state.Player", 4919);
      Player player1 = new Player();
      Player player2 = new Player(2665, (String) null, 1);
      player2.id = 1;
      player2.toString();
      player2.getName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 5;
      Player player0 = new Player(5);
      player0.setX((-2236.7F));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      Player player1 = new Player((byte) (-1), "", "", 2273, (byte) (-1));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bhf>");
      Player player0 = new Player((-24815), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-24815));
      boolean boolean0 = true;
      player0.setDead((long) (-24815));
      player0.setY((-24815));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", true);
      byte[] byteArray0 = new byte[5];
      mockFileOutputStream0.release();
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)4;
      mockFileOutputStream0.write(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      player0.pack(dataOutputStream0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataInputStream dataInputStream0 = null;
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(3271, "", "", 0);
      Player player1 = new Player();
      Player player2 = new Player((short)4919, "", 2665);
      assertEquals(2665, player2.getPictureId());
      
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertFalse(boolean0);
      
      String string0 = player1.toString();
      assertEquals("Player-1", string0);
      assertEquals(0, player1.getPictureId());
      assertEquals("0.0.0.0", player1.getIP());
      
      player0.getName();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "state.Party";
      int int0 = 4919;
      int int1 = 10;
      Player player0 = new Player(10);
      player0.setX(5);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      player0.setDead();
      player0.getSubparty();
      Player player1 = new Player((-2352), "", (-1));
      player1.setJoinOK(player0, true);
      player1.setDead((long) (short)4919, true);
      player0.setMoney(0.0F);
      player0.isConnected();
      player1.getPictureId();
      Player player2 = new Player((short)4919, "xw7uP}z<we'KXCIJQ5", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 41);
      player2.reset(false);
      player1.setJoinOK(player2, false);
      player2.pack();
      player1.setY(574.3986F);
      assertEquals(574.3986F, player1.getY(), 0.01F);
      
      Player player3 = new Player((-1), "", 971);
      player3.getStrength();
      Player player4 = new Player();
      player4.setJoinOK(player2, true);
      int int0 = player2.getPictureId();
      assertEquals(41, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(1272, (String) null, "", 8);
      player0.setDead();
      player0.isConnected();
      player0.getIP();
      player0.isDead();
      int int0 = player0.gangStrength();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(1938);
      byte[] byteArray0 = new byte[1];
      player0.setX(0.0F);
      byteArray0[0] = (byte)95;
      player0.unpack(byteArray0);
      player0.getSubparty();
      player0.pack();
      player0.setMoney(1938);
      Player player1 = new Player(1797, " ", " ", 1);
      player0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player1.setDead(995L);
      player0.setY(0.1F);
      player0.reset(true);
      float float0 = player0.getY();
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertEquals(0.1F, float0, 0.01F);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6156305770275505
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(16, "state.Party", 16);
      File file0 = MockFile.createTempFile("state.Party", "module.ModuleBrowserDialog$ModuleFilter");
      Player player1 = new Player();
      player0.add(player1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      dataOutputStream0.writeInt((short)4919);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.getChannel();
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      dataInputStream0.readUTF();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.pack(dataOutputStream0);
      player0.setDead((-556L));
      player0.getName();
      player0.getTimeOfDeath();
      player0.getIP();
      player0.gangStrength();
      player0.setX(16);
      player0.toString();
      Player player2 = new Player(3, (String) null, "module.ModuleBrowserDialog$ModuleFilter", 3271);
      player1.isJoinOK(player2, true);
      player0.gangStrength();
      assertEquals(16.0F, player0.getX(), 0.01F);
      
      long long0 = player2.getTimeOfDeath();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((-5914));
      Player player1 = new Player((short)4919, "MMNCFt*KIZ7s", (-5914));
      player0.setZ((short)4919);
      player0.setJoinOK(player1, false);
      player0.setY((-1.0F));
      player0.setY(0.2F);
      player0.toString();
      assertEquals(4919.0F, player0.getZ(), 0.01F);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)50;
      player1.unpack(byteArray0);
      assertEquals((-5914), player1.getPictureId());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(5, "state.Party", 4919);
      Player player1 = new Player(5, "state.Party", 4919);
      Player player2 = new Player(4919);
      Player player3 = new Player((byte)17, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (String) null, 2665, 2665);
      // Undeclared exception!
      try { 
        player3.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-304);
      Player player0 = new Player(23647, "", "H\"Tp4?S97S$W,", (-304), 23647);
      player0.pack();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 876);
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(13, "state.Party", 4919);
      player0.setMoney(1.0F);
      player0.getMoney();
      MockFile.createTempFile("state.Party", "module.ModuleBrowserDialog$ModuleFilter");
      Player player1 = new Player(13);
      player0.add(player1);
      Player player2 = new Player((short)4919, "RF`(pE+k-JAT;ba~oc", 508);
      System.setCurrentTimeMillis(1679L);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      party0.boss = (Party) player0;
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      party0.boss = (Party) player0;
      party0.prev = (Party) player0;
      party0.prev.getSubparty();
      party0.id = (int) (short)4919;
      party0.prev.add(player0);
      party0.prev.remove(party0.boss);
      party0.prev = (Party) player0;
      party0.prev.prev = party0.prev;
      party0.prev.prev.head = party0.boss;
      party0.prev.boss = party0.prev.prev;
      player0.add(party0.prev.prev);
      player0.pack();
      player0.setMoney(0.0F);
      Player player1 = new Player((-849), "", 1815);
      Player player2 = new Player((short)4919, (String) null, (short)4919);
      Player player3 = new Player((-890), "`zj_D1=F?", "", 1, 4919);
      player2.isJoinOK(player3, true);
      player1.type();
      player0.getZ();
      float float0 = player1.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(3271, "", "", 0);
      Player player1 = new Player();
      Player player2 = new Player(228, (String) null, (short)4919);
      boolean boolean0 = player1.isJoinOK(player2, true);
      assertEquals(4919, player2.getPictureId());
      assertFalse(boolean0);
      
      player0.toString();
      String string0 = player1.getName();
      assertEquals(1, player1.getStrength());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1", string0);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("0.0.0.0", player1.getIP());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 2;
      String string0 = "state.Party";
      int int1 = 4919;
      Player player0 = new Player(2, "state.Party", 4919);
      Player player1 = new Player(2, "state.Party", 4919);
      boolean boolean0 = false;
      player1.setDead(0L, true);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(23647, "", "H\"Tp4?S97S$W,", (-304), 23647);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 876);
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      player0.pack(dataOutputStream0);
      Party party0 = player0.boss;
      player0.remove((Party) null);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream(pipedInputStream1);
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream2, 876);
      DataInputStream dataInputStream2 = new DataInputStream(bufferedInputStream0);
      assertFalse(dataInputStream2.equals((Object)dataInputStream0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player((-3974), "module.ModuleBrowserDialog$ModuleFilter", 4919);
      player0.setMoney((-3974));
      player0.getMoney();
      assertEquals((-3974.0F), player0.getMoney(), 0.01F);
      
      Player player1 = new Player(0, "", (-1));
      assertEquals(0.0F, player1.getMoney(), 0.01F);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(5, "state.Party", 4919);
      player0.setMoney(1.0F);
      player0.getMoney();
      File file0 = MockFile.createTempFile("state.Party", "module.ModuleBrowserDialog$ModuleFilter");
      Player player1 = new Player();
      player0.add(player1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      dataOutputStream0.writeInt((short)4919);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.getChannel();
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      dataInputStream0.readUTF();
      player0.unpack(dataInputStream0);
      player0.pack(dataOutputStream0);
      player1.setJoinOK(player0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      player1.unpack(byteArray0);
      player1.pack();
      int int0 = player0.getPictureId();
      assertEquals(1.0F, player0.getMoney(), 0.01F);
      assertEquals(4919, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(5, "state.Party", 4919);
      Player player1 = new Player(5, "state.Party", 4919);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)17;
      player0.setJoinOK(player1, true);
      player1.isJoinOK(player0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("state.Party");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`[0he!d");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(23647, "", "H\"Tp4?S97S$W,", (-315), 23647);
      Player player1 = new Player((-1897), "H\"Tp4?S97S$W,", 589);
      player0.setJoinOK(player1, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 876);
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(1208, "8bh.b&'c=;T S", "8bh.b&'c=;T S", 1208, 0);
      Player player1 = new Player(5);
      player0.setJoinOK(player1, false);
      player0.id = 953;
      int int0 = Packable.ACTION;
      assertEquals(2, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead((-1L));
      player0.setConnected(false);
      player0.getMoney();
      player0.isConnected();
      player0.setDead(1688L);
      assertEquals(1688L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      party0.boss = (Party) player0;
      party0.boss.id = (int) (short)4919;
      player0.setX(0.0F);
      party0.boss = (Party) player0;
      party0.prev = (Party) player0;
      Party party1 = player0.gangBoss();
      party1.add(player0);
      player0.setY(0.0F);
      player0.add(party0.boss);
      player0.setZ(10.0F);
      player0.setDead((-1825L));
      Player player1 = new Player((-1263), "", "gv/{,)`WgP5d!Y|;B", (short)4919);
      player1.isJoinOK(player0, true);
      player1.type();
      player0.getZ();
      assertEquals((-1825L), player0.getTimeOfDeath());
      
      float float0 = player1.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(0, "=)K$", "=)K$", 0);
      Party party0 = player0.next;
      player0.remove((Party) null);
      Player player1 = new Player((-3537), ".vSC", (-1646));
      player0.setJoinOK(player1, true);
      player0.setDead((-827L), true);
      player0.setMoney(3996.5715F);
      player0.isConnected();
      player0.getPictureId();
      Player player2 = new Player((-671), "=)K$", "xw7uP}z<we'KXCIJQ5", 2674);
      player2.gangStrength();
      player2.reset(true);
      player0.setJoinOK(player2, true);
      player1.pack();
      player0.setY(0);
      player1.setZ((-1.0F));
      player0.setY((-1210.87F));
      int int0 = Packable.PLAYER;
      player0.setJoinOK(player1, true);
      assertEquals((-827L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(1, "JiL\u0007~9VM@~vR", "JiL\u0007~9VM@~vR", (-24815), (-604));
      player0.setConnected(true);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(0, "", "state.Player", 0);
      float float0 = player0.getMoney();
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("", player0.getIP());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(1938);
      byte[] byteArray0 = new byte[1];
      player0.setX(0.0F);
      byteArray0[0] = (byte)95;
      player0.unpack(byteArray0);
      player0.getSubparty();
      Player player1 = new Player((byte)95, "", "", 1938, (byte)95);
      player0.remove(player1);
      player1.remove(player0);
      player0.setDead((long) (byte)95, true);
      player0.getStrength();
      Player player2 = new Player();
      player2.setX((byte)95);
      player0.pack();
      byte[] byteArray1 = player2.pack();
      player2.setDead((-614L));
      player1.getIP();
      player1.type();
      player2.setY((-97.0F));
      player0.unpack(byteArray1);
      player1.setMoney(2860.689F);
      player2.getX();
      player1.setZ(0.0F);
      assertEquals(2860.689F, player1.getMoney(), 0.01F);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      party0.boss = (Party) player0;
      party0.boss.id = (int) (short)4919;
      player0.setX(0.0F);
      party0.boss = (Party) player0;
      party0.boss.getSubparty();
      party0.getSubparty();
      party0.add(player0);
      party0.boss.remove(party0.boss);
      player0.setY((-2911.681F));
      player0.add(party0.boss);
      player0.setZ(0.0F);
      player0.setDead(0L);
      player0.pack();
      String string0 = "";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-304);
      Player player0 = new Player(23631, "", "H\"Tp4?S97S$W,", (-304), 23631);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 876);
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      player0.gangStrength();
      pipedOutputStream0.write(byteArray0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(3271, "", "", 0);
      player0.getSubparty();
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      player0.getSubparty();
      player0.pack();
      player0.setMoney((-1678.5953F));
      Player player1 = new Player(1, "`", "", (short)4919);
      player0.isJoinOK(player1, true);
      player0.type();
      player1.getZ();
      float float0 = player0.getY();
      assertEquals((-1678.5953F), player0.getMoney(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.685945324669788
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Player player0 = new Player((-1575));
      player0.setX((-1575));
      byte[] byteArray1 = player0.pack();
      player0.reset(false);
      player0.setDead(1392409296320L);
      player0.type();
      player0.type();
      player0.gangStrength();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Player player1 = new Player((-2380), "gui.ModuleBrowserDialog$ModuleFilter", "", 5);
      player1.head = (Party) player0;
      player1.setDead((-1658L), false);
      player1.unpack(byteArray0);
      player1.unpack(byteArray1);
      player0.isJoinOK(player1, false);
      player0.isJoinOK(player1, false);
      player1.pack();
      assertEquals((-1658L), player1.getTimeOfDeath());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(1208, "8bh.b&'c=;T S", "8bh.b&'c=;T S", 1208, 0);
      int int0 = player0.gangStrength();
      assertTrue(player0.isConnected());
      assertEquals(0, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1208, player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      party0.boss = (Party) player0;
      player0.setX(0.0F);
      party0.boss = (Party) player0;
      party0.prev = (Party) player0;
      party0.prev.getSubparty();
      party0.id = (int) (short)4919;
      party0.prev.add(player0);
      party0.prev.remove(party0.boss);
      party0.prev = (Party) player0;
      party0.prev.prev = party0.prev;
      party0.prev.prev.head = party0.boss;
      party0.prev.boss = party0.prev.prev;
      player0.reset(false);
      player0.setY(0.0F);
      player0.add((Party) null);
      player0.setZ((-782.7493F));
      player0.setDead(1261L);
      player0.pack();
      player0.setDead(0L);
      player0.setY(0.0F);
      player0.reset(true);
      float float0 = player0.getX();
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player((-189), "RF`(pE+k-JAT;ba~oc", 0);
      player0.setZ(1178.5372F);
      float float0 = player0.getX();
      assertEquals(1178.5372F, player0.getZ(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = Packable.PLAYER;
      System.setCurrentTimeMillis(5);
      Player player0 = new Player(5, (String) null, (String) null, 0, 107);
      int int1 = player0.getStrength();
      assertEquals(107, int1);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 13;
      Player player0 = new Player(13, "state.4arty", 4919);
      player0.setMoney(1.0F);
      player0.getMoney();
      File file0 = MockFile.createTempFile("state.4arty", "module.ModuleBrowserDialog$ModuleFilter");
      Player player1 = new Player();
      player0.add(player1);
      player0.remove(player1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      dataOutputStream0.writeInt((short)4919);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.getChannel();
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      dataInputStream0.readUTF();
      player0.unpack(dataInputStream0);
      player0.pack(dataOutputStream0);
      player0.setDead(3636L);
      player0.getName();
      player0.toString();
      player0.getIP();
      try { 
        dataInputStream0.skip((-536L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(4919, "%KL.rd(su$x", "JiL\u0007~9VM@~vR", (-1), 0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals((-1), player0.getPictureId());
      assertEquals("%KL.rd(su$x", player0.getIP());
      assertFalse(boolean0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player(5, "state.Party", 4919);
      Player player1 = new Player(5, "state.Party", 4919);
      player1.setDead(0L, true);
      player1.setDead((long) 4919, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = null;
      try {
        pipedOutputStream3 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      party0.boss = (Party) player0;
      player0.setX(2.0513966F);
      party0.boss = (Party) player0;
      party0.prev = (Party) player0;
      party0.prev.getSubparty();
      party0.id = (int) (short)4919;
      player0.pack();
      Player player1 = new Player();
      player0.getSubparty();
      player0.pack();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      dataInputStream0.close();
      player1.unpack(dataInputStream0);
      player1.getX();
      player0.getZ();
      int int0 = player0.type();
      assertEquals(2.0513966F, player0.getX(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player(0, "]g%q`>", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0, 4178);
      boolean boolean0 = player0.isDead();
      assertEquals(4178, player0.getStrength());
      assertFalse(boolean0);
      assertEquals(0, player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("]g%q`>", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead();
      player0.isConnected();
      player0.getIP();
      player0.isDead();
      player0.gangStrength();
      int int0 = player0.gangStrength();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      party0.boss = (Party) player0;
      player0.setX(0.0F);
      party0.boss = (Party) player0;
      party0.prev = (Party) player0;
      party0.prev.getSubparty();
      party0.id = (int) (short)4919;
      party0.prev.add(player0);
      party0.prev.remove(party0.boss);
      party0.prev = (Party) player0;
      party0.prev.prev = party0.prev;
      party0.prev.prev.head = party0.boss;
      party0.prev.boss = party0.prev.prev;
      player0.add(party0.prev.prev);
      player0.setZ((-782.7493F));
      player0.setDead(1261L);
      Player player1 = new Player(4919, "zbjla~q);q", "module.ModuleBrowserDialog$ModuleFilter", 2020);
      player0.isJoinOK(player1, false);
      int int0 = Packable.PLAYER;
      player1.getZ();
      float float0 = player0.getY();
      assertEquals(1261L, player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player(5, ".*[.]class$", 5);
      player0.getStrength();
      player0.setY(1471.5F);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player0.setX(0.2F);
      Player player1 = new Player(5, "", "", 1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      player0.isJoinOK(player1, false);
      // Undeclared exception!
      try { 
        player1.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NLn1P");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t&nst~rOG!TI7<8oDdT");
      Player player0 = new Player(177, "", 10);
      Player player1 = new Player(177, "Gsv~ RwS2(PfTV6H", (String) null, (byte) (-126), (byte) (-83));
      player0.prev = (Party) player1;
      assertEquals((-83), player1.getStrength());
      
      player0.pack();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Player player0 = new Player(228, "", (String) null, 343);
      Player player1 = new Player();
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1", player1.getName());
      
      Player player2 = new Player((short)4919, "gui.ModuleBrowserDialEg$ModuleFilter", (short)4919);
      player0.toString();
      assertEquals(343, player0.getPictureId());
      
      player2.getName();
      assertFalse(player2.isDead());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(1, player2.getStrength());
      assertEquals("0.0.0.0", player2.getIP());
      assertTrue(player2.isConnected());
  }
}
