/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:09:52 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.StructuredMenuHolder;
import freemind.main.FreeMindApplet;
import java.awt.AWTEventMulticaster;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JEditorPane;
import javax.swing.JSpinner;
import javax.swing.MenuElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.181683922337212
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      jDayChooser0.getToolTipLocation((MouseEvent) null);
      jDayChooser0.setMaxDayCharacters((byte) (-79));
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay(29);
      jDayChooser0.updateUI();
      jDayChooser0.setDay(24);
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(24, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2799781754529884
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.setFocus();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.getPreferredSize();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      CheckboxMenuItem checkboxMenuItem0 = null;
      try {
        checkboxMenuItem0 = new CheckboxMenuItem("24", true);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setMonth(169);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        MockLocalTime.parse((CharSequence) "day");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'day' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1699550666946883
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.createVolatileImage(44, 3608);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setFocus();
      jDayChooser0.getLocale();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition((-566));
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.171149620235812
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      jDayChooser1.createVolatileImage(4, 10147);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setDayBordersVisible(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(10147, 2196, 2196, 2196, 10147);
      jDayChooser2.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser2.isDayBordersVisible());
      
      jDayChooser1.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1708393105332373
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 22, 22, 22, (-56), '=');
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = stringArray0[0];
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.createVolatileImage((-1265), 1165);
      Font.getFont("11");
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.170017960567567
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-68), 11, (-3478), (-68), '5');
      keyEvent0.paramString();
      jDayChooser0.isOptimizedDrawingEnabled();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener2);
      jDayChooser_DecoratorButton0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.init();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      // Undeclared exception!
      try { 
        unmarshallingContext0.parseElementDate("JL2srsjl^#", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1699933363940156
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.drawWeeks();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 11;
      floatArray0[1] = 194.57147F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 11;
      floatArray0[4] = 194.57147F;
      systemColor0.getRGBComponents(floatArray0);
      SystemColor systemColor1 = SystemColor.menu;
      jDayChooser0.setForeground(systemColor0);
      ActionEvent actionEvent0 = new ActionEvent("1", 199, "1");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(420);
      mockSimpleDateFormat0.parse("endInclination", parsePosition0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 33, false);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2021264500326914
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removePropertyChangeListener("|UcS<~n\tH", (PropertyChangeListener) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Color color0 = Color.lightGray;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getSundayForeground();
      int int0 = 2798;
      File file0 = MockFile.createTempFile("|UcS<~n\tH", "day");
      try { 
        MockFile.createTempFile("|UcS<~n\tH", "|UcS<~n\tH", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-272);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2742351305314137
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      int int1 = jDayChooser0.getDay();
      assertEquals(14, int1);
      
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.createVolatileImage(28, 541);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.addListeners(28);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      ParsePosition parsePosition0 = new ParsePosition(541);
      mockSimpleDateFormat0.parse("TkF~{'n1\"EZ<6|=UG", parsePosition0);
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.setYear(541);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1144257212092703
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.maxDayCharacters = 16;
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "");
      jDayChooser0.removePropertyChangeListener((PropertyChangeListener) jSpinner_NumberEditor0);
      jDayChooser0.getWeekdayForeground();
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNull(jButton0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JColorChooser jColorChooser0 = Controller.getCommonJColorChooser();
      try { 
        JColorChooser.createDialog(jDayChooser0, "t3GRs:X", true, jColorChooser0, jDayChooser0, jDayChooser0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 4;
      jDayChooser0.getToolkit();
      char char0 = '4';
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 0L, 4, 4, '4', 4);
      keyEvent0.paramString();
      jDayChooser0.keyReleased(keyEvent0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "unknown type,keyCode=4,keyText=Unknown keyCode: 0x4,keyChar='4',modifiers=Meta,extModifiers=Meta,keyLocation=KEY_LOCATION_NUMPAD,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2311377441281905
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.firePropertyChange("", (byte)51, (byte)119);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JEditorPane jEditorPane0 = new JEditorPane("VUNz',f8)E_ 7hG\"H", "");
      Insets insets0 = jEditorPane0.getMargin();
      jMonthChooser0.getInsets(insets0);
      jMonthChooser0.setVisible(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1962175022002226
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setBounds(199, 199, (-68), 11);
      jDayChooser0.setAlwaysFireDayProperty(false);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1608966978625985
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition((-566));
      Date date0 = mockSimpleDateFormat0.parse("letter-spacing", parsePosition0);
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)109;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.transferFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHeight();
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.133834698693281
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setBounds(11, 11, (-68), 11);
      jDayChooser0.setAlwaysFireDayProperty(false);
      DateFormatSymbols.getInstance();
      SystemColor systemColor0 = SystemColor.controlText;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1786.68F;
      floatArray0[1] = (float) 11;
      floatArray0[2] = 1835.8F;
      floatArray0[3] = (float) 11;
      floatArray0[4] = 0.001F;
      jDayChooser0.setDay(6);
      jDayChooser0.updateUI();
      jDayChooser0.setDay(11);
      assertEquals(11, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2757059062186116
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removePropertyChangeListener("|UcS<~n\tH", (PropertyChangeListener) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Color color0 = Color.lightGray;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1670.7F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1235.7F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.7014117E38F);
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.drawWeeks();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale0 = Locale.JAPANESE;
      jDayChooser1.setMonth((-567));
      jDayChooser1.getDayPanel();
      jDayChooser1.setForeground(color0);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-68), 11, (-3478), (-68), '5');
      keyEvent0.paramString();
      jDayChooser0.getMaxDayCharacters();
      byte[] byteArray0 = new byte[1];
      jDayChooser0.paintImmediately(318, 37, 318, (-3478));
      jDayChooser0.transferFocus();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 0, (-3478), (-68), 0, 11);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3555500445880506
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3251, 3251, (-56), (-56), '=');
      jDayChooser0.keyPressed(keyEvent0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getMaxDayCharacters();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3251;
      floatArray0[1] = (float) (-56);
      floatArray0[2] = (float) (-56);
      floatArray0[3] = (float) (-56);
      systemColor0.getRGBComponents(floatArray0);
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setSelectableDateRange(date1, date1);
      Date date2 = jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertSame(date2, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2928106548837612
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.setFocus();
      jDayChooser0.getPreferredSize();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)126;
      jDayChooser0.setMaxDayCharacters((byte)27);
      jDayChooser0.drawWeeks();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale0 = Locale.JAPANESE;
      jDayChooser1.setMonth((-2161));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4527), 4281L, 203, 17, 'p');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.setDay(2337);
      assertEquals(31, jDayChooser1.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.234539925005061
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay((-1165));
      jDayChooser0.isDecorationBackgroundVisible();
      long long0 = (-363L);
      int int0 = 383;
      char char0 = 'k';
      MenuElement[] menuElementArray0 = new MenuElement[8];
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1345674325171218
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, (-716));
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(14, jDayChooser0.getDay());
  }
}
