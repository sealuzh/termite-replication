/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:07:42 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0500343054824772
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("xeG^6nhoB(cHdwyq>");
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer1.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer1.nextToken();
      xPathLexer1.star();
      xPathLexer1.at();
      xPathLexer1.rightBracket();
      xPathLexer0.literal();
      xPathLexer1.colon();
      xPathLexer1.equals();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer1.setXPath(")");
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer("xeG^6nhoB(cHdwyq>");
      xPathLexer2.nextToken();
      xPathLexer0.getXPath();
      xPathLexer2.minus();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.pipe();
      xPathLexer0.hasMoreChars();
      xPathLexer3.identifier();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0415991634244643
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.setXPath(" C8?501.bl");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.setXPath(") (");
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.pipe();
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.146527313389201
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("xeG^6nhoB(cHdwyq>");
      xPathLexer1.pipe();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer1.at();
      assertEquals("e", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.literal();
      Token token6 = xPathLexer1.colon();
      assertEquals("G", token6.getTokenText());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer("xeG^6nhoB(cHdwyq>");
      Token token8 = xPathLexer2.nextToken();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer2.comma();
      assertEquals("^", token9.getTokenText());
      
      xPathLexer0.comma();
      xPathLexer2.relationalOperator();
      xPathLexer0.setXPath("[ofc");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer3.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals(30, token11.getTokenType());
      
      xPathLexer1.getXPath();
      Token token12 = xPathLexer1.minus();
      assertEquals("^", token12.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("L2u{5Of/9|%b");
      Token token13 = xPathLexer0.pipe();
      assertEquals("[", token13.getTokenText());
      assertEquals(17, token13.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token14 = xPathLexer1.comma();
      assertEquals(32, token14.getTokenType());
      
      Token token15 = xPathLexer4.slashes();
      assertEquals("L", token15.getTokenText());
      assertEquals(11, token15.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.012362879303961
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("(", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.literal();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("Vg{Y2&_x8");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      Token token5 = xPathLexer1.literal();
      assertNull(token5);
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token7 = xPathLexer2.comma();
      assertEquals(32, token7.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.136701856084681
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("xeG^6nhoB(cHdwyq>");
      Token token2 = xPathLexer1.pipe();
      assertEquals("x", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("e", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.literal();
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer("xeG^6nhoB(cHdwyq>");
      xPathLexer1.slashes();
      Token token10 = xPathLexer1.notEquals();
      assertEquals("6n", token10.getTokenText());
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer2.dollar();
      assertEquals("x", token11.getTokenText());
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer1.nextToken();
      assertEquals(15, token12.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('P');
      Token token13 = xPathLexer1.slashes();
      assertEquals("(", token13.getTokenText());
      assertEquals(11, token13.getTokenType());
      
      Token token14 = xPathLexer1.plus();
      assertEquals("c", token14.getTokenText());
      
      xPathLexer1.operatorName();
      Token token15 = xPathLexer0.doubleColon();
      assertEquals(19, token15.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.817772444427137
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      xPathLexer1.leftParen();
      Token token1 = xPathLexer1.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer1.or();
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer1.div();
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.star();
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer1.literal();
      assertNull(token7);
      
      xPathLexer1.colon();
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer("(;Y");
      Token token9 = xPathLexer2.nextToken();
      assertEquals("(", token9.getTokenText());
      assertEquals(1, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer3.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer1.setXPath("Z&9#+FDLX&o2GJ-");
      Token token11 = xPathLexer2.colon();
      assertEquals(";", token11.getTokenText());
      assertEquals(18, token11.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer3.getXPath();
      Token token12 = xPathLexer1.minus();
      assertEquals("Z", token12.getTokenText());
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer3.star();
      assertEquals(20, token13.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("O_/[Jx6b49(AQ>");
      Token token14 = xPathLexer3.pipe();
      assertEquals(17, token14.getTokenType());
      
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.132122975195607
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("xeG^6nhoB(cHdwyq>");
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("x", token2.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer1.at();
      assertEquals("e", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      Token token6 = xPathLexer1.colon();
      assertEquals("G", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer("xeG^6nhoB(cHdwyq>");
      xPathLexer2.nextToken();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer2.identifier();
      String string0 = token9.toString();
      assertEquals("[ (15) ()", string0);
      
      Token token10 = xPathLexer3.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.dollar();
      xPathLexer1.endPosition();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token12 = xPathLexer5.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer2.notEquals();
      assertEquals("^6", token13.getTokenText());
      assertEquals(22, token13.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer4.setPreviousToken(token11);
      Token token14 = xPathLexer0.not();
      assertEquals(23, token14.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0364663780811627
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("xeG^6nhoB(cHdwyq>");
      xPathLexer1.pipe();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer1.at();
      assertEquals("e", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer1.colon();
      assertEquals("G", token8.getTokenText());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer("xeG^6nhoB(cHdwyq>");
      Token token10 = xPathLexer2.nextToken();
      assertEquals("xeG", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("[ofc");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token11 = xPathLexer3.colon();
      assertEquals(18, token11.getTokenType());
      
      xPathLexer2.nextToken();
      xPathLexer1.getXPath();
      Token token12 = xPathLexer1.minus();
      assertEquals("^", token12.getTokenText());
      assertEquals(6, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("L2u{5Of/9|%b");
      Token token13 = xPathLexer0.pipe();
      assertEquals("[", token13.getTokenText());
      assertEquals(17, token13.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token14 = xPathLexer1.comma();
      assertEquals(32, token14.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5609159180579963
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("'SFM");
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("'", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("SF", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("M", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3165120519814497
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.star();
      xPathLexer1.at();
      xPathLexer1.rightBracket();
      xPathLexer1.minus();
      xPathLexer1.dollar();
      xPathLexer0.literal();
      xPathLexer0.isIdentifierStartChar(' ');
      xPathLexer1.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7570140792176283
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      Token token0 = xPathLexer0.minus();
      assertEquals("p", token0.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.equals();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("6", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("W", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("d", token4.getTokenText());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("D", token5.getTokenText());
      
      xPathLexer0.equals();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals(",", token6.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.equals();
      assertEquals(21, token7.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("pV[L6oW\"dDS,");
      xPathLexer2.setXPath("pV[L6oW\"dDS,");
      Token token9 = xPathLexer1.colon();
      assertEquals(18, token9.getTokenType());
      
      xPathLexer2.nextToken();
      xPathLexer2.getXPath();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token10 = xPathLexer3.minus();
      assertEquals(6, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7364836672602555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer0.at();
      xPathLexer1.rightBracket();
      xPathLexer1.literal();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      xPathLexer2.equals();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer2.comma();
      String string0 = "LR.EI\\L6&W^";
      // Undeclared exception!
      try { 
        xPathLexer2.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.687698433821183
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.pipe();
      int int0 = (-1052);
      xPathLexer0.at();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1052));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.352208396302879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("wayd.e/V$$y}16@l");
      xPathLexer1.nextToken();
      xPathLexer0.comma();
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer1.colon();
      xPathLexer1.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer("O_/[Jx6b49(AQ>");
      xPathLexer2.setXPath("Z&9#+FDLX&o2GJ-");
      xPathLexer2.pipe();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.278844067202132
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("wayd.e/V$$y}16@l");
      xPathLexer1.dots();
      xPathLexer1.nextToken();
      xPathLexer0.comma();
      xPathLexer1.whitespace();
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer1.colon();
      xPathLexer1.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer("O_/[Jx6b49(AQ>");
      xPathLexer2.pipe();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.109000094329108
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("#+FDLX&o2GJ-", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("#", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals("F", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("D", token6.getTokenText());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("L", token7.getTokenText());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer0.setXPath("Z&9#+FDLX&o2GJ-");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      Token token11 = xPathLexer0.minus();
      assertEquals("&", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      assertEquals(")", token12.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token13 = xPathLexer0.colon();
      assertEquals("9", token13.getTokenText());
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0055792435856326
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath(") (");
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      int int0 = 2228;
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      XPathLexer xPathLexer2 = new XPathLexer(" P6Khb)5");
      // Undeclared exception!
      try { 
        xPathLexer2.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7659346866249477
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.setXPath(") (");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(")", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.setXPath("LR.EIL6&W^");
      xPathLexer0.operatorName();
      xPathLexer0.setXPath(") (");
      xPathLexer0.colon();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("(", token6.getTokenText());
      
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token8 = xPathLexer1.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals(")", token8.getTokenText());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertTrue(boolean0);
      
      Token token9 = xPathLexer1.slashes();
      assertEquals(" ", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer1.colon();
      assertEquals("(", token10.getTokenText());
      assertEquals(18, token10.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0428706721015226
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.dollar();
      xPathLexer0.literal();
      xPathLexer0.isIdentifierStartChar(' ');
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1768542685175882
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("(", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.setXPath(" C8?501.bl");
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.dollar();
      assertEquals("?", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      boolean boolean0 = xPathLexer0.isIdentifierChar(',');
      assertFalse(boolean0);
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("5", token7.getTokenText());
      
      Token token8 = xPathLexer0.getPreviousToken();
      assertEquals("C8", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.consume(2049);
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar('V');
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      char char0 = xPathLexer0.LA(4226);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.022854325856435
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jriI|tqS{PB");
      xPathLexer0.nextToken();
      xPathLexer0.consume(110);
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("jriI|tqS{PB");
      xPathLexer1.leftParen();
      Token token1 = xPathLexer1.not();
      assertEquals("r", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.setXPath("1g=Qin(`?*.<uOr8Zq");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("iI", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("g", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.setXPath(")");
      xPathLexer0.operatorName();
      Token token5 = xPathLexer1.colon();
      assertEquals("|", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer2.getXPath();
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(")");
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals(")", token8.getTokenText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.040586908684341
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "[ (";
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('D');
      xPathLexer0.dots();
      int int0 = (-68);
      xPathLexer0.consume((-68));
      xPathLexer0.isIdentifierChar('4');
      xPathLexer0.getPreviousToken();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.970024905906623
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.consume((-1443));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.552475076889111
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("\"", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("@", token5.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (2) (})", string0);
      
      String string1 = token3.toString();
      assertEquals("[ (15) ()", string1);
      
      Token token6 = new Token((-226), "}l2cqw\"@E7bO", 4, 4);
      token6.toString();
      token4.toString();
      Token token7 = xPathLexer0.notEquals();
      assertEquals("E7", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.identifier();
      assertEquals("bO", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNull(token9);
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token11 = xPathLexer2.not();
      assertEquals(23, token11.getTokenType());
      
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8947875654272281
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.star();
      xPathLexer1.at();
      xPathLexer1.rightBracket();
      xPathLexer1.literal();
      xPathLexer1.colon();
      xPathLexer0.equals();
      xPathLexer1.getXPath();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1315551490719886
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("#+FDLX&o2GJ-", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("#", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("F", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals("D", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      assertEquals("L", token7.getTokenText());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer0.colon();
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.getXPath();
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      xPathLexer0.setXPath("LR.EIL6&W^");
      Token token12 = xPathLexer0.colon();
      assertEquals("L", token12.getTokenText());
      assertEquals(18, token12.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      Token token13 = xPathLexer0.minus();
      assertEquals("R", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token14 = xPathLexer1.pipe();
      assertEquals(17, token14.getTokenType());
      assertEquals("Z", token14.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.81174173511114
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.literal();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer1.slashes();
      xPathLexer0.notEquals();
      xPathLexer1.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('P');
      xPathLexer0.slashes();
      xPathLexer1.plus();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0042871559703848
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.setXPath(" C8?501.bl");
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("C8", token5.getTokenText());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("?", token6.getTokenText());
      
      xPathLexer0.setXPath("LR.EIL6&W^");
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      Token token7 = xPathLexer0.colon();
      assertEquals("R", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals(".", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("rl");
      Token token9 = xPathLexer1.at();
      assertEquals("r", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.leftBracket();
      assertEquals("l", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8690052439154181
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jriI|tqS{PB");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("jriI", token0.getTokenText());
      
      xPathLexer0.consume(110);
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.and();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.literal();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('P');
      xPathLexer0.rightBracket();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.685898934444245
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U!6k3} S'$shzR");
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.dots();
      assertEquals("U", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("!", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("6", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("3", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("}", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.slashes();
      Token token5 = xPathLexer0.colon();
      assertEquals("S", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("'", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals("$", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      xPathLexer0.operatorName();
      char char0 = xPathLexer0.LA(0);
      assertEquals('s', char0);
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals("h", token9.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('s');
      xPathLexer0.consume(0);
      xPathLexer0.operatorName();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(16, int0);
      
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('s');
      assertTrue(boolean1);
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer0.comma();
      assertEquals(32, token13.getTokenType());
      
      boolean boolean2 = xPathLexer0.isIdentifierChar('y');
      assertTrue(boolean2 == boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8813824822263905
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('Y');
      xPathLexer0.slashes();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.173499357066466
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.consume(1073);
      xPathLexer0.consume((-1));
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.setXPath("y]jad[mR3w=N");
      Token token6 = xPathLexer0.leftParen();
      assertEquals("y", token6.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("]j", token7.getTokenText());
      
      char char0 = xPathLexer0.LA(2228);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer0.pipe();
      assertEquals("a", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals("", token9.getTokenText());
      assertEquals(30, token9.getTokenType());
      
      xPathLexer0.consume();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      assertEquals("[", token10.getTokenText());
      
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1713268467416413
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("Z", token3.getTokenText());
      
      Token token4 = xPathLexer2.dollar();
      xPathLexer2.endPosition();
      XPathLexer xPathLexer3 = new XPathLexer("$'cKFk{~&0T]");
      Token token5 = xPathLexer3.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("$", token5.getTokenText());
      
      Token token6 = xPathLexer3.identifier();
      assertEquals(15, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      xPathLexer3.setPreviousToken(token4);
      Token token7 = xPathLexer3.not();
      assertEquals(23, token7.getTokenType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.290003528840736
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("c'/W");
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer2.dollar();
      xPathLexer2.endPosition();
      XPathLexer xPathLexer3 = new XPathLexer("$'cKFk{~<j9]");
      xPathLexer3.equals();
      xPathLexer3.identifier();
      xPathLexer3.setPreviousToken(token0);
      xPathLexer3.not();
      Token token1 = xPathLexer2.mod();
      assertNull(token1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2471874767289086
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("Z&", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("9", token1.getTokenText());
      
      xPathLexer0.not();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("+", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("o", token5.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.div();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("GJ-", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("c'/W");
      xPathLexer1.and();
      Token token9 = xPathLexer1.rightBracket();
      assertEquals("c", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer1.dollar();
      xPathLexer1.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer("$'cKFk{~<j9]");
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer2.identifier();
      xPathLexer2.setPreviousToken(token10);
      assertEquals("'", token10.getTokenText());
      assertEquals(26, token10.getTokenType());
      
      Token token12 = xPathLexer2.not();
      assertEquals(23, token12.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9373626859624185
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.identifier();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("7", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
      
      xPathLexer0.plus();
      xPathLexer0.equals();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.dollar();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('P');
      assertTrue(boolean0);
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.219926238712625
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token0 = xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      Token token1 = xPathLexer0.rightBracket();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      token0.toString();
      xPathLexer0.rightBracket();
      xPathLexer2.dollar();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer3 = new XPathLexer("c'/W");
      xPathLexer3.doubleColon();
      xPathLexer3.notEquals();
      xPathLexer2.identifier();
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.not();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.4875776549028377
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.not();
      xPathLexer0.minus();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.setXPath("Q9x08vhA^0F");
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar('1');
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.015748266385727
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.getPreviousToken();
      xPathLexer0.setXPath("");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8471330343584047
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("&", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("9", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("#", token4.getTokenText());
      
      xPathLexer0.setXPath("\nl](]");
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("\nl", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(4, token7.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3414018474424245
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.isIdentifierStartChar('~');
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierStartChar('~');
      xPathLexer0.colon();
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1384));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4558979066212006
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      
      Token token3 = xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (2) (})", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (15) ()", string1);
      
      Token token5 = new Token((-226), "}l2cqw\"@E7bO", 4, 4);
      token5.toString();
      token3.toString();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("E7", token6.getTokenText());
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.identifier();
      assertEquals("bO", token7.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('X');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.5235680144078203
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.isIdentifierChar('D');
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.isIdentifierChar('\"');
      xPathLexer0.getPreviousToken();
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer0.mod();
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5848490878608203
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.consume((-1261));
      xPathLexer0.getPreviousToken();
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7530198340022825
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      int int0 = (-1063);
      xPathLexer0.number();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1063));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9255965223345186
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("&", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("#+FDLX&o2GJ-", token3.getTokenText());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("#", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.pipe();
      assertEquals("+", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("F", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals("", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      char char0 = xPathLexer0.LA(15);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.consume(15);
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("vYoK<].v?c`");
      Token token9 = xPathLexer1.plus();
      assertEquals("v", token9.getTokenText());
      
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token11 = xPathLexer1.identifier();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer2.minus();
      assertEquals(6, token12.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.literal();
      Token token13 = xPathLexer2.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2444802353154434
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      char char0 = xPathLexer0.LA(46);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.setPreviousToken((Token) null);
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8172969331947326
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.plus();
      assertEquals("}", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.at();
      Token token2 = xPathLexer0.plus();
      assertEquals("b", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.dots();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.literal();
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer0.leftBracket();
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      Token token10 = xPathLexer1.rightBracket();
      assertEquals("}", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer1.identifier();
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer2.setPreviousToken(token3);
      assertEquals(32, token3.getTokenType());
      assertEquals("O", token3.getTokenText());
      
      Token token12 = xPathLexer1.not();
      assertEquals(23, token12.getTokenType());
      assertEquals("\"", token12.getTokenText());
      
      Token token13 = xPathLexer1.whitespace();
      assertEquals((-2), token13.getTokenType());
      assertEquals("", token13.getTokenText());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.067965902587373
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.54573955665599
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fSNE;7|)xsRxU,");
      Token token0 = xPathLexer0.comma();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4577245841723885
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Yy'");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.899130461652304
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y8M8[nr;$?*M@ecb4g");
      Token token0 = xPathLexer0.equals();
      assertEquals("y", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("8M8", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("[", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.4948935155004683
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("\"", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("@", token5.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (2) (})", string0);
      
      Token token6 = new Token((-226), "}l2cqw\"@E7bO", 4, 4);
      token6.toString();
      Token token7 = xPathLexer0.equals();
      assertEquals("E", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("7", token8.getTokenText());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      assertEquals("b", token9.getTokenText());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals("O", token10.getTokenText());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('P');
      assertTrue(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.2267048591813063
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.at();
      assertEquals("&", token0.getTokenText());
      
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("#", token2.getTokenText());
      
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("F", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("LX&o2GJ-", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("L", token7.getTokenText());
      
      xPathLexer0.at();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      assertEquals("&", token8.getTokenText());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      Token token13 = xPathLexer0.whitespace();
      assertEquals("", token13.getTokenText());
      assertEquals((-2), token13.getTokenType());
      
      Token token14 = xPathLexer0.dollar();
      assertEquals(26, token14.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token15 = xPathLexer0.at();
      assertEquals(16, token15.getTokenType());
      
      Token token16 = xPathLexer0.leftBracket();
      assertEquals(3, token16.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2916804635486527
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9328185567152274
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";x");
      Token token0 = xPathLexer0.plus();
      assertEquals(";", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("x", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.475107059983019
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token7);
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
  }
}
