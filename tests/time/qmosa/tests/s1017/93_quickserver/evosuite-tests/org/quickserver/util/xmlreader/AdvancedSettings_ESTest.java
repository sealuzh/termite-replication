/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:55:35 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6642876661549697
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("+/dRM<MSj95");
      advancedSettings0.setPerformancePreferencesConnectionTime((-3590));
      advancedSettings0.setBacklog(3247);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.toXML((String) null);
      advancedSettings0.toXML("+/dRM<MSj95");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("/LM'1axy");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals("/LM'1axy", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4888720057775418
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-825));
      advancedSettings0.setMaxThreadsForNioWrite((-825));
      advancedSettings0.setPerformancePreferencesLatency((-5011));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(268);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.toXML("{");
      assertEquals((-825), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.777879403271576
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      advancedSettings0.toXML("`H)Vv3");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML("");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(1);
      advancedSettings0.setBacklog(1370);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketSendBufferSize(1370);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.toXML("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>0</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>0</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>true</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class></client-socket-traffic-class>\n</advanced-settings>\n");
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(2126);
      advancedSettings0.setClientSocketTrafficClass(",5");
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(2126, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7971377304062592
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(993);
      advancedSettings0.setClientIdentifier("<advanced-settings>\n");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      advancedSettings1.getMaxThreadsForNioWrite();
      advancedSettings2.setClientSocketSendBufferSize(993);
      advancedSettings1.setMaxThreadsForNioWrite(320);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings2.getClientSocketTrafficClass();
      assertEquals(993, advancedSettings2.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.setClientSocketSendBufferSize(993);
      advancedSettings1.setMaxThreadsForNioWrite((-1));
      advancedSettings2.setPerformancePreferencesLatency(1);
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings2.setMaxThreadsForNioWrite(268);
      advancedSettings1.getMaxThreadsForNioWrite();
      advancedSettings2.setClientSocketReceiveBufferSize(5);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings2.getClientSocketSendBufferSize();
      advancedSettings1.getClientSocketTrafficClass();
      assertEquals(993, advancedSettings1.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7567169975450474
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize((-295));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-295));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(3881);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketReceiveBufferSize(1850);
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings2.getBacklog();
      advancedSettings2.getQSObjectPoolMaker();
      assertEquals(3881, advancedSettings2.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1579247678555977
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-1610));
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.setPerformancePreferencesBandwidth((-1610));
      advancedSettings1.setMaxThreadsForNioWrite(2674);
      advancedSettings0.setPerformancePreferencesLatency(2674);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize((-1610));
      advancedSettings1.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.getClientSocketTrafficClass();
      assertEquals(2674, advancedSettings1.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("J");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // J
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.927501764513189
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize((-295));
      advancedSettings0.setClientSocketTrafficClass("jJ(k)");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setClientIdentifier("</byte-buffer-size>\n");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency((-958));
      advancedSettings0.setClientIdentifier("+a<>Knjw:+C~7b:R");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(1366);
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings1.getPerformancePreferencesBandwidth();
      assertEquals(1366, advancedSettings1.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(244);
      advancedSettings0.setPerformancePreferencesConnectionTime(244);
      advancedSettings0.setByteBufferSize(1812);
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(244, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5826757067694244
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setSocketLinger((-2531));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientIdentifier("U~");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-2531));
      advancedSettings0.setClientIdentifier("</client-identifier>\n");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketSendBufferSize(1);
      String string0 = advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesLatency(766);
      advancedSettings0.setClientIdentifier(string0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3273610261779543
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesLatency((-3518));
      assertEquals((-3518), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger(1216);
      advancedSettings0.setByteBufferSize(0);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(1216, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4820675063111985
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.setClientSocketSendBufferSize(993);
      advancedSettings1.setClientIdentifier("<advanced-settings>\n");
      advancedSettings1.setClientIdentifier("$bcTTK");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings1.toXML("$bcTTK");
      assertEquals("$bcTTK", advancedSettings1.getClientIdentifier());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.5085174911499855
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.setClientSocketSendBufferSize(993);
      advancedSettings1.setClientSocketTrafficClass("'$OfYyY");
      advancedSettings1.setClientIdentifier("<advanced-settings>\n");
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientIdentifier("");
      advancedSettings2.getMaxThreadsForNioWrite();
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings1.toXML("UHL3`rZK$gk7PL");
      assertEquals("<advanced-settings>\n", advancedSettings1.getClientIdentifier());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6467142775717116
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(237);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings2.setBacklog((-3266));
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings1.getClientSocketTcpNoDelay();
      assertEquals(237, advancedSettings1.getClientSocketReceiveBufferSize());
      
      advancedSettings4.getClientSocketReceiveBufferSize();
      advancedSettings2.setCharset("");
      int int0 = advancedSettings3.getByteBufferSize();
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings1.setClientSocketReceiveBufferSize(1364);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(1056);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      advancedSettings0.getDebugNonBlockingMode();
      int int0 = advancedSettings1.getClientSocketReceiveBufferSize();
      assertEquals(1364, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(237);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(1186);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.getClientSocketTcpNoDelay();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(237, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.setClientSocketReceiveBufferSize((-470));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketTcpNoDelay(false);
      advancedSettings3.setClientSocketTcpNoDelay(true);
      advancedSettings3.setClientSocketSendBufferSize(237);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings3.getClientSocketTcpNoDelay();
      assertTrue(advancedSettings3.getClientSocketTcpNoDelay());
      
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getMaxThreadsForNioWrite();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertFalse(boolean0);
      
      advancedSettings0.setMaxThreadsForNioWrite(10);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.266952855425168
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.38615474653985
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setByteBufferSize((-920));
      advancedSettings0.setClientSocketSendBufferSize(0);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setCharset("");
      advancedSettings4.setClientSocketReceiveBufferSize((-1290));
      int int0 = advancedSettings4.getClientSocketReceiveBufferSize();
      assertEquals((-1290), int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), int0);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.7805806083556233
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("BKSk#Z&");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTrafficClass("D7\"iv=");
      advancedSettings0.setSocketLinger(2113);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketReceiveBufferSize((-1053));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("f{43ZL*f'{]Uyr%T");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setBacklog(2113);
      advancedSettings0.setByteBufferSize(2113);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency(1935);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketSendBufferSize(2113);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getSocketLinger();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(2113, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1769);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(28);
      advancedSettings1.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings1.getByteBufferSize();
      assertEquals(28, advancedSettings1.getClientSocketReceiveBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog(8);
      advancedSettings0.setClientIdentifier("");
      int int0 = advancedSettings0.getBacklog();
      assertEquals(8, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4169372058999015
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("6 %+$hbVIa|L]9X/)");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      assertEquals("6 %+$hbVIa|L]9X/)", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7971377304062592
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize(237);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setByteBufferSize(0);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings3.setBacklog(0);
      advancedSettings2.setClientSocketSendBufferSize(0);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals(237, advancedSettings0.getClientSocketReceiveBufferSize());
      
      int int0 = advancedSettings3.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3876362280213312
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketReceiveBufferSize(2881);
      advancedSettings0.setClientSocketSendBufferSize((-702));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setByteBufferSize(2881);
      advancedSettings3.setClientSocketSendBufferSize(0);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setClientSocketReceiveBufferSize(1850);
      int int0 = advancedSettings1.getClientSocketReceiveBufferSize();
      assertEquals(2881, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      
      advancedSettings0.getQSObjectPoolMaker();
      String string1 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("", string1);
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1747);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketSendBufferSize(19);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setClientSocketReceiveBufferSize(0);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(1747, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3876362280213312
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketReceiveBufferSize((-1290));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1850);
      assertEquals(1850, advancedSettings0.getClientSocketSendBufferSize());
      
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass((String) null);
      advancedSettings4.setClientSocketSendBufferSize(310);
      advancedSettings4.setClientSocketReceiveBufferSize((-1290));
      int int0 = advancedSettings1.getClientSocketReceiveBufferSize();
      assertEquals((-1290), int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("B!3dv|XEnpYc 0yF#(");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // B!3dv|XEnpYc 0yF#(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setPerformancePreferencesBandwidth((-1292));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.setClientSocketSendBufferSize(993);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings2.setClientSocketTcpNoDelay(true);
      advancedSettings3.setClientSocketSendBufferSize(326);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings3.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings1.getByteBufferSize();
      assertEquals(993, advancedSettings1.getClientSocketSendBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setUseDirectByteBuffer(true);
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      int int1 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertTrue(int1 == int0);
      
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("m -Z@F>mm6a^+.G{$");
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("m -Z@F>mm6a^+.G{$", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }
}
