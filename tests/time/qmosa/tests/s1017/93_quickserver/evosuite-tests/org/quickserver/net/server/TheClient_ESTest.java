/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:54:42 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketOption;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3787438509194208
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("wR");
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getMaxAuthTry();
      theClient0.getTimeout();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.toString();
      theClient0.getTimeoutMsg();
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxAuthTry((-5));
      theClient0.getTrusted();
      theClient0.getMaxAuthTry();
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis((-5));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{TheClient ");
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      TheClient theClient1 = new TheClient();
      theClient1.setClientEventHandler(commandHandler0);
      TheClient theClient2 = new TheClient();
      theClient2.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient2.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      TheClient theClient3 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient3.setClientAuthenticationHandler(authenticator0);
      QuickServer quickServer0 = new QuickServer("{TheClient ");
      theClient2.setServer(quickServer0);
      theClient3.setMaxAuthTryMsg("{TheClient ");
      theClient1.getAuthenticator();
      theClient3.setAuthenticator((Authenticator) null);
      theClient1.getClientEventHandler();
      theClient2.setMaxAuthTryMsg("99,%dz0");
      theClient0.getClientObjectHandler();
      theClient3.setCommunicationLogging(true);
      theClient2.getClientBinaryHandler();
      theClient3.getClientAuthenticationHandler();
      assertTrue(theClient3.getCommunicationLogging());
      
      theClient2.getClientAuthenticationHandler();
      assertFalse(theClient2.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      QuickServer quickServer0 = new QuickServer("", 0);
      quickServer0.getQSAdminServer();
      theClient0.setServer(quickServer0);
      theClient0.getClientEvent();
      theClient0.setTimeoutMsg("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientEvent();
      theClient0.getSocket();
      theClient0.setMaxAuthTryMsg("I5<D$^;;k4G?-,'A");
      theClient0.getSocketChannel();
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientWriteHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler(commandHandler0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientEventHandler();
      theClient0.getMaxConnectionMsg();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V(HNr8=FP!pV4");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V(HNr8=FP!pV4");
      theClient0.getSocketChannel();
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.323779381792065
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setMaxConnectionMsg("o");
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientEventHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getMaxAuthTry();
      theClient0.getSocket();
      theClient0.getClientEvent();
      theClient0.getAuthenticator();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setSocket((Socket) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.setMaxAuthTry(1024);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(1024, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.toString();
      theClient0.setMaxAuthTry((-2783));
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEventHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      assertEquals((-2783), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.193764486816496
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:8>", blockingClientHandler0.getName());
      
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      theClient0.getClientAuthenticationHandler();
      theClient0.setCommunicationLogging(true);
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getClientData();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.toString();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getClientObjectHandler();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      assertEquals("<ClientHandler-Pool#-1-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientData((ClientData) null);
      theClient0.setClientData((ClientData) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTimeoutMsg();
      Data data0 = new Data();
      data0.setLastAsked((String) null);
      theClient0.setClientData(data0);
      QuickServer quickServer0 = new QuickServer();
      theClient0.setCommunicationLogging(false);
      theClient0.getAuthenticator();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      TheClient theClient0 = new TheClient();
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxConnectionMsg(", Event: ");
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(5149);
      nonBlockingClientHandler0.getSocketChannel();
      assertEquals("<ClientHandler-Pool#5149-ID:1>", nonBlockingClientHandler0.getName());
      
      theClient0.setSocketChannel((SocketChannel) null);
      TheClient theClient1 = new TheClient();
      theClient1.getSocket();
      theClient0.setSocket((Socket) null);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("canp|");
      theClient0.getTimeoutMsg();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 1052);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@44543027
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1952296882816973
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeout(16);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getMaxAuthTry();
      theClient0.getTimeout();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      boolean boolean0 = theClient0.getTrusted();
      assertEquals(16, theClient0.getTimeout());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setTimeout((-4217));
      theClient0.setMaxConnectionMsg("");
      theClient0.getTimeout();
      QuickServer quickServer0 = new QuickServer("Authentication done ");
      quickServer0.setConsoleLoggingToMini();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      assertEquals((-4217), theClient0.getTimeout());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setTimeout((-4217));
      theClient0.setMaxConnectionMsg("");
      theClient0.getTimeout();
      QuickServer quickServer0 = new QuickServer("Authentication done ");
      quickServer0.setServerBanner("Authentication done ");
      quickServer0.setRawCommunicationLogging(true);
      quickServer0.setConsoleLoggingToMini();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getTrusted();
      System.setCurrentTimeMillis((-2410L));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler((-834));
      nonBlockingClientHandler0.getSocketChannel();
      assertEquals("<ClientHandler-Pool#-834-ID:1>", nonBlockingClientHandler0.getName());
      
      theClient0.setSocketChannel((SocketChannel) null);
      TheClient theClient1 = new TheClient();
      QuickServer quickServer0 = new QuickServer("f/)@0>~\"");
      theClient1.setServer(quickServer0);
      theClient0.getSocket();
      theClient0.setSocket((Socket) null);
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxAuthTryMsg("wR");
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEventHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setTimeout(0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientEventHandler();
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(0);
      theClient0.setMaxAuthTryMsg("k8}WuGAQeqAYL;Im,");
      theClient0.getTrusted();
      theClient0.getCommunicationLogging();
      theClient0.setTimeout((-10));
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTrusted(true);
      theClient0.getMaxAuthTryMsg();
      SocketChannel socketChannel0 = SocketChannel.open();
      SocketOption<Object> socketOption0 = (SocketOption<Object>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(socketOption0).toString();
      // Undeclared exception!
      try { 
        socketChannel0.getOption(socketOption0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEventHandler();
      // Undeclared exception!
      try { 
        QuickServer.load((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientEvent();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("/client-object-handler", 5);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byteArray0[2] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
