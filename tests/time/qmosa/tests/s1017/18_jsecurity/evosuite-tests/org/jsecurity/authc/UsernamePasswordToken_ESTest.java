/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:48:37 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("{", "BPLB?k*", true, inetAddress0);
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.toString();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - {, rememberMe=true (/0.0.0.0)", string0);
      
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0089';
      charArray0[1] = ']';
      charArray0[2] = '9';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null);
      usernamePasswordToken0.setUsername("");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Eze!tWf[-", (String) null, false, (InetAddress) null);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress1 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'g';
      charArray0[2] = 'n';
      charArray0[3] = 'O';
      charArray0[4] = 'g';
      charArray0[5] = 'n';
      charArray0[6] = ' ';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Eze!tWf[-", charArray0, inetAddress1);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("Eze!tWf[-", (String) null, inetAddress0);
      usernamePasswordToken1.clear();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("S", (String) null, true);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setRememberMe(true);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("q(qH/M!Et", "q(qH/M!Et", inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = ']';
      charArray0[2] = ']';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setPassword(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'r';
      charArray1[1] = '7';
      charArray1[2] = '7';
      charArray1[3] = '7';
      charArray1[4] = ']';
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("}2g~?i(.BI", charArray1, false);
      usernamePasswordToken1.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("z)sYzt!5pB&*$W", "");
      usernamePasswordToken0.getPassword();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[1] = 'n';
      charArray0[2] = 'O';
      charArray0[3] = 'g';
      charArray0[4] = ' ';
      charArray0[5] = 's';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Eze!tWf[-", charArray0, true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "");
      usernamePasswordToken0.toString();
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 'W';
      charArray0[2] = '&';
      charArray0[3] = '8';
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.isRememberMe();
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'l';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K7tf_34B,SKAxXz4u", charArray0);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5782737395252497
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'v';
      charArray0[1] = 'l';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K7tf_34B,SKAxXz4u", ", rememberMe=", true);
      char[] charArray1 = new char[4];
      charArray1[0] = 'v';
      charArray1[1] = 'v';
      charArray1[2] = 'l';
      charArray1[3] = 'l';
      usernamePasswordToken0.setPassword(charArray1);
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken(", rememberMe=", ", rememberMe=", true);
      assertTrue(usernamePasswordToken1.isRememberMe());
      
      usernamePasswordToken1.clear();
      usernamePasswordToken0.setUsername("K7tf_34B,SKAxXz4u");
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken1.getPrincipal();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'l';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K7tf_34B,SKAxXz4u", charArray0);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'n';
      charArray0[2] = 'O';
      charArray0[3] = 'n';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "h<k(vpV~vP+AERE");
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'n';
      charArray0[2] = 'O';
      charArray0[3] = 'n';
      charArray0[4] = ' ';
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Eze!tWf[-", charArray0, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - Eze!tWf[-, rememberMe=false (/127.0.0.1)", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("q(qH/M!Et", "q(qH/M!Et", inetAddress0);
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'n';
      charArray0[3] = 'g';
      charArray0[4] = ' ';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'n';
      charArray0[2] = 'O';
      charArray0[3] = 'g';
      charArray0[4] = ' ';
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Eze!tWf[-", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("z)sYzt!5pB&*$W", "");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.setInetAddress(inetAddress1);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'n';
      charArray0[2] = 'O';
      charArray0[3] = 'g';
      charArray0[4] = ' ';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true, inetAddress0);
      usernamePasswordToken0.getUsername();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[8];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("axi6'2 qz5q%", "", false);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setUsername("km) Qc|=w;rn#aV");
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", "");
      usernamePasswordToken1.getCredentials();
      usernamePasswordToken1.getPrincipal();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = '(';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", false);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "");
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'B';
      charArray0[2] = 'Z';
      charArray0[3] = 'e';
      charArray0[4] = 'A';
      usernamePasswordToken0.setPassword(charArray0);
      char[] charArray1 = new char[3];
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", charArray1);
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      charArray0[3] = '#';
      charArray0[4] = '0';
      charArray0[5] = '-';
      charArray0[6] = '=';
      charArray0[7] = '9';
      charArray0[8] = '';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'l';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K7tf_34B,SKAxXz4u", charArray0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - K7tf_34B,SKAxXz4u, rememberMe=false", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'I';
      charArray0[2] = '*';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("43c+ OGF5%qTY ", charArray0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - 43c+ OGF5%qTY , rememberMe=false", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Eze!tWf[-", "Eze!tWf[-", false, inetAddress0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'n';
      charArray0[2] = 'O';
      charArray0[3] = 'g';
      charArray0[4] = ' ';
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Eze!tWf[-", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'l';
      charArray0[2] = '9';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("K7tf_34B,SKAxXz4u", charArray0);
      usernamePasswordToken0.setUsername("");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.toString();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
  }
}
