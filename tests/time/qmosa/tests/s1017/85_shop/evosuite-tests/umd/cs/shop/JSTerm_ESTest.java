/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 04:37:57 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isGround();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.isFunction();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSSubstitution0.removeIf((Predicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSSubstitution1.standarizerSubs();
      jSPredicateForm0.add((Object) jSSubstitution1);
      jSPredicateForm0.add((Object) jSSubstitution2);
      jSTerm0.removeElement(jSSubstitution1);
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9328065726143309
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 33;
      jSTerm0.add((Object) unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm1.toStr();
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/997748920 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.add((Object) "N4}UNgomz");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm1.add((Object) null);
      jSPredicateForm0.add((Object) "N4}UNgomz");
      jSPredicateForm0.add((Object) null);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addAll((Collection) jSPredicateForm1);
      jSTerm0.remove(1);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.iterator();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.clone();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5633201557253322
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 33;
      jSTerm0.add((Object) unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution0.fail());
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(65, stringBuffer0.length());
      
      jSTerm0.print();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      
      JSTerm jSTerm4 = jSTerm0.call();
      assertTrue(jSTerm4.isFunction());
      
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm5, jSTerm0);
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.25731864054383163
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(00GE)R%R7yht");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4258484492385814
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      StringReader stringReader0 = new StringReader("(aPd6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2592160997698714
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "j");
      jSTerm0.toStr();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(j )", stringBuffer0.toString());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution1.fail());
      
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertTrue(jSTerm2.isFunction());
      
      JSTerm jSTerm3 = jSTerm1.call();
      assertEquals(10, jSTerm3.capacity());
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm1, jSTerm3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.154783153373369
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zJJVr");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2));
      stringReader0.ready();
      jSTerm0.trimToSize();
      jSTerm0.remove((Object) "zJJVr");
      jSTerm0.print();
      jSTerm0.isVariable();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm3.print();
      jSTerm3.matches(jSTerm1, jSSubstitution0);
      jSTerm0.call();
      System.setCurrentTimeMillis(153L);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.045576462153323
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("*km(R*+[}");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("*km(R*+[}");
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.leftBrac = 2642;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.removeElement(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isGround();
      StringReader stringReader2 = new StringReader("Predicateform.print(): 0 elements");
      StringReader stringReader3 = new StringReader("JSUtil>>stringTokenizer is returning %%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      jSTerm2.parseList(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.309632530938063
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) jSPredicateForm0;
      StringReader stringReader0 = new StringReader("E&#Z- nWZHt\"");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.backquote = (-3);
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.greaterT = 301;
      jSSubstitution0.add(objectArray0[1]);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.slashStarComments(true);
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      stringReader0.close();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSJshopVars.percent = (-268);
      jSTerm2.matches(jSTerm1);
      jSTerm0.call();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm3.cloneT();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSPredicateForm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm0);
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2015118659867245
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      streamTokenizer0.wordChars((-225), (-225));
      jSTerm1.equals(jSTerm2);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "j<");
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator1);
      jSTerm0.isVariable();
      jSTerm0.toStr();
      jSTerm0.makeVariable();
      jSTerm0.print();
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      JSJshopVars.minus = 3275;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1904890967623043
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) jSPredicateForm0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "j<");
      jSPredicateForm0.toStr();
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSJshopVars.apostrophe = 96;
      jSTerm0.equals(jSTerm0);
      jSTerm0.standardizerTerm();
      JSJshopVars.semicolon = (-1632);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "= ");
      jSSubstitution0.iterator();
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSPredicateForm0);
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0316900029887046
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "j<");
      jSPredicateForm0.toStr();
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.apostrophe = 96;
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.add((Object) jSTerm1);
      jSTerm1.cloneT();
      assertTrue(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSPredicateForm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4735023850806486
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("I\u0004ra");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) unaryOperator0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.listIterator();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(boolean0);
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "= ");
      jSSubstitution0.iterator();
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.clone();
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution3);
      assertTrue(jSTerm0.isEval());
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0316900029887046
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "= ");
      jSSubstitution0.iterator();
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.clone();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution3);
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution0);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = 1;
      jSSubstitution0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSPredicateForm0);
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8288411561741995
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 33;
      jSTerm0.add((Object) unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      assertFalse(jSTerm1.isVariable());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1682824501765625
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" %25I");
      StringReader stringReader1 = new StringReader(" %25I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("A");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StringReader stringReader3 = new StringReader("+ ");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9404479886553264
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSPredicateForm0);
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.isGround();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8735105206455303
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1p,~I");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertNotNull(jSSubstitution0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.sort(comparator0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.399570528835303
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Fot+OwTzId|%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.8486855577264172
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("k<?us;9S>O3$B");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0751393240053733
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(^QHfg(3Z>_}z\"NCV'.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StringReader stringReader1 = new StringReader("call");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("HIR");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "j<");
      jSTerm0.makeEval(false);
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = (-2722);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.stream();
      jSTerm0.equals(jSTerm1);
      String string0 = null;
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.798652206252129
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      jSSubstitution1.removeAll(jSPredicateForm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.makeVariable();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.call();
      Object object0 = new Object();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8711604142318066
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(^QHfg(3Z>_}z\"NCV'.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      stringReader0.read(charArray0);
      streamTokenizer0.nextToken();
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("(^QHfg(3Z>_}z\"NCV'.");
      stringReader1.mark(94);
      streamTokenizer0.ordinaryChars(94, 94);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals(1, jSTerm1.size());
      
      jSTerm1.removeAllElements();
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      assertNotSame(jSTerm4, jSTerm3);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      StringReader stringReader0 = new StringReader("7;v>!(}eh(+O");
      StringReader stringReader1 = new StringReader("7;v>!(}eh(+O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isConstant());
      
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertEquals("[7.0]", jSTerm1.toString());
      assertTrue(jSTerm3.isConstant());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm3, jSTerm1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.standarizerSubs();
      jSPredicateForm0.add((Object) jSSubstitution1);
      jSTerm0.removeElement(jSSubstitution1);
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals(9, stringBuffer0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isConstant();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSSubstitution1.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSSubstitution0.set(41, jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 41
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.isConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      String string0 = "!/6y9I>uOJ$Hq|<U#=";
      StringReader stringReader0 = new StringReader("!/6y9I>uOJ$Hq|<U#=");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("*km(R*'4}");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("apd6");
      StringReader stringReader2 = new StringReader("rE<<gFBE{( E%}\"]Z5>");
      StringReader stringReader3 = new StringReader("Glu_yLvx");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      StringReader stringReader4 = new StringReader("apd6");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
      streamTokenizer3.quoteChar((-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) jSPredicateForm0;
      StringReader stringReader0 = new StringReader("");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sV1O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.commentChar(880);
      streamTokenizer0.nextToken();
      jSTerm0.clonePF();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeElement(jSTerm0);
      int int0 = (-2622);
      JSJshopVars.plus = (-2622);
      JSJshopVars.verticalL = 59;
      jSTerm0.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.077101574886211
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends JSSubstitution>) function0);
      UnaryOperator.identity();
      JSJshopVars.astherisk = 33;
      jSTerm0.add((Object) unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(3);
      StringReader stringReader1 = new StringReader("%%%");
      StringReader stringReader2 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      StringReader stringReader3 = new StringReader("( ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(^QHfg(3Z>_}z\"NCV'.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StringReader stringReader1 = new StringReader("(^QHfg(3Z>_}z\"NCV'.");
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6188490916819118
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution0.add((Object) jSTerm1);
      StringReader stringReader0 = new StringReader("o::v@D<}d!z5]G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.or(predicate1);
      Predicate<String> predicate3 = predicate2.and(predicate0);
      jSTerm0.removeIf(predicate3);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSPredicateForm0);
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      jSTerm0.call();
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      JSJshopVars.apostrophe = 124;
      jSTerm0.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("*km(R*'4}");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("apd6");
      StringReader stringReader2 = new StringReader("rE<<gFBE{( E%}\"]Z5>");
      StringReader stringReader3 = new StringReader("Glu_yLvx");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      StringReader stringReader4 = new StringReader("apd6");
      stringReader3.read();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
      streamTokenizer3.quoteChar((-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[0];
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "$@ N)g~Y:-";
      StringReader stringReader0 = new StringReader("$@ N)g~Y:-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("*km(R*+[}");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("*km(R*+[}");
      StringReader stringReader2 = new StringReader("A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StringReader stringReader3 = new StringReader("PH7DpL;#`wxZ8Y0E0E");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
