/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:07:40 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.175139680561415
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "in";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("in", jSONArray0);
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.067817176381356
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[5] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject0 = new JSONObject((Object) "fo");
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(20L);
      hashMap0.values();
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double0, biFunction0);
      jSONObject0.remove("(^9EnSH5C'o?BR:B");
      String string0 = JSONObject.doubleToString((-2270.105602060791));
      assertEquals("-2270.105602060791", string0);
      
      jSONObject0.optJSONArray("($e+\"_]H}y85");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.592117133040502
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.optInt("K8%vO0$|w", 8192);
      JSONObject.valueToString(jSONObject0);
      Boolean boolean1 = new Boolean(true);
      Boolean.logicalOr(true, true);
      String string0 = null;
      jSONObject0.opt((String) null);
      jSONObject0.optDouble("cop");
      jSONObject0.optString((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4622817612135615
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "zgH)j?z[(TN813t%B8";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("zgH)j?z[(TN813t%B8", "in");
      StringWriter stringWriter0 = new StringWriter(10);
      jSONObject0.write(stringWriter0);
      jSONObject1.toString();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.787817513762175
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      StringWriter stringWriter0 = new StringWriter(10);
      JSONObject jSONObject1 = new JSONObject((Object) "fo");
      Writer writer0 = jSONObject1.write(stringWriter0);
      jSONObject1.toString();
      Writer writer1 = jSONObject0.write(writer0);
      jSONObject1.write(writer1);
      jSONObject1.optString("");
      JSONObject.doubleToString(10);
      JSONObject jSONObject2 = new JSONObject(writer0);
      try { 
        jSONObject2.getInt("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.772515951263843
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      jSONObject0.put("fo", (Map) hashMap0);
      Float float0 = new Float(0.0);
      JSONObject.getNames((Object) float0);
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      jSONObject0.optBoolean("issum");
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject1 = new JSONObject((Object) "fo");
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(20L);
      hashMap1.values();
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.merge(jSONObject1, double0, biFunction0);
      jSONObject1.remove("(^9EnSH5C'o?BR:B");
      jSONObject0.optDouble("9%y6j)");
      JSONObject.doubleToString((-2270.105602060791));
      jSONObject0.isNull("fo");
      try { 
        jSONObject0.getBoolean("g/{'<Z&RODT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g/{'<Z&RODT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.735144190157799
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      jSONObject0.put("fo", true);
      JSONObject.valueToString("fo");
      jSONObject0.toString((-583), (-583));
      Integer integer0 = new Integer((-583));
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate("fo", "+");
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("fo");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5170476314241528
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long((-2110L));
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte0 = new Byte((byte)9);
      Float float0 = new Float((float) (-2110L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      Long.getLong("Z(", (long) (byte)9);
      Short short0 = new Short((short)26009);
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float1 = new Float((float) (byte)9);
      Short short1 = new Short((short)69);
      hashMap1.put(float1, short1);
      Float float2 = new Float((float) (short)674);
      hashMap1.put(float0, short0);
      String string0 = "\\u";
      boolean boolean0 = jSONObject0.optBoolean(string0);
      assertFalse(boolean0);
      
      long long1 = jSONObject0.optLong("_/clz%n~", (long) (byte)9);
      assertEquals(9L, long1);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4440053481309523
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      jSONObject0.put("fo", true);
      jSONObject0.toString((-595), (-595));
      try { 
        jSONObject0.getLong("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fo\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063468058689193
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1.1177881601158206);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      Double.max(0.0, 1.1177881601158206);
      hashMap0.put(jSONObject0, double0);
      Double double2 = hashMap0.put(jSONObject0, double0);
      Double.max(1428.1697892, 1428.1697892);
      jSONObject0.optInt("V$l>woPJ;tYE");
      hashMap0.put(jSONObject0, double1);
      BiFunction<Double, Double, Double> biFunction1 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyDouble() , anyDouble());
      hashMap0.merge(jSONObject0, double2, biFunction1);
      jSONObject0.remove("\n");
      jSONObject0.optDouble("\n");
      JSONObject.quote("\n");
      jSONObject0.isNull("{s9VBxF9r/p:w?wR");
      jSONObject0.optInt("-y@R9<&$)]dj*~?Zz", 1838);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-y@R9<&$)]dj*~?Zz", 0, 1838);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.778463153879759
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      boolean boolean0 = jSONObject0.optBoolean("issum");
      assertFalse(boolean0);
      
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject1 = new JSONObject((Object) "fo");
      Long.getLong("fo");
      Float float0 = new Float((float) (short)20);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      Short short0 = new Short((short)1);
      jSONObject2.accumulate("\"9OU!A0Oz", short0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7103224915802646
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      jSONObject0.optBoolean("issum");
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject1 = new JSONObject((Object) "fo");
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(20L);
      hashMap0.values();
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject1, double0, biFunction0);
      jSONObject1.remove("(^9EnSH5C'o?BR:B");
      jSONObject0.optDouble("9%y6j)");
      Double.sum(1.0, 20L);
      String string0 = JSONObject.doubleToString((-2270.105602060791));
      jSONObject0.isNull("fo");
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.885735191267023
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      Double.max(0.0, 0.0);
      hashMap0.put(jSONObject0, double0);
      hashMap0.put(jSONObject0, double0);
      Long long0 = new Long(0L);
      Short short0 = new Short((short) (-102));
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float0 = new Float((float) (short)0);
      Short short1 = new Short((short) (-1046));
      Float float1 = new Float(0.0F);
      hashMap1.put(float1, (Short) null);
      jSONObject0.optLong("xj$/Xt'wib", 0L);
      JSONObject jSONObject1 = jSONObject0.put("K/>n", (double) (short) (-102));
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7625252009933052
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject.getNames((Object) short0);
      JSONObject jSONObject0 = new JSONObject((Object) ")vx%");
      Object object0 = new Object();
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject1 = new JSONObject(double0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject1.optInt((String) null, (int) (short)0);
      jSONObject1.optInt("=y:()~<xD{_+A=`", 244);
      JSONObject.valueToString(boolean0);
      Boolean boolean1 = new Boolean(false);
      Boolean.logicalOr(true, true);
      jSONObject0.opt("isformat");
      jSONObject0.optDouble(")vx%");
      jSONObject1.optBoolean("java.lang.Boolean@0000000026", false);
      jSONObject0.optString("VnX49ma+4bRq[NU");
      try { 
        jSONObject1.getDouble("getjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjoin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7154752360723684
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject0.optInt("{$%^+DhUGK6?\"-OwaG", 1);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      jSONObject0.opt("p@#[pV[K-<<[2sI5e");
      jSONObject1.optDouble("p@#[pV[K-<<[2sI5e");
      jSONObject0.optBoolean((String) null, true);
      jSONObject1.optString((String) null);
      try { 
        jSONObject1.getDouble("0N6E!]I'j1*Lyq<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0N6E!]I'j1*Lyq<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5423397186502052
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      jSONObject0.optBoolean("issum");
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject1 = new JSONObject((Object) "fo");
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(20L);
      hashMap0.values();
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject1, double0, biFunction0);
      jSONObject1.remove("(^9EnSH5C'o?BR:B");
      jSONObject0.optDouble("9%y6j)");
      JSONObject.doubleToString((-2270.105602060791));
      jSONObject0.isNull("fo");
      try { 
        jSONObject0.getBoolean("g/{'<Z&RODT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g/{'<Z&RODT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7644873003668837
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      Boolean.compare(true, true);
      Boolean.valueOf(true);
      jSONObject0.remove("ZC67&ognNI");
      jSONObject0.names();
      Long.getLong(",", (long) (-2541));
      Short.toUnsignedLong((short)674);
      Long.getLong("r?-@Mo|J@@%/zQn");
      Float float0 = new Float(1.0F);
      JSONObject jSONObject2 = jSONObject0.accumulate("istoString", float0);
      jSONObject2.put("r?-@Mo|J@@%/zQn", (long) 0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9981342568771616
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      boolean boolean1 = new Boolean("null");
      Boolean.compare(false, true);
      Boolean.valueOf(true);
      hashMap0.put("x$wEOFpl!0xvv?@", jSONObject1);
      jSONObject0.remove("ZC671ognNI");
      jSONObject0.names();
      Long.getLong("p@#[pV[K-<<[2sI5e", (long) (-2541));
      Long.getLong("r?-@Mo|J@@%/zQn");
      Float float0 = new Float(1.0F);
      jSONObject0.accumulate("istoString", float0);
      jSONObject0.toString();
      boolean boolean2 = jSONObject1.isNull("p@#[pV[K-<<[2sI5e");
      assertEquals(2, jSONObject1.length());
      assertTrue(boolean2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1110942732940394
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "in";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("in", jSONArray0);
      JSONObject jSONObject2 = new JSONObject();
      String string1 = null;
      boolean boolean0 = false;
      try { 
        jSONObject1.getInt("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"in\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.244150087871139
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      Boolean.compare(true, true);
      Boolean boolean1 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean1, (-2541), 0);
      jSONObject0.optDouble("lZ]4?,i@Qw$&?ReS)#n");
      jSONObject1.length();
      jSONObject1.optBoolean("java.lang.Boolean@0000000004");
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject2 = jSONObject1.put("9ffy>w2W7", 123);
      Short.compare((short)865, (short)865);
      jSONObject2.toString((-1359), (-2427));
      jSONObject1.optDouble("p@#[pV[K-<<[2sI5e");
      jSONObject1.optString("lZ]4?,i@Qw$&?ReS)#n");
      jSONObject0.getDouble("9ffy>w2W7");
      jSONObject1.put("java.lang.Boolean@0000000004", false);
      JSONObject jSONObject3 = jSONObject0.put("9ffy>w2W7", true);
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("?Cn(oX<|--vEHo.`");
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject.valueToString((Object) null);
      Short.toUnsignedLong((short)5);
      Long.getLong("wheel.json.JSONArray");
      Short short0 = new Short((short)5);
      assertEquals((short)5, (short)short0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3655208273649397
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("[g;NeIwHWiW,5dgxA", (Collection) linkedList0);
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject0.put("fo", (Object) jSONObject1);
      Short short0 = new Short((short) (-639));
      Short short1 = new Short((short)2705);
      Short.toUnsignedInt((short)2705);
      JSONObject.valueToString(short1);
      Long.getLong("b5F;0zH~{M_z!9mP;.");
      try { 
        jSONObject0.getString("MjTZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MjTZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.958956864947583
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1458), 46);
      jSONObject0.toString(46, 2535);
      jSONObject0.opt("{}");
      jSONObject0.optDouble("{}");
      String string0 = "j;U4&+|GFn+d(6";
      jSONObject0.optString("{}");
      try { 
        jSONObject0.getDouble("WApBE}<,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WApBE}<,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.988440840493711
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", (double) (-2172));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      jSONObject1.optBoolean("\"java.lang.Object@0000000001\"");
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject3 = jSONObject0.put("[java.lang.Long@0000000007]", 44);
      Short.compare((short)20, (short)20);
      jSONObject1.toString((-2427), (-1201));
      jSONObject2.optDouble("getcompareTo");
      try { 
        jSONObject3.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.723883562225886
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      jSONObject0.optBoolean("issum");
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject1 = new JSONObject((Object) "fo");
      Short.compare((short)20, (short) (-1747));
      jSONObject1.toString(44, (int) (short) (-1747));
      jSONObject0.optString("fo");
      try { 
        jSONObject1.getDouble("gv/{,)`WgP5d!Y|;B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gv/{,)`WgP5d!Y|;B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4184650060354542
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 46, (-1458));
      jSONObject0.toString((-1458), 46);
      JSONObject jSONObject1 = new JSONObject("{}");
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject", (-2221.910443595287));
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.735165041655396
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString((Object) null, 46, (-1458));
      String string0 = jSONObject0.toString((-1458), 46);
      jSONObject0.remove("null");
      jSONObject0.toString(2174, 2535);
      jSONObject0.opt("{}");
      jSONObject0.toString((-2807), (-4785));
      String string1 = JSONObject.valueToString("{}", (-1458), 414);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.649839766857693
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject.quote("q$:i;0@O< gG+ZPb");
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)2314);
      JSONObject jSONObject1 = new JSONObject(short0);
      Boolean.compare(false, false);
      String string0 = "isput";
      jSONObject1.optInt("isput");
      jSONObject1.optString("$V>4vP{1 5{c");
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put("$V>4vP{1 5{c", jSONArray0);
      jSONObject1.put(".", (-1L));
      JSONTokener jSONTokener0 = new JSONTokener("^\"oK33+L6Ba)");
      JSONArray jSONArray1 = new JSONArray();
      hashMap0.put("?Jq.]0P=\"\"Zj", jSONArray1);
      jSONObject1.put("$V>4vP{1 5{c", (Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.putOpt("[3o|7?Cl.sHWB", jSONObject0);
      JSONTokener jSONTokener1 = new JSONTokener("7Nxc'/W8FTBVF");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 7Nxc'/W8FTBVF
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.647987924773634
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 46, (-1469));
      jSONObject0.toString((-1469), 46);
      jSONObject0.remove("{}");
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put("Ra Uz<9(!~}nHG6Z}&U", jSONArray0);
      HashMap<Long, JSONObject> hashMap1 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap1);
      Boolean boolean0 = Boolean.TRUE;
      Long long0 = Long.getLong("low", (-1L));
      jSONObject1.putOpt("{}", long0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.565394837118028
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 1849L;
      Long long1 = new Long(1849L);
      JSONObject.numberToString(long1);
      JSONTokener jSONTokener0 = new JSONTokener("?Cn(oX<|--vEHo.`");
      byte byte0 = (byte)9;
      Double double0 = new Double(1849L);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = (-2110L);
      Long long1 = new Long((-2110L));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{D;Npo]o0";
      jSONObject0.remove("{D;Npo]o0");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames(jSONObject0);
      JSONTokener jSONTokener0 = new JSONTokener("{D;Npo]o0");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {D;Npo]o0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8304719354133145
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-2187);
      JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "isdecode";
      jSONObject0.isNull("isdecode");
      String string1 = null;
      try { 
        jSONObject0.put((String) null, (long) (-2187));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1578636992307407
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("fo", (Object) jSONObject1);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      jSONObject0.optLong("Substring bounds error", (-532L));
      Short.toUnsignedLong((short)674);
      Long.getLong("");
      JSONObject jSONObject3 = jSONObject1.accumulate("fo", "fo");
      assertFalse(jSONObject3.equals((Object)jSONObject2));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4745821161672197
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (-573L));
      JSONObject jSONObject2 = jSONObject0.put("gettoString", 1791.2088);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.put((-1683L));
      JSONObject.valueToString(linkedList0, (-1458), (-1579));
      jSONObject0.optDouble("YvPZ:Yt");
      jSONObject2.length();
      jSONObject1.optDouble("for", (-1306.1780912533));
      jSONObject0.has("[]");
      try { 
        jSONObject0.getString("isreplaceFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreplaceFirst\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0626018188496142
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      jSONObject0.append("] not found.", jSONArray1);
      Boolean boolean0 = new Boolean(true);
      jSONObject0.optLong((String) null);
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject3 = jSONObject0.put("[java.lang.Long@0000000007]", 44);
      Short.compare((short)20, (short)20);
      jSONObject1.toString((-2427), (-1201));
      jSONObject2.optDouble("getcompareTo");
      jSONObject0.optString("[java.lang.Long@0000000007]");
      try { 
        jSONObject3.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.654742337250047
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      int int0 = new Integer(0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(true, true);
      Boolean.compare(true, true);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.append("null", jSONObject1);
      jSONObject2.toString(34, 47);
      try { 
        jSONObject1.getLong("getmax");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getmax\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Short short0 = new Short((short)814);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "#-<o8%X8s!R";
      stringArray0[3] = "#-<o8%X8s!R";
      stringArray0[4] = "";
      stringArray0[5] = "#-<o8%X8s!R";
      stringArray0[6] = "#-<o8%X8s!R";
      stringArray0[7] = "";
      stringArray0[8] = "\b";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "[\n";
      JSONTokener jSONTokener0 = new JSONTokener("[\n");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of [
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.831673301904631
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\b";
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-838));
      jSONObject0.put("+", (Object) null);
      stringArray0[3] = "c^;_o{3t`OAX";
      double double0 = jSONObject0.optDouble("null");
      assertEquals(Double.NaN, double0, 0.01);
      
      stringArray0[5] = "#-<o8%X8s!R";
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2117672146108034
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      Double.max(0.0, 0.0);
      hashMap0.put(jSONObject0, double0);
      Double double2 = hashMap0.put(jSONObject0, double0);
      Double.max(1428.1697892, 1428.1697892);
      jSONObject0.optInt("V$l>woPJ;tYE");
      hashMap0.put(jSONObject0, double1);
      BiFunction<Double, Double, Double> biFunction1 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyDouble() , anyDouble());
      hashMap0.merge(jSONObject0, double2, biFunction1);
      jSONObject0.remove("\n");
      jSONObject0.optDouble("\n");
      JSONObject.doubleToString(0.0);
      JSONObject.doubleToString(Double.NaN);
      try { 
        jSONObject0.getString("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.300382885558903
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      Double.max(0.0, 0.0);
      hashMap0.put(jSONObject0, double0);
      Double double2 = hashMap0.put(jSONObject0, double0);
      Double.max(1428.1697892, 1428.1697892);
      int int0 = jSONObject0.optInt("V$l>woPJ;tYE");
      assertEquals(0, int0);
      
      hashMap0.put(jSONObject0, double1);
      BiFunction<Double, Double, Double> biFunction1 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyDouble() , anyDouble());
      hashMap0.merge(jSONObject0, double2, biFunction1);
      jSONObject0.remove("\n");
      double double3 = jSONObject0.optDouble("\n");
      assertEquals(Double.NaN, double3, 0.01);
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      boolean boolean0 = jSONObject0.isNull("{s9VBxF9r/p:w?wR");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.565394837118028
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "zgH)j?z[(TN813t%B8";
      Long long0 = new Long(1849L);
      JSONObject.numberToString(long0);
      String string1 = "?Cn(oX<|--vEHo.`";
      JSONTokener jSONTokener0 = new JSONTokener("?Cn(oX<|--vEHo.`");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ?Cn(oX<|--vEHo.`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = " {yNt+Wz\\fl";
      JSONTokener jSONTokener0 = new JSONTokener(" {yNt+Wz\fl");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of  {yNt+Wz\fl
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = null;
      JSONObject.quote((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.411067442179548
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = (-2110L);
      Long long1 = new Long((-2110L));
      JSONObject jSONObject0 = new JSONObject(long1);
      jSONObject0.remove("{D;Npo]o0");
      jSONObject0.names();
      Long.getLong("^^4Gc`Ii:Gm", (-2110L));
      Long.getLong("'lg");
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.440058435402387
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      Double.max(0.0, 0.0);
      hashMap0.put(jSONObject0, double0);
      hashMap0.put(jSONObject0, double0);
      Boolean.compare(true, true);
      Boolean.valueOf(true);
      jSONObject0.remove(" at character ");
      jSONObject0.names();
      Long.getLong("ZC67&ognNI", (long) 0);
      Short.toUnsignedLong((short)674);
      Long.getLong("ZC67&ognNI");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.accumulate(" at character ", double0);
      JSONObject jSONObject2 = jSONObject1.put("`cI:$T^", 1L);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0717913702039157
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      Double.max(0.0, 0.0);
      hashMap0.put(jSONObject0, double0);
      Double.max(1428.1697892, 1428.1697892);
      jSONObject0.optInt("V$l>woPJ;tYE");
      hashMap0.put(jSONObject0, double1);
      BiFunction<Double, Double, Double> biFunction1 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Short.compare((short) (-1747), (short)91);
      jSONObject0.toString((-3545), 680);
      jSONObject0.optString((String) null);
      try { 
        jSONObject0.getDouble("gv/{,)`WgP5d!Y|;B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gv/{,)`WgP5d!Y|;B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4574653869995418
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Boolean boolean0 = new Boolean("j[1vg56@");
      Boolean.compare(true, false);
      Boolean.logicalAnd(false, false);
      JSONObject.testValidity(boolean0);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      Float float0 = new Float((float) 0);
      Short short0 = new Short((short)637);
      hashMap0.put(float0, short0);
      JSONObject jSONObject1 = jSONObject0.accumulate("i~g\u0000?Zg)", short0);
      String string0 = jSONObject1.getString("i~g\u0000?Zg)");
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.665704046247209
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Byte byte0 = new Byte((byte)105);
      Byte.toUnsignedInt((byte)0);
      Byte.compare((byte)0, (byte)105);
      Byte.toUnsignedLong((byte)105);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.optInt("sp", 62);
      jSONObject0.optInt("_-G", 86);
      JSONObject.valueToString(jSONObject0);
      Boolean boolean1 = new Boolean(false);
      Boolean.logicalOr(true, false);
      jSONObject0.opt("{$%^+DhUGK6?\"-OwaG");
      jSONObject0.optDouble("{$%^+DhUGK6?\"-OwaG");
      jSONObject0.optBoolean("", true);
      jSONObject0.optString("sp");
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1361557235984077
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte.toUnsignedInt((byte)0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("E%i CRc\"_5;`/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E%i CRc\\\"_5;`/&\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7347734712647265
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, 13, 13);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) 13);
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, 13, (-1559));
      String string0 = null;
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      String string1 = "Z(";
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      JSONObject jSONObject2 = jSONObject1.put("[java.lang.Long@0000000007]", (Map) hashMap1);
      jSONObject1.optBoolean("] is not a number.");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      try { 
        jSONObject3.getBoolean("m|.0E,TN+`4FH*vZuo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m|.0E,TN+`4FH*vZuo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4808710634842734
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\b";
      stringArray0[3] = "c^;_o{3t`OAX";
      stringArray0[4] = "";
      stringArray0[5] = "#-<o8%X8s!R";
      stringArray0[6] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("tr", (-1607L));
      jSONObject0.put("", 13);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.044804502385667
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Long long0 = new Long((-2100L));
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Double double0 = new Double((-3785.652));
      byte byte0 = (byte) (-21);
      Byte byte1 = new Byte((byte) (-21));
      JSONObject jSONObject1 = new JSONObject(byte1);
      Byte byte2 = new Byte((byte)9);
      Float float0 = new Float(0.0F);
      Integer integer0 = Integer.valueOf((int) (byte)9);
      Float float1 = new Float(1.0);
      hashMap0.put(float1, integer0);
      Float float2 = new Float(2108.0F);
      Float float3 = new Float(880.362);
      Integer.getInteger("0}Cw2$?g]^,o3>");
      hashMap0.put(float3, (Integer) null);
      JSONObject.valueToString(float0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Z(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Z(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.180776412557307
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.682343001452087
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2187));
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2187), (-1559));
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"", 2937.854);
      jSONObject0.has("\"java.lang.Object@0000000001\"");
      try { 
        jSONObject1.getString("Uzp;'=7s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Uzp;'=7s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6494552478733433
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "";
      jSONObject0.optBoolean("");
      try { 
        jSONObject0.getString("getrotateLeft");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getrotateLeft\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Long long0 = new Long((-2110L));
      String string0 = "sho";
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      byte byte0 = (byte)9;
      Double double0 = new Double(30.18093043216355);
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte1 = new Byte((byte)9);
      Float float0 = new Float((float) (-2110L));
      Integer integer0 = Integer.valueOf((int) (byte)9);
      hashMap0.put(float0, integer0);
      Float float1 = new Float((-1.0F));
      hashMap0.put(float1, (Integer) null);
      try { 
        jSONObject0.getLong("sho");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sho\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.709474730718219
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      Boolean.compare(true, true);
      Boolean boolean1 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean1, (-2541), 0);
      jSONObject0.optDouble("lZ]4?,i@Qw$&?ReS)#n");
      Object object1 = new Object();
      jSONObject1.accumulate("isparseShort", object1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.367934296213352
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("in", jSONArray0);
      JSONObject jSONObject2 = new JSONObject();
      Byte.toUnsignedInt((byte) (-34));
      Byte.compare((byte) (-34), (byte)34);
      Byte.toUnsignedLong((byte) (-34));
      Byte.toUnsignedLong((byte)24);
      JSONObject.valueToString(jSONObject2, 74, (byte)24);
      JSONObject jSONObject3 = new JSONObject();
      try { 
        jSONObject1.getJSONArray("]hWW#)2)MqLB0)yEQXm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]hWW#)2)MqLB0)yEQXm\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.085890875354051
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)105);
      Byte.toUnsignedLong((byte)105);
      JSONObject.valueToString(byte0, 62, 62);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("java.lang.Byte@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Byte@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.412808002340831
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      try { 
        jSONObject0.getJSONObject("p@#[pV[K-<<[2sI5e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p@#[pV[K-<<[2sI5e\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.455394993624801
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",:]}/\\\"[{;=#";
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4488037300316616
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("_s]", stringArray0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-3931.2939962));
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      jSONObject0.accumulate("_s]", jSONObject1);
      Float.max(0.0F, 0.0F);
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("Bad value from toJSONString: ", float0, biFunction0);
      jSONObject0.put("_s]", (Map) hashMap0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.289852634005781
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("in", jSONArray0);
      int int0 = 10;
      byte byte0 = (byte)9;
      Double double0 = new Double((-5123.17995));
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Byte byte1 = new Byte((byte)9);
      Float float0 = new Float((-120.38F));
      Integer integer0 = Integer.valueOf((int) (byte)9);
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      hashMap1.put(float0, integer0);
      Float float1 = new Float(0.0F);
      hashMap1.put(float0, (Integer) null);
      Double double1 = new Double((-5134.1));
      JSONObject.valueToString(double1);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of in
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.627694761635688
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\b";
      stringArray0[3] = "c^;_o{3t`OAX";
      stringArray0[4] = "";
      stringArray0[5] = "#-<o8%X8s!R";
      stringArray0[6] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      int int0 = jSONObject1.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "~d[|*2.";
      JSONTokener jSONTokener0 = new JSONTokener("~d[|*2.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~d[|*2.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "5YEI|l?~";
      String string1 = "0f]MTp7l8I)|o";
      jSONObject0.toString(43);
      try { 
        jSONObject0.put("0f]MTp7l8I)|o", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.7727218970424725
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      JSONObject.valueToString(jSONObject1);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      long long0 = 0L;
      JSONArray jSONArray1 = jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      Double double0 = new Double((-1559));
      JSONObject jSONObject3 = jSONObject2.put("] is not a JSONObject.", (Object) double0);
      Short.toUnsignedLong((short)674);
      String string0 = "29=fMDi=E";
      Long.getLong("29=fMDi=E");
      try { 
        jSONObject3.accumulate((String) null, jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9337617466402346
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Long long0 = new Long((-2110L));
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      byte byte0 = (byte)9;
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte1 = new Byte((byte)9);
      Float float0 = new Float((float) (-2110L));
      Integer integer0 = Integer.valueOf((int) (byte)9);
      hashMap0.put(float0, integer0);
      Float float1 = new Float((-1.0F));
      hashMap0.put(float1, (Integer) null);
      JSONObject.valueToString(byte1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("ma");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ma
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7437009261328056
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      Double.max(0.0, 0.0);
      hashMap0.put(jSONObject0, double0);
      hashMap0.put(jSONObject0, double0);
      Long long0 = new Long(0L);
      String string0 = ".";
      jSONObject0.put(".", 161L);
      String string1 = "^\"oK33+L6Ba)";
      JSONTokener jSONTokener0 = new JSONTokener(".");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of .
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("fo", (Object) jSONObject1);
      jSONObject2.keys();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      short short0 = (short)674;
      Long long0 = new Long((short)674);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("*w=UP(O9`i {qxXS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of *w=UP(O9`i {qxXS
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7238004602164385
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Boolean boolean0 = new Boolean("j[1vg56@");
      Boolean.compare(true, false);
      Boolean.logicalAnd(false, false);
      JSONObject.testValidity(boolean0);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      JSONObject.getNames((Object) hashMap0);
      Float float0 = new Float((float) 0);
      Short short0 = new Short((short)637);
      hashMap0.put(float0, short0);
      try { 
        jSONObject0.get("j[1vg56@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j[1vg56@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "";
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.806602628863608
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[4] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\b";
      stringArray0[3] = "c^;_o{3t`OAX";
      stringArray0[4] = "";
      stringArray0[5] = "#-<o8%X8s!R";
      stringArray0[6] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Long long0 = new Long((-1591L));
      try { 
        Long.parseUnsignedLong(",");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.860518914564433
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "in";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("in", jSONArray0);
      StringWriter stringWriter0 = new StringWriter(10);
      jSONObject1.write(stringWriter0);
      jSONObject0.toString();
      jSONObject0.put("{\"java.lang.String@0000000004\":wheel.json.JSONArray@0000000003}", false);
      jSONObject0.toString(0, (-54582745));
      try { 
        jSONObject1.getLong("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"in\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.6492500992467813
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      int int0 = 32;
      jSONObject1.toString(32, (-1504));
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("\"java.lang.Object@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"java.lang.Object@0000000001\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Map<JSONObject, String> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = null;
      jSONObject0.keys();
      jSONObject0.toString();
      JSONObject.getNames((Object) null);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.69712818216313
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject.getNames((Object) short1);
      String string0 = ")vx%";
      JSONObject jSONObject0 = new JSONObject((Object) ")vx%");
      jSONObject0.optDouble("JSONArray[");
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, short1);
      JSONObject jSONObject2 = jSONObject1.append("JSONArray[", (Object) null);
      Integer integer0 = new Integer(97);
      jSONObject2.put(")vx%", (Object) integer0);
      jSONObject1.optBoolean("JSONArray[", false);
      jSONObject0.optString(")vx%");
      try { 
        jSONObject0.getDouble("J:i*@Ka-\"9Wd;yL'6B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J:i*@Ka-\\\"9Wd;yL'6B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8079222184199755
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\b";
      stringArray0[3] = "c^;_o{3t`OAX";
      stringArray0[4] = "";
      jSONObject0.optDouble("");
      jSONObject0.optString("int");
      try { 
        jSONObject0.getDouble("j;U4&+|GFn+d(6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j;U4&+|GFn+d(6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\b";
      stringArray0[3] = "c^;_o{3t`OAX";
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("zFoH1gj]?=n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of zFoH1gj]?=n
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
