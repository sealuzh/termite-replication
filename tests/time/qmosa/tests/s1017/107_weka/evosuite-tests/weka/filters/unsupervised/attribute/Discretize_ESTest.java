/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:34:24 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.01145134863686
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-6);
      doubleArray0[2] = (double) (-6);
      doubleArray0[5] = (double) (-6);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("", "", (-6));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("h)}IyS", arrayList1);
      Predicate<String> predicate0 = Predicate.isEqual((Object) attribute1);
      predicate0.negate();
      attribute1.isInRange(0.0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute1);
      Instances instances0 = new Instances("numeric", arrayList2, 10);
      Discretize discretize0 = new Discretize("1L-Cw<u=8S1uZF");
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize1);
      discretize0.getCapabilities(instances1);
      // Undeclared exception!
      try { 
        instances1.firstInstance();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray1[8] = 278.904068159;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 278.904068159;
      doubleArray3[1] = 0.0;
      discretize0.m_MakeBinary = false;
      doubleArray3[3] = 278.904068159;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-1073741822));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1073741822
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3136556422002656
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Discretize discretize0 = new Discretize("]");
      discretize0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can't find class called:");
      String[] stringArray0 = discretize0.getOptions();
      discretize0.getCapabilities();
      Range range0 = new Range("weka/core/Capabilities.props");
      range0.setInvert(true);
      discretize0.useEqualFrequencyTipText();
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (double) 6;
      doubleArray1[2] = (double) 6;
      doubleArray1[4] = (double) 6;
      doubleArray1[5] = (double) 6;
      doubleArray1[6] = (double) 6;
      doubleArray1[7] = (double) 6;
      doubleArray1[8] = 278.904068159;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 6;
      doubleArray2[1] = (double) 6;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 6;
      doubleArray2[4] = (double) 6;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 278.904068159;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 6;
      discretize0.m_MakeBinary = false;
      doubleArray3[3] = 278.904068159;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      Filter.makeCopies(discretize0, 6);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("", "M", 6);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList0.addAll(1, (Collection<? extends Attribute>) arrayList2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      attribute0.toString();
      Attribute attribute1 = new Attribute("relational", list0);
      attribute1.enumerateValues();
      attribute0.isInRange(6);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("J@pN_Fd", arrayList0, 6);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("org.pentaho.packageManagement.manager", arrayList3, 1689);
      Discretize discretize0 = new Discretize("relational");
      Discretize discretize1 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at relational
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopies(multiFilter0, (byte)76);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      discretize0.getBinRangesString((byte)76);
      String string1 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string1);
      
      System.setCurrentTimeMillis(2L);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      int int0 = 110;
      DenseInstance denseInstance0 = new DenseInstance(110);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue((-1584));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-1952257859));
      discretize0.useBinNumbersTipText();
      discretize0.getBins();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1952257859);
      discretize0.m_UseEqualFrequency = true;
      doubleArray0[1] = (-1.34);
      DenseInstance denseInstance0 = new DenseInstance((-1952257859), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      // Undeclared exception!
      try { 
        denseInstance0.equalHeadersMsg(denseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      DenseInstance denseInstance0 = new DenseInstance((-800.588817), doubleArray0);
      denseInstance0.toStringMaxDecimalDigits(1121);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Discretize discretize1 = new Discretize();
      discretize1.getMakeBinary();
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getFindNumBins());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize();
      sparseInstance1.toStringNoWeight();
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1J,1,1,1");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 4);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = " #0EW k`b";
      stringArray0[2] = "";
      Range range0 = new Range();
      Range range1 = new Range("qdy%");
      Discretize discretize0 = new Discretize("qdy%");
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(4p_tm;c5nxId'AL");
      Discretize discretize0 = new Discretize("+<(gm':Jf");
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("", "M", 6);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList0.addAll(1, (Collection<? extends Attribute>) arrayList2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      attribute0.toString();
      Attribute attribute1 = new Attribute("relational", list0);
      attribute1.enumerateValues();
      attribute0.isInRange(6);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("J@pN_Fd", arrayList0, 6);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "@end";
      stringArray0[1] = "numeric";
      stringArray0[2] = "_";
      stringArray0[3] = "integer";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Properties properties0 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("h)}IyS", arrayList1);
      attribute0.toString();
      Predicate<String> predicate0 = Predicate.isEqual((Object) attribute0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate3 = predicate1.or(predicate2);
      Predicate<String> predicate4 = predicate3.and(predicate1);
      arrayList1.removeIf(predicate4);
      attribute0.isInRange(0.0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("_", arrayList0, 0);
      Discretize discretize0 = new Discretize("integer");
      discretize0.setInvertSelection(true);
      Discretize discretize1 = new Discretize();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9103281932812037
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "J6D+~P*;";
      Discretize discretize0 = new Discretize("J6D+~P*;");
      discretize0.setUseBinNumbers(true);
      discretize0.getBins();
      int[] intArray0 = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "J6D+~P*;";
      stringArray0[1] = "J6D+~P*;";
      stringArray0[2] = "~o";
      discretize0.setUseBinNumbers(true);
      stringArray0[3] = "J6D+~P*;";
      stringArray0[4] = "J6D+~P*;";
      stringArray0[5] = "J6D+~P*;";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1006927819715187
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_NumBins = 1795;
      discretize0.setIgnoreClass(false);
      discretize0.setIgnoreClass(false);
      discretize0.setMakeBinary(true);
      discretize0.m_UseBinNumbers = true;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setBins(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      discretize0.toString();
      discretize0.setAttributeIndicesArray(intArray0);
      intArray0[2] = 0;
      intArray0[3] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.setUseBinNumbers(false);
      discretize0.getInvertSelection();
      discretize0.setFindNumBins(true);
      discretize0.setBins(0);
      discretize0.setDesiredWeightOfInstancesPerInterval((-2529.9927));
      discretize0.getOptions();
      discretize0.setBins(0);
      assertEquals((-2529.9927), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9910042766327036
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("z)]&+E.}");
      String[] stringArray0 = new String[3];
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-2067.3013353);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-250.7050999365);
      doubleArray1[5] = 2769.04;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = (-2067.3013353);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = (-2067.3013353);
      doubleArray4[4] = Double.NaN;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-2067.3013353);
      doubleArray5[1] = 2033.4;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-2067.3013353);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-250.7050999365);
      doubleArray6[6] = (-1676.7);
      doubleArray6[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_IgnoreClass = false;
      stringArray0[0] = "z)]&+E.}";
      stringArray0[1] = "z)]&+E.}";
      stringArray0[2] = "z)]&+E.}";
      Discretize.main(stringArray0);
      discretize0.setUseEqualFrequency(false);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize(";=<Km[_D>yB'565u0bk");
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-3394.03);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-3394.03);
      doubleArray2[1] = (-3394.03);
      doubleArray2[2] = (-3394.03);
      doubleArray2[3] = (-3394.03);
      doubleArray2[4] = (-3394.03);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-3394.03);
      doubleArray3[1] = (-3394.03);
      doubleArray3[2] = (-3394.03);
      doubleArray3[3] = (-3394.03);
      doubleArray3[4] = (-3394.03);
      doubleArray3[5] = (-3394.03);
      doubleArray3[6] = (-3394.03);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-3394.03);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-3394.03);
      doubleArray5[1] = (-3394.03);
      doubleArray5[2] = (-3394.03);
      doubleArray5[3] = (-3394.03);
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = (-3394.03);
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_NumBins = (-9);
      Filter.makeCopy(discretize0);
      discretize0.setBins(0);
      discretize0.getFindNumBins();
      discretize0.m_NumBins = 0;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("ucUB?+bk@Y;l %Jc=");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(",bIf<\"LM/h~73neS5)", arrayList1, 2725);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-6);
      doubleArray0[1] = (double) (-6);
      doubleArray0[2] = (double) (-6);
      doubleArray0[5] = (double) (-6);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("", "", (-6));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("of", arrayList1);
      Predicate<String> predicate0 = Predicate.isEqual((Object) attribute1);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate3 = predicate1.or(predicate2);
      Predicate<String> predicate4 = predicate3.and(predicate1);
      arrayList1.removeIf(predicate4);
      attribute1.isInRange(0.0);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("_", arrayList0, 0);
      Discretize discretize0 = new Discretize("integer");
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getMakeBinary());
      
      boolean boolean0 = discretize1.setInputFormat(instances0);
      assertFalse(boolean0);
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$*?UHF6%42u^h6r'jhq");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      denseInstance0.setWeight(2293.5386017147);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getAttributeIndices();
      assertEquals("first-last", string0);
      
      discretize0.setAttributeIndices("");
      String string1 = discretize0.globalInfo();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string1);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Discretize discretize0 = new Discretize("integer");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "real";
      stringArray0[1] = "real";
      stringArray0[2] = "string";
      stringArray0[3] = "date";
      stringArray0[4] = "real";
      stringArray0[5] = "real";
      stringArray0[6] = "numeric";
      discretize0.m_NumBins = 0;
      stringArray0[7] = "integer";
      discretize0.setMakeBinary(true);
      stringArray0[8] = "numeric";
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.728107624018292
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-6);
      doubleArray0[1] = (double) (-6);
      doubleArray0[2] = (double) (-6);
      doubleArray0[5] = (double) (-6);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("", "", (-6));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("of", arrayList1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("");
      attribute0.setStringValue("hL3;_Y_[`wI");
      discretize0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "numeric");
      discretize0.getOptions();
      discretize0.getCapabilities();
      Range range0 = new Range("o5w))H3W");
      range0.setInvert(false);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance0 = new SparseInstance(989.641851, doubleArray0);
      Range range0 = discretize0.m_DiscretizeCols;
      AllFilter allFilter0 = new AllFilter();
      discretize0.getCutPoints(79);
      StringReader stringReader0 = new StringReader("=");
      AllFilter allFilter1 = new AllFilter();
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      DenseInstance denseInstance2 = new DenseInstance(denseInstance1);
      DenseInstance denseInstance3 = new DenseInstance(sparseInstance0);
      DenseInstance denseInstance4 = new DenseInstance(denseInstance1);
      DenseInstance denseInstance5 = new DenseInstance(1150);
      // Undeclared exception!
      try { 
        denseInstance5.toString(4959);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4959
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (double) 6;
      doubleArray1[2] = (double) 6;
      doubleArray1[4] = (double) 6;
      doubleArray1[5] = (double) 6;
      doubleArray1[6] = (double) 6;
      doubleArray1[7] = (double) 6;
      doubleArray1[8] = 278.904068159;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 6;
      doubleArray2[1] = (double) 6;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.getInvertSelection();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      Filter.makeCopy(discretize0);
      discretize0.m_UseBinNumbers = true;
      discretize0.getUseBinNumbers();
      String string0 = "";
      discretize0.m_UseBinNumbers = true;
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.pentaho.packageManagement.PackageConstraint");
      Discretize discretize0 = new Discretize("}5dZ.nc1$<g+1M");
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.991819630354153
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-6);
      doubleArray0[1] = (double) (-6);
      doubleArray0[1] = (double) (-6);
      doubleArray0[5] = (double) (-6);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) protectedProperties1);
      Predicate<String> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      predicate0.and(predicate1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.removeIf(predicate1);
      Attribute attribute0 = new Attribute("", protectedProperties1);
      attribute0.isInRange(1.0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList1, 2);
      Discretize discretize0 = new Discretize("real");
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize1);
      // Undeclared exception!
      try { 
        instances1.firstInstance();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-104);
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      Range range0 = new Range("weka/core/Capabilities.props");
      Range range1 = new Range();
      Range range2 = new Range("weka/core/Capabilities.props");
      range0.setInvert(false);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      Attribute attribute1 = new Attribute("", protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@attribute");
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      System.setCurrentTimeMillis(4);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("ucUB?+g(bk@Y;l %Jc=");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "{;G86w}|wx");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("{;G86w}|wx", (String) null, (-2102744402));
      arrayList0.add(attribute0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("ucUB?+g(bk@Y;l %Jc=", arrayList1);
      attribute1.isInRange(2725);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances(",bIf<\"LM/h~73neS5)", arrayList0, 2725);
      Range range0 = new Range();
      range0.setInvert(false);
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Number of bins.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      discretize0.setIgnoreClass(true);
      double double0 = 1077.5046162986862;
      DenseInstance denseInstance0 = new DenseInstance(1077.5046162986862, doubleArray0);
      int int0 = 1121;
      denseInstance0.toStringMaxDecimalDigits(1121);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize("h)}IyS");
      Discretize discretize1 = new Discretize("W=q%U");
      int int0 = (-1782);
      discretize1.getBinRangesString((-1782));
      Range range0 = discretize0.m_DiscretizeCols;
      AllFilter allFilter0 = new AllFilter();
      StringReader stringReader0 = new StringReader("(");
      AllFilter allFilter1 = new AllFilter();
      StringReader stringReader1 = new StringReader(":");
      StringReader stringReader2 = new StringReader("' already present at position #");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[ already present at position #], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      int int0 = 1121;
      denseInstance0.toStringMaxDecimalDigits(1121);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval((-5774.12061));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7229732264381474
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Capabilities:";
      stringArray0[1] = "\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)";
      stringArray0[2] = "-----    ";
      stringArray0[3] = "vc3HA=@@_w}3d~!<+=p";
      stringArray0[4] = "(4p_tm;c5nxId'AL";
      stringArray0[5] = "m{V!X/#jMjivp<wC[";
      stringArray0[6] = "1,1,1,1";
      stringArray0[7] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      discretize0.setOptions(stringArray0);
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("xc(g}", arrayList1, 2725);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "TXK1jQ0RENhHvM";
      stringArray0[1] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      stringArray0[2] = "org.pentaho.packageManagement.PackageConstraint";
      stringArray0[3] = "S)$(";
      stringArray0[4] = "ovQHQg";
      stringArray0[5] = "UdW0v+ Ubik~2t^QH";
      stringArray0[6] = "\tInvert matching sense of column indexes.";
      stringArray0[7] = "$";
      Filter.runFilter(discretize0, stringArray0);
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = " #0EW k`b";
      stringArray0[2] = "";
      stringArray0[3] = " #0EW k`b";
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("8964", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[6];
      intArray0[0] = (-2111);
      intArray0[1] = 44;
      intArray0[2] = 89;
      intArray0[3] = (-609);
      intArray0[4] = 0;
      intArray0[5] = 3126;
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("4-Z'&-k");
      DenseInstance denseInstance0 = new DenseInstance(350);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = (-232);
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(6, stringArray1.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = " #0EW k`b";
      stringArray0[2] = "";
      stringArray0[3] = " #0EW k`b";
      Discretize discretize0 = new Discretize(" #0EW k`b");
      discretize0.findNumBinsTipText();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-6);
      doubleArray0[1] = (double) (-6);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-6));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 319.0759723811441;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J{cMv(kKdsi_??N");
      Range range0 = new Range();
      Range range1 = new Range("Dat");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      range0.setInvert(false);
      range1.setInvert(false);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize();
      sparseInstance1.toStringNoWeight();
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.or(predicate1);
      predicate2.negate();
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-937));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(false);
      discretize0.setOutputFormat();
      discretize0.getAttributeIndices();
      Instances instances0 = null;
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((-557));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -557
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useEqualFrequencyTipText();
      discretize0.attributeIndicesTipText();
      int[] intArray0 = new int[5];
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      SparseInstance sparseInstance0 = new SparseInstance(30, doubleArray0);
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = new Discretize("=");
      discretize0.makeBinaryTipText();
      StringReader stringReader0 = new StringReader("=");
      AllFilter allFilter1 = new AllFilter();
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      DenseInstance denseInstance2 = new DenseInstance(denseInstance1);
      DenseInstance denseInstance3 = new DenseInstance(denseInstance0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      HashMap<SparseInstance, String> hashMap0 = new HashMap<SparseInstance, String>();
      Collection<String> collection0 = hashMap0.values();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, collection0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("=", list1, (-1584));
      sparseInstance0.setMissing(attribute0);
      // Undeclared exception!
      try { 
        denseInstance3.toString(4013);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4013
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }
}
