/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:04:19 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.trees.RandomForest;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.LovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.94391871849986
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      String string0 = "ji0(YjF-z";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setNormalizeDocLength(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ji0(YjF-z");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3152743559044913
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.tartarus.snowball.ext";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball";
      stringArray0[4] = "";
      SnowballStemmer.main(stringArray0);
      snowballStemmer0.getRevision();
      SnowballStemmer snowballStemmer1 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer1);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.pruneDictionary();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      naiveBayesMultinomialText0.setUseStopList(false);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4799763084824673
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\tOnly outpts the graph representation of the classifier.\n";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setLNorm((-981.0));
      SGDText sGDText0 = new SGDText();
      sGDText0.getLossFunction();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Tokenizer.tokenize(tokenizer0, stringArray0);
      wordTokenizer0.setDelimiters("-cost-matrix <matrix>");
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      assertEquals((-981.0), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.179795912687836
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\tOnly outputs the graph representation of the classifier.\n";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setLNorm((-981.0));
      naiveBayesMultinomialText0.m_periodicP = 4;
      SGDText sGDText0 = new SGDText();
      sGDText0.getLossFunction();
      WordTokenizer wordTokenizer0 = (WordTokenizer)sGDText0.getTokenizer();
      wordTokenizer0.setDelimiters("\tOnly outputs the graph representation of the classifier.\n");
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0428162336583124
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 48;
      doubleArray0[2] = (double) 48;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 48);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 48;
      doubleArray1[1] = (double) 48;
      doubleArray1[2] = (double) 48;
      doubleArray1[3] = (double) 48;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray1;
      naiveBayesMultinomialText0.m_leplace = 48.0;
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getCapabilities();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(3.0, double0, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.221751559072405
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\tOnly outputs the graph representation of the classifier.\n";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setLNorm((-981.0));
      naiveBayesMultinomialText0.m_periodicP = 4;
      SGDText sGDText0 = new SGDText();
      sGDText0.getLossFunction();
      WordTokenizer wordTokenizer0 = (WordTokenizer)sGDText0.getTokenizer();
      wordTokenizer0.setDelimiters("\tOnly outputs the graph representation of the classifier.\n");
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      intArray0[1] = 10000;
      intArray0[2] = 26;
      intArray0[3] = 4;
      intArray0[4] = 1;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0E-4, intArray0, 26);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-4;
      doubleArray0[1] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance(10000, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.useStopListTipText();
      int int0 = (-2764);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2764));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3152743559044913
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RZ>:K";
      FileSystemHandling.shouldAllThrowIOExceptions();
      SnowballStemmer.main(stringArray0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      snowballStemmer0.getRevision();
      SnowballStemmer snowballStemmer1 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer1);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.pruneDictionary();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      naiveBayesMultinomialText0.setUseStopList(true);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.316428332986995
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.LNormTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setUseWordFrequencies(false);
      NullStemmer nullStemmer0 = new NullStemmer();
      NullStemmer.main((String[]) null);
      naiveBayesMultinomialText1.setStemmer(nullStemmer0);
      naiveBayesMultinomialText0.getOptions();
      try { 
        naiveBayesMultinomialText0.updateClassifier(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(284.91, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = (-4379);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.582160402760742
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      NullStemmer nullStemmer0 = new NullStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The LNorm to use for document length normalization.";
      stringArray0[1] = "Use word frequencies rather than binary bag of words representation";
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1206.0826), intArray0, 48);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile1 = new MockFile("HH!CrqPnbGk6&kcsXu)", "ji0(YjF-z");
      mockFile1.setReadable(true);
      mockFile0.createNewFile();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getKernelMatrixFile();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (byte)0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[0] = (byte) (-5);
      NullStemmer nullStemmer0 = new NullStemmer();
      nullStemmer0.stem("$Revision: 8097 $");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.getUseStopList();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = false;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 1.0E-5;
      doubleArray0[2] = 1.0E-5;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0E-5, doubleArray0);
      File file0 = MockFile.createTempFile("<-5A^e`ub", "<-5A^e`ub");
      MockFile mockFile0 = new MockFile(file0, "<-5A^e`ub");
      mockFile0.deleteOnExit();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      int[] intArray0 = new int[7];
      intArray0[0] = 2474;
      intArray0[1] = 2474;
      intArray0[2] = (-1644);
      intArray0[3] = (-344);
      intArray0[4] = (-1644);
      intArray0[5] = 2474;
      intArray0[6] = 2474;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4.0, intArray0, (-1936));
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_minWordP = (-1.0);
      boolean boolean0 = false;
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2474;
      intArray0[5] = 2474;
      intArray0[6] = 2474;
      intArray0[7] = 2474;
      intArray0[8] = 2474;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RZ>&K";
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getCapabilities();
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 934.3540461;
      doubleArray0[1] = 934.3540461;
      doubleArray0[2] = 5.3;
      doubleArray0[3] = 1495.990456779;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(934.3540461, doubleArray0);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.631353359565896
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      MockFile mockFile1 = new MockFile("[l9(~3", "d69 :y3J Wn~");
      MockFile mockFile2 = new MockFile((String) null, "never");
      MockFile mockFile3 = new MockFile("d69 :y3J Wn~", "never");
      MockFile mockFile4 = new MockFile("~I@", "[l9(~3");
      mockFile4.setReadable(false);
      mockFile1.createNewFile();
      mockFile3.mkdirs();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      MockFile mockFile5 = new MockFile(mockFile0, "");
      mockFile0.createNewFile();
      MockFile mockFile6 = new MockFile(mockFile1, "never");
      mockFile4.mkdirs();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ji0(YjF-z";
      stringArray0[1] = "ji0(YjF-z";
      stringArray0[2] = "\nThe probability of a word given the class\n";
      stringArray0[3] = "\tTransform through the PC space and \n\tback to the original space.";
      stringArray0[4] = "\nThe probability of a word given the class\n";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 2);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.902406279863188
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.tartarus.snowball.ext";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball";
      stringArray0[4] = "";
      SnowballStemmer.main(stringArray0);
      snowballStemmer0.getRevision();
      SnowballStemmer snowballStemmer1 = new SnowballStemmer();
      snowballStemmer1.getStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer1);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.pruneDictionary();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      naiveBayesMultinomialText0.setUseStopList(false);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray1.length);
      
      naiveBayesMultinomialText0.pruneDictionary();
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(2.0, double0, 0.01);
      
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.641627386450497
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1644);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1469.62346, intArray0, (-1644));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance1, false);
      naiveBayesMultinomialText0.pruneDictionary();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText2.setOptions(stringArray0);
      assertEquals(3.0, naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText2.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText2.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText2.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText2.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText2.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText2.getNorm(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.691735059102455
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(3251.1793);
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_periodicP = 2474;
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      naiveBayesMultinomialText0.m_norm = (-1846.7999504140435);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[0];
      SnowballStemmer.main(stringArray0);
      snowballStemmer0.getRevision();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      SnowballStemmer.main(stringArray0);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "org.tartarus.snowball";
      stringArray1[1] = "org.tartarus.snowball.ext";
      stringArray1[2] = "L}?4ZdRLZ3/Q'*}";
      stringArray1[3] = "org.tartarus.snowball.ext";
      SnowballStemmer.main(stringArray1);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.normTipText();
      File file0 = MockFile.createTempFile("org.tartarus.snowball", "L}?4ZdRLZ3/Q'*}", (File) null);
      naiveBayesMultinomialText0.setStopwords(file0);
      assertEquals(3251.1793, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RZ>&K";
      stringArray0[1] = "BdRnWD ^JY9";
      double double0 = (-1081.352131757013);
      int[] intArray0 = new int[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1081.352131757013), intArray0, 0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6382439711076704
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.m_useStopList = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile((String) null, "HH!CrqPnbGk6&kcsXu)");
      mockFile0.getCanonicalFile();
      mockFile0.setReadable(true);
      mockFile0.createNewFile();
      mockFile0.mkdirs();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.setChecksTurnedOff(true);
      precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setOptions((String[]) null);
      assertEquals(0.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7401591094179802
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      mockFile0.createNewFile();
      mockFile0.mkdirs();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = naiveBayesMultinomialText0.getStopwords();
      MockFile mockFile2 = new MockFile(file0, "-P <# instances>");
      mockFile0.createNewFile();
      mockFile0.delete();
      mockFile0.setWritable(false, false);
      MockFile mockFile3 = new MockFile("");
      mockFile3.deleteOnExit();
      naiveBayesMultinomialText0.listOptions();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(14, stringArray0.length);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2532215229756867
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      naiveBayesMultinomialText0.reset();
      stringArray0[0] = "ak8}WuGAQeqAYL;Im,";
      stringArray0[1] = "";
      naiveBayesMultinomialText0.m_minWordP = (-431.0540948975126);
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.m_lnorm = 995.237763455081;
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      stringArray0[2] = "r&C^~1T\"dM+9 /";
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      RandomForest randomForest0 = new RandomForest();
      randomForest0.setNumExecutionSlots(0);
      randomForest0.enumerateMeasures();
      AbstractClassifier.runClassifier(randomForest0, stringArray0);
      naiveBayesMultinomialText0.setNorm((-444.22348659448));
      naiveBayesMultinomialText0.stopwordsTipText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.useStopListTipText();
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setMinWordFrequency(995.237763455081);
      naiveBayesMultinomialText0.setLNorm(995.237763455081);
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals((-444.22348659448), double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "BdRnWD ^JY9";
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.0, doubleArray0);
      AbstractInstance.s_numericAfterDecimalPoint = 2474;
      int[] intArray0 = new int[6];
      naiveBayesMultinomialText0.m_leplace = (double) 2474;
      intArray0[0] = 2474;
      intArray0[1] = 2474;
      intArray0[2] = 2474;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(12, stringArray1.length);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7228120764467145
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\tOnly outpts the graph representation of the classifier.\n";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setLNorm((-981.0));
      naiveBayesMultinomialText0.m_periodicP = 4;
      SGDText sGDText0 = new SGDText();
      sGDText0.getLossFunction();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      String[] stringArray1 = Tokenizer.tokenize(tokenizer0, stringArray0);
      wordTokenizer0.setDelimiters("-cost-matrix <matrix>");
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      MockFile mockFile0 = new MockFile(file0, "-cost-matrix <matrix>");
      mockFile0.createNewFile();
      mockFile0.mkdirs();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      assertEquals((-981.0), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_minWordP = (-1159.4454163724013);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1159.4454163724013);
      doubleArray0[1] = (double) (-2306);
      doubleArray0[2] = (double) (-2306);
      doubleArray0[3] = (double) (-767);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2306);
      intArray0[1] = (-2306);
      intArray0[2] = (-2306);
      intArray0[3] = (-2306);
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0, intArray0, (-2306));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        precomputedKernelMatrixKernel0.eval((-767), (-2306), sparseInstance1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Kernel matrix has not been loaded successfully.
         //
         verifyException("weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RZ>:K";
      FileSystemHandling.shouldAllThrowIOExceptions();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("pex", linkedList0, protectedProperties0);
      arrayList0.add(attribute0);
      int int0 = 146;
      Instances instances0 = new Instances("Hvic^B!nG&1Cbe", arrayList0, 146);
      CoverTree coverTree0 = new CoverTree();
      int int1 = 10000;
      int int2 = 100000;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(100000);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency((-3784.249330225059));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(3251.1793);
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_periodicP = 2474;
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      naiveBayesMultinomialText0.m_norm = (-1846.7999504140435);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[0];
      SnowballStemmer.main(stringArray0);
      snowballStemmer0.getRevision();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getLNorm();
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("#Z");
      iteratedLovinsStemmer0.stem("org.tartarus.snowball.ext");
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getStemmer();
      NullStemmer nullStemmer0 = new NullStemmer();
      nullStemmer0.stem("#Z");
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      assertEquals(3251.1793, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "BdRnWD ^JY9";
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.0, doubleArray0);
      AbstractInstance.s_numericAfterDecimalPoint = 2474;
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(2.0, double0, 0.01);
      
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      double double1 = naiveBayesMultinomialText0.getNorm();
      assertEquals(1.0, double1, 0.01);
      
      String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("Whether to convert all tokens to lowercase", string0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      MockFile mockFile1 = new MockFile("[l9(~3", "d69 :y3J Wn~");
      MockFile mockFile2 = new MockFile((String) null, "never");
      MockFile mockFile3 = new MockFile("d69 :y3J Wn~", "never");
      MockFile mockFile4 = new MockFile("~I@", "[l9(~3");
      mockFile4.setReadable(false);
      mockFile1.createNewFile();
      mockFile3.mkdirs();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      MockFile mockFile5 = new MockFile(mockFile0, "");
      mockFile0.createNewFile();
      MockFile mockFile6 = new MockFile(mockFile1, "never");
      naiveBayesMultinomialText0.getLowercaseTokens();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel1.getKernelMatrixFile();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ji0(YjF-z";
      stringArray0[1] = "";
      stringArray0[2] = "never";
      stringArray0[2] = "\nThe probability of a word given the class\n";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.237081600349547
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\tOnly outpts the graph representation of the classifier.\n";
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.setLNorm((-981.0));
      naiveBayesMultinomialText0.m_periodicP = 4;
      SGDText sGDText0 = new SGDText();
      sGDText0.getLossFunction();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      tokenizer0.getOptions();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Tokenizer.tokenize(tokenizer0, stringArray0);
      wordTokenizer0.setDelimiters("-cost-matrix <matrix>");
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.normTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.setPeriodicPruning(0);
      int[] intArray0 = new int[0];
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      assertFalse(naiveBayesMultinomial0.getDebug());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.092239687046295
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "\tOnly outputs the graph representation of the classifier.\n";
      naiveBayesMultinomialText0.setLNorm((-981.0));
      naiveBayesMultinomialText0.m_periodicP = 4;
      SGDText sGDText0 = new SGDText();
      sGDText0.getLossFunction();
      WordTokenizer wordTokenizer0 = (WordTokenizer)sGDText0.getTokenizer();
      wordTokenizer0.setDelimiters("\tOnly outputs the graph representation of the classifier.\n");
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, (-5314));
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.stemmerTipText();
      naiveBayesMultinomialText0.getOptions();
      assertEquals((-981.0), naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      String string0 = naiveBayesMultinomialText1.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.576534609090467
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[2] = "org.tartarus.snowball.ext";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball";
      stringArray0[3] = "org.tartarus.snowball";
      SnowballStemmer.main(stringArray0);
      snowballStemmer0.getRevision();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      double double0 = naiveBayesMultinomialText0.m_t;
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("org.tartarus.snowball.ext");
      lovinsStemmer0.stem("org.tartarus.snowball");
      naiveBayesMultinomialText0.setStemmer(lovinsStemmer0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      DenseInstance denseInstance0 = new DenseInstance(1542.182545, (double[]) null);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6862668983950018
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(3251.1793);
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_periodicP = 2474;
      naiveBayesMultinomialText0.m_stopwordsFile = null;
      naiveBayesMultinomialText0.m_norm = (-1846.7999504140435);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[0];
      SnowballStemmer.main(stringArray0);
      snowballStemmer0.getRevision();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getLNorm();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("#Z");
      lovinsStemmer0.stem("org.tartarus.snowball.ext");
      naiveBayesMultinomialText0.setStemmer(lovinsStemmer0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      DenseInstance denseInstance0 = new DenseInstance(1468.78269, (double[]) null);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-2764));
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals((-2764), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "BdRnWD ^JY9";
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.0, doubleArray0);
      AbstractInstance.s_numericAfterDecimalPoint = 2474;
      int[] intArray0 = new int[6];
      naiveBayesMultinomialText0.m_leplace = (double) 2474;
      intArray0[0] = 2474;
      intArray0[1] = 2474;
      intArray0[2] = 2474;
      intArray0[3] = 2474;
      intArray0[4] = 30;
      intArray0[5] = 2474;
      SparseInstance sparseInstance0 = new SparseInstance((-99.0), doubleArray0, intArray0, 2474);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }
}
