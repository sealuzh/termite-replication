/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:04:05 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.FarthestFirst;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.BottomUpConstructor;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6385140786606829
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5806789212792607
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "distributionForInstance");
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double2, double0, 0.01);
      
      textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.2000000029802322;
      doubleArray0[2] = 1.2000000029802322;
      doubleArray0[3] = (-1747.99);
      doubleArray0[5] = (double) 0;
      evaluation0.updateMargins(doubleArray0, 4, 1.2000000029802322);
      double double3 = evaluation1.meanAbsoluteError();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0423569973977633
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.getRevision();
      sMOreg0.getRevision();
      evaluation0.KBMeanInformation();
      J48 j48_0 = new J48();
      double[] doubleArray0 = new double[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      doubleArray0[0] = (double) 467;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 467;
      doubleArray0[4] = (double) 1874;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1874;
      doubleArray0[8] = (double) 1874;
      capabilities0.toSource("9134");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(28);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, (-3435.2564));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1874;
      J48 j48_0 = new J48();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 467;
      j48_0.setCollapseTree(false);
      doubleArray0[4] = (double) 1874;
      doubleArray0[7] = (double) 1874;
      doubleArray0[8] = (double) 1874;
      Evaluation.makeOptionString(j48_0, false);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-360));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      RandomForest randomForest0 = new RandomForest();
      Capabilities capabilities0 = randomForest0.getCapabilities();
      capabilities0.getRevision();
      SMOreg sMOreg0 = new SMOreg();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SelectedTag selectedTag0 = hierarchicalClusterer0.getLinkType();
      sMOreg0.setFilterType(selectedTag0);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "9134";
      stringArray0[2] = "weka/core/Capabilities.props";
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", 4);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4741050341006434
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation1.m_SumPriorSqrErr;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instances1.listIterator();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances2 = inputMappedClassifier0.getModelHeader(instances0);
      instances2.listIterator();
      RandomForest randomForest0 = new RandomForest();
      randomForest0.getCapabilities();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.falseNegativeRate((-1114383320));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.areaUnderPRC((-1114383320));
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation1.recall(548);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4922963932744846
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "distributionForInstance");
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.SFEntropyGain();
      evaluation0.SFMeanPriorEntropy();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.2000000029802322;
      doubleArray0[2] = 1.2000000029802322;
      doubleArray0[3] = (-1747.99);
      doubleArray0[4] = 1.2000000029802322;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 4, 1.2000000029802322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 550
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.921452559457709
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate((-1031907725));
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        evaluation0.evaluateModel((Classifier) linearRegression0, instances0, (Object[]) sMOreg0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 467;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 22;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 22, 467.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.697583729572745
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 742.887;
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = new int[7];
      intArray0[0] = 3262;
      int int0 = 513;
      intArray0[1] = 513;
      intArray0[2] = 467;
      evaluation0.m_SumPriorEntropy = Double.NaN;
      intArray0[4] = 1865;
      evaluation0.falseNegativeRate(22);
      evaluation0.areaUnderPRC(3262);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderROC();
      evaluation0.numFalseNegatives(467);
      evaluation0.incorrect();
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 742.887;
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = new int[7];
      intArray0[0] = 3262;
      intArray0[1] = 513;
      intArray0[2] = 467;
      evaluation0.m_SumPriorEntropy = Double.NaN;
      intArray0[4] = 1874;
      intArray0[5] = 22;
      evaluation0.falseNegativeRate((-1062));
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        evaluation0.evaluateModel((Classifier) linearRegression0, instances0, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4606798560245595
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".xml");
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.listIterator();
      capabilities0.getRevision();
      capabilities0.getOtherCapabilities();
      sMOreg0.getRevision();
      instances0.listIterator();
      RandomForest randomForest0 = new RandomForest();
      double double0 = evaluation0.falseNegativeRate(2);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.areaUnderPRC(2803);
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9481780396501986
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      instances0.listIterator();
      RandomForest randomForest0 = new RandomForest();
      Capabilities capabilities0 = randomForest0.getCapabilities();
      capabilities0.getRevision();
      SMOreg sMOreg0 = new SMOreg();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SelectedTag selectedTag0 = hierarchicalClusterer0.getLinkType();
      sMOreg0.setFilterType(selectedTag0);
      sMOreg0.getRevision();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.confusionMatrix();
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = " -1       0    \n";
      stringArray0[1] = "9134";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@data";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "8123";
      stringArray0[7] = "@relation";
      Evaluation.main(stringArray0);
      evaluation0.toSummaryString("9134", true);
      evaluation0.errorRate();
      evaluation0.rootMeanSquaredError();
      evaluation0.SFSchemeEntropy();
      evaluation0.toSummaryString(true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int int0 = 2246;
      intArray0[2] = 2246;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(0.0, (double[]) null, intArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.689365188982482
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      J48 j48_0 = new J48();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".xml";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".arff";
      stringArray0[5] = "@data";
      stringArray0[6] = ".bsi";
      stringArray0[7] = ".arff";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = Double.NaN;
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-884.232750646123));
      Evaluation.main(stringArray0);
      String string0 = evaluation1.toSummaryString("eg`Zw4JPBsI&&j", false);
      assertEquals("eg`Zw4JPBsI&&j\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation1.totalCost();
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1105300498329425
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.listIterator();
      capabilities0.getRevision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 467;
      doubleArray0[1] = (double) 1874;
      doubleArray0[2] = (double) 22;
      int[] intArray0 = new int[7];
      intArray0[0] = 467;
      intArray0[1] = 2353;
      intArray0[2] = 2;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 2353;
      instances0.deleteWithMissingClass();
      intArray0[6] = 1874;
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, 481);
      evaluation0.KBRelativeInformation();
      AllFilter allFilter0 = new AllFilter();
      FarthestFirst farthestFirst0 = new FarthestFirst();
      Capabilities capabilities1 = farthestFirst0.getCapabilities();
      capabilities0.supports(capabilities1);
      capabilities0.enableAllAttributes();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.210639832268923
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.listIterator(0);
      instances0.listIterator();
      RandomForest randomForest0 = new RandomForest();
      randomForest0.getCapabilities();
      evaluation0.falseNegativeRate(1534);
      evaluation0.areaUnderPRC(200);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.clear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.reset();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      stringArray0[4] = "@relation";
      evaluation0.areaUnderPRC(357913932);
      double double0 = evaluation0.weightedAreaUnderROC();
      Random.setNextRandom(37);
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.clear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      stringArray0[4] = "@relation";
      AbstractClassifier.runClassifier(zeroR0, stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.areaUnderPRC(13);
      double double0 = evaluation0.weightedAreaUnderROC();
      Random.setNextRandom(13);
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      double double0 = (-2750.62822);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[3] = (-2079.411479243661);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-2750.62822);
      doubleArray0[7] = (-2079.411479243661);
      doubleArray0[8] = (-1.7976931348623157E308);
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("tMD5&MLQ", arrayList0, 6);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3260886280590363
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("\tfrom the XML file.\n", true);
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2382.043846443892;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.3);
      evaluation0.toSummaryString("@data", false);
      double double0 = evaluation0.errorRate();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7896656513804965
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.listIterator();
      capabilities0.getRevision();
      sMOreg0.getRevision();
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4587373984309306
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 742.887;
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = new int[7];
      intArray0[0] = 3262;
      intArray0[1] = 513;
      intArray0[2] = 467;
      evaluation0.m_SumPriorEntropy = Double.NaN;
      intArray0[4] = 1874;
      intArray0[5] = 22;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0, intArray0, 496);
      evaluation0.getDiscardPredictions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".xml");
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.SFEntropyGain();
      evaluation0.addNumericTrainClass(Double.NaN, 467);
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".xml");
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 1874;
      evaluation0.getDiscardPredictions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      // Undeclared exception!
      try { 
        sMOreg0.getMeasure("'uVI4L-+d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Measure ''uVI4L-+d' is not supported!
         //
         verifyException("weka.classifiers.functions.SMOreg", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.listIterator();
      capabilities0.getRevision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 467;
      doubleArray0[1] = (double) 1874;
      doubleArray0[2] = (double) 8;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.364241221917882
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.clear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      stringArray0[4] = "@relation";
      AbstractClassifier.runClassifier(zeroR0, stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-884.232750646123);
      doubleArray0[1] = (double) (-6367);
      doubleArray0[2] = (double) (-6367);
      doubleArray0[3] = (double) (-6367);
      doubleArray0[4] = (-884.232750646123);
      doubleArray0[5] = (-884.232750646123);
      doubleArray0[6] = (double) (-6367);
      doubleArray0[7] = (double) (-6367);
      doubleArray0[8] = (-884.232750646123);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1429.389145163113);
      String[] stringArray1 = new String[0];
      Evaluation.main(stringArray1);
      textDirectoryLoader0.reset();
      evaluation0.toSummaryString((String) null, true);
      evaluation0.errorRate();
      int[] intArray0 = new int[6];
      intArray0[0] = (-6367);
      intArray0[1] = (-6367);
      intArray0[2] = 2109;
      intArray0[3] = (-6367);
      intArray0[4] = (-6367);
      intArray0[5] = (-6367);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1123.78610466064), doubleArray0, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7260705604728712
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      C45Loader c45Loader0 = new C45Loader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(databaseLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation1.updateStatsForIntervalEstimator(gaussianProcesses0, (Instance) null, 2382.043846443892);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.653586056146556
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.KBMeanInformation();
      J48 j48_0 = new J48();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.errorRate();
      evaluation0.numTruePositives((-197112209));
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.KBRelativeInformation();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.clear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-6367);
      evaluation0.setDiscardPredictions(false);
      // Undeclared exception!
      try { 
        instances0.renameAttributeValue(764, 764, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 764, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.getAttributeCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      SMOreg sMOreg1 = new SMOreg();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.updateStatsForPredictor(Double.NaN, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4152167081128346
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".xml");
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.listIterator();
      capabilities0.getRevision();
      sMOreg0.getRevision();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.confusionMatrix();
      Instance instance0 = BallNode.calcCentroidPivot(99, (-2546), (int[]) null, instances0);
      SparseInstance sparseInstance0 = new SparseInstance(instance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 2;
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string1 = evaluation1.toMatrixString(".xml");
      assertEquals(".xml\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string1);
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2731738319283363
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.trueNegativeRate(468);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(468);
      BallNode ballNode0 = new BallNode(5462, 478, 5462, binarySparseInstance0, 5462);
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.718850886588243
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.getRevision();
      sMOreg0.getRevision();
      evaluation0.KBMeanInformation();
      J48 j48_0 = new J48();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 467;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1874;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1874;
      doubleArray0[8] = (double) 1874;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1001.97506790052);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.errorRate();
      evaluation1.numTruePositives((-2));
      double double0 = evaluation1.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7490906203903505
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 742.887;
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = new int[6];
      evaluation0.m_NumClasses = 9;
      intArray0[1] = 499;
      int int0 = 467;
      intArray0[2] = 467;
      evaluation0.m_SumPriorEntropy = Double.NaN;
      intArray0[3] = 2353;
      intArray0[4] = 1874;
      intArray0[5] = 22;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0, intArray0, 496);
      instances0.add((Instance) sparseInstance0);
      textDirectoryLoader0.setDebug(false);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5189410212750993
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.listIterator();
      capabilities0.getRevision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2353;
      doubleArray0[2] = (double) 1874;
      SMOreg sMOreg1 = new SMOreg();
      sMOreg1.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SGD sGD0 = new SGD();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFMeanEntropyGain();
      evaluation0.toClassDetailsString("@relation");
      int[] intArray0 = new int[1];
      intArray0[0] = 2353;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1.0E100), doubleArray0, intArray0, (-2116));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.818524169418516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.getAttributeCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 467;
      doubleArray0[1] = (double) 1874;
      int[] intArray0 = new int[7];
      intArray0[0] = 467;
      intArray0[1] = 0;
      intArray0[2] = 2;
      instances0.listIterator();
      RandomForest randomForest0 = new RandomForest();
      randomForest0.getCapabilities();
      evaluation0.falseNegativeRate(2);
      evaluation0.areaUnderPRC((-529));
      evaluation0.weightedAreaUnderROC();
      evaluation0.unweightedMicroFmeasure();
      // Undeclared exception!
      try { 
        evaluation0.recall(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.094921515293002
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-26);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.toClassDetailsString(".cost");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "globalInfo");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "getClass");
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 875.64023838);
      evaluation0.unclassified();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)7;
      doubleArray0[1] = 875.64023838;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte) (-31);
      doubleArray0[4] = (double) (byte) (-26);
      doubleArray0[5] = (double) (byte) (-26);
      doubleArray0[6] = (double) (byte)7;
      doubleArray0[7] = (double) (byte)7;
      evaluation0.updateNumericScores((double[]) null, doubleArray0, (-1175.5390172));
      evaluation0.kappa();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0148832880194982
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)4;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray1 = new byte[20];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte) (-31);
      byteArray1[4] = (byte) (-26);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      String string0 = evaluation0.toClassDetailsString(".cost");
      assertEquals(".cost\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 875.64023838);
      evaluation0.unclassified();
      evaluation0.setDiscardPredictions(true);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3654597361104444
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      double double0 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      int int0 = 0;
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.13529530560969
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 742.887;
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = new int[6];
      intArray0[0] = 3262;
      intArray0[1] = 499;
      intArray0[2] = 467;
      evaluation0.m_SumPriorEntropy = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(473);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      instances0.add((Instance) sparseInstance0);
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString("-G");
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8913741235084864
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("iM=[");
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.getRevision();
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.getRevision();
      evaluation0.KBMeanInformation();
      J48 j48_0 = new J48();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 5.5;
      doubleArray0[1] = (double) 2;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.08611424224017
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.listIterator();
      sMOreg0.getRevision();
      int[] intArray0 = new int[9];
      intArray0[0] = (-2);
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = (-2);
      Version.VERSION = "The min N of the NGram.";
      intArray0[4] = 886;
      intArray0[5] = (-2);
      intArray0[6] = 886;
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      SelectedTag selectedTag0 = hierarchicalClusterer0.getLinkType();
      sMOreg0.setFilterType(selectedTag0);
      sMOreg0.getRevision();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.confusionMatrix();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1876642154929993
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toSummaryString(false);
      evaluation0.m_SumPriorEntropy = 1428.3763443;
      evaluation0.correct();
      evaluation0.unclassified();
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3000759753606212
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Evaluation.handleCostOption((String) null, 471);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.useNoPriors();
      evaluation2.weightedMatthewsCorrelation();
      double double0 = evaluation2.SFEntropyGain();
      assertEquals(Double.NaN, evaluation2.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation2.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2967903204856603
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toCumulativeMarginDistributionString();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      costMatrix0.getRevision();
      AllFilter allFilter0 = new AllFilter();
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      evaluation0.toMatrixString("Weighted Avg.  ");
      charArray0[1] = 'L';
      charArray0[2] = '(';
      charArray0[3] = '8';
      evaluation0.num2ShortID(473, charArray0, 1415);
      evaluation0.pctCorrect();
      evaluation0.trueNegativeRate(667);
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5635463676836636
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      J48 j48_0 = new J48();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@data";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@data";
      stringArray0[5] = ".bsi";
      stringArray0[6] = "@data";
      AbstractClassifier.runClassifier(j48_0, stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) j48_0;
      objectArray0[1] = (Object) mockRandom0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-884.232750646123);
      doubleArray0[1] = Double.NaN;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.02500000037252903);
      evaluation0.kappa();
      evaluation0.toMatrixString("@relation");
      evaluation0.pctCorrect();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1453), Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1453
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7302602786175907
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 742.887;
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = new int[6];
      intArray0[0] = 3262;
      intArray0[1] = 499;
      intArray0[2] = 467;
      evaluation0.m_SumPriorEntropy = Double.NaN;
      intArray0[3] = 2353;
      intArray0[4] = 1874;
      intArray0[5] = 22;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0, intArray0, 496);
      instances0.add((Instance) sparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".xml");
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.SFEntropyGain();
      evaluation0.addNumericTrainClass(Double.NaN, 467);
      double double0 = evaluation0.matthewsCorrelationCoefficient(113);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.listIterator();
      capabilities0.getRevision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2353;
      doubleArray0[2] = (double) 1874;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 121;
      intArray0[3] = 496;
      SparseInstance sparseInstance0 = new SparseInstance(1874, doubleArray0, intArray0, 0);
      instances0.add((Instance) sparseInstance0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.804299192872498
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-26);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.toClassDetailsString(".cost");
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedAreaUnderROC();
      RandomForest randomForest0 = new RandomForest();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      assertEquals("The distance function to use for finding neighbours (default: weka.core.EuclideanDistance). ", linearNNSearch0.distanceFunctionTipText());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3654597361104444
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      int int0 = 0;
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      Bagging bagging0 = new Bagging();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      int int1 = (-1247);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) bagging0, (Instances) null, (-1247), (java.util.Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(15);
      Object[][] objectArray0 = new Object[9][1];
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) textDirectoryLoader0;
      objectArray1[1] = (Object) instances0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) textDirectoryLoader0;
      objectArray2[8] = (Object) fileSystemHandling0;
      objectArray2[2] = (Object) fileSystemHandling0;
      objectArray2[3] = (Object) textDirectoryLoader0;
      objectArray2[4] = (Object) textDirectoryLoader0;
      objectArray2[5] = (Object) instances0;
      objectArray2[6] = (Object) fileSystemHandling0;
      objectArray2[7] = (Object) costMatrix0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[6];
      objectArray3[0] = (Object) textDirectoryLoader0;
      Object object0 = new Object();
      objectArray3[1] = object0;
      objectArray3[2] = (Object) instances0;
      Object object1 = new Object();
      objectArray3[3] = object1;
      Object object2 = new Object();
      objectArray3[4] = object2;
      objectArray3[5] = (Object) fileSystemHandling0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[0];
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[6];
      objectArray5[0] = (Object) textDirectoryLoader0;
      objectArray5[1] = object2;
      Object object3 = new Object();
      objectArray5[2] = objectArray3[5];
      objectArray5[3] = (Object) textDirectoryLoader0;
      objectArray5[4] = (Object) textDirectoryLoader0;
      objectArray5[5] = object0;
      objectArray0[4] = objectArray5;
      Object[] objectArray6 = new Object[3];
      objectArray6[0] = (Object) textDirectoryLoader0;
      objectArray6[1] = (Object) textDirectoryLoader0;
      objectArray6[2] = object0;
      objectArray0[5] = objectArray6;
      Object[] objectArray7 = new Object[7];
      objectArray7[0] = (Object) costMatrix0;
      objectArray7[1] = object0;
      objectArray7[2] = object0;
      objectArray7[3] = object1;
      objectArray7[4] = object1;
      objectArray7[5] = object1;
      objectArray7[6] = (Object) instances0;
      objectArray0[6] = objectArray7;
      Object object4 = new Object();
      objectArray0[7] = objectArray7;
      Object[] objectArray8 = new Object[1];
      objectArray8[0] = (Object) textDirectoryLoader0;
      objectArray0[8] = objectArray8;
      costMatrix0.m_matrix = objectArray0;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " cases have class ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setRetrieval(454);
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.incorrect();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.717147939525752
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 467;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 22;
      intArray0[2] = 1;
      intArray0[3] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0, intArray0, (-1));
      instances0.add((Instance) sparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G]%C!S6L");
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.addNumericTrainClass(1874, 22);
      double double2 = evaluation0.matthewsCorrelationCoefficient(1874);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2046501152537163
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 742.887;
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = new int[6];
      intArray0[0] = 3262;
      intArray0[1] = 499;
      intArray0[2] = 467;
      evaluation0.m_SumPriorEntropy = Double.NaN;
      intArray0[3] = 2353;
      intArray0[4] = 1874;
      intArray0[5] = 2353;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0, intArray0, 496);
      instances0.add((Instance) sparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".xml");
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.SFEntropyGain();
      try { 
        Evaluation.handleCostOption("@data", 95);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.283649840045977
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      stringArray0[4] = ".arff";
      stringArray0[5] = ".arff";
      stringArray0[6] = "@data";
      stringArray0[7] = ".arff";
      textDirectoryLoader0.setOptions(stringArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 742.887;
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = new int[7];
      intArray0[0] = 3262;
      intArray0[1] = 513;
      intArray0[2] = 467;
      evaluation0.m_SumPriorEntropy = Double.NaN;
      intArray0[4] = 1874;
      evaluation0.confusionMatrix();
      evaluation0.kappa();
      String string0 = evaluation0.toMatrixString("<br/>\n");
      assertEquals("<br/>\n\n   <-- classified as\n", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.275676950933533
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArrayDeque<SGDText> arrayDeque0 = new ArrayDeque<SGDText>();
      arrayDeque0.stream();
      instances0.retainAll(arrayDeque0);
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.058925404748598
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Object[][] objectArray0 = new Object[9][1];
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) textDirectoryLoader0;
      objectArray1[1] = (Object) instances0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) textDirectoryLoader0;
      objectArray2[1] = (Object) fileSystemHandling0;
      objectArray2[2] = (Object) fileSystemHandling0;
      objectArray2[3] = (Object) textDirectoryLoader0;
      objectArray2[4] = (Object) textDirectoryLoader0;
      objectArray2[5] = (Object) instances0;
      objectArray2[6] = (Object) fileSystemHandling0;
      objectArray2[7] = (Object) costMatrix0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[6];
      objectArray3[0] = (Object) textDirectoryLoader0;
      Object object0 = new Object();
      objectArray3[1] = object0;
      objectArray3[2] = (Object) instances0;
      Object object1 = new Object();
      objectArray3[3] = object1;
      Object object2 = new Object();
      objectArray3[4] = object2;
      objectArray3[5] = (Object) fileSystemHandling0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[0];
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[6];
      objectArray5[0] = (Object) textDirectoryLoader0;
      objectArray5[1] = object2;
      Object object3 = new Object();
      objectArray5[2] = object3;
      objectArray5[3] = (Object) textDirectoryLoader0;
      objectArray5[4] = (Object) textDirectoryLoader0;
      objectArray5[5] = object0;
      objectArray0[4] = objectArray5;
      Object[] objectArray6 = new Object[3];
      objectArray6[0] = (Object) textDirectoryLoader0;
      objectArray6[1] = (Object) textDirectoryLoader0;
      objectArray6[2] = object0;
      objectArray0[5] = objectArray6;
      Object[] objectArray7 = new Object[7];
      objectArray7[0] = (Object) costMatrix0;
      objectArray7[1] = object0;
      objectArray7[2] = object0;
      objectArray7[3] = object1;
      objectArray7[4] = object1;
      objectArray7[5] = object1;
      objectArray7[6] = (Object) instances0;
      objectArray0[6] = objectArray7;
      Object object4 = new Object();
      objectArray0[7] = objectArray7;
      Object[] objectArray8 = new Object[1];
      objectArray8[0] = (Object) textDirectoryLoader0;
      objectArray0[8] = objectArray8;
      costMatrix0.m_matrix = objectArray0;
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)7;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.toClassDetailsString(".cost");
      AllFilter allFilter0 = new AllFilter();
      evaluation0.KBRelativeInformation();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7317986984910783
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation0.falseNegativeRate((-6367));
      assertEquals(0.0, double3, 0.01);
      
      evaluation1.areaUnderPRC((-6367));
      double double4 = evaluation1.weightedAreaUnderROC();
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1346568241817123
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("\tfrom the XML file.\n", false);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.trueNegativeRate(468);
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.2703860444355417
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.KBMeanInformation();
      evaluation0.unclassified();
      evaluation0.getClassPriors();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedAreaUnderROC();
      RandomForest randomForest0 = new RandomForest();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = new Capabilities(sMOreg0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Instances instances0 = testInstances0.generate(".xml");
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 1874;
      SGD sGD0 = new SGD();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) sMOreg0, instances0, (-1786), (java.util.Random) mockRandom0, (Object[]) sMOreg0.TAGS_FILTER);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4956609473535118
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SGD sGD0 = new SGD();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) sGD0, instances0, 2, (java.util.Random) mockRandom0, (Object[]) sGD0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      wrapperSubsetEval0.getTechnicalInformation();
      wrapperSubsetEval0.getCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[1] = ".xml";
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6980668213411814
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LMT lMT0 = new LMT();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "No value given for -";
      stringArray0[1] = "OOy&+{vTmo";
      stringArray0[2] = "weightTrimBetaTipText";
      stringArray0[3] = "1Qjtz2@2";
      stringArray0[4] = "T@~o[5MMK*G:";
      stringArray0[5] = "2S2?.J!J81b>0~6";
      stringArray0[6] = "\nPruning the rule ...";
      stringArray0[7] = "Root mean squared error            ";
      LMT.main(stringArray0);
      Evaluation.getGlobalInfo(lMT0);
      ArffLoader arffLoader0 = new ArffLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1053;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = 0;
      AbstractClassifier.makeCopies(gaussianProcesses0, 101);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 101);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1053;
      SparseInstance sparseInstance0 = new SparseInstance(4.5, doubleArray0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      wrapperSubsetEval0.getTechnicalInformation();
      wrapperSubsetEval0.getCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ut";
      stringArray0[1] = ".xml";
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\n\tOffset variable ";
      stringArray0[1] = "\n\tOffset variable ";
      stringArray0[2] = "\n\tOffset variable ";
      stringArray0[5] = "\n\tOffset variable ";
      try { 
        Evaluation.evaluateModel("\n\tOffset variable ", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name 
         // \tOffset variable .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      J48 j48_0 = new J48();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 0;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
