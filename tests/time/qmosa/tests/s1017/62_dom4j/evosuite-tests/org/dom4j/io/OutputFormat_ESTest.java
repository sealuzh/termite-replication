/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:07:08 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9303769801543624
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat1.getIndent();
      outputFormat1.setSuppressDeclaration(false);
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat0.getIndent();
      outputFormat0.setSuppressDeclaration(false);
      OutputFormat outputFormat2 = new OutputFormat((String) null, true, "");
      OutputFormat outputFormat3 = new OutputFormat();
      outputFormat3.isSuppressDeclaration();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptyiR<r1ut-", false, "-expandEmptyiR<r1ut-");
      outputFormat0.setTrimText(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent("T/fmZ#3s");
      outputFormat0.isExpandEmptyElements();
      outputFormat0.isOmitEncoding();
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent("T/fmZ#3s");
      outputFormat0.getEncoding();
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6396601391061796
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-trimText";
      stringArray0[2] = "iR<r1ut-";
      stringArray0[3] = "iR<r1ut-";
      stringArray0[4] = "iR<r1ut-";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.917970816057719
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setEncoding("");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("-xhtmlIm[+:UcyDUaNfY+i");
      outputFormat0.setOmitEncoding(false);
      outputFormat1.setTrimText(true);
      outputFormat0.getEncoding();
      outputFormat1.getNewLineAfterNTags();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (r)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.69752286762219
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isNewLineAfterDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent((String) null);
      outputFormat1.isSuppressDeclaration();
      outputFormat0.setIndent("\"T<*#MdOeQ&<r");
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat2 = new OutputFormat("\"T<*#MdOeQ&<r", false);
      outputFormat2.getIndent();
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat3 = new OutputFormat((String) null, true, "-xhtmlInvalid attribute quote character (");
      outputFormat0.isSuppressDeclaration();
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-encoding";
      stringArray0[1] = null;
      stringArray0[2] = "\"T<*#MdOeQ&<r";
      stringArray0[3] = ").v0^Hs!IJ@u-K3{q:";
      stringArray0[4] = null;
      stringArray0[5] = "\"T<*#MdOeQ&<r";
      stringArray0[6] = "-xhtmlInvalid attribute quote character (";
      stringArray0[7] = ").v0^Hs!IJ@u-K3{q:";
      stringArray0[8] = "\"T<*#MdOeQ&<r";
      int int0 = outputFormat3.parseOptions(stringArray0, 0);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1588960173439076
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("|!~75mEE*i~", true);
      outputFormat0.setIndent("|!~75mEE*i~");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "|!~75mEE*i~";
      outputFormat1.parseOptions(stringArray0, 0);
      assertTrue(outputFormat1.isOmitEncoding());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat2.isOmitEncoding());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.649669942596342
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "^6#2sY\"VQEvQA;H_Y";
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.355825830420688
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1021170635140374
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.isXHTML();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent("*bxs");
      outputFormat0.setIndent("*bxs");
      outputFormat0.isNewLineAfterDeclaration();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*bxs";
      stringArray0[1] = "*bxs";
      outputFormat0.setIndent("*bxs");
      outputFormat0.setLineSeparator(":3*V*7E");
      stringArray0[2] = "*bxs";
      outputFormat0.setXHTML(false);
      stringArray0[3] = "@#F";
      stringArray0[4] = "*bxs";
      outputFormat0.setOmitEncoding(false);
      outputFormat0.getLineSeparator();
      stringArray0[5] = "*bxs";
      stringArray0[6] = "*bxs";
      int int0 = (-1740853845);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1740853845));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1740853845
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2639237867005093
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isNewLineAfterDeclaration();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-indent";
      stringArray0[2] = "-suppressDeclaration";
      stringArray0[3] = "-xhtml\"T<*#MdOeQ&<r";
      stringArray0[4] = "iR<r1ut-";
      stringArray0[5] = "-indent";
      stringArray0[6] = "-indent";
      stringArray0[7] = "iR<r1ut-";
      stringArray0[8] = "iR<r1ut-";
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[10];
      stringArray1[0] = "iR<r1ut-";
      stringArray1[1] = "-indent";
      stringArray1[2] = "-indent";
      stringArray1[3] = "-indent";
      stringArray1[4] = "-indent";
      stringArray1[5] = "u=Sv(90(i_j0Z%g`P#";
      stringArray1[6] = "-xhtml\"T<*#MdOeQ&<r";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-2712));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2712
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8797790870358644
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndentSize(2791);
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("");
      outputFormat0.setIndent("d2/{)^!I#^");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isNewlines();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "}1-bXB3KB~!&gk:=&@";
      stringArray0[3] = "";
      stringArray0[4] = "d2/{)^!I#^";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[8] = "d2/{)^!I#^";
      outputFormat0.parseOptions(stringArray0, 2791);
      assertEquals("d2/{)^!I#^", outputFormat0.getIndent());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.625841752594754
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertTrue(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isNewlines());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals("  ", outputFormat1.getIndent());
      assertFalse(outputFormat1.isXHTML());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isTrimText());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isPadText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7353390710828336
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("  ");
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setIndent("%ZZWBP,#`[CG@pZ[mE~");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.getIndent();
      outputFormat0.setSuppressDeclaration(false);
      OutputFormat outputFormat1 = new OutputFormat("", true, "");
      outputFormat1.isSuppressDeclaration();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%ZZWBP,#`[CG@pZ[mE~";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "~ju>QBSdifN?Ew";
      stringArray0[4] = "T[+DlY2";
      stringArray0[5] = "  ";
      stringArray0[6] = "";
      stringArray0[7] = "%ZZWBP,#`[CG@pZ[mE~";
      outputFormat0.parseOptions(stringArray0, 1791);
      outputFormat0.setIndent("%ZZWBP,#`[CG@pZ[mE~");
      outputFormat1.getAttributeQuoteCharacter();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('C');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (C)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9182321863148515
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "Invalid attribute quote character (";
      stringArray0[3] = "Invalid attribute quote character (";
      stringArray0[4] = "GW@Q#t@N";
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertEquals(2, int0);
      
      boolean boolean0 = outputFormat0.isPadText();
      assertTrue(boolean0);
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertTrue(outputFormat1.isNewlines());
      assertEquals("  ", outputFormat1.getIndent());
      assertFalse(outputFormat1.isXHTML());
      assertTrue(outputFormat1.isTrimText());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isSuppressDeclaration());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.652327749905312
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[5];
      outputFormat0.parseOptions(stringArray0, 39);
      stringArray0[0] = "";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "Invalid attribute quote character (";
      stringArray0[3] = "Invalid attribute quote character (";
      outputFormat0.parseOptions(stringArray0, 5);
      outputFormat0.parseOptions(stringArray0, 763);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isPadText());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertFalse(outputFormat2.isOmitEncoding());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertTrue(outputFormat2.isNewlines());
      assertTrue(outputFormat2.isPadText());
      assertEquals("  ", outputFormat2.getIndent());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertFalse(outputFormat2.isXHTML());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[5];
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat1 = new OutputFormat("");
      outputFormat1.setIndent("");
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat0.getIndent();
      outputFormat1.setSuppressDeclaration(false);
      OutputFormat outputFormat2 = new OutputFormat("{=", false, "");
      outputFormat1.isSuppressDeclaration();
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertFalse(boolean0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-lineSeparator";
      stringArray0[3] = "Invalid attribute quote character (";
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterNTags(1857);
      OutputFormat.createPrettyPrint();
      stringArray0[4] = "GW@Q#t@N";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Invalid attribute quote character (";
      stringArray1[1] = "Invalid attribute quote character (";
      stringArray1[2] = "GW@Q#t@N";
      stringArray1[3] = "-lineSeparator";
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6454371383635378
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-indent");
      OutputFormat outputFormat1 = new OutputFormat("-indent", false);
      outputFormat1.isSuppressDeclaration();
      outputFormat1.setIndent("-lineSeparator");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat1.getIndent();
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat2 = new OutputFormat("", true, "-lineSeparator");
      outputFormat2.isSuppressDeclaration();
      OutputFormat outputFormat3 = new OutputFormat("", false, "");
      outputFormat0.isSuppressDeclaration();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8e/NjG%>4'f+";
      stringArray0[1] = "8e/NjG%>4'f+";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2016067739));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2016067739
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2193160896995403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-lineSeparator";
      stringArray0[3] = "Invalid attribute quote character (";
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      stringArray0[4] = "GW@Q#t@N";
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewlines());
      
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Invalid attribute quote character (";
      stringArray1[1] = "Invalid attribute quote character (";
      stringArray1[2] = "GW@Q#t@N";
      outputFormat0.parseOptions(stringArray1, 2);
      String string0 = outputFormat0.getEncoding();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", string0);
      
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(3, int0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("46GE'YmQ[%");
      String string0 = OutputFormat.STANDARD_INDENT;
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (V)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1453035127196554
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-lineSeparator";
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent((String) null);
      outputFormat1.parseOptions(stringArray0, 515);
      outputFormat1.parseOptions(stringArray0, 515);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "}pZ:";
      stringArray0[6] = null;
      stringArray0[7] = null;
      outputFormat0.parseOptions(stringArray0, 208);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setTrimText(false);
      outputFormat0.isNewlines();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, (-1578));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(true);
      assertFalse(outputFormat0.isXHTML());
      
      outputFormat0.setXHTML(true);
      boolean boolean0 = outputFormat0.isXHTML();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[2] = "";
      OutputFormat outputFormat0 = new OutputFormat("", true);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[5];
      outputFormat0.parseOptions(stringArray0, 39);
      stringArray0[0] = "";
      outputFormat0.parseOptions(stringArray0, 39);
      outputFormat0.parseOptions(stringArray0, 39);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2252279399939554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("S'~ enaz]taE`F09H");
      outputFormat0.setIndent(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize(282);
      outputFormat0.setLineSeparator("S'~ enaz]taE`F09H");
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setPadText(false);
      outputFormat0.isPadText();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat1.isTrimText();
      outputFormat0.setOmitEncoding(false);
      assertEquals("S'~ enaz]taE`F09H", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.225227939993955
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("S'~ enaz]taE`F09H");
      outputFormat0.setIndent(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize(282);
      outputFormat0.setLineSeparator("S'~ enaz]taE`F09H");
      outputFormat0.setPadText(false);
      outputFormat0.isPadText();
      outputFormat1.isTrimText();
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "S'~ enaz]taE`F09H";
      stringArray0[1] = "S'~ enaz]taE`F09H";
      stringArray0[2] = "S'~ enaz]taE`F09H";
      outputFormat1.setXHTML(false);
      stringArray0[3] = "S'~ enaz]taE`F09H";
      stringArray0[4] = "S'~ enaz]taE`F09H";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-1193805476));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1193805476
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("i[%u2o+z6.5KEUV", false, "i[%u2o+z6.5KEUV");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("i[%u2o+z6.5KEUV");
      outputFormat0.isTrimText();
      outputFormat0.setIndent("Im[+:UcyDUaNfY+i");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.getIndent();
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isSuppressDeclaration();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "i[%u2o+z6.5KEUV";
      stringArray0[1] = "Im[+:UcyDUaNfY+i";
      stringArray0[2] = "Im[+:UcyDUaNfY+i";
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9179590133718845
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty");
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-expandEmpty";
      stringArray0[1] = "-expandEmpty";
      stringArray0[2] = "W";
      stringArray0[3] = "-expandEmpty";
      stringArray0[4] = "-expandEmpty";
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = outputFormat0.parseOptions(stringArray0, 2170);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(2170, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-lineSeparator";
      outputFormat0.setOmitEncoding(true);
      stringArray0[4] = "Invalid attribute quote character (";
      stringArray0[3] = "Invalid attribute quote character (";
      stringArray0[4] = "GW@Q#t@N";
      outputFormat0.setEncoding(stringArray0[2]);
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("`Ui6^l-H<v?");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`Ui6^l-H<v?";
      stringArray0[1] = "Invali";
      outputFormat0.parseOptions(stringArray0, 7);
      outputFormat0.parseOptions(stringArray0, 4850);
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      outputFormat0.getLineSeparator();
      assertEquals("`Ui6^l-H<v?", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4990104312963832
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml%ZZWBP,#`[CG@pZ[mE~", false, "-xhtmlX-~75mEE*i~");
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(false);
      outputFormat0.setIndentSize(1698);
      outputFormat0.setTrimText(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent("-xhtmlX-~75mEE*i~");
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("-xhtmlX-~75mEE*i~", outputFormat0.getIndent());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5053262207700677
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-lineSeparator";
      stringArray0[3] = "Invalid attribute quote character (";
      OutputFormat.createCompactFormat();
      stringArray0[4] = "GW@Q#t@N";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Invalid attribute quote character (";
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0164927125448684
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", true);
      int int0 = (-2383);
      outputFormat0.setIndentSize((-2383));
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("-expandEmpty");
      outputFormat0.setIndentSize(2784);
      OutputFormat outputFormat1 = new OutputFormat();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions((String[]) null, 2784);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0457412506850106
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "Invalid attribute quote character (";
      stringArray0[3] = "Invalid attribute quote character (";
      stringArray0[4] = "GW@Q#t@N";
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertEquals(2, int0);
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewlines(false);
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isTrimText());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertFalse(outputFormat2.isOmitEncoding());
      assertTrue(outputFormat2.isTrimText());
      assertTrue(outputFormat2.isPadText());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isNewlines());
      assertFalse(outputFormat2.isXHTML());
      assertEquals("  ", outputFormat2.getIndent());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals("\n", outputFormat2.getLineSeparator());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%ZZWBP,#`[CG@pZ[mE~";
      stringArray0[1] = "%ZZWBP,#`[CG@pZ[mE~";
      stringArray0[2] = "  ";
      outputFormat0.setIndent("");
      outputFormat0.setIndent("%ZZWBP,#`[CG@pZ[mE~");
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("%ZZWBP,#`[CG@pZ[mE~", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding("AC<>0v#H8L");
      assertEquals("AC<>0v#H8L", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.362843374280337
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndentSize((-1792880497));
      outputFormat0.setIndent("%ZZWBP,#`[CG@pZ[mE~");
      outputFormat0.setIndent("-lineS");
      assertEquals("-lineS", outputFormat0.getIndent());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("y8M8[nr;$?*M@ecb4g");
      outputFormat0.setIndentSize(0);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertTrue(boolean0);
      
      outputFormat0.getIndent();
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.909157776151512
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty");
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setIndent("W");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.getIndent();
      outputFormat0.setSuppressDeclaration(false);
      OutputFormat outputFormat1 = new OutputFormat("}:?nm", true, "-expandEmpty");
      outputFormat0.isSuppressDeclaration();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8e/NjG%>4'f+";
      stringArray0[1] = "W";
      stringArray0[2] = "-indentSize";
      stringArray0[3] = "}:?nm";
      stringArray0[4] = "-expandEmpty";
      stringArray0[5] = "8e/NjG%>4'f+";
      stringArray0[6] = "}:?nm";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("W", outputFormat0.getIndent());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.928820156075483
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isNewLineAfterDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("\"T<*#MdOeQ&<r");
      OutputFormat outputFormat2 = new OutputFormat("Im[+:UcyDUaNfY+i");
      outputFormat2.setIndent("\"T<*#MdOeQ&<r");
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat1.isSuppressDeclaration();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Im[+:UcyDUaNfY+i";
      stringArray0[1] = "\"T<*#MdOeQ&<r";
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.7017630849882761
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Im[+:UcyDUa");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "h-";
      stringArray0[1] = "Im[+:UcyDUa";
      stringArray0[2] = "Im[+:UcyDUa";
      stringArray0[3] = "|!~75mEE*i~";
      stringArray0[4] = "|!~75mEE*i~";
      stringArray0[5] = "";
      stringArray0[6] = "|!~75mEE*i~";
      stringArray0[7] = "|!~75mEE*i~";
      stringArray0[8] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 39);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("Im[+:UcyDUa", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, int0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }
}
