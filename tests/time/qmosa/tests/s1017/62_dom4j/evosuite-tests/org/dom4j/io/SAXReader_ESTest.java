/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:07:34 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Enumeration;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.Attributes;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/wg6v0.tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "SoA#]$G#d");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip((-1L));
      sequenceInputStream0.available();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      sequenceInputStream0.available();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.isStringInternEnabled();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("c'", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class c' not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      SAXReader sAXReader1 = new SAXReader();
      String string0 = "<'";
      String string1 = null;
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      StringReader stringReader0 = new StringReader("cnL\"gy;sfN/$MAbP");
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      MockFile mockFile0 = new MockFile("//tmp/wg6v0wg6v");
      MockFile.createTempFile(":G0(.=M>K", "//tmp/wg6v0wg6v", (File) mockFile0);
      mockFile0.mkdir();
      MockFile.createTempFile("Cannot add another element to this Document as it already has a root element of: ", "Y<L", (File) null);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2481121986842663
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("y8M8[nr;$?*M@ecb4g");
      sAXReader_SAXEntityResolver0.uriPrefix = "y8M8[nr;$?*M@ecb4g";
      InputSource inputSource0 = new InputSource("y8M8[nr;$?*M@ecb4g");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException(" Rkvc ", locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getEncoding();
      SAXParseException sAXParseException1 = new SAXParseException("//tmp/wg6v0.tmp", locatorImpl0, sAXParseException0);
      sAXParseException0.getSuppressed();
      sAXParseException1.getColumnNumber();
      SAXParseException sAXParseException2 = new SAXParseException("9f>iTN(lBGyf9v9;o^U", "http://xml.org/sax/features/namespaces", "8_S=U5O$T[>$`k!X", 0, 2223, sAXParseException1);
      sAXParseException0.toString();
      sAXParseException0.addSuppressed(sAXParseException1);
      xMLFilterImpl1.fatalError(sAXParseException1);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/namespaces");
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) null, "org.dom4j.io.PruningElementStack");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "U3i{1y";
      Namespace.get("U3i{1y");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/wg6v0.tmp");
      String string0 = "SoA#]$G#d";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "SoA#]$G#d");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setIgnoreComments(true);
      sAXReader0.setXMLReader(parserAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(parserAdapter1, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@372b81be Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3671693709947967
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/wg6v0wg6v");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.setEncoding("org.jaxen.SimpleVariableContext");
      SAXParseException sAXParseException0 = new SAXParseException("asXPathResult() not yet implemented fully for: ", locator2Impl0);
      locator2Impl0.getEncoding();
      SAXParseException sAXParseException1 = new SAXParseException("//tmp/wg6v0.tmp", locator2Impl0, sAXParseException0);
      SAXParseException sAXParseException2 = new SAXParseException("asXPathResult() not yet implemented fully for: ", locator2Impl0);
      sAXParseException2.getSuppressed();
      sAXParseException1.getColumnNumber();
      MockException mockException0 = new MockException("//tmp/wg6v0wg6v", sAXParseException2);
      MockException mockException1 = new MockException();
      SAXParseException sAXParseException3 = new SAXParseException("//tmp/wg6v0wg6v", (String) null, "2E;n", 0, 0, mockException1);
      SAXParseException sAXParseException4 = new SAXParseException((String) null, locator2Impl0, sAXParseException0);
      sAXParseException4.toString();
      sAXParseException2.addSuppressed(sAXParseException1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.fatalError(sAXParseException3);
      QName qName0 = QName.get((String) null);
      qName0.getDocumentFactory();
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("//tmp/wg6v0wg6v");
      try { 
        sAXReader1.read((Reader) stringReader0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0995015447694865
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Namespace namespace0 = Namespace.get("j3XRx{Ay");
      QName qName0 = QName.get("j3XRx{Ay", namespace0, "org.dom4j.io.SAXReader");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.isStripWhitespaceText();
      sAXReader0.createContentHandler((XMLReader) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      qName0.getQualifiedName();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler("j3XRx{Ay", dispatchHandler0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark((-169));
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      sequenceInputStream0.skip((-862L));
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.getDocumentFactory();
      SAXReader sAXReader2 = new SAXReader((XMLReader) null, true);
      Object object0 = new Object();
      try { 
        sAXReader2.setProperty("org.dom4j.io.SAXReader", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'org.dom4j.io.SAXReader' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.4419512874706975
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      String string0 = "//tmp/wg6v0wg6v";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/wg6v0wg6v");
      sAXReader_SAXEntityResolver0.resolveEntity("org.jaxen.SimpleVariableContext", "//tmp/wg6v0.tmp");
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setStripWhitespaceText(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
      sAXReader0.isIncludeInternalDTDDeclarations();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      String string1 = "I";
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, "org.jaxen.SimpleVariableContext");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4567394045567017
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("y8M8[nr;$?*M@ecb4g");
      sAXReader_SAXEntityResolver0.uriPrefix = "y8M8[nr;$?*M@ecb4g";
      InputSource inputSource0 = new InputSource("y8M8[nr;$?*M@ecb4g");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException(">{h<b", locatorImpl0);
      SAXParseException sAXParseException1 = new SAXParseException("y8M8[nr;$?*M@ecb4g", locatorImpl0, sAXParseException0);
      xMLFilterImpl1.fatalError(sAXParseException1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.addHandler("y8M8[nr;$?*M@ecb4g", (ElementHandler) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler(xMLFilterImpl1);
      MockURL.getFileExample();
      URL uRL0 = MockURL.getFileExample();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5823895603789295
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          QName qName0 = QName.get("Y<L", "Y<L");
          qName0.getDocumentFactory();
          Locator2Impl locator2Impl0 = new Locator2Impl();
          locator2Impl0.setEncoding("g:q*r6=P&ckjS~bE");
          SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl0);
          locator2Impl0.getEncoding();
          SAXParseException sAXParseException1 = new SAXParseException("//tmp/wg6v0.tmp/tmp/wg6v0wg6v0:G0(.o=M>K", locator2Impl0, sAXParseException0);
          SAXParseException sAXParseException2 = new SAXParseException("<!--", locator2Impl0);
          sAXParseException0.getSuppressed();
          sAXParseException1.getColumnNumber();
          SAXReader sAXReader0 = new SAXReader();
          PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
          String string0 = "";
          pruningDispatchHandler0.removeHandler("");
          sAXReader0.addHandler("g:q*r6=P&ckjS~bE", (ElementHandler) null);
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          sAXReader0.getErrorHandler();
          SAXReader sAXReader1 = new SAXReader((String) null);
          sAXReader1.setErrorHandler((ErrorHandler) null);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor208.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor208.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4419512874706975
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      String string0 = "//tmp/wg6v0wg6v";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/wg6v0wg6v");
      String string1 = "//tmp/wg6v0.tmp";
      sAXReader_SAXEntityResolver0.resolveEntity("org.jaxen.SimpleVariableContext", "//tmp/wg6v0.tmp");
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setStripWhitespaceText(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
      sAXReader0.isIncludeInternalDTDDeclarations();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      String string2 = "";
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, "//tmp/wg6v0.tmp");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      String string0 = "]]>";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("]]>");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5518125163375087
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
          XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
          ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
          sAXReader0.setIgnoreComments(false);
          sAXReader0.setXMLReader(parserAdapter0);
          String string0 = "";
          ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
          DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
          sAXReader0.configureReader(parserAdapter1, defaultHandler2_0);
          ElementStack elementStack0 = new ElementStack();
          elementStack0.getDispatchHandler();
          sAXReader0.addHandler("<!--", (ElementHandler) null);
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          sAXReader0.getErrorHandler();
          sAXReader0.setErrorHandler(defaultHandler2_0);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:249)
             // org.xml.sax.helpers.ParserAdapter.parse(ParserAdapter.java:430)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor208.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:249)
             // org.xml.sax.helpers.ParserAdapter.parse(ParserAdapter.java:430)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor208.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Namespace namespace0 = Namespace.get("j3XRx{Ay");
      QName qName0 = QName.get("j3XRx{Ay", namespace0, "org.dom4j.io.SAXReader");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.isStripWhitespaceText();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      qName0.getQualifiedName();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4905526446902
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Namespace namespace0 = Namespace.get("U3i{wy");
      QName qName0 = QName.get("U3i{wy", namespace0, (String) null);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.createContentHandler((XMLReader) null);
      qName0.getQualifiedName();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler((String) null, dispatchHandler0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark(1);
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      sequenceInputStream0.skip(0L);
      sequenceInputStream0.available();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, sequenceInputStream0);
      sequenceInputStream0.available();
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("y8M8[nr;$?*M@ecb4g");
      sAXReader_SAXEntityResolver0.uriPrefix = "y8M8[nr;$?*M@ecb4g";
      InputSource inputSource0 = new InputSource("y8M8[nr;$?*M@ecb4g");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("y8M8[nr;$?*M@ecb4g");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class y8M8[nr;$?*M@ecb4g not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sAXReader0.isValidating();
      sAXReader0.isValidating();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getDocumentFactory();
      try { 
        MockURL.URL((String) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.isValidating();
      sAXReader0.isValidating();
      sAXReader0.getDispatchHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getDocumentFactory();
      try { 
        MockURL.URL((String) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3497427651978415
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      MockFile mockFile0 = new MockFile(":G0(.=M>K");
      MockFile.createTempFile("//tmp/wg6v0wg6v", ":G0(.=M>K", (File) mockFile0);
      File file0 = MockFile.createTempFile(":G0(.=M>K", "Cannot add another element to this Document as it already has a root element of: ", (File) mockFile0);
      SAXReader sAXReader1 = new SAXReader((String) null, false);
      try { 
        sAXReader1.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      MockFile mockFile0 = new MockFile(":G0(.=M>K");
      File file0 = MockFile.createTempFile("//tmp/wg6v0wg6v", "", (File) mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile1 = new MockFile("//tmp/wg6v0wg6v");
      MockFile mockFile2 = new MockFile(file0, ":G0(.=M>K");
      try { 
        sAXReader0.read((File) mockFile2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5345863065472094
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createQName("http://xml.org/sax/handlers/LexicalHandler", "http://xml.org/sax/handlers/LexicalHandler", "6-5Piy;h|Dw= j?Xy6");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler("http://xml.org/sax/handlers/LexicalHandler", dispatchHandler0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      MockURL.getFileExample();
      try { 
        sAXReader0.read(" of document ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/ of document  (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/ of document  (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.resetHandlers();
      dispatchHandler0.removeHandler("6.|2J^");
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      dispatchHandler0.addHandler("6.|2J^", (ElementHandler) null);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.resetHandlers();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.setFeature("", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setValidation(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.installXMLFilter((XMLReader) null);
      try { 
        xMLFilterImpl0.setProperty("R$J2H`*ei,", xMLFilterImpl1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: R$J2H`*ei,
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      ElementStack elementStack0 = new ElementStack(748);
      elementStack0.peekElement();
      QName qName0 = defaultDocumentFactory0.createQName("UGl<!", "UGl<!");
      defaultDocumentFactory0.createAttribute((Element) null, qName0, "mEbu` ixux");
      defaultDocumentFactory0.getXPathNamespaceURIs();
      defaultDocumentFactory0.setXPathNamespaceURIs((Map<String, String>) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.removeHandler("/");
      // Undeclared exception!
      try { 
        MockURL.URL("/", "Invalid path of length: ", 1694, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      sAXReader1.getXMLFilter();
      SAXReader sAXReader2 = new SAXReader(xMLFilterImpl0);
      sAXReader2.setStringInternEnabled(false);
      sAXReader1.setStripWhitespaceText(false);
      sAXReader1.installXMLFilter(xMLFilterImpl0);
      sAXReader0.createXMLReader();
      InputSource inputSource0 = new InputSource();
      String string0 = "*IcufE";
      inputSource0.setSystemId("*IcufE");
      String string1 = " : ";
      StringReader stringReader0 = new StringReader("*IcufE");
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null, (-1201), (-1201));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QName qName0 = QName.get((String) null);
      qName0.getDocumentFactory();
      qName0.setDocumentFactory((DocumentFactory) null);
      qName0.getDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("%,(4p_tm;c5", "%,(4p_tm;c5");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType((String) null, "%,(4p_tm;c5");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      dOMNamespace0.isSameNode(dOMDocument0);
      QName.get((String) null, (Namespace) dOMNamespace0, "e6");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.getDocumentFactory();
      try { 
        sAXReader0.setProperty("", qName0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.507949694759748
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      String string0 = "//tmp/wg6v0Swg6v";
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLReaderAdapter xMLReaderAdapter1 = new XMLReaderAdapter(parserAdapter0);
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter1);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.configureReader(parserAdapter1, defaultHandler2_0);
      String string1 = "<!--";
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      sAXReader1.addHandler("<!--", (ElementHandler) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader1.getErrorHandler();
      SAXReader sAXReader2 = null;
      try {
        sAXReader2 = new SAXReader("<!--");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class <!-- not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader();
      String string0 = ";<x}gkm";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.setDefaultHandler((ElementHandler) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "";
      defaultDocumentFactory0.createElement("-i|leSgz", "//tmp/wg6v0.tmp/tmp/wg6v0wg6v0:G0(.=M>K");
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.getXMLReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string1 = "";
      Attributes attributes0 = null;
      Attributes2Impl attributes2Impl0 = null;
      try {
        attributes2Impl0 = new Attributes2Impl((Attributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xml.sax.ext.Attributes2Impl", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      String string0 = "http://xml.org/sax/handlers/LexicalHandler";
      documentFactory0.createQName("http://xml.org/sax/handlers/LexicalHandler", "http://xml.org/sax/handlers/LexicalHandler", "6-5Piy;h|Dw= j?Xy6");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory1 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(documentFactory1, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader1.isIncludeInternalDTDDeclarations();
      // Undeclared exception!
      try { 
        MockURL.openStream((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      String string0 = " of document ";
      String string1 = "namespace";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("namespace");
      sAXReader_SAXEntityResolver0.resolveEntity("^g<iW3ZqzQ!(VA", "http://xml.org/sax/properties/lexical-handler");
      String string2 = "//home/ubuntu/termite/projects/62_dom4j/:G0(.=M>K/tmp/wg6v0wg6v/:G0(.=M>K1ID";
      sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/:G0(.=M>K/tmp/wg6v0wg6v/:G0(.=M>K1ID", "");
      boolean boolean0 = true;
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("org.jaxen.JaxenHandler", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class org.jaxen.JaxenHandler does not implement XMLReader
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(boolean0);
      
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("}QU(cUpV[L6oW\"dD");
      sAXReader_SAXEntityResolver0.uriPrefix = "}QU(cUpV[L6oW\"dD";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "//tmp/wg6v0wg6v";
      stringArray0[1] = "//tmp/wg6v0wg6v";
      stringArray0[2] = "}QU(cUpV[L6oW\"dD";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0, 26);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setErrorHandler(handlerBase0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VfUn!<y.b+(4k");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-619), 545);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "VfUn!<y.b+(4k");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4452370493802307
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      documentFactory0.createElement("//home/ubuntu/termite/projects/62_dom4j/ka\"%M'u$|XqK>XFu/Pil.gT|-x]sk-/DA..nK9~l>8E#-%<0_EioJmP^`9", " .pq\"?A\"U:$>a");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.uriPrefix = " .pq\"?A\"U:$>a";
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/ka\"%M'u$|XqK>XFu/Pil.gT|-x]sk-/DA..nK9~l>8E#-%<0_EioJmP^`9");
      mockFile0.setExecutable(true, true);
      sAXReader0.installXMLFilter(xMLReader0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/ka\"%M'u$|XqK>XFu/Pil.gT|-x]sk-/DA..nK9~l>8E#-%<0_EioJmP^`9");
      sAXReader_SAXEntityResolver1.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/ka\"%M'u$|XqK>XFu/Pil.gT|-x]sk-/DA..nK9~l>8E#-%<0_EioJmP^`9", " naie: ");
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 11);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.unread(58);
      try { 
        sAXReader0.setProperty("@m6T6T2V*PuFZQ", pushbackInputStream0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '@m6T6T2V*PuFZQ' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("y8M8[nr;$?*M@ecb4g");
      sAXReader_SAXEntityResolver0.uriPrefix = "y8M8[nr;$?*M@ecb4g";
      InputSource inputSource0 = new InputSource("y8M8[nr;$?*M@ecb4g");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Feature: http://xml.org/sax/features/namespace-prefixes Nested exception: Feature: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      String string0 = " of document ";
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.skip((-1L));
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      sequenceInputStream2.available();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream2);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream2);
      sequenceInputStream0.available();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) sequenceInputStream3, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.360021718159183
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLReader();
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4650276902273234
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      QName qName0 = QName.get("Yo<L", "Yo<L");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getEntityResolver();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.setEncoding((String) null);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl0);
      locator2Impl0.getEncoding();
      SAXParseException sAXParseException1 = new SAXParseException("-", locator2Impl0, sAXParseException0);
      sAXParseException1.getSuppressed();
      sAXParseException0.getColumnNumber();
      SAXParseException sAXParseException2 = new SAXParseException("Yo<L", "org.dom4j.VisitorSupport", "Yo<L", (-790), (-790), sAXParseException1);
      sAXParseException0.toString();
      sAXParseException2.addSuppressed(sAXParseException1);
      xMLFilterImpl0.fatalError(sAXParseException2);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("vF-");
      try { 
        sAXReader0.read((InputStream) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.5370729966451027
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          QName qName0 = QName.get("Yo<L", "Yo<L");
          qName0.getDocumentFactory();
          SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
          sAXReader0.getEntityResolver();
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          int int0 = (-790);
          Locator2Impl locator2Impl0 = new Locator2Impl();
          locator2Impl0.setEncoding((String) null);
          SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl0);
          locator2Impl0.getXMLVersion();
          locator2Impl0.getEncoding();
          SAXParseException sAXParseException1 = new SAXParseException("-", locator2Impl0, sAXParseException0);
          sAXParseException1.getSuppressed();
          sAXReader0.getErrorHandler();
          SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
          sAXReader1.setErrorHandler(xMLFilterImpl0);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor208.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor208.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      QName qName0 = documentFactory0.createQName("http://xml.org/sax/handlers/LexicalHandler", "http://xml.org/sax/handlers/LexicalHandler", "6-5Piy;h|Dw= j?Xy6");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory.getInstance();
      SAXParseException sAXParseException0 = new SAXParseException((String) null, "lgX*?*euF-|Q^h;h", ":", 2127, 465);
      SAXParseException sAXParseException1 = new SAXParseException((String) null, ":", "HV!IVW}-[", 2127, 92, sAXParseException0);
      sAXParseException0.toString();
      sAXParseException0.addSuppressed(sAXParseException1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXParseException sAXParseException2 = new SAXParseException("5", "org.xml.sax.SAXParseExceptionpublicId: lgX*?*euF-|Q^h;h; systemId: :; lineNumber: 2127; columnNumber: 465", "jN{@KX%}Z8r#AV.`", 465, 2127, sAXParseException0);
      xMLFilterImpl0.fatalError(sAXParseException0);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      StringReader stringReader0 = new StringReader("lgX*?*euF-|Q^h;h");
      try { 
        sAXReader0.read((Reader) stringReader0, "cR3M_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/cR3M_ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      QName qName0 = QName.get("Y<L", "Y<L");
      qName0.getDocumentFactory();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.setEncoding("g:q*r6=P&ckjS~bE");
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl0);
      locator2Impl0.getEncoding();
      SAXParseException sAXParseException1 = new SAXParseException("//tmp/wg6v0.tmp/tmp/wg6v0wg6v0:G0(.o=M>K", locator2Impl0, sAXParseException0);
      SAXParseException sAXParseException2 = new SAXParseException("<!--", locator2Impl0);
      sAXParseException0.getSuppressed();
      sAXParseException1.getColumnNumber();
      MockException mockException0 = new MockException((String) null, sAXParseException2);
      SAXParseException sAXParseException3 = new SAXParseException((String) null, "<!--", "jN{@KX%}Z8r#AV.`", 465, 465, sAXParseException2);
      sAXParseException1.toString();
      sAXParseException0.addSuppressed(sAXParseException2);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXParseException sAXParseException4 = new SAXParseException("//home/ubuntu/termite/projects/62_dom4j/ka\"%M'u$|XqK>XFu/Pil.gT|-x]sk-/DA..nK9~l>8E#-%<0_EioJmP^`9", "g:q*r6=P&ckjS~bE", "5", 0, 0, sAXParseException0);
      xMLFilterImpl0.fatalError(sAXParseException4);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/ka\"%M'u$|XqK>XFu/Pil.gT|-x]sk-/DA..nK9~l>8E#-%<0_EioJmP^`9");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("//tmp/wg6v0.tmp", "//home/ubuntu/termite/projects/62_dom4j/ka\"%M'u$|XqK>XFu/Pil.gT|-x]sk-/DA..nK9~l>8E#-%<0_EioJmP^`9");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      String string0 = " of document ";
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      String string1 = "Gh)$|=MF;";
      try { 
        sAXReader0.setXMLReaderClassName("Gh)$|=MF;");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class Gh)$|=MF; not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setMergeAdjacentText(false);
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = userDataElement0.clone();
      QName qName0 = QName.get("");
      defaultDocumentFactory0.createAttribute((Element) userDataElement1, qName0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = " [Comment: \"";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Error on line ";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 0);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIgnoreComments());
      
      sAXReader0.setIgnoreComments(true);
      assertTrue(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.315487224168137
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      documentFactory0.createElement(" of document ", "NH$XuMV?W4z-");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("comment()");
      sAXReader_SAXEntityResolver0.resolveEntity("comment()", "");
      sAXReader0.getXMLReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader_SAXEntityResolver0.resolveEntity("b>8", "Validation not supported for XMLReader: ");
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      try { 
        sAXReader0.setFeature("KvR", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'KvR' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setEncoding("0~/C>~IqH_J2");
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Namespace namespace0 = Namespace.get("U3i{wy");
      QName qName0 = QName.get("U3i{wy", namespace0, (String) null);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.createContentHandler((XMLReader) null);
      qName0.getQualifiedName();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler((String) null, dispatchHandler0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark(1);
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      sequenceInputStream0.skip(0L);
      sequenceInputStream0.available();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl0.startElement("U3i{wy", "15}:", "http://xml.org/sax/handlers/LexicalHandler", attributesImpl0);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("SBOjXfE]vJSGlPl0", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class SBOjXfE]vJSGlPl0 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2637804311525747
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.skip((-1L));
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      InputSource inputSource0 = new InputSource();
      try { 
        sAXReader1.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      Object object0 = new Object();
      Object object1 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object2 = new Object();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getDispatchHandler();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertEquals(0, pipedInputStream1.available());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.resetHandlers();
      sAXReader0.installXMLFilter(parserAdapter0);
      try { 
        sAXReader0.setProperty("jJ(k)", parserAdapter0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: jJ(k)
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl1.startElement("", "\" ", (String) null, attributesImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl1.startElement("", "\" ", (String) null, attributesImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      InputSource inputSource0 = new InputSource(" of document ");
      DocumentFactory documentFactory1 = DefaultDocumentFactory.getInstance();
      documentFactory0.createDocument(" of document ");
      SAXReader sAXReader1 = new SAXReader(documentFactory1, false);
      sAXReader1.createDefaultEntityResolver("org.jaxen.function.IdFunction");
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      MockFile mockFile0 = new MockFile("//tmp/wg6v0.tmp");
      File file0 = MockFile.createTempFile("//tmp/wg6v0wg6v", ":G0(.o=M>K", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.338123915578089
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/wg6v0wg6v");
      sAXReader_SAXEntityResolver0.resolveEntity("org.jaxen.impleVarialeContext", "//tmp/wg6v0.tmp");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HandlerBase handlerBase0 = new HandlerBase();
      String string0 = "";
      handlerBase0.resolveEntity("", "//tmp/wg6v0.tmp");
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory.getInstance();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.skip((-1L));
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      sequenceInputStream2.available();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream2);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream2, sequenceInputStream2);
      sequenceInputStream0.available();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.createXMLReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("28");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("sum", (String) null);
      assertNotNull(inputSource0);
  }
}
