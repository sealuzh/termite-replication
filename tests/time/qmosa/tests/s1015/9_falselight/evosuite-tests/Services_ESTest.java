/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:21:10 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7652018460298957
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("#4}uj)`K,n<8Z", (-235));
      services_HTTP_Result0.toString();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://8o8:0");
      services_HTTP_Result0.time = (long) 0;
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "f");
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("BV}uGtz", 765);
      String string0 = services_SIMPLE_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("avC;tew:a]RtIA&", 765);
      services_SIMPLE_Result1.toString();
      Services.SIMPLE_Result services_SIMPLE_Result2 = new Services.SIMPLE_Result();
      services_SIMPLE_Result1.toString();
      services_SIMPLE_Result0.reset();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("", 765);
      String string1 = services_SIMPLE_Result2.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string1);
      
      services_SIMPLE_Result2.reset();
      Services.SIMPLE_Result services_SIMPLE_Result3 = new Services.SIMPLE_Result();
      services_SIMPLE_Result3.works = false;
      services_SIMPLE_Result3.reset();
      services_SIMPLE_Result0.reset();
      String string2 = services_HTTP_Result1.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **.\n****", string2);
      
      Services.testHTTPS((String) null, 0);
      String string3 = services_SIMPLE_Result1.toString();
      assertFalse(string3.equals((Object)string0));
      
      services_SIMPLE_Result1.reset();
      Services.testHTTPS("B E+l", 765);
      Services.SIMPLE_Result services_SIMPLE_Result4 = Services.testPOP3("**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **", 0);
      assertFalse(services_SIMPLE_Result4.works);
      assertEquals(0L, services_SIMPLE_Result4.time);
      
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTP("8o8", 0);
      assertTrue(services_HTTP_Result2.works);
      assertEquals(2, services_HTTP_Result2.page_weight);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      System.setCurrentTimeMillis(3439L);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "\n");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Services.testHTTPS("** Temps : ", 0);
      Services.testHTTPS("", 0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "uS)}4.,o>H");
      System.setCurrentTimeMillis(3439L);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.86271545302801
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("#4}uj)`K,n<8Z", (-235));
      services_HTTP_Result0.toString();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://:765");
      services_HTTP_Result0.time = 1011L;
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "f");
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("BV}uGtz", 1);
      services_SIMPLE_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("avC;tew:a]RtIA&", 765);
      services_SIMPLE_Result1.toString();
      Services.SIMPLE_Result services_SIMPLE_Result2 = new Services.SIMPLE_Result();
      services_SIMPLE_Result1.toString();
      services_SIMPLE_Result0.reset();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("", 765);
      Services services0 = new Services();
      services_SIMPLE_Result2.toString();
      services_SIMPLE_Result2.reset();
      Services.SIMPLE_Result services_SIMPLE_Result3 = Services.testSMTP("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", 0);
      services_SIMPLE_Result3.works = false;
      services_SIMPLE_Result3.reset();
      services_SIMPLE_Result0.reset();
      services_HTTP_Result1.toString();
      assertEquals((-1), services_HTTP_Result1.code);
      
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTPS((String) null, 0);
      services_SIMPLE_Result1.toString();
      services_SIMPLE_Result1.reset();
      services_HTTP_Result2.reset();
      services_HTTP_Result1.reset();
      Services.testPOP3("", 365);
      services_SIMPLE_Result2.reset();
      assertFalse(services_SIMPLE_Result2.works);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 2218);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("220", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      Services.testSMTP(",4WgxR'vsScY@b7=V", 2218);
      System.setCurrentTimeMillis((-1323L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2218);
      System.setCurrentTimeMillis(0L);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("**Erreur : java.lang.NullPointerException**", 2218);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("Services", (-1));
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_SIMPLE_Result0.works = true;
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.Error = "Services";
      services_HTTP_Result0.toString();
      services_HTTP_Result0.page_weight = 1;
      services_HTTP_Result0.reset();
      services_HTTP_Result0.Error = "Services";
      services_SIMPLE_Result0.reset();
      services_HTTP_Result0.page_weight = (-1);
      services_SIMPLE_Result0.reset();
      services_HTTP_Result0.Error = "Services";
      services_HTTP_Result0.code = (-1);
      services_HTTP_Result0.toString();
      services_SIMPLE_Result0.works = false;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.2", 555);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.SIMPLE_Result services_SIMPLE_Result1 = new Services.SIMPLE_Result();
      Services.HTTP_Result services_HTTP_Result1 = new Services.HTTP_Result();
      services_SIMPLE_Result0.reset();
      assertFalse(services_SIMPLE_Result0.works);
      
      Services.testHTTP("E/M~", (-1));
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testPOP3(".)M", 555);
      services_SIMPLE_Result2.reset();
      services_HTTP_Result1.reset();
      Services.testSMTP("BXUB|9ho$9", (-1));
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTPS("", 0);
      assertEquals(0, services_HTTP_Result2.code);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", 788);
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.Error = "**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (java.io.IOException: Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@58b651b0) **.\n****";
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.reset();
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 3450);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.testSMTP("", (-1));
      services_SIMPLE_Result0.reset();
      Services.testPOP3("", (-1));
      Services.testPOP3((String) null, 3450);
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("", (-1));
      assertFalse(services_SIMPLE_Result1.works);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", (-178));
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      assertEquals(0L, services_HTTP_Result0.time);
      
      services_HTTP_Result0.time = 2267L;
      services_HTTP_Result0.page_weight = (-2205);
      services_HTTP_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", 1);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Services.testHTTP((String) null, 0);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("H3?=uYFr:{X#BYy", 0);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("H3?=uYFr:{X#BYy", (-3188));
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: [H3?=uYFr:{X#BYy]) **.\n****", string0);
      
      services_HTTP_Result0.code = 0;
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTPS("", 0);
      services_HTTP_Result2.reset();
      services_HTTP_Result1.reset();
      Services.HTTP_Result services_HTTP_Result3 = Services.testHTTP((String) null, 0);
      assertEquals(0L, services_HTTP_Result3.time);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Services services0 = new Services();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("U*P>4Fw!gJ)WkpA", 0);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
      assertFalse(services_HTTP_Result0.works);
  }
}
