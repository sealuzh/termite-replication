/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:04:57 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2542277526043484
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|");
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("|");
      xPathLexer0.minus();
      xPathLexer0.consume((-1075));
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.506182338874068
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Crk");
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.number();
      xPathLexer0.setXPath("E^)yN}MM~?");
      xPathLexer0.consume((-1931));
      xPathLexer0.leftBracket();
      xPathLexer0.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.876122517590105
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(")A", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.setXPath("4[H^: ~AUThJ.,P0");
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.rightBracket();
      String string0 = token3.toString();
      assertEquals("[ (4) (H)", string0);
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      Token token5 = xPathLexer0.at();
      assertEquals("^", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer1.setPreviousToken(token0);
      assertEquals("$", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer("4[H^: ~AUThJ.,P0");
      Token token6 = xPathLexer2.nextToken();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals(":", token7.getTokenText());
      
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("~AUThJ.,P0", token9.getTokenText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2875160649387896
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lsUcEgX9)");
      Token token0 = xPathLexer0.whitespace();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("sUcEgX9", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("lsUcEgX9)");
      Token token3 = xPathLexer1.slashes();
      xPathLexer1.or();
      String string0 = token3.toString();
      assertEquals("[ (11) (l)", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (18) ())", string1);
      
      Token token4 = xPathLexer0.number();
      xPathLexer0.consume();
      String string2 = token0.toString();
      assertEquals("[ (-2) ()", string2);
      
      Token token5 = xPathLexer1.comma();
      String string3 = token5.toString();
      assertEquals("[ (32) (s)", string3);
      
      xPathLexer0.and();
      xPathLexer1.colon();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      xPathLexer1.setPreviousToken(token4);
      assertEquals(30, token4.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer1.equals();
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer1.at();
      assertEquals("E", token8.getTokenText());
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer1.rightBracket();
      assertEquals(4, token9.getTokenType());
      assertEquals("g", token9.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(9, int0);
      
      xPathLexer0.plus();
      xPathLexer1.slashes();
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals("9", token10.getTokenText());
      
      Token token11 = xPathLexer1.equals();
      assertEquals(")", token11.getTokenText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0940260914372155
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(")A", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      xPathLexer0.isIdentifierChar('x');
      Token token3 = xPathLexer0.at();
      String string0 = token3.toString();
      assertEquals("[ (16) (r)", string0);
      
      xPathLexer0.consume();
      String string1 = token0.toString();
      assertEquals("[ (17) ($)", string1);
      
      xPathLexer0.getPreviousToken();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("x", token4.getTokenText());
      
      xPathLexer0.consume(0);
      xPathLexer0.at();
      Token token5 = xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.not();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.currentPosition();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.identifier();
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals(">", token8.getTokenText());
      
      xPathLexer0.operatorName();
      String string2 = token5.toString();
      assertEquals("[ (11) (b)", string2);
      
      Token token9 = xPathLexer0.not();
      assertEquals("^", token9.getTokenText());
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("CM", token10.getTokenText());
      assertEquals((-1), token10.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.055944392733281
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("O", token0.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.dollar();
      Token token2 = xPathLexer0.slashes();
      assertEquals("N", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.setXPath("ONk/W*^A/hX(0");
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer1.div();
      Token token4 = xPathLexer0.pipe();
      assertEquals("O", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer1.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      String string0 = token6.toString();
      assertEquals("[ (15) (Nk)", string0);
      
      xPathLexer1.identifier();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("/", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("ONk/W*^A/hX(0");
      xPathLexer2.setPreviousToken(token1);
      assertEquals(26, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.getPreviousToken();
      Token token8 = xPathLexer2.nextToken();
      assertEquals("ONk", token8.getTokenText());
      
      xPathLexer1.slashes();
      XPathLexer xPathLexer4 = new XPathLexer("E0uQ3*:}V_:");
      Token token9 = xPathLexer4.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals((-1), token10.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9156847554980743
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(")A", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals("Z", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('x');
      Token token3 = xPathLexer0.at();
      String string0 = token3.toString();
      assertEquals("[ (16) (r)", string0);
      
      xPathLexer0.consume();
      String string1 = token0.toString();
      assertEquals("[ (17) ($)", string1);
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(0);
      xPathLexer0.at();
      Token token4 = xPathLexer0.slashes();
      assertEquals("0", token4.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.not();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('g');
      assertTrue(boolean1 == boolean0);
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("ZN7oC?h[");
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("Z", token7.getTokenText());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer1.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("N", token9.getTokenText());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals(30, token10.getTokenType());
      assertEquals("7", token10.getTokenText());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1375592843703064
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("AZ", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("r", token3.getTokenText());
      
      xPathLexer0.isIdentifierChar('x');
      Token token4 = xPathLexer0.at();
      token4.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (17) ($)", string0);
      
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("0", token5.getTokenText());
      
      xPathLexer0.consume(0);
      Token token6 = xPathLexer0.at();
      Token token7 = xPathLexer0.slashes();
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.currentPosition();
      Token token9 = xPathLexer0.nextToken();
      assertEquals("U", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      assertEquals(">", token10.getTokenText());
      
      xPathLexer0.or();
      token7.toString();
      String string1 = token6.toString();
      assertEquals("[ (16) (b)", string1);
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      Token token14 = xPathLexer0.leftParen();
      assertEquals("M", token14.getTokenText());
      
      Token token15 = xPathLexer0.star();
      assertEquals(20, token15.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3042395325100231
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("");
      xPathLexer0.rightParen();
      xPathLexer0.minus();
      xPathLexer0.consume((-1075));
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.00797662401156
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P0gXwL");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("P0gXwL", token0.getTokenText());
      
      xPathLexer0.setXPath("$)AZr!x0b16U>^CM");
      Token token1 = xPathLexer0.minus();
      assertEquals("$", token1.getTokenText());
      
      xPathLexer0.consume(30);
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.at();
      xPathLexer1.dollar();
      xPathLexer1.equals();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("$)AZr!x0b16U>^CM");
      xPathLexer2.number();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer2.notEquals();
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer2.plus();
      xPathLexer1.getPreviousToken();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer1.number();
      Token token10 = xPathLexer2.identifier();
      assertEquals("Zr", token10.getTokenText());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer2.plus();
      assertEquals(5, token13.getTokenType());
      assertEquals("!", token13.getTokenText());
      
      Token token14 = xPathLexer2.number();
      assertEquals(30, token14.getTokenType());
      assertEquals("", token14.getTokenText());
      
      Token token15 = xPathLexer1.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.058082356899947
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      xPathLexer0.slashes();
      token0.toString();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.not();
      Token token2 = xPathLexer0.nextToken();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.118984295907139
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("Nk", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      Token token5 = xPathLexer0.rightParen();
      xPathLexer0.div();
      Token token6 = xPathLexer0.at();
      assertEquals("*", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      token0.toString();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("^A/hX(0", token7.getTokenText());
      
      token0.toString();
      String string0 = token5.toString();
      assertEquals("[ (2) (W)", string0);
      
      String string1 = token4.toString();
      assertEquals("[ (4) ()", string1);
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("^", token8.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      Token token9 = xPathLexer0.slashes();
      assertEquals("A/", token9.getTokenText());
      assertEquals(12, token9.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('^');
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("a FcW^?C<Nf]L[e");
      Token token10 = xPathLexer1.nextToken();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals("h", token11.getTokenText());
      
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      assertEquals(" ", token12.getTokenText());
      
      Token token13 = xPathLexer1.nextToken();
      assertEquals("FcW^?C<Nf]L[e", token13.getTokenText());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1353692352422176
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")[DQ!e5VLr[3S1z`][");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("D", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("Q", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("!", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.consume(1952);
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token5);
      
      xPathLexer0.setPreviousToken(token5);
      assertEquals("om.werken.saxpath.XPathLexer", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.endPosition();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.equals();
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0471168367860724
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")[DQ!e5VLr[3S1z`][");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("Q", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("!", token2.getTokenText());
      
      xPathLexer0.consume(1952);
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("o", token4.getTokenText());
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals("[", token5.getTokenText());
      
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      assertEquals("m.werken.saxpath.XPathLexer", token6.getTokenText());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.dots();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      assertEquals("c", token9.getTokenText());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6965681193128663
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("$", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(")A", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      xPathLexer0.isIdentifierChar('x');
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals(">^", token4.getTokenText());
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals("x0b16U", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6898089249028088
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("Nk", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.rightParen();
      xPathLexer0.div();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("W", token5.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.whitespace();
      token0.toString();
      token0.toString();
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      token0.toString();
      String string0 = token4.toString();
      assertEquals("[ (2) ()", string0);
      
      String string1 = token3.toString();
      assertEquals("[ (4) (/)", string1);
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("^A", token7.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("[ (4) (O)");
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(")", token9.getTokenText());
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(1, token10.getTokenType());
      assertEquals("(", token10.getTokenText());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7961637431008923
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("y", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("^Z;DTF", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("^Z", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      assertNotSame(token5, token2);
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("T", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals("F", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.951842130572988
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$5sZrEx0b169]U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("5s", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("Z", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.isIdentifierChar('x');
      Token token3 = xPathLexer0.at();
      token3.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (17) ($)", string0);
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(0);
      Token token4 = xPathLexer0.at();
      Token token5 = xPathLexer0.slashes();
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("b", token6.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.currentPosition();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("169", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      Token token8 = xPathLexer0.plus();
      assertEquals("]", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.or();
      String string1 = token5.toString();
      assertEquals("[ (11) (0)", string1);
      
      String string2 = token4.toString();
      assertEquals("[ (16) (x)", string2);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken((Token) null);
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals("U", token9.getTokenText());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0631050961316855
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.pipe();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      String string0 = token3.toString();
      assertEquals("[ (17) (E)", string0);
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("u", token5.getTokenText());
      
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.getPreviousToken();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals("*", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(":", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9378022494332672
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.slashes();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("E0uQ3", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      String string0 = token2.toString();
      assertEquals("[ (17) (*)", string0);
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("}", token5.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.or();
      Token token6 = xPathLexer0.notEquals();
      assertEquals("V_", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      xPathLexer1.leftParen();
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.199631835176848
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(")A", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      xPathLexer0.isIdentifierChar('x');
      Token token3 = xPathLexer0.at();
      token3.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (17) ($)", string0);
      
      xPathLexer0.getPreviousToken();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.consume(0);
      Token token5 = xPathLexer0.at();
      Token token6 = xPathLexer0.slashes();
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.not();
      assertEquals("1", token7.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.currentPosition();
      Token token8 = xPathLexer0.nextToken();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.identifier();
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.plus();
      assertEquals(">", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
      
      xPathLexer0.or();
      String string1 = token6.toString();
      assertEquals("[ (11) (b)", string1);
      
      token5.toString();
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      assertEquals("^", token11.getTokenText());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      assertEquals("C", token12.getTokenText());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals("M", token13.getTokenText());
      
      Token token14 = xPathLexer0.leftParen();
      assertEquals("M", token14.getTokenText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6973206151735905
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8");
      xPathLexer0.div();
      Token token0 = xPathLexer0.number();
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.notEquals();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("8");
      xPathLexer1.setXPath("");
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('z');
      assertTrue(boolean0);
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9510387058698215
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("y", token0.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Z", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(";D", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("T", token3.getTokenText());
      
      xPathLexer0.setXPath("78)JFH4D6)@g/LC}J");
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("J", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("y=^Z;DTF");
      Token token7 = xPathLexer1.pipe();
      assertEquals("y", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals("=", token8.getTokenText());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals("H", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9234298627765258
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("^", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Z", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(";D", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("78)JFH4D6)@g/LC}J");
      xPathLexer0.slashes();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(")", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("J", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("F", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("H4D6)@g/LC}J", token7.getTokenText());
      
      Token token8 = xPathLexer0.equals();
      assertEquals("H", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1518002193709993
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(") (");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(" ", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals("(", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.mod();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(4, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.994090472896036
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      token0.toString();
      token2.toString();
      token1.toString();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierStartChar('^');
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.comma();
      xPathLexer0.not();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9735162855564532
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      token1.toString();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.pipe();
      Token token2 = xPathLexer0.operatorName();
      assertNull(token2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7947643821735548
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")[DQ!e5VLr[3S1z`][");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("Q", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.consume(1952);
      xPathLexer0.setXPath("");
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      assertEquals("com.werken.saxpath.XPathLexer", token7.getTokenText());
      
      xPathLexer0.isIdentifierChar('e');
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.or();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.711702479058046
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("5", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("c", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.isIdentifierChar('q');
      Token token3 = xPathLexer0.comma();
      assertEquals("l", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Pn", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(":", token5.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(3, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5160864340056008
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      boolean boolean0 = xPathLexer0.isIdentifierChar('v');
      assertTrue(boolean0);
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8378441248616275
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      xPathLexer0.setXPath("h1X4M");
      Token token3 = xPathLexer0.comma();
      assertEquals("h", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.identifier();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer2.or();
      xPathLexer0.mod();
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer2.setPreviousToken(token0);
      xPathLexer1.operatorName();
      xPathLexer2.getPreviousToken();
      xPathLexer2.nextToken();
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1093014631035003
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.or();
      xPathLexer0.consume((-2028));
      xPathLexer0.star();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5178922535771096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8");
      xPathLexer0.div();
      Token token0 = xPathLexer0.at();
      assertEquals("8", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6993869931251475
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("BP+2A");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("P", token1.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.whitespace();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("BP+2A");
      Token token3 = xPathLexer0.dollar();
      assertEquals("B", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("P+", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("2", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("A", token6.getTokenText());
      
      xPathLexer0.leftParen();
      xPathLexer0.getXPath();
      xPathLexer0.minus();
      Token token7 = xPathLexer0.identifier();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.whitespace();
      Token token9 = xPathLexer0.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.getXPath();
      xPathLexer0.endPosition();
      xPathLexer0.mod();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token10 = xPathLexer0.doubleColon();
      assertEquals("co", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('D');
      Token token11 = xPathLexer0.star();
      assertEquals("m", token11.getTokenText());
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      assertEquals(".", token12.getTokenText());
      
      xPathLexer0.currentPosition();
      char char0 = xPathLexer0.LA(5);
      assertEquals('e', char0);
      
      xPathLexer0.consume(4);
      Token token13 = xPathLexer0.leftParen();
      assertEquals("e", token13.getTokenText());
      
      xPathLexer0.setPreviousToken(token7);
      assertEquals(15, token7.getTokenType());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9194086587648558
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.pipe();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(")A", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("Z", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.isIdentifierChar('x');
      Token token3 = xPathLexer0.at();
      token3.toString();
      xPathLexer0.consume();
      String string0 = token0.toString();
      assertEquals("[ (17) ($)", string0);
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(0);
      Token token4 = xPathLexer0.at();
      Token token5 = xPathLexer0.slashes();
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("b", token6.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.currentPosition();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("16", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals("U", token8.getTokenText());
      
      xPathLexer0.identifier();
      Token token9 = xPathLexer0.plus();
      assertEquals(">", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.or();
      String string1 = token5.toString();
      assertEquals("[ (11) (0)", string1);
      
      String string2 = token4.toString();
      assertEquals("[ (16) (x)", string2);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken((Token) null);
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1006513503933615
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.slashes();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.pipe();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("0", token3.getTokenText());
      
      String string0 = token2.toString();
      assertEquals("[ (17) (E)", string0);
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.at();
      assertEquals("*", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(18, token5.getTokenType());
      assertEquals(":", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("}", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("V", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("_", token8.getTokenText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1912894991096508
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("5Ld#3");
      xPathLexer1.nextToken();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer1.slashes();
      xPathLexer1.operatorName();
      xPathLexer0.not();
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer1.identifier();
      Token token1 = xPathLexer2.identifier();
      xPathLexer1.mod();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9343610633412291
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(";", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("K-Ss/}B/");
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftParen();
      xPathLexer0.and();
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("-S", token6.getTokenText());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("D", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("jjoU6N91i:");
      Token token9 = xPathLexer4.identifierOrOperatorName();
      assertEquals("jjoU6N91i", token9.getTokenText());
      
      xPathLexer3.identifier();
      xPathLexer1.consume(3344);
      xPathLexer1.literal();
      xPathLexer4.getPreviousToken();
      Token token10 = xPathLexer1.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer3.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer2.consume(0);
      Token token12 = xPathLexer0.leftParen();
      assertEquals("T", token12.getTokenText());
      assertEquals(1, token12.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer2.getXPath();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.star();
      xPathLexer5.identifierOrOperatorName();
      Token token13 = xPathLexer4.dots();
      assertEquals(":", token13.getTokenText());
      
      Token token14 = xPathLexer1.dots();
      assertEquals(13, token14.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9103032077926174
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.rightParen();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("c", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("l", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("P", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (2) (5)", string0);
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.at();
      assertEquals(":", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getPreviousToken();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("F", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals("[", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("S", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.247261711946353
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.not();
      xPathLexer0.plus();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer0.number();
      Token token1 = xPathLexer1.identifier();
      xPathLexer0.equals();
      xPathLexer1.minus();
      xPathLexer1.plus();
      xPathLexer1.number();
      Token token2 = xPathLexer0.notEquals();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.096548963316797
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("5", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.and();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("l", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('~');
      assertFalse(boolean0);
      
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0028160866868694
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("y", token0.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.getXPath();
      xPathLexer0.or();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("Z;", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("78)JFH4D6)@g/LC}J");
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(")", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("JFH4D6", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals(")", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("@", token6.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("y=^Z;DTF");
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("y", token7.getTokenText());
      
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals("=", token8.getTokenText());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals("g", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer1.identifier();
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8623003166889784
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.div();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      char char0 = xPathLexer0.LA(62);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.849715529618885
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")[DQ!e5VLr[3S1z`][");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.consume(1952);
      xPathLexer0.setXPath("");
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.equals();
      xPathLexer0.setXPath("10\u0004k,{");
      xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("$X'i!ZAK");
      xPathLexer1.isIdentifierChar(' ');
      xPathLexer1.consume();
      xPathLexer1.rightBracket();
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1743));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2566398046423575
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1363));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5391357858647163
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.number();
      xPathLexer0.div();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8884607949050556
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.slashes();
      Token token2 = xPathLexer0.rightBracket();
      token1.toString();
      token0.toString();
      xPathLexer0.nextToken();
      token1.toString();
      Token token3 = xPathLexer0.leftBracket();
      token3.toString();
      Token token4 = xPathLexer0.notEquals();
      token4.toString();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token2);
      Token token5 = xPathLexer0.rightParen();
      xPathLexer0.isIdentifierStartChar('H');
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.consume(0);
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      xPathLexer0.dots();
      Token token6 = xPathLexer0.nextToken();
      assertFalse(token6.equals((Object)token5));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.229698074104967
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#IL9>?sy&=");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("#I", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("L", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals(">", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.colon();
      assertEquals("?", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("s", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("y", token6.getTokenText());
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.whitespace();
      assertEquals("", token7.getTokenText());
      assertEquals((-2), token7.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.566621028859323
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "$)AZr!x0b16U>^CM";
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4906805436816453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Nk", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("/", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.rightParen();
      xPathLexer0.div();
      Token token5 = xPathLexer0.at();
      assertEquals("^", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("A/", token6.getTokenText());
      assertEquals(12, token6.getTokenType());
      
      xPathLexer0.whitespace();
      token0.toString();
      token0.toString();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("X(0", token7.getTokenText());
      
      token0.toString();
      String string0 = token4.toString();
      assertEquals("[ (2) (*)", string0);
      
      String string1 = token3.toString();
      assertEquals("[ (4) (W)", string1);
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("X(", token8.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("[ (4) (O)");
      xPathLexer0.slashes();
      Token token9 = xPathLexer0.whitespace();
      assertEquals("", token9.getTokenText());
      
      xPathLexer0.nextToken();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      assertEquals("4", token10.getTokenText());
      
      Token token11 = xPathLexer0.leftBracket();
      assertEquals(3, token11.getTokenType());
      assertEquals(")", token11.getTokenText());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals("(", token12.getTokenText());
      
      Token token13 = xPathLexer0.equals();
      assertEquals("O", token13.getTokenText());
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4950540005692785
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%Z.U");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("%", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("Z.", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals("U", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.slashes();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(4, int0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.132510469685783
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.not();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.equals();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.consume(1223);
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1230, int0);
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      char char0 = xPathLexer0.LA(121);
      assertEquals('\uFFFF', char0);
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.number();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.plus();
      int int1 = xPathLexer0.endPosition();
      assertEquals(0, int1);
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.dots();
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer0.consume();
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertNull(token12);
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.629839533293355
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      Token token2 = xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("l", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("P", token4.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (2) (5)", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (1) (c)", string1);
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("n", token5.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.getPreviousToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token7);
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("[", token9.getTokenText());
      
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8771257084865192
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.rightParen();
      xPathLexer0.div();
      Token token4 = xPathLexer0.at();
      assertEquals("W", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.div();
      token0.toString();
      token0.toString();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      token0.toString();
      String string0 = token3.toString();
      assertEquals("[ (2) ()", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (4) (/)", string1);
      
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightParen();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('^');
      assertFalse(boolean0);
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("h", token6.getTokenText());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.nextToken();
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.1214334832374515
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("Nk", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("/", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("*", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("^", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      xPathLexer0.isIdentifierChar('q');
      Token token7 = xPathLexer1.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.not();
      xPathLexer1.operatorName();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.4098206065396077
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.consume(0);
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(" ", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftParen();
      assertEquals(1, token9.getTokenType());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RHA");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8016551665693084
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.comma();
      xPathLexer0.not();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.9780573347195083
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = null;
      try {
        xPathLexer0 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6249912034130924
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("jjoU6N91i:");
      xPathLexer3.identifierOrOperatorName();
      xPathLexer1.identifier();
      int int0 = 3338;
      xPathLexer2.consume((-2));
      // Undeclared exception!
      try { 
        xPathLexer2.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8899488991230922
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.plus();
      xPathLexer0.consume(2365);
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.whitespace();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.034541798326475
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=rd21wC96kGhOt~");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("=r", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals("2", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("_aQ!d:K|jcvP");
      Token token3 = xPathLexer1.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("_", token3.getTokenText());
      
      xPathLexer1.and();
      Token token4 = xPathLexer1.dollar();
      assertEquals("a", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("1w", token5.getTokenText());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1226953618998468
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.802697647218019
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.minus();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("!5clPn:F[Su9 WR");
      Token token4 = xPathLexer1.minus();
      assertEquals("!", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("5", token5.getTokenText());
      
      xPathLexer1.consume((-2));
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("!5", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer1.rightParen();
      assertEquals("c", token10.getTokenText());
      assertEquals(2, token10.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8416551215507289
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("Nk", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.rightParen();
      xPathLexer0.div();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("*^", token6.getTokenText());
      
      token0.toString();
      token0.toString();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("A", token7.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (4) (O)", string0);
      
      token4.toString();
      token3.toString();
      assertEquals("/", token3.getTokenText());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      Token token9 = xPathLexer0.rightParen();
      Token token10 = xPathLexer0.identifier();
      Token token11 = xPathLexer0.identifier();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("ONk/W*^A/hX(0");
      Token token12 = xPathLexer1.plus();
      assertEquals("O", token12.getTokenText());
      assertEquals(5, token12.getTokenType());
      
      xPathLexer1.or();
      String string1 = token10.toString();
      assertEquals("[ (15) (X)", string1);
      
      String string2 = token9.toString();
      assertEquals("[ (2) (h)", string2);
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token11);
      Token token13 = xPathLexer1.identifierOrOperatorName();
      assertEquals("Nk", token13.getTokenText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0807520765474505
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=rd21wC96kGhOt~");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("=r", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("d", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      XPathLexer xPathLexer1 = new XPathLexer("_aQ!d:K|jcvP");
      Token token3 = xPathLexer1.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("_", token3.getTokenText());
      
      xPathLexer1.and();
      xPathLexer0.mod();
      Token token4 = xPathLexer1.dollar();
      assertEquals("a", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.430758633903798
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.9330220129374003
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.not();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.mod();
      xPathLexer0.div();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.comma();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.slashes();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNull(token7);
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }
}
