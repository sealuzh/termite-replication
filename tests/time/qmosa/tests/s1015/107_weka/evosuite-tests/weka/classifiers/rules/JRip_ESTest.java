/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:31:54 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.Ranker;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      AbstractClassifier.makeCopy(jRip0);
      Attribute attribute0 = new Attribute("{`3Tbu*m'_-%mVCaqb8", list0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassOrder classOrder0 = new ClassOrder();
      attribute0.equalsMsg(classOrder0);
      DenseInstance denseInstance0 = new DenseInstance(2874);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@end";
      stringArray0[1] = "relational";
      stringArray0[2] = "string";
      stringArray0[3] = "@attribute";
      stringArray0[4] = "{`3Tbu*m'_-%mVCaqb8";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[5] = "integer";
      stringArray0[6] = "Object has wrong class";
      stringArray0[7] = "string";
      stringArray0[8] = "real";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip0.listOptions();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6258417525947544
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5174.87974376732);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[4] = (double) 1;
      JRip jRip1 = new JRip();
      jRip1.getTechnicalInformation();
      JRip jRip2 = new JRip();
      jRip0.getFolds();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("UGd10G", arrayList0, 1);
      jRip1.setFolds(3);
      JRip jRip3 = new JRip();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      Attribute attribute1 = new Attribute("numeric", 1);
      ClassOrder classOrder0 = new ClassOrder();
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute1);
      DenseInstance denseInstance0 = new DenseInstance((-1105.0), doubleArray0);
      jRip_NominalAntd0.covers(denseInstance0);
      jRip2.getCapabilities();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-1.0), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      Attribute attribute0 = new Attribute("{`3Tbu*m'_-%mVCaqb8", list0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 9.223372036854776E18;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(1160.577, doubleArray0);
      Attribute attribute1 = new Attribute("@attribute", 2);
      Attribute attribute2 = new Attribute((String) null, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      SparseInstance sparseInstance0 = new SparseInstance(1584);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      Attribute attribute3 = new Attribute("IE", (List<String>) null);
      String string0 = jRip1.debugTipText();
      assertFalse(jRip1.getDebug());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(3, jRip1.getFolds());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("X", arrayList0, (-1719));
      jRip0.setFolds((-206));
      assertEquals((-206), jRip0.getFolds());
      
      JRip jRip1 = new JRip();
      attribute0.equals(jRip1);
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      sparseInstance0.setWeight(2);
      Attribute attribute1 = new Attribute("[WekaPackageManager] Nothing known about package ", arrayList0);
      jRip2.getOptimizations();
      String string0 = jRip1.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(") and ", arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      RuleStats ruleStats0 = new RuleStats();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "numeric";
      stringArray0[1] = "integer";
      stringArray0[3] = "date";
      stringArray0[4] = "integer";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("   * filters multiple rows\n", linkedList0, 4);
      jRip0.setFolds((-66));
      assertEquals((-66), jRip0.getFolds());
      
      JRip jRip1 = new JRip();
      attribute1.equals(arrayList1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1871.36);
      doubleArray0[1] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(6, doubleArray0);
      jRip_RipperRule0.covers(sparseInstance0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(") and  <= NaN", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.875376201216066
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "9fZgy~gsga";
      stringArray0[1] = "#J";
      stringArray0[2] = ">15MUe/pS:i6#";
      stringArray0[3] = "#J";
      stringArray0[4] = "#J";
      stringArray0[5] = "9fZgy~gsga";
      jRip0.setOptions(stringArray0);
      jRip0.getRevision();
      jRip0.getTechnicalInformation();
      JRip jRip1 = new JRip();
      jRip0.getFolds();
      jRip0.getTechnicalInformation();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(") and ", arrayList0, 3);
      jRip0.setFolds(2);
      JRip jRip2 = new JRip();
      attribute0.equals("#J");
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.setConsequent(2.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      sparseInstance0.setWeight(1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      Attribute attribute1 = new Attribute("", (List<String>) null);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(") and ", arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      RuleStats ruleStats0 = new RuleStats();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.setConsequent(2703.3773376464);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(") and ", arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      RuleStats ruleStats0 = new RuleStats();
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      arrayList2.add((Integer) 0);
      arrayList2.remove((Object) attribute0);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      arrayList3.retainAll(arrayList2);
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(") and ", arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      RuleStats ruleStats0 = new RuleStats();
      jRip0.getUsePruning();
      arrayList1.remove((Object) ruleStats0);
      arrayList0.retainAll(arrayList1);
      Instances instances0 = null;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5174.87974376732);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip0.getFolds();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("The default DL = ", arrayList0, 1);
      JRip jRip2 = new JRip();
      jRip2.setFolds(1);
      JRip jRip3 = new JRip();
      arrayList1.sort((Comparator<? super String>) null);
      Attribute attribute1 = new Attribute("e?'w7&V)b;zNzpj5", 3);
      ClassOrder classOrder0 = new ClassOrder();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      attribute1.equals("UGd10G");
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(3, doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Instances instances1 = decisionTable0.m_theInstances;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("roXy6V{", (List<String>) null, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String[] stringArray0 = new String[3];
      JRip.main(stringArray0);
      Utils.log2 = 442.97169796057;
      int[] intArray0 = new int[7];
      Attribute attribute0 = new Attribute("=e", 4);
      jRip_RipperRule0.toString(attribute0);
      Random.setNextRandom((-1));
      intArray0[4] = (-64);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9.223372036854776E18, intArray0, (-64));
      JRip jRip1 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getDisplayLanguage();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("integer");
      linkedList0.add(locale_LanguageRange0);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 6);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2085716838811678
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      Attribute attribute0 = new Attribute(")t' vK-^q`{", (List<String>) null, (-2635));
      jRip0.enumerateMeasures();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "string";
      stringArray0[1] = "string";
      stringArray0[2] = "8118";
      stringArray0[3] = "real";
      jRip0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-65));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "X");
      jRip0.toString();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // X not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4752173811529237
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      Classifier classifier0 = AbstractClassifier.makeCopy(jRip0);
      stringArray0[0] = "9fZgy~gsga";
      stringArray0[1] = "; ";
      stringArray0[2] = "#J";
      stringArray0[3] = "w;:X:ETaDn`iqT/`.";
      stringArray0[4] = "IE";
      stringArray0[5] = ">15MUe/pS:i6#";
      stringArray0[6] = "G.{H=fct~LdBqd-";
      jRip0.setOptions(stringArray0);
      jRip0.getRevision();
      jRip0.getTechnicalInformation();
      JRip jRip1 = new JRip();
      jRip1.getFolds();
      jRip1.getTechnicalInformation();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8118");
      Attribute attribute0 = new Attribute("xYos\"]3Q_lG", arrayList0, 3);
      JRip jRip2 = new JRip();
      attribute0.equals(classifier0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (-1.0);
      jRip_NumericAntd0.toString();
      Object object0 = jRip_NumericAntd0.copy();
      assertNotSame(jRip_NumericAntd0, object0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.setConsequent((-1379.6119165039302));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1379.6119165039302);
      doubleArray0[1] = (-1379.6119165039302);
      SparseInstance sparseInstance0 = new SparseInstance((-1379.6119165039302), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((-1379.6119165039302), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(6);
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance1);
      assertEquals((-1379.6119165039302), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable1.m_dtInstances;
      AbstractClassifier.runClassifier(decisionTable0, (String[]) null);
      try { 
        jRip0.rulesetForOneClass(4, (Instances) null, 1755.564193106482, (-2250.95492936431));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setUsePruning(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.setDebug(false);
      jRip0.getDebug();
      jRip0.getCheckErrorRate();
      jRip0.optimizationsTipText();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "weka/core/Capabilities.props");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2113345248841028
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      AbstractClassifier.runClassifier(jRip0, (String[]) null);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      JRip jRip2 = new JRip();
      jRip2.setOptions(stringArray0);
      assertEquals(11, stringArray0.length);
      
      JRip.RipperRule jRip_RipperRule3 = jRip2.new RipperRule();
      assertEquals(1L, jRip2.getSeed());
      assertTrue(jRip2.getCheckErrorRate());
      assertEquals(2, jRip2.getOptimizations());
      assertEquals(3, jRip2.getFolds());
      
      IBk iBk0 = new IBk();
      StringReader stringReader0 = new StringReader("");
      JRip.main((String[]) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 0;
      jRip0.setFolds(0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.att = null;
      jRip_NumericAntd0.getRevision();
      jRip0.getSeed();
      jRip0.foldsTipText();
      jRip0.minNoTipText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int1 = 11;
      Instances instances0 = new Instances("\nFinal ruleset: ", arrayList0, 11);
      instances0.getRevision();
      int int2 = 0;
      MockRandom mockRandom0 = new MockRandom(11);
      // Undeclared exception!
      try { 
        mockRandom0.nextInt(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 0;
      Instances instances0 = new Instances(",F{,|Zg(Qlo~", arrayList0, 0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("A metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", (-119));
      Attribute attribute1 = attribute0.copy((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("therefore");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccu();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2162443181522673
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(") and ", arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      RuleStats ruleStats0 = new RuleStats();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      jRip0.foldsTipText();
      JRip jRip1 = new JRip();
      jRip1.getFolds();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("UGd10G", arrayList3, 2);
      jRip1.setFolds(969);
      JRip jRip2 = new JRip();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList3.sort(comparator0);
      Attribute attribute2 = new Attribute("relational", 2);
      ClassOrder classOrder0 = new ClassOrder();
      attribute2.equals(classOrder0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(0.975, doubleArray0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      JRip jRip3 = new JRip();
      jRip3.getOptimizations();
      jRip1.seedTipText();
      assertEquals(969, jRip1.getFolds());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")%c}mhs2VK>}");
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip1.setCheckErrorRate(false);
      jRip_RipperRule0.setConsequent((-1379.6119165039302));
      jRip_RipperRule0.size();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "X");
      jRip0.setOptimizations(3283);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(3283);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3473508904222826
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      JRip.main(stringArray0);
      stringArray0[0] = "9fZgy~gsga";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "; ";
      stringArray0[2] = "#J";
      stringArray0[3] = "w;:X:ETaDn`iqT/`.";
      stringArray0[4] = "IE";
      stringArray0[5] = ">15MUe/pS:i6#";
      stringArray0[6] = "G.{H=fct~LdBqd-";
      jRip0.setOptions(stringArray0);
      jRip0.getRevision();
      jRip0.getTechnicalInformation();
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      
      jRip_NominalAntd0.cover = 765.4913601798097;
      jRip_NominalAntd0.getAttr();
      String string0 = jRip1.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(") and ", arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      RuleStats ruleStats0 = new RuleStats();
      arrayList1.add((Integer) 1);
      arrayList1.remove((Object) ruleStats0);
      arrayList0.retainAll(arrayList1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Instances instances0 = null;
      String string0 = "IE";
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">15MUe/pS:i6#";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5174.87974376732);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[4] = (double) 1;
      JRip jRip1 = new JRip();
      jRip1.getTechnicalInformation();
      JRip jRip2 = new JRip();
      jRip0.getFolds();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("UGd10G", arrayList0, 1);
      jRip1.setFolds(3);
      JRip jRip3 = new JRip();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      Attribute attribute1 = new Attribute("numeric", 1);
      ClassOrder classOrder0 = new ClassOrder();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((-5174.87974376732), doubleArray0);
      jRip_RipperRule0.covers(sparseInstance1);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-1904));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "X");
      String string0 = jRip0.toString();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("JRIP: No model built yet.", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "X");
      jRip0.getMinNo();
      jRip0.setUsePruning(true);
      jRip0.toString();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip0.setDebug(true);
      jRip0.getDebug();
      jRip0.getCheckErrorRate();
      jRip0.optimizationsTipText();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "weka/core/Capabilities.props");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.93504084661911
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      RuleStats ruleStats0 = new RuleStats();
      arrayList1.remove((Object) ruleStats0);
      arrayList0.retainAll(arrayList1);
      ClassOrder classOrder0 = new ClassOrder();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      
      String string1 = jRip0.checkErrorRateTipText();
      assertFalse(jRip0.getDebug());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string1);
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The number of optimization runs.";
      stringArray0[1] = "The number of optimization runs.";
      stringArray0[2] = "The number of optimization runs.";
      stringArray0[3] = "The number of optimization runs.";
      stringArray0[4] = "/-";
      stringArray0[5] = "Whether check for error rate >= 1/2 is included in stopping criterion.";
      stringArray0[6] = ") and ";
      stringArray0[7] = "The number of optimization runs.";
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = 1755.8218228222;
      jRip0.setMinNo(1755.8218228222);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "CQMa4x7A7'DUG8$Ok";
      stringArray0[1] = "CQMa4x7A7'DUG8$Ok";
      stringArray0[2] = "CQMa4x7A7'DUG8$Ok";
      stringArray0[1] = "CQMa4x7A7'DUG8$Ok";
      MultiScheme multiScheme0 = new MultiScheme();
      // Undeclared exception!
      try { 
        multiScheme0.getClassifier(2395);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2395
         //
         verifyException("weka.classifiers.meta.MultiScheme", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute(") and ", arrayList0);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      RuleStats ruleStats0 = new RuleStats();
      attribute0.copy();
      ArrayList<Integer> arrayList2 = new ArrayList<Integer>();
      arrayList2.add((Integer) 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList2.remove((Object) jRip_NominalAntd0);
      arrayList0.retainAll(arrayList2);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("integer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // integer not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.getCheckErrorRate();
      String string0 = null;
      int int0 = 3062;
      IBk iBk0 = new IBk(3062);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 70;
      intArray0[1] = 909;
      intArray0[2] = (-2462);
      intArray0[3] = 0;
      intArray0[4] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3972.469), intArray0, 70);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string1 = jRip_RipperRule0.getRevision();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(string1.equals((Object)string0));
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      jRip0.setOptimizations(3283);
      jRip0.setDebug(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.getMinNo();
      Instances instances0 = null;
      jRip0.toString();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1024.54425);
      doubleArray0[1] = (-1024.54425);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1024.54425), doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule1, jRip_RipperRule0);
      
      Ranker ranker0 = new Ranker();
      decisionTable0.setSearch(ranker0);
      jRip0.setSeed(1L);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      stringArray0[0] = "9fZgy~gsga";
      stringArray0[1] = "; ";
      stringArray0[2] = "#J";
      stringArray0[3] = "w;:X:ETaDn`iqT/`.";
      stringArray0[4] = "IE";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-720.0);
      doubleArray0[1] = (-720.0);
      doubleArray0[2] = (-720.0);
      doubleArray0[3] = (-720.0);
      doubleArray0[4] = (-720.0);
      doubleArray0[5] = 9.223372036854776E18;
      doubleArray0[6] = (-720.0);
      doubleArray0[7] = (-720.0);
      DenseInstance denseInstance0 = new DenseInstance((-720.0), doubleArray0);
      Attribute attribute0 = new Attribute(">15MUe/pS:i6#", 6);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(denseInstance0);
      Attribute attribute1 = new Attribute("IE", (List<String>) null);
      jRip1.debugTipText();
      jRip1.minNoTipText();
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      MultiScheme multiScheme0 = new MultiScheme();
      // Undeclared exception!
      try { 
        multiScheme0.getClassifier((-1190));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1190
         //
         verifyException("weka.classifiers.meta.MultiScheme", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Set<String> set0 = protectedProperties0.stringPropertyNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("\nGrowing and pruning Replace ...", list0, 3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.getMaxInfoGain();
      ClassOrder classOrder0 = new ClassOrder();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-365));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[7];
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      stringArray0[0] = "9fZgy~gsga";
      stringArray0[1] = "; ";
      stringArray0[2] = "#J";
      stringArray0[3] = "w;:X:ETaDn`iqT/`.";
      stringArray0[4] = "IE";
      stringArray0[5] = ">15MUe/pS:i6#";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("#J", list0, protectedProperties0);
      attribute0.copy("IE");
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertFalse(jRip1.getDebug());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[5];
      double double0 = (-5174.87974376732);
      doubleArray0[0] = (-5174.87974376732);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      decisionTable0.m_classPriors = doubleArray0;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      AbstractClassifier.makeCopy(decisionTable0);
      Instances instances0 = decisionTable2.m_dtInstances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      BallNode ballNode0 = new BallNode(2);
      BallNode ballNode1 = ballNode0.m_Left;
      BallNode ballNode2 = new BallNode(3);
      Instance instance0 = null;
      BallNode ballNode3 = new BallNode((-66), 5, 641, (Instance) null, 3162.9739853499);
      CoverTree coverTree0 = new CoverTree();
      int int0 = 9;
      Attribute attribute0 = new Attribute("Can only set values for nominal or string attributes!");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, (-2481.786), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }
}
