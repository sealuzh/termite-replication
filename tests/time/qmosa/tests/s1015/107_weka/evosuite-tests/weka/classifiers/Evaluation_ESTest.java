/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:01:38 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.IntervalEstimator;
import weka.classifiers.Sourcable;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.trees.J48;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.areaUnderPRC((-1206));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%R%rFf_l{bR >7M:TL");
      evaluation0.errorRate();
      Evaluation.handleCostOption((String) null, (-657));
      evaluation0.setDiscardPredictions(true);
      double double0 = evaluation0.trueNegativeRate((-657));
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4243271065819165
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      textDirectoryLoader0.setDebug(true);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      Evaluation evaluation2 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation2.toMatrixString("graphType");
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation2.SFSchemeEntropy();
      evaluation1.KBRelativeInformation();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[5];
      intArray0[0] = 491;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      evaluation2.equals(coverTree0);
      evaluation1.setPriors(instances1);
      Instance instance0 = BallNode.calcCentroidPivot(491, (-2), intArray0, instances1);
      try { 
        evaluation2.updateStatsForIntervalEstimator((IntervalEstimator) null, instance0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9074169042571496
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Properties properties0 = new Properties();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = (-3.387484460921148);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation1.updateNumericScores(doubleArray0, doubleArray0, 3.141592653589793);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4502431209465607
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 1079.888588;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.unweightedMacroFmeasure();
      int[] intArray0 = new int[3];
      intArray0[0] = 75;
      intArray0[1] = 2145496871;
      BallNode.calcCentroidPivot(2145496871, (-1893), intArray0, instances0);
      double double0 = evaluation0.fMeasure(6);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.equals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n");
      evaluation0.toSummaryString();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1620414873432927
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (-1278.1099809663158);
      doubleArray0[2] = (-1278.1099809663158);
      doubleArray0[3] = (-1278.1099809663158);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1278.1099809663158), doubleArray0);
      evaluation0.weightedAreaUnderROC();
      boolean boolean0 = true;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.187771751713326
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Stack<String> stack0 = new Stack<String>();
      stack0.spliterator();
      evaluation0.SFMeanPriorEntropy();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      textDirectoryLoader0.setCharSet("qAq6u)");
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      evaluation0.addNumericTrainClass((-540.1872410094169), (-540.1872410094169));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1620414873432927
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("#`S}6a5 /");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.weightedAreaUnderPRC();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath(" ");
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BallNode.calcCentroidPivot(1561, (-2431), intArray0, instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(2411);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2411
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.272588336160122
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("#S}6?D<B/");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.weightedAreaUnderPRC();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      inputMappedClassifier0.setModelPath(" ");
      evaluation0.getDiscardPredictions();
      try { 
        Evaluation.evaluateModel((Classifier) inputMappedClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.misc.InputMappedClassifier:
         // 
         // -I
         // \tIgnore case when matching attribute names and nominal values.
         // -M
         // \tSuppress the output of the mapping report.
         // -trim
         // \tTrim white space from either end of names before matching.
         // -L <path to model to load>
         // \tPath to a model to load. If set, this model
         // \twill be used for prediction and any base classifier
         // \tspecification will be ignored. Environment variables
         // \tmay be used in the path (e.g. ${HOME}/myModel.model)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.495247527993942
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.387484460921148);
      doubleArray0[1] = (-3.387484460921148);
      doubleArray0[0] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      CoverTree coverTree0 = new CoverTree();
      HashSet<SimpleLogistic> hashSet0 = new HashSet<SimpleLogistic>();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      hashSet0.add(simpleLogistic0);
      evaluation0.weightedTruePositiveRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.3, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((-507.025), (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -507
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1981395443170513
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      TextDirectoryLoader.main(stringArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.totalCost();
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Stack<String> stack0 = new Stack<String>();
      stack0.spliterator();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      String string0 = Evaluation.getGlobalInfo(attributeSelectedClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.AttributeSelectedClassifier:\n\nDimensionality of training and test data is reduced by attribute selection before being passed on to a classifier.", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.624715206263712
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      textDirectoryLoader0.setDebug(true);
      evaluation0.toCumulativeMarginDistributionString();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      evaluation0.numTrueNegatives(477);
      evaluation0.priorEntropy();
      evaluation0.toSummaryString("@data", false);
      evaluation0.SFEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-15.8285856));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -15
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5262341912503397
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      evaluation1.toClassDetailsString("@relation");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree1 = new CoverTree();
      evaluation1.unweightedMacroFmeasure();
      int int0 = 75;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1893);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.560452965490236
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Attribute attribute0 = new Attribute(".bsi", instances0, protectedProperties3);
      instances0.sort(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.totalCost();
      double double0 = evaluation0.m_MinTarget;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      evaluation0.toSummaryString("real", false);
      evaluation0.SFEntropyGain();
      evaluation0.weightedTrueNegativeRate();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0767821686620502
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      evaluation0.toClassDetailsString(".arff");
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      doubleArray0[2] = 0.0;
      doubleArray0[1] = 1079.888588;
      CoverTree coverTree0 = new CoverTree();
      HashSet<SimpleLogistic> hashSet0 = new HashSet<SimpleLogistic>();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      hashSet0.add(simpleLogistic0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTruePositiveRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(1079.888588, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1079
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Stack<String> stack0 = new Stack<String>();
      stack0.spliterator();
      double double0 = evaluation0.SFMeanPriorEntropy();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      textDirectoryLoader0.setCharSet("setModelHeader");
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      double double1 = evaluation0.errorRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Save...");
      textDirectoryLoader0.setCharSet("@relation");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1719.822468685745, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1463096566766366
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      evaluation0.totalCost();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unweightedMacroFmeasure();
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 102;
      intArray0[2] = 1646;
      intArray0[3] = 4;
      intArray0[4] = 4;
      Instance instance0 = BallNode.calcCentroidPivot(2145496871, 4, intArray0, instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) costSensitiveClassifier0, instance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelation("#`S}6a5 /");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        Evaluation.evaluateModel("K&B Relative Info Score            ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name K&B Relative Info Score            .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[9];
      evaluation0.KBMeanInformation();
      stringArray0[0] = "@data";
      ArffLoader arffLoader0 = new ArffLoader();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6789240580710336
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("$Revision: 9086 $", instances0, protectedProperties2);
      instances0.sort(attribute0);
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      attribute0.equals(technicalInformationHandlerJavadoc0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      Attribute.typeToString(2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.weightedAreaUnderPRC();
      Instances instances1 = textDirectoryLoader0.getStructure();
      protectedProperties0.replace((Object) instances1, (Object) " -1       0    \n");
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.fMeasure(1);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.272336416778445
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      instances0.getRevision();
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1079.888588;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.totalCost();
      evaluation0.unweightedMacroFmeasure();
      int[] intArray0 = new int[3];
      intArray0[0] = 102;
      intArray0[1] = 2145496871;
      BallNode.calcCentroidPivot(2145496871, (-1893), intArray0, instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Bagging bagging0 = new Bagging();
      try { 
        evaluation1.evaluateModelOnce((Classifier) inputMappedClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.236155081977357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("[", instances0, protectedProperties2);
      instances0.sort(attribute0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.toMatrixString(")[/r:6nKIZl,h{uZ");
      double double0 = evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.928419821275958
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.387484460921148);
      evaluation0.toSummaryString("\n\n=>= Error on traini;g split ===\n", true);
      double double0 = evaluation0.numTrueNegatives(465);
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString("@relation", false);
      assertEquals("@relation\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.SFEntropyGain();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.weightedFMeasure();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Attribute attribute0 = new Attribute(".bsi", instances0, protectedProperties3);
      instances0.sort(attribute0);
      double double0 = 0.0;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.totalCost();
      double double1 = evaluation0.m_MinTarget;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance1, (-1722.4854925093));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0734736492244985
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      stringArray0[1] = "@data";
      stringArray0[2] = ".arff";
      TextDirectoryLoader.main(stringArray0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-746.862515), doubleArray0);
      evaluation0.toClassDetailsString();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.387484460921148);
      double double0 = 854.922923;
      doubleArray0[1] = (-3.387484460921148);
      doubleArray0[3] = (-3.387484460921148);
      evaluation0.confusionMatrix();
      SparseInstance sparseInstance0 = new SparseInstance(1079.888588, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8109710120534392
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.387484460921148);
      doubleArray0[1] = (-3.387484460921148);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3.387484460921148);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      J48 j48_0 = new J48();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      stringArray0[1] = "$*g~:";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".arff";
      try { 
        Evaluation.evaluateModel((Classifier) j48_0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.991267923982674
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      String[] stringArray0 = new String[9];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@relation";
      stringArray0[5] = "*RfAg)au+,@H";
      stringArray0[6] = ".bsi";
      stringArray0[7] = "@relation";
      stringArray0[8] = ".bsi";
      TextDirectoryLoader.main(stringArray0);
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1079.888588;
      CoverTree coverTree0 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-746.862515), doubleArray0);
      try { 
        Evaluation.evaluateModel((Classifier) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[0] = 854.922923;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1079.888588;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.totalCost();
      evaluation0.unweightedMacroFmeasure();
      textDirectoryLoader0.getOptions();
      int[] intArray0 = new int[3];
      intArray0[0] = 102;
      intArray0[1] = 2145496871;
      Instance instance0 = BallNode.calcCentroidPivot(2145496871, (-1893), intArray0, instances0);
      ((DenseInstance) instance0).copy();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) inputMappedClassifier0, instance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[0] = 854.922923;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1079.888588;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.totalCost();
      evaluation0.unweightedMacroFmeasure();
      textDirectoryLoader0.getOptions();
      int[] intArray0 = new int[3];
      intArray0[0] = 2145496871;
      intArray0[1] = 2145496871;
      Instance instance0 = BallNode.calcCentroidPivot(2145496871, (-1893), intArray0, instances0);
      ((DenseInstance) instance0).copy();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) inputMappedClassifier0, instance0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      evaluation0.getRevision();
      evaluation0.pctUnclassified();
      double[] doubleArray0 = null;
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.258946254192693
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("[", instances0, protectedProperties2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.toSummaryString(".arff", true);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString("numeric", false);
      assertEquals("numeric\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1592720529128537
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-559.9084662008743);
      doubleArray0[1] = (-559.9084662008743);
      doubleArray0[2] = (-559.9084662008743);
      doubleArray0[3] = (-559.9084662008743);
      doubleArray0[4] = 1079.888588;
      doubleArray0[5] = (-559.9084662008743);
      doubleArray0[6] = (-559.9084662008743);
      doubleArray0[7] = (-559.9084662008743);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-559.9084662008743), doubleArray0);
      evaluation0.weightedAreaUnderROC();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1345359957082577
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("[", instances0, protectedProperties2);
      instances0.sort(attribute0);
      evaluation0.toCumulativeMarginDistributionString();
      doubleArray0[1] = 854.922923;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[2] = (double) 2;
      CoverTree coverTree0 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, doubleArray0);
      evaluation0.toClassDetailsString();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Stack<String> stack0 = new Stack<String>();
      stack0.spliterator();
      evaluation0.SFMeanPriorEntropy();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1230), Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1230
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "indeed");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.pctUnclassified();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, 34);
      binarySparseInstance0.dataset();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      costMatrix0.normalize();
      costSensitiveClassifier1.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 854.922923;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1079.888588;
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CoverTree coverTree0 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1079.888588, doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      double double0 = 0.0;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "x'BEP";
      stringArray0[1] = "RS-igPNK7CID/FdxV";
      stringArray0[2] = ".xml";
      try { 
        Evaluation.evaluateModel((Classifier) multiClassClassifierUpdateable0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "  Precision  Recall";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("  Precision  Recall", arrayList0, 0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "x'BEP";
      stringArray0[1] = "RS-igPNK7CID/FdxV";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".xml");
      stringArray0[2] = ".xml";
      stringArray0[3] = "$*g~:";
      try { 
        Evaluation.evaluateModel((Classifier) multiClassClassifierUpdateable0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.MultiClassClassifierUpdateable:
         // 
         // -M <num>
         // \tSets the method to use. Valid values are 0 (1-against-all),
         // \t1 (random codes), 2 (exhaustive code), and 3 (1-against-1). (default 0)
         // 
         // -R <num>
         // \tSets the multiplier when using random codes. (default 2.0)
         // -P
         // \tUse pairwise coupling (only has an effect for 1-against1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.functions.Logistic)
         // 
         // Options specific to classifier weka.classifiers.functions.Logistic:
         // 
         // -D
         // \tTurn on debugging output.
         // -C
         // \tUse conjugate gradient descent rather than BFGS updates.
         // -R <ridge>
         // \tSet the ridge in the log-likelihood.
         // -M <number>
         // \tSet the maximum number of iterations (default -1, until convergence).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "--N\" 3<K}!}2,S0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Evaluation.handleCostOption("", 22);
      AllFilter allFilter0 = new AllFilter();
      try { 
        allFilter0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      try { 
        Evaluation.handleCostOption(">Z%", 22);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2376.4440991);
      doubleArray0[1] = (-2376.4440991);
      doubleArray0[2] = (-2376.4440991);
      doubleArray0[3] = (-2376.4440991);
      doubleArray0[4] = (-2376.4440991);
      SparseInstance sparseInstance0 = new SparseInstance((-2376.4440991), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
