/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:14:54 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.284884854181267
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) 2;
      doubleArray5[3] = (double) 2;
      doubleArray5[4] = (double) 0;
      doubleArray5[5] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = (double) 2;
      doubleArray6[3] = (double) 0;
      doubleArray0[5] = doubleArray6;
      resultMatrixLatex0.m_Mean = doubleArray0;
      resultMatrixLatex0.getDefaultShowStdDev();
      resultMatrixLatex0.getDefaultMeanWidth();
      boolean boolean0 = resultMatrixLatex0.getShowStdDev();
      assertFalse(boolean0);
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2104839039516984
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 2;
      intArray0[2] = 0;
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      int int0 = resultMatrixCSV1.getVisibleRowCount();
      assertEquals(1, int0);
      
      resultMatrixCSV1.setShowStdDev(true);
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(1, resultMatrixCSV1.getVisibleColCount());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.9141416174543555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toString();
      resultMatrixPlainText0.setStdDevPrec(24);
      resultMatrixPlainText0.getRowHidden(1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0949180933653193
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      int[][] intArray1 = new int[9][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      Vector<String> vector0 = new Vector<String>();
      resultMatrixHTML0.m_HeaderKeys = vector0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "v";
      stringArray0[2] = "*";
      resultMatrixHTML0.m_ColNames = stringArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      resultMatrixHTML0.setRanking(intArray1);
      resultMatrixHTML0.getColOrder();
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.022896355716152
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.removeFilterName("+ kv>FHgMT");
      resultMatrixLatex0.doubleToString(0.0, 26);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultPrintColNames();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(";
      stringArray0[1] = " ";
      stringArray0[2] = "*";
      stringArray0[3] = "\tWhether to enumerate the column names (prefixing them with \n\t'(x)', with 'x' being the index).\n\t(default: no)";
      stringArray0[4] = "\"";
      ResultMatrixHTML.main(stringArray0);
      resultMatrixSignificance0.clearSummary();
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML((-2260), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.042401804203018
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(17, 2);
      resultMatrixHTML0.setMeanPrec(0);
      resultMatrixGnuPlot1.setPrintRowNames(false);
      resultMatrixGnuPlot1.toStringSummary();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.colNameWidthTipText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The maximum width of the column names (0 = optimal).";
      stringArray0[1] = "v";
      stringArray0[2] = " ";
      stringArray0[3] = ")";
      stringArray0[4] = "";
      stringArray0[5] = "v";
      stringArray0[6] = " ";
      stringArray0[7] = "The maximum width of the column names (0 = optimal).";
      ResultMatrixPlainText.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.383641528347716
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[4][0];
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 2;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "v";
      stringArray0[1] = "";
      resultMatrixGnuPlot0.m_RowNames = stringArray0;
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixGnuPlot0.setSignificance(1, 20, 0);
      resultMatrixCSV0.setMeanWidth(0);
      resultMatrixCSV0.getStdDev((-2217), 1);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.7350018805922267
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.getColName(0);
      resultMatrixCSV0.toStringMatrix();
      int int0 = 278;
      resultMatrixCSV0.setMeanWidth(9);
      int int1 = 97;
      resultMatrixCSV0.getStdDev(56, 3604);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.02199192417683
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 2;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.setColOrder(intArray0);
      String[] stringArray0 = new String[6];
      resultMatrixPlainText0.m_RemoveFilterName = true;
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      stringArray0[0] = "";
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                                               col0\n----------------------------------------------------------\nrow0                                              (0)    |\n----------------------------------------------------------\nv/ /*                                                    |\n", string0);
      
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = "";
      stringArray0[5] = "v";
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixPlainText0.setRowHidden(29, true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      String string1 = resultMatrixLatex0.toStringKey();
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n1 & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.175781189490917
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      resultMatrixSignificance0.assign(resultMatrixCSV0);
      resultMatrixSignificance0.padString("", 12, false);
      int int0 = 1240;
      resultMatrixSignificance0.padString("", 1240, true);
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      resultMatrixCSV0.clearRanking();
      resultMatrixSignificance0.toStringSummary();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("_ +");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.053098878952773
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.setColOrder(intArray0);
      ResultMatrixPlainText.main((String[]) null);
      resultMatrixPlainText0.setRowHidden(3344, true);
      resultMatrixPlainText0.stdDevPrecTipText();
      assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.054480346659282
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      resultMatrixPlainText0.setColOrder(intArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "(";
      stringArray1[1] = "*";
      stringArray1[2] = "v";
      ResultMatrixPlainText.main(stringArray1);
      resultMatrixPlainText0.setRowHidden(5, true);
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.026040791501382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[6];
      intArray0[4] = 0;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      resultMatrixLatex0.setOptions(stringArray0);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixHTML0.getDefaultEnumerateRowNames();
      resultMatrixLatex0.getDefaultStdDevPrec();
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.196827896676836
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringSummary();
      String string0 = resultMatrixLatex0.doubleToString(3384, 26);
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("3384.00000000000000000000000000", string0);
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setCountWidth(0);
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.839930756079223
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.toString();
      resultMatrixLatex0.m_RemoveFilterName = false;
      resultMatrixHTML0.toStringRanking();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.setEnumerateColNames(false);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.toStringKey();
      resultMatrixHTML0.getRowName(2);
      resultMatrixLatex0.toStringMatrix();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2289874463186274
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[4];
      resultMatrixSignificance0.getRowName((-1384));
      stringArray0[0] = ")";
      stringArray0[1] = "(";
      stringArray0[2] = " ";
      stringArray0[3] = "v";
      int[] intArray0 = new int[8];
      intArray0[0] = 279;
      intArray0[1] = 279;
      intArray0[2] = 279;
      intArray0[7] = 0;
      intArray0[4] = 279;
      intArray0[5] = 2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(279, 435);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.123543012686369
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "*";
      stringArray0[2] = ")";
      resultMatrixPlainText0.padString("iYsAx,", 0);
      stringArray0[3] = "v";
      stringArray0[4] = "(";
      resultMatrixPlainText0.setOptions(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixPlainText0.m_HeaderValues = vector0;
      vector0.remove((Object) "u\"P}Q(+dWShg");
      vector0.trimToSize();
      resultMatrixPlainText0.padString("u\"P}Q(+dWShg", (-1818), true);
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.toString();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.setColNameWidth(40);
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.getMeanPrec();
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixLatex0.getDefaultShowStdDev();
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringRanking();
      assertFalse(resultMatrixCSV0.getShowStdDev());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.07305068293054
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.headerKeys();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.setMeanWidth(2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$circ$";
      stringArray0[1] = ")";
      stringArray0[2] = "6\"hpgZlhyDhnm";
      stringArray0[3] = "$circ$";
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance1.toStringKey();
      resultMatrixSignificance1.setPrintRowNames(false);
      resultMatrixSignificance1.setPrintRowNames(true);
      ResultMatrixLatex.main(stringArray0);
      resultMatrixSignificance1.setCount(0, 1);
      assertTrue(resultMatrixSignificance1.getEnumerateRowNames());
      
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixLatex0.setStdDev(2, 39, 0.0);
      resultMatrixLatex0.showStdDevTipText();
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3982943363055775
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringSummary();
      String string0 = resultMatrixLatex0.doubleToString(3384, 26);
      assertEquals("3384.00000000000000000000000000", string0);
      
      String string1 = resultMatrixLatex0.padString("v", 1);
      assertEquals("v", string1);
      
      resultMatrixLatex0.getAverage(97);
      int int0 = resultMatrixLatex0.getDisplayRow((-228));
      assertEquals((-1), int0);
      
      int int1 = resultMatrixLatex0.getCountWidth();
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, int1);
      
      resultMatrixSignificance0.colNameWidthTipText();
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.726477774687995
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 765;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      resultMatrixCSV0.m_Significance = intArray1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      resultMatrixCSV0.m_RankingWins = intArray0;
      resultMatrixCSV0.m_CountWidth = 0;
      resultMatrixCSV0.getColName(765);
      resultMatrixCSV0.WIN_STRING = "";
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.setMeanWidth(278);
      resultMatrixCSV0.getStdDev(765, 97);
      assertEquals(278, resultMatrixCSV0.getMeanWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setPrintRowNames(true);
      resultMatrixGnuPlot0.toStringSummary();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.colNameWidthTipText();
      resultMatrixLatex0.getRevision();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0222559929468336
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[][] intArray0 = new int[1][4];
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.assign(resultMatrixGnuPlot0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      boolean boolean0 = resultMatrixSignificance0.getPrintColNames();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertTrue(boolean0);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.694640666888228
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[1];
      intArray0[0] = (-653);
      resultMatrixPlainText0.listOptions();
      resultMatrixPlainText0.setEnumerateRowNames(false);
      resultMatrixPlainText0.toArray();
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.printRowNamesTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(250, (-1012));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1636281929254544
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 2;
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      int int0 = resultMatrixCSV0.getVisibleRowCount();
      int int1 = resultMatrixCSV0.getColNameWidth();
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(int1 == int0);
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, int1);
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2864104071942344
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[2];
      resultMatrixSignificance0.listOptions();
      intArray0[0] = 1;
      intArray0[1] = 1;
      resultMatrixSignificance0.m_RankingLosses = intArray0;
      int int0 = (-304);
      resultMatrixSignificance0.trimString((String) null, (-304));
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSize((-304), (-397));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.021835101036001
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*";
      stringArray0[1] = "CfAr^'(|L,";
      resultMatrixPlainText0.setOptions(stringArray0);
      resultMatrixPlainText1.toStringKey();
      resultMatrixPlainText1.getVisibleColCount();
      resultMatrixPlainText0.removeFilterName("KPcy^Hvr%.DkkuOeQ1");
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText1);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixPlainText1.clear();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText1);
      String[] stringArray1 = new String[4];
      stringArray1[0] = ")";
      stringArray1[1] = "(";
      stringArray1[2] = "(";
      stringArray1[3] = " ";
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = (double) 0;
      doubleArray5[6] = (double) 1;
      doubleArray5[7] = (double) 1;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 2;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 1;
      doubleArray6[3] = (double) 2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (double) 1;
      doubleArray7[1] = (double) 1;
      doubleArray7[2] = (double) 1;
      doubleArray7[3] = (-1.0);
      doubleArray7[4] = 0.0;
      doubleArray7[5] = (double) 2;
      doubleArray7[6] = (double) 0;
      doubleArray7[7] = (double) 1;
      doubleArray7[8] = (double) 1;
      doubleArray0[6] = doubleArray7;
      resultMatrixPlainText1.m_StdDev = doubleArray0;
      resultMatrixGnuPlot0.m_ColNames = stringArray1;
      resultMatrixGnuPlot0.setPrintRowNames(false);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringSummary();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=4.134965868003927
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "*";
      stringArray0[2] = ")";
      resultMatrixPlainText0.padString("iYsAx,", 0);
      stringArray0[3] = "v";
      stringArray0[4] = "(";
      resultMatrixPlainText0.setOptions(stringArray0);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixPlainText0.m_HeaderValues = vector0;
      vector0.remove((Object) "u\"P}Q(+dWShg");
      vector0.trimToSize();
      resultMatrixPlainText0.padString("u\"P}Q(+dWShg", (-1818), true);
      resultMatrixPlainText0.toStringSummary();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.setColNameWidth((-829));
      resultMatrixLatex0.getMeanPrec();
      assertEquals(5, resultMatrixPlainText0.getStdDevPrec());
      
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.9857253318145647
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(592, 3);
      resultMatrixPlainText0.m_RowOrder = null;
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.setColOrder((int[]) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*";
      stringArray0[1] = "*";
      stringArray0[2] = "";
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixPlainText0.setRowHidden(3, true);
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(3, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6493737447674137
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 765;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      resultMatrixCSV0.m_Significance = intArray1;
      intArray0[4] = 1;
      intArray0[5] = 0;
      resultMatrixCSV0.m_RankingWins = intArray0;
      resultMatrixCSV0.m_CountWidth = 0;
      resultMatrixCSV0.getColName(765);
      resultMatrixCSV0.WIN_STRING = "";
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.setMeanWidth(278);
      resultMatrixCSV0.getStdDev(765, 97);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.7772674005550204
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      
      int[][] intArray0 = new int[4][0];
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 2;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setMeanWidth(0);
      resultMatrixCSV0.getStdDev((-2217), 1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_CountWidth = 0;
      resultMatrixSignificance0.countWidthTipText();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.getDefaultRowNameWidth();
      int int0 = resultMatrixCSV1.getStdDevWidth();
      assertEquals(0, int0);
      
      resultMatrixCSV0.headerKeys();
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      
      String string0 = resultMatrixCSV1.toStringMatrix();
      assertEquals("Dataset,[1]\nrow0,''\n'[v/ /*]',''\n", string0);
      
      resultMatrixGnuPlot0.showAverageTipText();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.073074937920201
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(3, 3);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      boolean boolean0 = resultMatrixCSV0.getEnumerateRowNames();
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(boolean0);
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(3, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2227895625062026
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.meanPrecTipText();
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      resultMatrixLatex0.isStdDev(657);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.toStringRanking();
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1657903550876165
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 1;
      resultMatrixGnuPlot0.clear();
      intArray0[5] = 2;
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.getVisibleRowCount();
      resultMatrixCSV0.getRowOrder();
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.059484129882845
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(25, 25);
      resultMatrixHTML0.clear();
      resultMatrixHTML0.WIN_STRING = "0uQ3*:}V_";
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray1[3] = 1;
      intArray1[4] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      intArray2[1] = 0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      int[] intArray3 = new int[7];
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray3[2] = 1;
      intArray3[3] = 0;
      resultMatrixPlainText0.m_RankingLosses = intArray1;
      intArray3[4] = 2;
      intArray3[5] = 1;
      intArray3[6] = 1;
      resultMatrixPlainText0.setColOrder(intArray3);
      resultMatrixPlainText0.setRowOrder(intArray1);
      assertEquals(25, resultMatrixPlainText0.getVisibleColCount());
      
      ResultMatrixPlainText.main((String[]) null);
      resultMatrixPlainText0.setRowHidden(97, true);
      assertEquals(25, resultMatrixPlainText0.getVisibleRowCount());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1438696779504083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(3, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      int[][] intArray0 = new int[9][6];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 3;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 3;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 3;
      intArray3[1] = 1;
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray3[4] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 0;
      intArray4[1] = 3;
      intArray4[2] = 2;
      intArray4[3] = 2;
      intArray4[4] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      intArray5[0] = (-2942);
      intArray5[1] = 0;
      intArray5[2] = 1;
      intArray5[3] = 1078;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      intArray6[0] = 3;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = 2;
      intArray7[1] = (-2942);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[2];
      intArray8[0] = 0;
      intArray8[1] = 1;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[7];
      intArray9[0] = 3;
      intArray9[1] = 0;
      intArray9[2] = 2;
      intArray9[3] = 1078;
      intArray9[4] = 2;
      intArray9[5] = 2;
      intArray9[6] = 1;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.337588728123289
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int int0 = (-1484);
      boolean boolean0 = true;
      resultMatrixLatex0.setPrintRowNames(true);
      double double0 = (-246.97180017);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.doubleToString((-246.97180017), (-1484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.349269881423855
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[9];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.removeFilterName("+ kv>FHgMT");
      resultMatrixLatex0.doubleToString(0.0, 26);
      resultMatrixLatex0.padString("\tWhether to enumerate the column names (prefixing them with \n\t'(x)', with 'x' being the index).\n\t(default: no)", 3384);
      resultMatrixLatex0.getAverage(47);
      resultMatrixLatex0.getCountWidth();
      resultMatrixGnuPlot0.clear();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5973941642026905
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.headerKeys();
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.doubleToString((-1222.0), 3384);
      String string0 = resultMatrixLatex0.padString("-supervised..*", 0);
      assertEquals("-supervised..*", string0);
      
      resultMatrixLatex0.LOSS_STRING = "'Oz1fPFMv";
      resultMatrixLatex0.setSignificance(0, 0, 0);
      resultMatrixLatex0.getAverage((-228));
      int int0 = resultMatrixLatex0.getDisplayRow(570);
      assertEquals((-1), int0);
      
      resultMatrixLatex0.getCountWidth();
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.073074937920201
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = 652.27894430616;
      doubleArray1[2] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) (-1860);
      doubleArray3[1] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 652.27894430616;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-3085.187962003747);
      doubleArray4[4] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (double) 2;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = (-2976.8782164783);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-613.84608513);
      doubleArray6[4] = (-3085.187962003747);
      doubleArray6[5] = (double) (-1860);
      doubleArray6[6] = (-3085.187962003747);
      doubleArray6[7] = (-2976.8782164783);
      doubleArray6[8] = (double) 2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 652.27894430616;
      doubleArray7[1] = (-4743.0);
      doubleArray7[2] = 652.27894430616;
      doubleArray7[3] = (double) 2;
      doubleArray7[4] = (-96.0);
      doubleArray7[5] = (-3085.187962003747);
      doubleArray0[6] = doubleArray7;
      resultMatrixLatex0.m_Mean = doubleArray0;
      resultMatrixLatex0.setCountWidth((-1860));
      resultMatrixLatex0.getDefaultPrintColNames();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.124365809783805
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      resultMatrixHTML0.addHeader("*", "v");
      int[][] intArray0 = new int[8][0];
      int[] intArray1 = new int[1];
      intArray1[0] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 1;
      intArray3[3] = (-2074);
      intArray3[4] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray4[2] = 2;
      intArray4[3] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      intArray5[0] = 0;
      intArray5[1] = 2;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 1;
      intArray5[5] = (-2074);
      intArray5[6] = 0;
      intArray5[7] = 0;
      intArray5[8] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      intArray6[0] = 1;
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray6[3] = (-2074);
      intArray4[1] = 190;
      intArray6[5] = 0;
      intArray6[6] = 2;
      intArray6[7] = 1;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      intArray7[0] = (-2074);
      intArray7[1] = 0;
      intArray7[2] = (-2074);
      intArray7[3] = 0;
      intArray7[4] = 0;
      intArray7[5] = 0;
      intArray7[6] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[4];
      intArray8[0] = 0;
      intArray8[1] = 1547;
      intArray8[2] = 1;
      intArray8[3] = (-2074);
      intArray0[7] = intArray8;
      resultMatrixHTML1.m_NonSigWins = intArray0;
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      
      resultMatrixHTML1.setCountWidth(2);
      assertEquals(2, resultMatrixHTML1.getCountWidth());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1269392893991377
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(25, 25);
      resultMatrixHTML0.clear();
      resultMatrixHTML0.WIN_STRING = "0uQ3*:}V_";
      boolean boolean0 = true;
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.setPrintRowNames(true);
      String[] stringArray0 = new String[13];
      stringArray0[0] = ")";
      stringArray0[1] = "fAg)au+,@H";
      try { 
        resultMatrixLatex0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2255826812772304
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.listOptions();
      resultMatrixPlainText0.setEnumerateRowNames(false);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      assertTrue(resultMatrixPlainText1.getPrintColNames());
      assertEquals(0, resultMatrixPlainText1.getSignificanceWidth());
      assertTrue(resultMatrixPlainText1.getEnumerateColNames());
      assertEquals(0, resultMatrixPlainText1.getMeanWidth());
      assertEquals(2, resultMatrixPlainText1.getMeanPrec());
      assertEquals(2, resultMatrixPlainText1.getStdDevPrec());
      assertEquals(5, resultMatrixPlainText1.getCountWidth());
      assertEquals(0, resultMatrixPlainText1.getStdDevWidth());
      assertEquals(25, resultMatrixPlainText1.getRowNameWidth());
      assertTrue(resultMatrixPlainText1.getPrintRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.110893430318651
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      String[] stringArray0 = new String[0];
      resultMatrixPlainText0.m_RowNames = stringArray0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-653);
      resultMatrixCSV0.m_RankingWins = intArray0;
      resultMatrixPlainText0.listOptions();
      resultMatrixPlainText0.setEnumerateRowNames(false);
      ResultMatrixPlainText resultMatrixPlainText1 = null;
      try {
        resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixCSV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.178326878792814
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = "$circ$";
      resultMatrixLatex0.setPrintRowNames(true);
      stringArray0[2] = ")";
      stringArray0[3] = " ";
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(2, 2);
      assertEquals(2, resultMatrixHTML1.getVisibleRowCount());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixHTML1.assign(resultMatrixCSV0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML1);
      boolean boolean0 = resultMatrixSignificance0.getPrintColNames();
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.8970197084316998
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toString();
      resultMatrixPlainText0.setStdDevPrec(592);
      resultMatrixPlainText0.getRowHidden(3);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.059483896790135
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.setColOrder(intArray0);
      resultMatrixPlainText0.setRowOrder(intArray0);
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      
      ResultMatrixPlainText.main((String[]) null);
      resultMatrixPlainText0.setRowHidden(1, true);
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(50, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.902892177219808
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.addHeader("OY", "WaJfaM}");
      resultMatrixHTML0.toString();
      resultMatrixHTML0.setRowNameWidth((-163));
      resultMatrixHTML0.toStringHeader();
      resultMatrixHTML0.setSignificance(1714, 1714, 1714);
      int[][] intArray0 = new int[7][6];
      int[] intArray1 = new int[8];
      intArray1[0] = 1714;
      intArray1[1] = (-163);
      intArray1[2] = 2;
      intArray1[3] = 1;
      intArray1[4] = 2;
      intArray1[5] = 0;
      intArray1[6] = 3688;
      intArray1[7] = (-163);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 1714;
      intArray2[1] = (-1552);
      intArray2[2] = 3688;
      intArray2[3] = (-163);
      intArray2[4] = 0;
      intArray2[5] = 1714;
      intArray2[6] = 2;
      intArray2[7] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = (-163);
      intArray3[1] = 0;
      intArray3[2] = 3688;
      intArray3[3] = 3688;
      intArray3[4] = 2;
      intArray3[5] = 1714;
      intArray3[6] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = (-163);
      intArray4[1] = (-163);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 3688;
      intArray6[1] = 0;
      intArray6[2] = 2434;
      intArray6[3] = 3688;
      intArray6[4] = 0;
      intArray6[5] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      intArray7[0] = (-1552);
      intArray7[1] = 3688;
      intArray7[2] = 804;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.9051895164315127
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.addHeader("OY", "WaJfaM}");
      resultMatrixHTML0.toString();
      resultMatrixHTML0.setRowNameWidth((-163));
      resultMatrixHTML0.toStringHeader();
      resultMatrixHTML0.setSignificance(1714, 1714, 1714);
      int[][] intArray0 = new int[7][6];
      int[] intArray1 = new int[8];
      intArray1[0] = 1714;
      int[][] intArray2 = new int[4][4];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setSummary(intArray0, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.059048768746204
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      stringArray0[1] = "(";
      stringArray0[2] = " ";
      stringArray0[3] = "v";
      int[] intArray0 = new int[8];
      intArray0[0] = 279;
      intArray0[1] = 279;
      intArray0[2] = 279;
      intArray0[3] = 0;
      intArray0[4] = 279;
      intArray0[5] = 2;
      intArray0[6] = 1;
      intArray0[7] = 2;
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      resultMatrixSignificance0.setMeanWidth(279);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      String string0 = resultMatrixSignificance1.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      
      resultMatrixSignificance1.setPrintRowNames(false);
      resultMatrixSignificance1.setPrintRowNames(true);
      String[] stringArray1 = new String[0];
      ResultMatrixLatex.main(stringArray1);
      resultMatrixSignificance1.setCount(0, 2);
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertFalse(resultMatrixSignificance1.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertEquals(279, resultMatrixSignificance1.getMeanWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getCountWidth();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1904073435153335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      String string0 = resultMatrixHTML1.toStringKey();
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixHTML1.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n   <tr><td><b>(1)</b></td><td>col0</td></tr>\n</table>\n", string0);
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=4.017437474068655
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = "$circ$";
      resultMatrixLatex0.setPrintRowNames(true);
      stringArray0[2] = ")";
      stringArray0[3] = " ";
      stringArray0[4] = "(";
      stringArray0[5] = "(";
      stringArray0[6] = "$circ$";
      resultMatrixLatex0.setOptions(stringArray0);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixLatex0.enumerateColNamesTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixLatex0.assign(resultMatrixCSV0);
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.64917784780316
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
  }
}
