/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:18:33 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      Range range0 = discretize0.m_DiscretizeCols;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "?{}unFWB?U";
      stringArray0[1] = "<*j 5zh8$N--j";
      stringArray0[2] = "weka.core.BinarySdarseInstance";
      stringArray0[3] = "inf";
      stringArray0[4] = "wFtng";
      Discretize.main(stringArray0);
      discretize0.setUseEqualFrequency(true);
      stringArray0[5] = "    Object[][]\tresult;\n";
      stringArray0[6] = "%TDN^(Ad}t";
      stringArray0[7] = "<*j 5zh8$N--j";
      stringArray0[8] = "V0";
      Range.main(stringArray0);
      discretize0.m_DiscretizeCols = range0;
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4084566850225597
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("<*j 5zh8$N--j");
      discretize0.setUseBinNumbers(true);
      discretize0.getInvertSelection();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.invertSelectionTipText();
      discretize0.useBinNumbersTipText();
      discretize0.getOptions();
      discretize0.useBinNumbersTipText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[1] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[2] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[3] = "last";
      stringArray0[4] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[5] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[6] = "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.";
      stringArray0[7] = "+PEbM}$Ub#8Xd>JM";
      stringArray0[8] = ",pxhq;y,2_ovtFQeQ";
      discretize0.setOptions(stringArray0);
      discretize0.getFindNumBins();
      discretize0.getUseEqualFrequency();
      discretize0.findNumBinsTipText();
      discretize0.makeBinaryTipText();
      discretize0.getFindNumBins();
      discretize0.getUseEqualFrequency();
      discretize0.getCapabilities();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Number of bins.", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      System.setCurrentTimeMillis(2L);
      discretize0.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("else if(forma.atribute(i).isNumeric())");
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2874);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(436);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(86);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 86;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.copy();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "M|\"C{]";
      stringArray0[1] = "&lPpofH5Lc-#7Y!H";
      Instances.test(stringArray0);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      Discretize discretize1 = new Discretize();
      discretize0.setBins((-1790));
      discretize0.setOutputFormat();
      discretize0.getCutPoints((-159));
      discretize1.getAttributeIndices();
      discretize1.attributeIndicesTipText();
      discretize0.findNumBinsTipText();
      discretize0.getBins();
      DenseInstance denseInstance0 = new DenseInstance(1137.66092, (double[]) null);
      SystemInUtil.addInputLine("first-last");
      Discretize discretize2 = new Discretize();
      // Undeclared exception!
      try { 
        discretize2.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      discretize0.setInvertSelection(true);
      int int0 = 15;
      discretize0.setBins(15);
      boolean boolean0 = true;
      discretize0.setFindNumBins(true);
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8O8S83}ml|z3";
      stringArray0[1] = "<*j 5zh8$N--j";
      stringArray0[2] = "/\"c)XKm";
      stringArray0[3] = "<*j 5zh8$N--j";
      stringArray0[4] = "else if(forma.atribute(i).isNumeric())";
      stringArray0[5] = "c";
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("");
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1704.640496385331);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1838.2979);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1704.640496385331);
      doubleArray2[6] = (-1704.640496385331);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1704.640496385331);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-1704.640496385331);
      doubleArray3[3] = (-3462.31722586882);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(gjxqh+gedBm";
      stringArray0[1] = "attributes";
      Instances.test(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2874;
      doubleArray0[1] = (double) 2874;
      doubleArray0[2] = (double) 2874;
      doubleArray0[3] = (double) 2874;
      doubleArray0[4] = (double) 2874;
      doubleArray0[5] = 0.0;
      doubleArray0[5] = (double) 2874;
      doubleArray0[7] = (double) 2874;
      doubleArray0[8] = (double) 2874;
      SparseInstance sparseInstance0 = new SparseInstance(2874, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      sparseInstance0.copy();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2874.0, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = null;
      try {
        discretize1 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      SparseInstance sparseInstance0 = new SparseInstance(2679.31701670905, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(86);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      sparseInstance0.copy();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(86, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      binarySparseInstance2.dataset();
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 997.8242;
      doubleArray0[1] = 997.8242;
      doubleArray0[2] = 997.8242;
      doubleArray0[3] = 997.8242;
      SparseInstance sparseInstance0 = new SparseInstance(997.8242, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(86, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(86, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("4[sG:/bdGLq5f7", arrayList0, 86);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getOptions();
      discretize0.m_IgnoreClass = true;
      discretize0.m_NumBins = 0;
      discretize0.getInvertSelection();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 364;
      doubleArray0[4] = (double) 364;
      doubleArray0[5] = (double) 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 364;
      intArray0[2] = 364;
      intArray0[3] = 0;
      intArray0[4] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(364, doubleArray0, intArray0, 833);
      sparseInstance0.dataset();
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "first-last";
      stringArray0[1] = "]*FTBcJTGrY.[kcopc";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, (String) null, (-638));
      arrayList0.add(attribute0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 3;
      arrayList0.add(attribute0);
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) (-638);
      doubleArray0[5] = (double) 3;
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[1] = 0;
      discretize0.getFindNumBins();
      Instances instances0 = null;
      try {
        instances0 = new Instances("Puk{thm4P|fV8", arrayList0, (-539));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'null' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1704.640496385331);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1838.2979);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (-1704.640496385331);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1704.640496385331);
      doubleArray2[6] = (-1704.640496385331);
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(1.0, doubleArray2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      sparseInstance1.copy();
      binarySparseInstance0.deleteAttributeAt(82);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINESE;
      locale0.getScript();
      locale0.getUnicodeLocaleKeys();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      discretize0.makeBinaryTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1704.640496385331);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1838.2979);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1704.640496385331);
      doubleArray2[6] = (-1704.640496385331);
      doubleArray2[7] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1704.640496385331);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-1704.640496385331);
      doubleArray3[3] = (-3462.31722586882);
      doubleArray3[4] = (-1704.640496385331);
      doubleArray3[5] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (-3462.31722586882);
      doubleArray4[2] = (-3462.31722586882);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-3462.31722586882);
      doubleArray4[5] = 1.0;
      doubleArray4[7] = (-3462.31722586882);
      doubleArray4[8] = (-519.3);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 491.4;
      doubleArray5[1] = 2244.684;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = (-1704.640496385331);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_NumBins = 2147483645;
      discretize0.setUseBinNumbers(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "first-last";
      stringArray0[1] = "]*FTBcJTGrY.[kcopc";
      stringArray0[2] = "r`6S0uyjJ{";
      stringArray0[3] = "E<8L[6z-Day";
      Instances.test(stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "]*FTBcJTGrY.[kcopc";
      stringArray1[1] = "first-last";
      stringArray1[2] = "]*FTBcJTGrY.[kcopc";
      stringArray1[3] = "]*FTBcJTGrY.[kcopc";
      discretize0.setOptions(stringArray1);
      Random.setNextRandom((-2092419962));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(124);
      discretize0.getInvertSelection();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      Object object0 = new Object();
      BiFunction<Object, Object, Discretize> biFunction0 = (BiFunction<Object, Object, Discretize>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      properties1.compute(object0, biFunction0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize("&|+BFoUd");
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = new String[4];
      stringArray0[3] = "STRING_CL[ASS";
      stringArray0[2] = "Z>;p#";
      stringArray0[3] = "";
      Discretize.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 997.8242;
      SparseInstance sparseInstance0 = new SparseInstance(1777.6998581519, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(86, intArray0, 2147483645);
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance(1777.6998581519, doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance4.copy();
      binarySparseInstance5.isMissing(86);
      int[] intArray1 = new int[1];
      intArray1[0] = 86;
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0.0, intArray1, (-4460));
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((Instance) binarySparseInstance5);
      binarySparseInstance7.deleteAttributeAt((-104));
      binarySparseInstance2.toString((-2092419962));
      Discretize discretize0 = new Discretize("1Sw+8VdC$Obmw_<Tl{");
      discretize0.getCutPoints((-3490));
      Random.setNextRandom(86);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize("unknown(");
      int[] intArray0 = new int[7];
      intArray0[0] = 810;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1715;
      discretize0.setIgnoreClass(false);
      intArray0[4] = 1111;
      intArray0[5] = 33;
      intArray0[6] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      discretize0.makeBinaryTipText();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      
      String string1 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string1);
      
      discretize0.getUseEqualFrequency();
      discretize0.setUseEqualFrequency(false);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances.test((String[]) null);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(436);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(86);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 86;
      SparseInstance sparseInstance0 = new SparseInstance(86, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      sparseInstance0.copy();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "M|\"C{]";
      discretize0.setBins((-4608));
      stringArray0[1] = "&lPpofH5Lc-#7Y!H";
      stringArray0[2] = "jKs'O)3";
      Instances.test(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 10;
      intArray0[1] = (-2845);
      intArray0[2] = (-1158);
      intArray0[3] = (-1026);
      intArray0[4] = 1860;
      intArray0[5] = 0;
      intArray0[6] = (-3581);
      intArray0[7] = 79;
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1838.2979);
      doubleArray1[1] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(0.0, doubleArray1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      sparseInstance1.copy();
      binarySparseInstance0.deleteAttributeAt(86);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "first-last";
      stringArray0[1] = "ObxEQcLr3@";
      stringArray0[2] = "7O,#GZ*K(UfJw;vo'E";
      BinarySparseInstance.main(stringArray0);
      binarySparseInstance1.toString((-2557));
      String string0 = discretize0.globalInfo();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 997.8242;
      doubleArray0[3] = 997.8242;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NEGATIVE_INFINITY, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      sparseInstance0.copy();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize(")ypPqnc-8m3=l0");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<*j 5zh8$N--j";
      stringArray0[1] = ")ypPqnc-8m3=l0";
      stringArray0[2] = ")ypPqnc-8m3=l0";
      stringArray0[4] = ")ypPqnc-8m3=l0";
      stringArray0[5] = ")ypPqnc-8m3=l0";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize("@=P5e");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@=P5e";
      discretize0.getRevision();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-31);
      Discretize discretize1 = new Discretize();
      int int0 = 983;
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualWidthBinning(983);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties2);
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(66);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("<*j 5zh8$N--j");
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      assertEquals((-1.0), double0, 0.01);
      
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7257318471278027
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1704.640496385331);
      doubleArray1[1] = 0.26568434349230174;
      doubleArray1[2] = 1.0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "ZS1ZEo*naG\"Dn9|");
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayOutputStream0);
      mockPrintStream1.append((CharSequence) "ZS1ZEo*naG\"Dn9|");
      Properties properties0 = new Properties();
      properties0.list(printStream0);
      Discretize discretize1 = new Discretize("ZS1ZEo*naG\"Dn9|");
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize1.setDesiredWeightOfInstancesPerInterval(0.0);
      assertEquals(0.0, discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ZS1ZEo*naG\"Dn9|";
      stringArray0[1] = "E<8L[6z-Day";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 997.8242;
      doubleArray0[1] = 997.8242;
      doubleArray0[2] = 997.8242;
      doubleArray0[3] = 997.8242;
      SparseInstance sparseInstance0 = new SparseInstance(997.8242, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(86, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.copy();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(86, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4[sG:/bdGLq5f7";
      stringArray0[1] = "4[sG:/bdGLq5f7";
      Instances.test(stringArray0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
