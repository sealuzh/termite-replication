/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 02:42:22 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6425485787935725
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(125, 125);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.commentChar((-4));
      StringReader stringReader1 = new StringReader("min");
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '6';
      stringReader1.reset();
      charArray0[4] = '<';
      streamTokenizer1.ordinaryChar(125);
      charArray0[5] = '\u0090';
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer1.nextToken();
      jSTerm0.add((Object) jSTerm1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(125);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals("[<, [<]]", jSTerm0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2879345187642708
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.equals(jSTerm0);
      jSSubstitution0.add((Object) "(w<)49");
      jSTerm0.lastElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.firstElement();
      Predicate<JSSubstitution> predicate3 = Predicate.isEqual((Object) "w<");
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      predicate4.or(predicate0);
      streamTokenizer0.slashSlashComments(true);
      Predicate<JSSubstitution> predicate5 = predicate3.and(predicate1);
      Predicate<JSSubstitution> predicate6 = Predicate.isEqual((Object) jSTerm0);
      Predicate<JSSubstitution> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate8.and(predicate1);
      predicate7.and(predicate9);
      Predicate<JSSubstitution> predicate10 = predicate7.or(predicate0);
      predicate10.and(predicate6);
      System.setCurrentTimeMillis(41);
      System.setCurrentTimeMillis(2L);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.303092403761719
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(125, 125);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.commentChar((-4));
      StringReader stringReader1 = new StringReader("min");
      char[] charArray0 = new char[8];
      charArray0[1] = '\u0000';
      stringReader0.markSupported();
      stringReader1.reset();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.nextToken();
      StringReader stringReader2 = new StringReader("eey");
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.303092403761719
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(125, 125);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.commentChar((-4));
      StringReader stringReader1 = new StringReader("min");
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '6';
      stringReader1.reset();
      charArray0[4] = '<';
      charArray0[5] = '}';
      charArray0[6] = '7';
      charArray0[7] = '.';
      jSTerm0.cloneT();
      streamTokenizer1.nextToken();
      StringReader stringReader2 = new StringReader("min");
      jSTerm0.add((Object) stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7120473696037157
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      jSSubstitution0.add((Object) "(w<)49");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution3);
      StringReader stringReader1 = new StringReader("(w<)49");
      stringReader1.reset();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.nextToken();
      StringReader stringReader2 = new StringReader("@$");
      jSTerm1.add((Object) stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9056849185434557
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(125, 125);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.commentChar((-4));
      StringReader stringReader1 = new StringReader("min");
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = '6';
      stringReader1.reset();
      charArray0[4] = 'D';
      streamTokenizer1.ordinaryChar(125);
      charArray0[5] = '}';
      charArray0[6] = '7';
      streamTokenizer1.nval = (double) '.';
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer1.nextToken();
      jSTerm0.add((Object) stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5739644913933235
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(w<)49");
      JSJshopVars.verticalL = 2;
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) "(w<)49");
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.standarizerSubs();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution3);
      predicate0.and(predicate1);
      Predicate<JSSubstitution> predicate6 = Predicate.isEqual((Object) predicate5);
      Predicate<JSSubstitution> predicate7 = predicate6.negate();
      Predicate<JSSubstitution> predicate8 = predicate7.or(predicate4);
      predicate8.and(predicate4);
      predicate7.negate();
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      jSTerm0.print();
      jSTerm0.print();
      assertEquals(10, jSTerm0.capacity());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.535959889216217
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(w<)49");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) "(w<)49");
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.standarizerSubs();
      predicate0.and(predicate1);
      Predicate<JSSubstitution> predicate6 = Predicate.isEqual((Object) predicate5);
      Predicate<JSSubstitution> predicate7 = predicate6.negate();
      Predicate<JSSubstitution> predicate8 = predicate7.or(predicate4);
      predicate8.and(predicate4);
      predicate7.or(predicate5);
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.037734194785151
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      StringReader stringReader0 = new StringReader("?W`J={}\"+_E5@%Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2);
      assertEquals(1, jSSubstitution1.size());
      
      boolean boolean0 = jSTerm1.isGround();
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(boolean0);
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6722962280908585
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function2 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function3 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function2);
      function1.andThen((Function<? super String, ? extends JSTerm>) function3);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.apply("(Ee{Y{NE");
      Function<String, Integer> function4 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function5 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function4);
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function5);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = (-4);
      jSTerm0.replaceAll(unaryOperator0);
      streamTokenizer0.pushBack();
      StringReader stringReader1 = new StringReader("c7zY (J$5Y;LcmoH");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.whitespaceChars((-4), (-4));
      char[] charArray0 = new char[7];
      charArray0[1] = '\u0000';
      charArray0[2] = 'X';
      charArray0[4] = '|';
      charArray0[6] = '[';
      stringReader0.read(charArray0);
      jSTerm0.capacity();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate0.negate();
      predicate1.or(predicate3);
      predicate2.or(predicate1);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("c7zY (J$5Y;LcmoH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader1 = new StringReader("(OF");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.whitespaceChars((-1435557616), (-1435557616));
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = 'X';
      stringReader0.read(charArray0);
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      String string0 = "(";
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FnGgOO/*F8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      stringReader0.reset();
      streamTokenizer0.ttype = (-1928);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = 'I';
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      streamTokenizer1.whitespaceChars((-1928), (-1928));
      JSJshopVars.lessT = (-847);
      jSTerm1.isVariable();
      jSSubstitution0.stream();
      // Undeclared exception!
      try { 
        jSSubstitution0.setSize((-1928));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1928
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.210416078248897
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Re0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.removeElement(streamTokenizer0);
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution0.fail());
      
      CharBuffer.allocate(43);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
      
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm4.matches(jSTerm3);
      jSTerm4.matches(jSTerm3);
      jSTerm2.cloneT();
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution3);
      assertNotSame(jSTerm1, jSTerm5);
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm5.isConstant());
      assertFalse(jSTerm1.isEval());
      
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = jSTerm4.matches(jSTerm6, jSSubstitution4);
      assertTrue(jSSubstitution5.fail());
      assertFalse(jSSubstitution5.equals((Object)jSSubstitution2));
      
      JSTerm jSTerm7 = new JSTerm();
      JSSubstitution jSSubstitution6 = jSTerm4.matches(jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution6.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6849547610531581
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSJshopVars.rightPar = 37;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      String string0 = "?";
      StringReader stringReader0 = new StringReader("?");
      stringReader0.mark(37);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8143075196071252
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.VarCounter = 2363;
      StringReader stringReader0 = new StringReader("yMCh&V-qu");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      CharBuffer charBuffer0 = CharBuffer.allocate(2363);
      stringReader0.read(charBuffer0);
      unaryOperator0.apply("yMCh&V-qu");
      CharBuffer.wrap(charArray0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.makeFunction();
      jSTerm0.isConstant();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6341641204877508
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(125, 125);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.commentChar((-4));
      StringReader stringReader1 = new StringReader("min");
      char[] charArray0 = new char[8];
      charArray0[1] = '\u0000';
      charArray0[2] = '6';
      stringReader1.reset();
      charArray0[4] = '\u0000';
      streamTokenizer1.lowerCaseMode(true);
      charArray0[5] = '}';
      charArray0[6] = '7';
      charArray0[7] = '.';
      jSTerm0.cloneT();
      streamTokenizer1.nextToken();
      StringReader stringReader2 = new StringReader("min");
      jSTerm0.add((Object) stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2652514606723653
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(w<)49");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate2.or(predicate4);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      predicate1.or(predicate0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.standarizerSubs();
      Predicate<Object> predicate6 = predicate2.or(predicate4);
      jSTerm0.lastElement();
      Predicate.isEqual((Object) "w<");
      Predicate<JSSubstitution> predicate7 = Predicate.isEqual((Object) predicate6);
      Predicate<JSSubstitution> predicate8 = predicate7.negate();
      predicate8.negate();
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate0);
      predicate0.or(predicate9);
      Predicate<JSSubstitution> predicate10 = predicate8.or(predicate4);
      predicate10.and(predicate4);
      predicate8.or(predicate5);
      predicate7.negate();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.cloneT();
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.08055716002842
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2I%ZhVow7:we");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(2772, 2772);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm1.removeAll(jSTerm0);
      JSJshopVars.lessT = 2772;
      jSSubstitution0.spliterator();
      jSTerm0.standardizerTerm();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0427845852427873
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.ordinaryChars((-2), (-929));
      stringReader0.skip((-1L));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      assertFalse(jSTerm1.isFunction());
      assertEquals("[nil]", jSTerm1.toString());
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.091237956829231
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(58);
      charBuffer0.limit(58);
      charBuffer0.get(41);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.call();
      JSEvaluate.numericValue(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm3.isFunction());
      
      JSJshopVars.plus = (-1809);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.matches(jSTerm4, jSSubstitution0);
      JSTerm jSTerm5 = jSTerm1.standardizerTerm();
      JSJshopVars.apostrophe = 96;
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.trimToSize();
      jSTerm5.cloneT();
      assertFalse(jSTerm5.isEval());
      assertTrue(jSTerm5.isFunction());
      
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm4, jSSubstitution0);
      assertEquals(10, jSTerm2.capacity());
      assertNotSame(jSTerm2, jSTerm3);
      assertNotSame(jSSubstitution0, jSSubstitution1);
      assertTrue(jSTerm2.isFunction());
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0);
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution2.fail());
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm5);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1920304632502536
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Re0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.removeElement(streamTokenizer0);
      streamTokenizer0.pushBack();
      CharBuffer.allocate(43);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm1.call();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      JSEvaluate.numericValue(jSTerm4);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      jSTerm0.matches(jSTerm5, jSSubstitution1);
      JSTerm jSTerm6 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm7 = new JSTerm(streamTokenizer1);
      jSTerm6.matches(jSTerm7, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm6.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.73798344858705
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v2x2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.VarCounter = 2363;
      StringReader stringReader0 = new StringReader("yMCh&V-qu");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      CharBuffer charBuffer0 = CharBuffer.allocate(2363);
      charBuffer0.compact();
      stringReader0.read(charBuffer0);
      unaryOperator0.apply("yMCh&V-qu");
      CharBuffer.wrap(charArray0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.makeFunction();
      jSTerm0.isConstant();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8953199476729365
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(58);
      charBuffer0.limit(58);
      charBuffer0.get(41);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSEvaluate.numericValue(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSJshopVars.plus = (-1809);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.442080248948443
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(32);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.ordinaryChars((-778), 61);
      StringReader stringReader1 = new StringReader("min");
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = 'G';
      charArray0[2] = '6';
      charArray0[3] = 'e';
      charArray0[4] = 'D';
      charArray0[5] = '}';
      charArray0[6] = '7';
      charArray0[7] = '.';
      stringReader1.read(charArray0, 2, 2);
      StringReader stringReader2 = new StringReader("nt");
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FnGgOO/W8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      stringReader0.reset();
      int int0 = (-1928);
      streamTokenizer0.ttype = (-1928);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(271);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.355386892494243
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Re0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.removeElement(streamTokenizer0);
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      CharBuffer.allocate(73);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(boolean0);
      
      JSEvaluate.numericValue(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution3);
      assertEquals("[7.0]", jSTerm3.toString());
      
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSSubstitution jSSubstitution4 = jSTerm4.matches(jSTerm1, jSSubstitution2);
      assertFalse(jSSubstitution4.fail());
      assertNotSame(jSSubstitution2, jSSubstitution4);
      
      JSSubstitution jSSubstitution5 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm5 = jSTerm0.standardizerTerm();
      jSTerm3.trimToSize();
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution5));
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm1.isFunction());
      
      JSTerm jSTerm6 = jSTerm5.cloneT();
      assertNotSame(jSTerm6, jSTerm5);
      assertEquals("[7.00]", jSTerm6.toString());
      assertFalse(jSTerm6.isEval());
      assertTrue(jSTerm6.isVariable());
      assertFalse(jSTerm6.isFunction());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "%%%");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      jSSubstitution1.standarizerSubs();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) null);
      Predicate.isEqual((Object) null);
      predicate4.negate();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0388124658213127
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("ee");
      CharBuffer charBuffer0 = CharBuffer.allocate(58);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSEvaluate.numericValue(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.178580294980779
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm0);
      jSSubstitution0.add((Object) "(w<)49");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution3);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSJshopVars.minus = 41;
      jSSubstitution5.standarizerSubs();
      Predicate.isEqual((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.036813889842917
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      CharBuffer charBuffer0 = CharBuffer.allocate(58);
      charBuffer0.limit(58);
      charBuffer0.get(41);
      stringReader0.read(charBuffer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isEval());
      
      JSTerm jSTerm2 = jSTerm1.call();
      JSEvaluate.numericValue(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSSubstitution1.add((Object) jSTerm0);
      jSTerm1.matches(jSTerm3, jSSubstitution1);
      assertEquals(1, jSSubstitution1.size());
      
      jSTerm2.standardizerTerm();
      jSTerm1.cloneT();
      assertNotSame(jSTerm1, jSTerm3);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      Predicate.isEqual(object0);
      StringReader stringReader0 = new StringReader(">");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis(1700L);
      StringReader stringReader0 = new StringReader("%%%");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.setSize(112);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lk49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4427147668423626
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Re0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.removeElement(streamTokenizer0);
      streamTokenizer0.pushBack();
      CharBuffer.allocate(43);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(43);
      jSTerm0.makeVariable();
      UnaryOperator.identity();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isGround();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2, jSSubstitution1);
      assertFalse(jSTerm0.isConstant());
      
      JSSubstitution jSSubstitution3 = jSTerm0.matches((JSTerm) null);
      JSSubstitution jSSubstitution4 = jSTerm2.matches(jSTerm1);
      jSTerm3.cloneT();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution4);
      jSTerm2.matches(jSTerm4, jSSubstitution3);
      assertFalse(jSSubstitution4.equals((Object)jSSubstitution2));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.32977964254865
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Re0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.removeElement(streamTokenizer0);
      streamTokenizer0.pushBack();
      CharBuffer.allocate(43);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(43);
      jSTerm0.makeVariable();
      UnaryOperator.identity();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.isGround();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm3, jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1);
      jSTerm0.cloneT();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm1));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.VarCounter = 2363;
      StringReader stringReader0 = new StringReader("yMCh&V-qu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator.identity();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isGround();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.8486855577264172
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("()849");
      StringReader stringReader1 = new StringReader("Expecting elements of the list");
      StringReader stringReader2 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.equals(jSTerm1);
      jSSubstitution0.add((Object) "g");
      jSTerm0.lastElement();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.firstElement();
      Predicate<JSSubstitution> predicate3 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      predicate5.or(predicate2);
      Predicate<JSSubstitution> predicate6 = predicate3.and(predicate4);
      Predicate<JSSubstitution> predicate7 = Predicate.isEqual((Object) jSSubstitution1);
      predicate6.negate();
      predicate1.negate();
      predicate4.and(predicate5);
      Predicate<JSSubstitution> predicate8 = predicate6.and(predicate5);
      predicate7.or(predicate4);
      predicate8.and(predicate1);
      System.setCurrentTimeMillis(1148L);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.5402041423888608
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      StringReader stringReader1 = new StringReader("min");
      streamTokenizer1.ordinaryChar((-4));
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = 'G';
      charArray0[2] = '6';
      charArray0[3] = 'e';
      charArray0[5] = '}';
      charArray0[0] = '7';
      streamTokenizer1.nval = (double) '.';
      stringReader1.read(charArray0, 2, 2);
      StringReader stringReader2 = new StringReader("nt");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.toStr();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      stringReader0.read();
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.lowerCaseMode(false);
      JSJshopVars.whiteSpace = 440;
      jSTerm0.addElement(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("pecting ", stringBuffer0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8946891171539901
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.VarCounter = 2363;
      StringReader stringReader0 = new StringReader("yMCh&V-qu");
      UnaryOperator.identity();
      jSTerm0.add((Object) "yMCh&V-qu");
      UnaryOperator.identity();
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.percent = 2363;
      jSSubstitution1.containsAll(jSTerm1);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSTerm0.makeVariable();
      jSTerm1.isGround();
      jSTerm2.isFunction();
      jSTerm0.toStr();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.VarCounter = 2363;
      StringReader stringReader0 = new StringReader("yMCh&V-qu");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      unaryOperator0.apply("yMCh&V-qu");
      jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(OF");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "(w<)49");
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate0);
      Predicate<Object> predicate7 = predicate3.or(predicate5);
      predicate5.negate();
      Predicate<Object> predicate8 = predicate2.negate();
      Predicate.isEqual((Object) "(OF");
      Predicate<Object> predicate9 = predicate6.and(predicate5);
      predicate3.or(predicate9);
      predicate1.and(predicate0);
      predicate6.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution2);
      Predicate<Object> predicate10 = predicate4.negate();
      Predicate<Object> predicate11 = predicate5.and(predicate10);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.lastElement();
      Predicate<JSSubstitution> predicate12 = Predicate.isEqual((Object) "w<");
      Predicate<JSSubstitution> predicate13 = predicate12.and(predicate3);
      Predicate<JSSubstitution> predicate14 = predicate12.or(predicate11);
      predicate12.or(predicate8);
      predicate14.and(predicate7);
      predicate13.negate();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm1.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8848713335781608
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.VarCounter = 2363;
      StringReader stringReader0 = new StringReader("yMCh&V-qu");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      unaryOperator0.apply("yMCh&V-qu");
      CharBuffer.allocate('k');
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.makeFunction();
      jSTerm0.isConstant();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2220882254923937
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm1);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate1.or(predicate2);
      Predicate<Object> predicate6 = predicate4.or(predicate3);
      predicate4.test("(w<)49");
      Predicate<Object> predicate7 = predicate3.and(predicate6);
      Predicate<Object> predicate8 = predicate1.and(predicate5);
      Predicate<Object> predicate9 = predicate3.negate();
      predicate4.negate();
      predicate9.or(predicate3);
      jSSubstitution0.standarizerSubs();
      jSTerm1.lastElement();
      Predicate.isEqual((Object) "w<");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<JSSubstitution> predicate10 = Predicate.isEqual((Object) predicate6);
      predicate1.or(predicate0);
      Predicate<JSSubstitution> predicate11 = predicate10.and(predicate8);
      Predicate<JSSubstitution> predicate12 = Predicate.isEqual((Object) stringReader0);
      predicate11.negate();
      predicate7.negate();
      predicate11.and(predicate12);
      predicate10.or(predicate0);
      predicate12.and(predicate9);
      System.setCurrentTimeMillis(475L);
      System.setCurrentTimeMillis(8L);
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.elementAt(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 37;
      StringReader stringReader0 = new StringReader("mgp|&");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(">");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.replaceAll(unaryOperator0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.nextToken();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.equals(jSTerm4);
      boolean boolean0 = jSTerm1.equals(jSTerm4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "()849";
      StringReader stringReader0 = new StringReader("()849");
      Object object0 = new Object();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.284554540658975
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Re0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.removeElement(streamTokenizer0);
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      CharBuffer.allocate(73);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.isGround();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm3, jSSubstitution0);
      jSTerm3.matches(jSTerm0);
      jSTerm3.matches(jSTerm0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm5 = jSTerm4.cloneT();
      jSTerm5.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSJshopVars.greaterT = 124;
      JSTerm jSTerm6 = new JSTerm();
      jSTerm0.matches(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm6.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.311573445271595
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Re0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      CharBuffer.allocate(43);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.isGround();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm3, jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1);
      jSTerm0.cloneT();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      JSTerm jSTerm4 = new JSTerm();
      stringReader0.reset();
      jSTerm3.matches(jSTerm4);
      jSTerm0.print();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4559155397857997
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Re0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.removeElement(streamTokenizer0);
      streamTokenizer0.pushBack();
      jSTerm0.matches(jSTerm1);
      CharBuffer.allocate(43);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.isGround();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm3, jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1);
      jSTerm0.cloneT();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      JSTerm jSTerm4 = new JSTerm();
      stringReader0.reset();
      jSTerm3.matches(jSTerm4);
      jSTerm0.call();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6108643020548935
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(125, 125);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.commentChar((-4));
      StringReader stringReader1 = new StringReader("min");
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '-';
      charArray0[2] = '6';
      charArray0[3] = 'e';
      charArray0[4] = '-';
      charArray0[5] = '}';
      charArray0[6] = '7';
      charArray0[7] = '.';
      stringReader1.read(charArray0, 2, 2);
      StringReader stringReader2 = new StringReader("not");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "()849";
      StringReader stringReader0 = new StringReader("()849");
      Object object0 = new Object();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.2145591551764051
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isFunction();
      jSSubstitution0.add((Object) "(w<)49");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution3);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.standarizerSubs();
      Predicate.isEqual((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.remove(41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 41
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-758));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.024776623596107
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w<)49");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("ee");
      StringReader stringReader2 = new StringReader("%ZF]YKn3%:fcO@-6 [");
      StringReader stringReader3 = new StringReader("list ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader4 = new StringReader("ee");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
      StringReader stringReader5 = new StringReader(": ");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer4);
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      assertNotNull(jSSubstitution0);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(OF");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "?");
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate0);
      Predicate<Object> predicate8 = predicate4.or(predicate1);
      predicate8.or(predicate0);
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate6.negate();
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate1);
      predicate10.and(predicate11);
      Predicate<Object> predicate12 = predicate3.or(predicate5);
      Predicate<Object> predicate13 = predicate2.and(predicate10);
      predicate2.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) predicate13);
      Predicate<Object> predicate14 = predicate11.negate();
      predicate0.and(predicate10);
      predicate14.or(predicate12);
      jSSubstitution1.standarizerSubs();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<JSSubstitution> predicate15 = Predicate.isEqual((Object) predicate11);
      predicate15.and(predicate7);
      predicate15.negate();
      predicate15.or(predicate11);
      predicate15.negate();
      predicate15.negate();
      StringReader stringReader0 = new StringReader("(OF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6722962280908585
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function2 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function3 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function2);
      function1.andThen((Function<? super String, ? extends JSTerm>) function3);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.apply("(Ee{Y{NE");
      Function<String, Integer> function4 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function5 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function4);
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function5);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("c7zY (J$5Y;LcmoH");
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[0] = '\u001E';
      charArray0[1] = '\u001E';
      charArray0[2] = 'X';
      charArray0[4] = '|';
      charArray0[6] = '[';
      jSTerm0.capacity();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.8711332705993319
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<)4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, JSTerm> function3 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function4 = unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function4);
      function2.andThen((Function<? super String, ? extends JSTerm>) function4);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.apply("lk9");
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator2.compose((Function<? super Object, ? extends Integer>) function5);
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function6);
      Function.identity();
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function7 = unaryOperator3.compose((Function<? super Object, ? extends Integer>) function6);
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function7);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.replaceAll(unaryOperator2);
      StringReader stringReader1 = new StringReader("the tokenizer is SPACE!");
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm1.capacity();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) jSTerm0);
      System.setCurrentTimeMillis(3535L);
      System.setCurrentTimeMillis((-1611522464));
      System.setCurrentTimeMillis((-883L));
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, JSTerm> function2 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends JSTerm>) function2);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.apply("(Ee{Y{NE");
      Function<String, Integer> function3 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function4 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function3);
      Function.identity();
      unaryOperator0.andThen((Function<? super String, ? extends Integer>) function4);
      unaryOperator0.apply(">");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("c7zY (J$5Y;LcmoH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[1] = '\u0000';
      charArray0[2] = 'X';
      charArray0[4] = '|';
      stringReader0.read(charArray0);
      jSTerm0.capacity();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RtiQ*'TwL9};;7VM9O#");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      boolean boolean0 = false;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeEval(true);
      StreamTokenizer streamTokenizer1 = null;
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeEval(false);
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate3);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate8 = predicate3.and(predicate6);
      Predicate<Object> predicate9 = predicate4.or(predicate5);
      predicate2.and(predicate4);
      predicate0.negate();
      Predicate.isEqual((Object) null);
      predicate3.or(predicate0);
      JSSubstitution jSSubstitution2 = jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Predicate<JSSubstitution> predicate10 = Predicate.isEqual((Object) predicate8);
      Predicate<JSSubstitution> predicate11 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate12 = predicate7.or(predicate9);
      predicate12.negate();
      Predicate<JSSubstitution> predicate13 = predicate10.and(predicate2);
      predicate11.or(predicate10);
      predicate13.and(predicate8);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
