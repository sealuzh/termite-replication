/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:21:18 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      QuickServer quickServer0 = new QuickServer("");
      quickServer0.getConfig();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.configQuickServer(quickServerConfig0);
      TheClient theClient0 = new TheClient();
      theClient0.setServer(quickServer0);
      theClient0.getClientCommandHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getServer();
      TheClient theClient1 = new TheClient();
      theClient1.setMaxAuthTryMsg("");
      theClient1.setMaxAuthTry((-1));
      theClient1.setCommunicationLogging(true);
      assertEquals((-1), theClient1.getMaxAuthTry());
      
      theClient0.setMaxAuthTryMsg("YJ");
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setTrusted(true);
      theClient0.getAuthenticator();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      TheClient theClient1 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient1.setClientEventHandler(commandHandler0);
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient0.getMaxAuthTry();
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler(clientAuthenticationHandler0);
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.262384640607128
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientExtendedEventHandler();
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getAuthenticator();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      theClient0.toString();
      theClient0.getTrusted();
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      System.setCurrentTimeMillis((-1049L));
      theClient0.getServer();
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.updateLastCommunicationTime();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:35>", blockingClientHandler0.getName());
      
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getClientData();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      theClient0.getClientCommandHandler();
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxConnectionMsg("XsGCsb@]#");
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.197846119469557
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      theClient0.setTimeoutMsg("");
      theClient0.setTimeoutMsg("</max-active>\n");
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.setTimeout((-1221));
      System.setCurrentTimeMillis(0L);
      theClient0.getClientBinaryHandler();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      theClient0.getClientData();
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis(0L);
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      theClient0.getTimeout();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientData();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientWriteHandler();
      assertEquals((-1221), theClient0.getTimeout());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3203928312357034
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.setMaxAuthTryMsg("");
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientCommandHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getServer();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getMaxAuthTry();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      blockingClientHandler0.sendSystemMsg("Found about 100 ghost sockets, lets clean..", false);
      assertEquals("<ClientHandler-Pool#0-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setTimeoutMsg("");
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getTrusted();
      theClient0.toString();
      theClient0.getAuthenticator();
      theClient0.getMaxAuthTryMsg();
      theClient0.setTimeout(0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      assertEquals(0, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxConnectionMsg();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientEventHandler();
      theClient0.getClientBinaryHandler();
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTry((-446));
      TheClient theClient1 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTimeout(0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient1.setClientEvent(clientEvent0);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      blockingClientHandler0.toString();
      theClient0.getMaxAuthTry();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientData((ClientData) null);
      theClient0.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved(">_QL#T", 0);
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(proxy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Proxy
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      QuickServer quickServer0 = new QuickServer("");
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setTimeoutMsg("[{)G");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getTimeoutMsg();
      theClient0.setMaxConnectionMsg("org.quickserver.net.server.TheClient");
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      TheClient theClient0 = new TheClient();
      theClient0.getSocket();
      theClient0.getClientEventHandler();
      theClient0.setMaxAuthTryMsg("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      theClient0.setTimeoutMsg("KtX6%v.nr~,XGRG");
      theClient0.getTrusted();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientEvent((ClientEvent) null);
      System.setCurrentTimeMillis(0L);
      theClient0.getTimeout();
      theClient0.getClientEvent();
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getClientData();
      theClient0.getClientData();
      theClient0.getClientEvent();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      theClient0.setCommunicationLogging(false);
      theClient0.setTrusted(false);
      theClient0.getTimeoutMsg();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:13>", blockingClientHandler0.getName());
      
      boolean boolean0 = theClient0.getCommunicationLogging();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.432811072189696
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.setTimeout(0);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.toString();
      theClient1.getServer();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getClientWriteHandler();
      theClient0.getClientEvent();
      theClient1.setServer((QuickServer) null);
      theClient1.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient1.setTrusted(true);
      assertTrue(theClient1.getTrusted());
      
      theClient0.setSocketChannel((SocketChannel) null);
      MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      QuickServer quickServer0 = new QuickServer("=");
      theClient0.setServer(quickServer0);
      theClient0.setTimeoutMsg("");
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      theClient0.getClientCommandHandler();
      theClient0.setMaxAuthTry((-3844));
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.toString();
      assertEquals((-3844), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getLocalPort();
      TheClient theClient0 = new TheClient();
      theClient0.setSocket(mockSocket0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.setTimeout(0);
      theClient0.getSocket();
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      assertEquals(0, theClient0.getTimeout());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg(":c^2KO|U@mh");
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5354315286325124
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getCommunicationLogging();
      theClient0.getClientObjectHandler();
      theClient0.setMaxAuthTry(125);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTry(1890);
      theClient0.getTrusted();
      theClient0.setTimeout(1890);
      theClient0.setMaxConnectionMsg("IOError {0}: {1}");
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientWriteHandler();
      theClient0.getCommunicationLogging();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxAuthTryMsg("IOError {0}: {1}");
      theClient0.getClientObjectHandler();
      theClient0.setMaxAuthTry(1890);
      theClient0.getAuthenticator();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxAuthTryMsg();
      theClient0.getTimeout();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setTrusted(true);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1890);
      // Undeclared exception!
      try { 
        blockingClientHandler0.getSocketChannel();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientData();
      theClient0.getSocketChannel();
      TheClient theClient1 = new TheClient();
      theClient1.setMaxAuthTryMsg("kw=wZQ");
      theClient1.getClientEvent();
      theClient1.getMaxAuthTryMsg();
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getClientCommandHandler();
      theClient1.getAuthenticator();
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.toString();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("C{zhPZ_^", (-783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-783
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("");
      theClient0.setServer(quickServer0);
      QuickServer quickServer1 = new QuickServer("&ByS#");
      quickServer1.resumeService();
      quickServer1.getSecurityManager();
      theClient0.getServer();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.435348070075531
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(3624);
      theClient0.setTimeoutMsg("H");
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeoutMsg("zrcc");
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTry();
      theClient0.setTimeout(13);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTry(13);
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTimeout(13);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient1.setClientEvent(clientEvent0);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      theClient1.setClientData((ClientData) null);
      String string0 = blockingClientHandler0.toString();
      assertEquals("{<ClientHandler-Pool#-1-ID:1> - [non-connected]}", string0);
      
      theClient1.getMaxAuthTry();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient1.setClientData((ClientData) null);
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient1.getClientBinaryHandler();
      assertEquals(0, theClient1.getMaxAuthTry());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setTimeoutMsg("r;m,'$#NHE");
      TheClient theClient1 = new TheClient();
      theClient1.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient1.getMaxConnectionMsg();
      assertTrue(theClient1.getCommunicationLogging());
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg("");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getTimeoutMsg();
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientEvent(clientEvent0);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
