/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:05:35 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setClientIdentifier("Me96a(u*CG");
      advancedSettings0.setPerformancePreferencesBandwidth((-519));
      advancedSettings0.setQSObjectPoolMaker("Me96a(u*CG");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals((-519), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3612982445748285
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getCharset();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.toXML("ISO-8859-1");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getSocketLinger();
      advancedSettings0.toXML("EVH");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getBacklog();
      advancedSettings0.getBacklog();
      advancedSettings0.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker></qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         // \t<charset>ISO-8859-1</charset>
         // \t<use-direct-byte-buffer>true</use-direct-byte-buffer>
         // \t<byte-buffer-size>65536</byte-buffer-size>
         // \t<backlog>0</backlog>
         // \t<socket-linger>-1</socket-linger>
         // \t<debug-non-blocking-mode>false</debug-non-blocking-mode>
         // \t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>
         // \t<qsobject-pool-maker></qsobject-pool-maker>
         // \t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<performance-preferences-connection-time>0</performance-preferences-connection-time>
         // \t<performance-preferences-latency>0</performance-preferences-latency>
         // \t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>
         // \t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>
         // </advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5126710837955057
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.setSocketLinger(0);
      advancedSettings0.setSocketLinger(0);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setCharset("");
      advancedSettings2.setSocketLinger(0);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setSocketLinger(707);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setPerformancePreferencesConnectionTime(3856);
      advancedSettings2.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings3.setClientIdentifier("0jrA!;");
      assertEquals("0jrA!;", advancedSettings3.getClientIdentifier());
      
      advancedSettings1.setByteBufferSize((-863));
      advancedSettings1.getClientIdentifier();
      advancedSettings2.setCharset("ISO-8859-1");
      advancedSettings2.getQSObjectPoolMaker();
      advancedSettings1.getByteBufferSize();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9258637628751876
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketReceiveBufferSize(1575);
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(3);
      advancedSettings1.setPerformancePreferencesBandwidth((-1295));
      advancedSettings2.setPerformancePreferencesLatency(3);
      advancedSettings0.getClientIdentifier();
      advancedSettings2.getPerformancePreferencesLatency();
      int int0 = advancedSettings1.getByteBufferSize();
      assertEquals((-1295), advancedSettings1.getPerformancePreferencesBandwidth());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5066935057877666
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesBandwidth(1354);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.toXML("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getCharset();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("}fn");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // }fn
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2400387099547725
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1850));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite((-1850));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientSocketSendBufferSize((-5024));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize((-5024));
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.780133847372749
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-62));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setBacklog(1746);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setQSObjectPoolMaker("lEDzewRrhV4@g$?\"Wq");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("vLGS[}UqAM>F");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>1746</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>vLGS[}UqAM>F</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>-1</performance-preferences-connection-time>\n\t<performance-preferences-latency>-62</performance-preferences-latency>\n\t<performance-preferences-bandwidth>-1</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setByteBufferSize((-2475));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getByteBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getPerformancePreferencesLatency();
      advancedSettings1.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.657979859156731
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("'w50.)o[4*c");
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setBacklog((-172));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.966442007031004
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1004));
      advancedSettings0.setClientIdentifier("Ad:oBD^:W'^&kndwG>");
      advancedSettings0.setBacklog((-1004));
      advancedSettings0.setBacklog(10);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setBacklog(956);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketTrafficClass("X+ytcfl-3,U_");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketReceiveBufferSize((-1004));
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals("Ad:oBD^:W'^&kndwG>", advancedSettings0.getClientIdentifier());
      assertEquals((-1004), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "";
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("PdDj");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // PdDj
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1737502027185687
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1575);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      assertEquals(1575, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(14);
      advancedSettings1.setClientSocketSendBufferSize(14);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTcpNoDelay(true);
      advancedSettings2.getClientSocketTrafficClass();
      advancedSettings2.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(14, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7265167556076593
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-23));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize((-23));
      advancedSettings0.setPerformancePreferencesConnectionTime((-23));
      advancedSettings0.setBacklog(1003);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketSendBufferSize((-23));
      String string0 = "b@qek@i6";
      advancedSettings0.setQSObjectPoolMaker("w#luSAn*hK$G");
      advancedSettings0.setClientIdentifier("b@qek@i6");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("b@qek@i6");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // b@qek@i6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier((String) null);
      assertEquals(0, advancedSettings2.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings2.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings2.getSocketLinger());
      assertEquals("ISO-8859-1", advancedSettings2.getCharset());
      assertEquals(10, advancedSettings2.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings2.getClientIdentifier());
      assertEquals(0, advancedSettings2.getBacklog());
      assertEquals(0, advancedSettings2.getPerformancePreferencesLatency());
      assertFalse(advancedSettings2.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings2.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings2.getByteBufferSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.361272036422214
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1850));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite((-1850));
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketReceiveBufferSize(1575);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(541);
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientIdentifier("");
      assertEquals((-1), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6951020624694584
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(14);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTrafficClass("");
      advancedSettings2.setClientIdentifier("</performance-preferences-bandwidth>\n");
      advancedSettings0.setClientSocketSendBufferSize(915);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings2.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(915, advancedSettings0.getClientSocketSendBufferSize());
      
      advancedSettings3.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings3.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4687044989586093
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1850));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite((-1850));
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1575);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientIdentifier();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.579755221006731
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-120);
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.setPerformancePreferencesConnectionTime((-120));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setMaxThreadsForNioWrite(10);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-120));
      advancedSettings0.setSocketLinger(204);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings2.setClientSocketReceiveBufferSize((-758));
      advancedSettings2.setClientSocketSendBufferSize((-758));
      assertEquals((-758), advancedSettings2.getClientSocketReceiveBufferSize());
      
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.579701450640004
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketReceiveBufferSize((-758));
      advancedSettings2.setClientSocketTrafficClass("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings2.setClientSocketSendBufferSize((-758));
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setByteBufferSize((-758));
      advancedSettings2.setClientSocketTcpNoDelay(true);
      advancedSettings2.getClientSocketTrafficClass();
      advancedSettings2.getClientSocketTcpNoDelay();
      assertEquals((-758), advancedSettings2.getClientSocketSendBufferSize());
      
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings1.toXML("");
      advancedSettings0.setCharset("");
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4882967972644554
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize((-758));
      advancedSettings0.setClientSocketTrafficClass("(F~f");
      advancedSettings0.setClientSocketSendBufferSize((-758));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings2.getClientSocketTrafficClass();
      advancedSettings2.getClientSocketTcpNoDelay();
      advancedSettings2.getClientSocketReceiveBufferSize();
      advancedSettings1.toXML("<&,+zMI`ez");
      assertEquals((-758), advancedSettings1.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6467142775717116
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(14);
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-bandwidth>\n");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-885));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(209);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-885), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.553437777540202
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.getQSObjectPoolMaker();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("Pk=wt4");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setClientIdentifier("?gs>[XG.C1Ww>|Vg/");
      advancedSettings0.setClientSocketSendBufferSize((-178));
      advancedSettings1.getQSObjectPoolMaker();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTcpNoDelay(true);
      advancedSettings1.getClientSocketTrafficClass();
      advancedSettings1.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-178), advancedSettings0.getClientSocketSendBufferSize());
      
      advancedSettings2.setClientIdentifier("");
      String string0 = advancedSettings3.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8373875876189167
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(14);
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-bandwidth>\n");
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings1.setClientSocketSendBufferSize((-848));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.getClientSocketTrafficClass();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Mq>/b4f!|9L");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Mq>/b4f!|9L
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.7381249273388133
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(1575);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      advancedSettings1.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesBandwidth((-1266));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientIdentifier();
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings1.setDebugNonBlockingMode(true);
      advancedSettings0.setCharset("");
      assertEquals(65536, advancedSettings0.getClientSocketSendBufferSize());
      
      advancedSettings1.setCharset("");
      assertEquals(0, advancedSettings1.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7567169975450474
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(14);
      advancedSettings0.setClientIdentifier("O");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(14);
      advancedSettings0.setClientSocketTrafficClass("O");
      advancedSettings0.setClientIdentifier("O");
      advancedSettings0.setClientSocketReceiveBufferSize((-885));
      advancedSettings0.setClientSocketTrafficClass("O");
      advancedSettings0.setClientSocketSendBufferSize(209);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setUseDirectByteBuffer(true);
      advancedSettings1.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals("O", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.694124545362909
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("PdDj");
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-186));
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.getClientSocketTrafficClass();
      advancedSettings2.getDebugNonBlockingMode();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals("PdDj", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7035281807689278
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-62));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setBacklog(1746);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setQSObjectPoolMaker("lEDzewRrhV4@g$?\"Wq");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("vLGS[}UqAM>F");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>1746</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>vLGS[}UqAM>F</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>-62</performance-preferences-latency>\n\t<performance-preferences-bandwidth>-1</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize(1746);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(1424);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(1003);
      int int0 = advancedSettings0.getSocketLinger();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(567);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(567, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.5778026306210164
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("$W:ZE}:Z]$$w");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(14);
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-bandwidth>\n");
      advancedSettings1.setClientIdentifier("$W:ZE}:Z]$$w");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(14);
      advancedSettings2.setClientSocketSendBufferSize(593);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketTcpNoDelay(true);
      advancedSettings2.setClientSocketSendBufferSize((-1));
      advancedSettings3.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings3.getClientSocketReceiveBufferSize();
      advancedSettings2.toXML((String) null);
      assertEquals((-1), advancedSettings2.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.577405568877915
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize((-1613));
      advancedSettings1.setPerformancePreferencesBandwidth(0);
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("PdDj");
      advancedSettings1.setClientSocketSendBufferSize(456);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals("PdDj", advancedSettings0.getClientIdentifier());
      
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.getClientSocketTrafficClass();
      assertEquals(65536, advancedSettings4.getByteBufferSize());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.944797816169571
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(161);
      advancedSettings0.setClientSocketTrafficClass("Cn");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("PdDj");
      advancedSettings1.setClientSocketSendBufferSize(161);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings2.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setPerformancePreferencesLatency(65536);
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      int int0 = advancedSettings4.getByteBufferSize();
      assertEquals(65536, advancedSettings4.getPerformancePreferencesLatency());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.5318693112075703
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(14);
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-bandwidth>\n");
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setClientSocketSendBufferSize(14);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings2.setClientSocketSendBufferSize(0);
      advancedSettings2.setUseDirectByteBuffer(true);
      advancedSettings2.getClientSocketTcpNoDelay();
      advancedSettings2.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML("");
      assertEquals(14, advancedSettings0.getClientSocketReceiveBufferSize());
      
      advancedSettings2.getClientSocketTrafficClass();
      assertEquals(65536, advancedSettings2.getByteBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(10, int0);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.621033184016277
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(14);
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-bandwidth>\n");
      advancedSettings1.toXML("");
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setClientSocketSendBufferSize(14);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setQSObjectPoolMaker("</performance-preferences-bandwidth>\n");
      advancedSettings2.setClientSocketTcpNoDelay(true);
      advancedSettings2.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(14, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9761326214173685
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(14);
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-bandwidth>\n");
      advancedSettings1.setClientIdentifier("");
      advancedSettings0.setSocketLinger(14);
      advancedSettings1.setClientSocketSendBufferSize(14);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTcpNoDelay(true);
      advancedSettings2.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setByteBufferSize(161);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings3.setClientIdentifier("S}J7CPsW?Ckcq^");
      assertEquals("S}J7CPsW?Ckcq^", advancedSettings3.getClientIdentifier());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9440256153973703
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(14);
      advancedSettings0.setClientSocketTrafficClass("</performance-preferences-bandwidth>\n");
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setClientSocketSendBufferSize(14);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTcpNoDelay(true);
      advancedSettings2.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(14, advancedSettings0.getClientSocketReceiveBufferSize());
  }
}
