/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:09:26 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.922783312158676
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONTokener jSONTokener0 = new JSONTokener("@R8j$/TZGk5y#83W5@");
      jSONTokener0.next();
      String string0 = ",\n";
      String string1 = null;
      jSONObject0.optString(",\n", (String) null);
      jSONTokener0.syntaxError("3");
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject1 = new JSONObject(object0);
      String[] stringArray0 = null;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.728942480244492
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}cki]m>%s.J";
      stringArray0[1] = "";
      Double.isFinite(0.0);
      stringArray0[2] = "+JN4ct7t";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optLong("=if4E");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      jSONObject0.has("=if4E");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Float float0 = new Float(779.34F);
      Double double1 = new Double((-456.4005F));
      JSONObject jSONObject2 = new JSONObject(double1);
      JSONObject.doubleToString(324.9121694512479);
      jSONObject2.optDouble("", 2113.2689);
      jSONObject0.putOpt("}cki]m>%s.J", "324.9121694512479");
      long long0 = jSONObject1.getLong("}cki]m>%s.J");
      assertEquals(324L, long0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3639072985769154
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (double) 0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      int int0 = jSONObject0.optInt("wheel.json.JSONArray");
      assertEquals(0, int0);
      
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject();
      Integer integer0 = new Integer(0);
      StringWriter stringWriter0 = new StringWriter(5754);
      Object object1 = jSONObject1.get("");
      assertEquals(0.0, object1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9471537181761398
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(0.0);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Set<Map.Entry<Object, Long>> set0 = (Set<Map.Entry<Object, Long>>)hashMap0.entrySet();
      JSONObject.valueToString(set0);
      Long long0 = new Long(0L);
      String string0 = "op";
      Long.getLong("op", 0L);
      JSONObject jSONObject0 = new JSONObject(set0);
      JSONObject.quote("[]");
      Long long1 = new Long(0L);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject((Object) "op");
      boolean boolean1 = new Boolean("\"[]\"");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-2583));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.786094726990883
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long(70);
      Long.getLong("A JSONArray text must start with '['", (long) 70);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 70, 70);
      Long long1 = new Long(0L);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.putOpt("nu", "A JSONArray text must start with '['");
      jSONObject0.optBoolean("nu", true);
      Short short0 = new Short((short)4168);
      Short.compare((short)1086, (short)97);
      Float float0 = new Float(0.0);
      Float.sum((-1819.45F), (-1.0F));
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      hashMap0.put(short0, float0);
      JSONObject.doubleToString(364.57973681627);
      JSONObject.quote("364.57973681627");
      jSONObject1.accumulate("\"364.57973681627\"", jSONObject0);
      jSONObject1.opt("A JSONArray text must start with '['");
      jSONObject0.names();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.068394842495123
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      StringWriter stringWriter0 = new StringWriter(722);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1, 2534, (-1744));
      Long long0 = new Long((-982L));
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      Boolean.logicalXor(true, false);
      StringWriter stringWriter1 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.738065156666371
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("p9Y", 978L);
      JSONObject jSONObject2 = jSONObject0.put("z(4p@K", 0.0);
      jSONObject2.keys();
      jSONObject1.isNull("z(4p@K");
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      jSONObject0.put("p9Y", (Map) hashMap0);
      jSONObject2.accumulate("~}H#}Yw%Vj", "~}H#}Yw%Vj");
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7401502642481383
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject.doubleToString(3281.5415);
      String string0 = "9yN\\^qr";
      JSONObject.quote("9yN^qr");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("9yN^qr", 15);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 0);
      jSONObject0.names();
      jSONObject0.optInt("wheel.json.JSONArray");
      JSONObject jSONObject2 = jSONObject0.put("9yN^qr", 0);
      jSONObject2.getDouble("");
      Float.valueOf(0.0F);
      JSONObject.testValidity("3281.5415");
      Float.sum(0, 0);
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      Short short0 = new Short((short)3555);
      Float float0 = new Float(2021.1F);
      hashMap0.put(short0, float0);
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject3 = jSONObject1.put("9yN^qr", true);
      jSONObject0.optJSONObject("9yN^qr");
      try { 
        jSONObject3.getLong("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7040402244465866
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      hashMap0.entrySet();
      JSONObject.valueToString("false");
      Long long0 = new Long((-2419L));
      Long.getLong("", 0L);
      JSONObject.valueToString((Object) null, 47, 2127);
      Long long1 = new Long(890L);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.String@0000000001\"");
      Boolean.logicalXor(true, false);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      jSONObject0.put("null", (Map) hashMap1);
      assertEquals(4, jSONObject0.length());
      
      jSONObject0.toString(47, (-3748));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.917656593723992
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject.doubleToString(3281.5415);
      JSONObject.quote("$8!DNY");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("$8!DNY", 15);
      jSONObject0.put("", (double) 0);
      jSONObject0.names();
      jSONObject0.optInt("wheel.json.JSONArray");
      JSONObject jSONObject1 = jSONObject0.put("$8!DNY", 0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Untermin%ted st_ing";
      stringArray0[1] = "wheel.json.JSONArray";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[3] = "A JSONArray text must start with '['";
      stringArray0[4] = "$8!DNY";
      stringArray0[5] = "$8!DNY";
      stringArray0[6] = "wheel.json.JSONArray";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.put("d).TT3,c n{#O0hr", (double) 15);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONTokener jSONTokener0 = new JSONTokener("Untermin%ted st_ing");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Untermin%ted st_ing
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.879482389703597
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      stringArray0[1] = "";
      stringArray0[2] = ")Q[B])-@y=7b#bDq";
      Long long0 = new Long((-2419L));
      Long long1 = Long.getLong("", (-1490L));
      JSONObject.valueToString(long0, 70, 70);
      Long long2 = new Long(1900L);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.optJSONArray("java.lang.Long@0000000004");
      jSONObject1.has("Kry5Fml%");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject2 = jSONObject0.putOpt("ha", long1);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject3 = jSONObject2.put("", (double) 1900L);
      jSONObject3.getString("");
      assertEquals(3, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.optBoolean("-FRX?R#*`Fm;Dk");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7080755740591145
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}cki]m>%s.J";
      stringArray0[1] = "";
      Double.isFinite(0.0);
      stringArray0[2] = "+JN4ct7t";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optLong("=if4E");
      String string0 = "";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      jSONObject0.has((String) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("oM9/){S(z!S(0Soq+", (Object) null);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject.doubleToString(145.3369343881483);
      jSONObject1.optDouble((String) null, 0.0);
      try { 
        jSONObject2.accumulate((String) null, "=if4E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3200293143276944
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONObject.doubleToString(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, 0);
      jSONObject0.put("", 1.0);
      jSONObject0.optInt("null");
      jSONObject0.put("9yN^qr", 0);
      Float float0 = Float.valueOf((float) 0);
      JSONObject.testValidity(float0);
      JSONObject.quote("p{S@-\"[fUZanF,2(");
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      Integer integer0 = new Integer(0);
      jSONObject1.append("null", integer0);
      try { 
        jSONObject0.put("9yN^qr", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3726109998626446
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("1", (Object) null);
      jSONObject0.put("{P9Vv_<NVS", 0L);
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6497499515932526
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = stringArray0[0];
      Boolean boolean0 = Boolean.valueOf("");
      hashMap0.replace((Object) "", boolean0, boolean0);
      stringArray0[5] = " !E(n";
      stringArray0[7] = "A JSONArray text must start with '['";
      stringArray0[8] = "Untermin%ted st_ing";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.put("", (-2661.0792582106774));
      jSONObject2.optInt("[T_R[oFso{>$t*J", 19);
      String string0 = "nggK3n \\u-g`G`dGr";
      jSONObject1.optJSONObject(string0);
      jSONObject1.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3953697924391104
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      JSONObject.doubleToString(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, 0);
      jSONObject0.put("", 1.0);
      jSONObject0.optDouble("", 0.0);
      jSONObject0.optInt("null");
      jSONObject0.put("9yN^qr", 0);
      Float float0 = Float.valueOf((float) 0);
      JSONObject.testValidity(float0);
      JSONObject.quote("p{S@-\"[fUZanF,2(");
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      Integer integer0 = new Integer(0);
      jSONObject1.append("null", integer0);
      try { 
        Integer.valueOf("getlogicalOr", 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getlogicalOr\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2653354418370975
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Gcki_]m>s.J4p";
      stringArray0[1] = ",3P0Pd8.AOVK^xpHr";
      Double.isFinite((-1668.0));
      stringArray0[2] = "+JN4ct7t";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      long long0 = jSONObject0.optLong("=if4E");
      assertEquals(0L, long0);
      
      Float float0 = new Float(0.0F);
      Float.isFinite(1883.0F);
      Byte byte0 = new Byte((byte)32);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject((byte)32);
      JSONObject jSONObject1 = jSONObject0.accumulate("4qr?|,", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8717258888796002
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Gcki_]m>s.J4p";
      stringArray0[1] = "";
      Double.isFinite((-1668.0));
      stringArray0[2] = "+JN4ct7t";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optLong("+JN4ct7t", (-1618L));
      jSONObject0.optLong("=if4E");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Double double1 = new Double((-1668.0));
      double double2 = new Float(0.0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9608905407094879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.quote("lo");
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("o0D(HRY%[<T^_L_Iz k", (Map) hashMap0);
      String string0 = "no";
      long long0 = 0L;
      try { 
        jSONObject0.getInt("o0D(HRY%[<T^_L_Iz k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o0D(HRY%[<T^_L_Iz k\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.867147908270298
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      Double double0 = new Double((-3403.3542025033366));
      Double.isFinite((-1223.58888348856));
      JSONObject.valueToString(double0);
      Double.isFinite((-1450.0));
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.optLong("Ph phzNnCBD6)");
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      jSONObject3.putOpt("Vmi", hashMap0);
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      JSONObject jSONObject4 = jSONObject0.put("", (Map) hashMap0);
      jSONObject4.optLong("+JN4ct7t");
      try { 
        jSONObject0.put((String) null, (double) 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      String string0 = "] is not a number.";
      String string1 = "";
      stringArray0[2] = "";
      try { 
        jSONObject0.getDouble("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5545075614990216
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject.quote("] not found.");
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("] not found.", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", 1L);
      jSONObject0.accumulate("] not found.", "}2I]");
      jSONObject1.toString((-491));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short)70, (short)2);
      Double.isFinite((-1.0));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "com";
      stringArray0[1] = "O4I_?.U9\"V^cLw";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6377672093320337
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject.quote("$8!DNY");
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 15;
      jSONObject0.put("", (double) 0);
      jSONObject0.names();
      String string0 = "wheel.json.JSONArray";
      jSONObject0.optInt("wheel.json.JSONArray");
      JSONObject jSONObject1 = jSONObject0.put("$8!DNY", 0);
      JSONObject.valueToString(jSONObject1);
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject();
      Integer integer0 = new Integer(0);
      try { 
        jSONObject1.append("", "\"$8!DNY\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.034174141176449
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(",,5'YwR6KdhU'@@$g\"", "null");
      jSONTokener0.syntaxError("null");
      JSONObject jSONObject1 = jSONObject0.put("", (-780.380203352));
      jSONObject0.optInt("null");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[2] = "null";
      stringArray0[3] = "";
      stringArray0[4] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[5] = "null";
      stringArray0[6] = "0@Q[>!av9DR/";
      stringArray0[7] = "null";
      stringArray0[8] = "null";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      jSONObject2.optLong("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject4 = jSONObject1.put("wheel.json.JSONException", (Collection) linkedList0);
      jSONObject4.has("isnotifyAll");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      boolean boolean0 = jSONObject4.optBoolean("-VN_J]@N", false);
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.33879601575047
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = new JSONObject();
      jSONTokener0.next();
      jSONObject0.optString("null", "null");
      String string0 = "";
      jSONTokener0.syntaxError("null");
      jSONObject0.optInt("");
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", 0);
      try { 
        jSONObject1.getJSONObject("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.939285171846644
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Gcki_]m>s.J4p";
      stringArray0[1] = "";
      Double.isFinite((-1668.0));
      stringArray0[2] = "+JN4ct7t";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Gcki_]m>s.J4p";
      stringArray1[1] = "+JN4ct7t";
      stringArray1[2] = "+JN4ct7t";
      stringArray1[3] = "Gcki_]m>s.J4p";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      jSONObject1.put("om=]=Xw;lQ!G*O", (-1668.0));
      jSONObject0.optInt("", 102);
      jSONObject1.optJSONObject("+JN4ct7t");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.637416240337256
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a number.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = " !E(n";
      stringArray0[7] = "A JSONArray text must start with '['";
      stringArray0[8] = "Untermin%ted st_ing";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", (-2661.0792582106774));
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      jSONObject1.putOpt("is", "NI:gf/YN[h1");
      HashMap<Long, Object> hashMap2 = new HashMap<Long, Object>();
      JSONObject.doubleToString((-2661.0792582106774));
      jSONObject2.optDouble(" !E(n", (-534.9728));
      jSONObject1.accumulate("istoLowerCase", "");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6754093889301926
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      stringArray0[1] = "";
      stringArray0[2] = ")Q[B])-@y=7b#bDq";
      Long long0 = new Long((-2419L));
      Long.getLong("", (-1490L));
      JSONObject.valueToString(long0, 70, 70);
      Long long1 = new Long(1900L);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.optJSONArray("java.lang.Long@0000000004");
      Boolean.logicalXor(true, false);
      StringWriter stringWriter0 = new StringWriter(2);
      jSONObject1.write(stringWriter0);
      jSONObject1.put("Expected a ',' or ']'", (Map) null);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.302535377125645
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      stringArray0[1] = "";
      stringArray0[2] = ")Q[B])-@y=7b#bDq";
      Long long0 = new Long((-2419L));
      Long.getLong("", (-1490L));
      JSONObject.valueToString(long0, 70, 70);
      Long long1 = new Long(1900L);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.optJSONArray("java.lang.Long@0000000004");
      Boolean.logicalXor(true, false);
      try { 
        jSONObject0.put((String) null, (long) 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.820427271470324
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Long long0 = new Long((-2419L));
      Long.getLong("", (-2419L));
      JSONObject.valueToString(long0, 70, 70);
      Long long1 = new Long(1900L);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.optJSONArray("java.lang.Long@0000000004");
      JSONObject jSONObject2 = jSONObject0.put("", 466.194133);
      jSONObject0.optInt("java.lang.Long@0000000004", 19);
      jSONObject2.optJSONObject("JSONArray[");
      jSONObject2.names();
      boolean boolean1 = jSONObject0.isNull(",9%*");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6237620850021823
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Set<Map.Entry<Object, Long>> set0 = (Set<Map.Entry<Object, Long>>)hashMap0.entrySet();
      Double.isFinite(2370.964821);
      Long long0 = new Long((-1411L));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.optLong("}cki]m>%s.J");
      Long long1 = new Long((-1411L));
      Long.getLong("d[I$", (-3135L));
      JSONObject.valueToString(set0, 8448, (-2328));
      Long long2 = new Long((-3135L));
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      jSONObject0.optJSONArray("[]");
      jSONObject1.put("-g}WirQ5$F", (Collection) set0);
      Boolean.logicalXor(false, true);
      JSONObject jSONObject2 = jSONObject1.accumulate("d[I$", (Object) null);
      try { 
        jSONObject2.put((String) null, (Object) "[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7696658015671263
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Double double0 = new Double(0.0);
      Long long0 = new Long((-2419L));
      Long.getLong("A JSONArray text must start with '['", (-2419L));
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 70, 70);
      Long long1 = new Long(0L);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("has", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("A JSONArray text must start with '['", (-1L));
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.accumulate("Expected '", jSONObject2);
      JSONObject jSONObject4 = jSONObject1.accumulate("Nyk", jSONObject3);
      jSONObject4.putOpt((String) null, object0);
      jSONObject2.toString();
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8413666047536843
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString("false");
      jSONObject0.opt("\"java.lang.String@0000000002\"");
      JSONObject.valueToString("false", 60, 60);
      JSONObject.doubleToString(60);
      jSONObject0.toString();
      Long long0 = new Long((-799L));
      JSONObject jSONObject1 = jSONObject0.putOpt("\"java.lang.String@0000000002\"", long0);
      int int0 = (-36833786);
      JSONObject.valueToString("\"java.lang.String@0000000002\"", (-36833786), 60);
      JSONObject jSONObject2 = jSONObject1.put("islowestOneBit", (Object) "\"java.lang.String@0000000002\"");
      int int1 = (-2860);
      jSONObject1.toString((-2860), 3111);
      jSONObject2.optDouble("I&", (double) 60);
      String string0 = "w!Dybh";
      try { 
        jSONObject0.getJSONArray("w!Dybh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"w!Dybh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6255432674303743
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString("false");
      jSONObject0.opt("\"java.lang.String@0000000002\"");
      try { 
        jSONObject0.getDouble("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.545202527023502
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = new JSONObject();
      jSONTokener0.next();
      jSONObject0.optString("null", "null");
      String string0 = "";
      jSONTokener0.syntaxError("null");
      String string1 = "o0D(HRY%[<T^_L_Iz k";
      String string2 = "gethashCode";
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      String[] stringArray0 = null;
      try { 
        jSONObject0.getJSONArray("O&uX^HmxX=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O&uX^HmxX=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.496564514542002
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("wheel.json.JSONObject$Null");
      jSONObject0.optDouble("NO");
      jSONObject0.length();
      jSONObject0.put("NO", true);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5045308516207556
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.compare((short)69, (short) (-855));
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "] is not a Boolean.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("] is not a Boolean.", (long) (short)69);
      Float.isFinite((short)900);
      Double double0 = new Double(1.0);
      jSONObject2.putOpt((String) null, jSONObject1);
      Integer integer0 = new Integer(924);
      JSONObject.valueToString(jSONObject0);
      Short short1 = new Short((short)48);
      jSONObject1.accumulate("] is not a Boolean.", jSONObject2);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.818198659654396
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "] not found.";
      JSONObject.quote("] not found.");
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("] not found.", (Map) hashMap0);
      Float float0 = new Float(3971.8587123697);
      JSONObject.testValidity(float0);
      String string1 = "-~Xb'maK0 K/@PTDy>";
      JSONObject.quote("-~Xb'maK0 K/@PTDy>");
      String string2 = "W|6S^Y#m%w";
      try { 
        jSONObject0.getJSONObject("W|6S^Y#m%w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W|6S^Y#m%w\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1009638002984694
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      jSONTokener0.next();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(",,5'YwR6KdhU'@@$g\"", "null");
      jSONTokener0.syntaxError("null");
      JSONObject jSONObject1 = jSONObject0.put("", (-780.380203352));
      jSONObject0.optInt("null");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[2] = "null";
      stringArray0[3] = "";
      stringArray0[4] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[5] = "null";
      stringArray0[6] = "0@Q[>!av9DR/";
      stringArray0[7] = "null";
      stringArray0[8] = "null";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      jSONObject2.optLong("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject4 = jSONObject1.put("wheel.json.JSONException", (Collection) linkedList0);
      jSONObject4.has("isnotifyAll");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject4.putOpt("NI:gf/YN[h1", (Object) null);
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      JSONObject jSONObject5 = jSONObject4.put("SI+xTvk@|Vl}8If S", (Map) hashMap1);
      Boolean boolean0 = Boolean.valueOf(",BON%$a^+cDF0g");
      jSONObject5.accumulate("toS", boolean0);
      assertEquals(4, jSONObject5.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.353714757339867
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.toUnsignedLong((short)1346);
      Short.toUnsignedInt((short)1346);
      Short.compare((short)900, (short)1346);
      JSONObject.valueToString(short0);
      Object object0 = new Object();
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Short@0000000001";
      stringArray0[1] = "java.lang.Short@0000000001";
      stringArray0[2] = "java.lang.Short@0000000001";
      stringArray0[3] = "java.lang.Short@0000000001";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.append("java.lang.Short@0000000001", "java.lang.Short@0000000001");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5985093147600065
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Set<Map.Entry<Object, Long>> set0 = (Set<Map.Entry<Object, Long>>)hashMap0.entrySet();
      JSONObject.valueToString(hashMap0);
      Long long0 = new Long((-1404L));
      Long.getLong("", 0L);
      JSONObject.valueToString(set0, 2127, 2127);
      Long long1 = new Long((-982L));
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Object) ">\"N");
      Boolean.logicalXor(true, false);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      jSONObject0.put(">\"N", (Map) hashMap0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2725653886322217
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "OH8;SMOp>";
      stringArray0[1] = "Au4NEiz";
      stringArray0[2] = " at character ";
      stringArray0[3] = "not";
      stringArray0[4] = "false";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      String[] stringArray1 = JSONObject.getNames(jSONObject3);
      assertNull(stringArray1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.568413258053965
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("NO");
      jSONObject0.length();
      jSONObject0.put("NO", true);
      jSONObject0.has("toS");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2776086421463013
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Double double0 = new Double(0.0);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Set<Map.Entry<Object, Long>> set0 = (Set<Map.Entry<Object, Long>>)hashMap0.entrySet();
      hashMap0.put(double0, (Long) null);
      String string0 = JSONObject.valueToString(set0);
      assertNotNull(string0);
      
      Long long0 = new Long(0L);
      Long.getLong("op", 0L);
      JSONObject jSONObject0 = new JSONObject(set0);
      int int0 = jSONObject0.optInt((String) null, 32);
      assertEquals(32, int0);
      
      int int1 = jSONObject0.length();
      assertEquals(2, int1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6013749992055026
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)80);
      jSONObject0.append("{$0$W6],pzW", short0);
      jSONObject0.toString(903, (-4680));
      jSONObject0.optInt("", 903);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.has("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.463984890074362
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      jSONObject0.put("] is not a Boolean.", (-2912L));
      Float.isFinite((-2912L));
      Double double0 = new Double((-2912L));
      jSONObject0.putOpt("Null pointer", double0);
      Integer integer0 = new Integer((-1425));
      JSONObject.valueToString(integer0);
      Short short0 = new Short((short)213);
      jSONObject0.accumulate("] is not a Boolean.", short0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9739997435073788
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}cki]m>%s.J";
      String string0 = "";
      stringArray0[1] = "";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0.0);
      jSONObject0.optLong("$YY=wSDt: ", 1278L);
      StringWriter stringWriter0 = new StringWriter(6);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "}cki]m>%s.J", 687, (-2276));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(88);
      JSONObject.valueToString(jSONArray0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "wheel.json.JSONArray@0000000001", (-142), (-142));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?kZl";
      stringArray0[1] = "7B!)#wP\"HpGT";
      stringArray0[2] = " at character ";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      double double0 = jSONObject0.optDouble("wv=F:bF]{nS");
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = jSONObject0.optString(" at character ");
      assertEquals("", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Long long0 = new Long((-1407L));
      hashMap0.put(boolean0, long0);
      hashMap0.entrySet();
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9211298130312628
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = stringArray0[0];
      Boolean boolean0 = Boolean.valueOf("");
      hashMap0.replace((Object) "", boolean0, boolean0);
      Float.valueOf((-1.0F));
      Boolean boolean1 = Boolean.valueOf("");
      JSONObject.testValidity(boolean1);
      JSONObject.valueToString("");
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      int int0 = (-657);
      Integer integer0 = new Integer((-657));
      try { 
        jSONObject1.append((String) null, jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.301454200101717
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("E7>mm=!/~X\"QiZ", "E7>mm=!/~X\"QiZ");
      jSONObject0.optBoolean("", true);
      hashMap0.put("f*rF'Ka4v7YAV", "");
      jSONObject0.optDouble("E7>mm=!/~X\"QiZ", 1433.694664118175);
      Long long0 = new Long(3693L);
      hashMap0.put("B<`(v", long0);
      hashMap0.remove((Object) null);
      jSONObject0.optLong("XlZ", 0L);
      jSONObject0.optString(";", "E7>mm=!/~X\"QiZ");
      jSONObject0.put("E7>mm=!/~X\"QiZ", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.748474076280935
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a number.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = " !E(n";
      stringArray0[7] = "A JSONArray text must start with '['";
      stringArray0[8] = "Untermin%ted st_ing";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("", (-2661.0792582106774));
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      JSONObject jSONObject2 = jSONObject1.putOpt("is", "NI:gf/YN[h1");
      HashMap<Long, Object> hashMap2 = new HashMap<Long, Object>();
      JSONObject jSONObject3 = jSONObject1.put("-b9", (Map) hashMap2);
      jSONObject3.optLong("is");
      jSONObject3.put("-b9", 0.0);
      double double0 = jSONObject2.optDouble("/{)9");
      assertEquals(3, jSONObject2.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6550653460500613
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("E7>mm=!/~X\"QiZ", "E7>mm=!/~X\"QiZ");
      jSONObject0.optBoolean("", true);
      hashMap0.put("f*rF'Ka4v7YAV", "");
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put("", boolean0);
      Long long0 = new Long(3693L);
      hashMap0.put("B<`(v", long0);
      jSONObject0.optLong("XlZ", 0L);
      try { 
        jSONObject0.getLong("f*rF'Ka4v7YAV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f*rF'Ka4v7YAV\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8651577443804213
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      String[] stringArray0 = new String[3];
      String string0 = "XfK";
      stringArray0[0] = "XfK";
      stringArray0[1] = "";
      stringArray0[2] = "GvxN";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optBoolean("XfK");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "rep";
      try { 
        jSONObject0.getBoolean("rep");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rep\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.253311112845878
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Boolean.getBoolean("");
      boolean boolean0 = new Boolean(".lI0#r{(g'4''H{");
      Long long0 = new Long(2283L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.toUnsignedString((-3032L));
      jSONObject0.optLong("", 0L);
      boolean boolean1 = jSONObject0.optBoolean(".lI0#r{(g'4''H{");
      assertFalse(boolean1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.492988192494782
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean1);
      String string0 = "";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      int int0 = (-522);
      jSONObject0.toString((-522), (-522));
      String string1 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.512240501877679
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = jSONObject0.put("to", (Map) hashMap0);
      jSONObject0.toString((-522), (-522));
      Float.sum(0.0F, 0.0F);
      HashMap<Short, Float> hashMap1 = new HashMap<Short, Float>();
      Short short0 = new Short((short)47);
      Float float0 = new Float(0.0F);
      Float.max(0.0F, (-697.4729F));
      Float.sum(0.0F, 0.0F);
      hashMap1.put(short0, float0);
      JSONObject.quote("{\n\"java.lang.String@0000000005\": {},\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      try { 
        jSONObject1.getJSONObject("{\n\"java.lang.String@0000000005\": {},\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000005\\\": {},\\n\\\"java.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\"\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.619418366446825
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Short short0 = new Short((short)900);
      Short.toUnsignedLong((short)0);
      Short.compare((short)70, (short)2);
      Short.toUnsignedLong((short)1346);
      int int0 = new Integer((short)0);
      Short.compare((short)1346, (short)3445);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      Object object0 = new Object();
      Short short1 = new Short((short)116);
      JSONObject jSONObject0 = new JSONObject(short1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6862668983950018
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = new JSONObject();
      jSONTokener0.next();
      jSONObject0.optString("null", "null");
      jSONTokener0.syntaxError("null");
      String string0 = "o0D(HRY%[r{T^<L_Iz k";
      String string1 = "gethashCode";
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      jSONObject0.put("gethashCode", (Map) hashMap0);
      jSONObject0.put("", true);
      jSONObject0.optJSONObject("ro");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of gethashCode
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.369960722984757
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "}cki]m>%s.J";
      int int0 = 70;
      Long long0 = new Long(0L);
      Long.getLong(")Q[B])-@y=7b#bDq", 1L);
      JSONObject.valueToString(")Q[B])-@y=7b#bDq", 70, 70);
      Long long1 = new Long(1L);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7812747906620805
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = null;
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      try { 
        jSONObject1.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3612296323290933
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", object0);
      hashMap0.put("", (Object) null);
      jSONObject0.optDouble("", 0.0);
      Long long0 = new Long(1L);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put("XlZ", boolean0);
      hashMap0.remove(object0);
      jSONObject0.optLong("tT6#", 0L);
      jSONObject0.put("istrim", (Map) hashMap0);
      jSONObject0.put("tT6#", false);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.044953181443265
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Byte byte0 = Byte.valueOf((byte)9);
      Long long0 = new Long(0L);
      hashMap0.put(byte0, long0);
      hashMap0.entrySet();
      JSONObject.valueToString(hashMap0);
      Long long1 = new Long((-1404L));
      Long.getLong("", 0L);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((-62353088));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-62353088] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3569543718554797
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = stringArray0[0];
      Boolean boolean0 = Boolean.valueOf("");
      hashMap0.replace((Object) "", boolean0, boolean0);
      stringArray0[5] = " !E(n";
      stringArray0[7] = "A JSONArray text must start with '['";
      stringArray0[8] = "Untermin%ted st_ing";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Boolean.logicalXor(false, false);
      jSONObject1.put("{}", 0L);
      Double double0 = new Double(0L);
      jSONObject1.accumulate("", " !E(n");
      try { 
        jSONObject0.get("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.9852439916401567
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(",,5'YwR6KdhU'@@$g\"", "null");
      jSONTokener0.syntaxError("null");
      JSONObject jSONObject1 = jSONObject0.put("", (-780.380203352));
      jSONObject0.optInt("null");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[2] = "null";
      stringArray0[3] = "";
      stringArray0[4] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[5] = "null";
      stringArray0[6] = "0@Q[>!av9DR/";
      stringArray0[7] = "null";
      stringArray0[8] = "null";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      jSONObject2.optLong("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject4 = jSONObject1.put("wheel.json.JSONException", (Collection) linkedList0);
      jSONObject4.optInt("QAYi>69", 0);
      jSONObject4.has("isnotifyAll");
      jSONObject4.optInt("", 0);
      jSONObject0.optJSONObject("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5490230514048333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "M>1x9";
      stringArray0[1] = "JSON does not allow non-finite numbers.";
      stringArray0[2] = "";
      stringArray0[3] = "!hFakXC{";
      stringArray0[4] = "Z_^%PxHf";
      stringArray0[5] = "";
      stringArray0[6] = "] is not a Boolean.";
      stringArray0[7] = "b8LhG";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("M@<NJ$`Oh:>", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6774252371461116
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "9yN\\^qr";
      JSONObject.quote("9yN^qr");
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject.getNames((Object) long0);
      String string1 = null;
      jSONObject0.optInt((String) null, 0);
      String string2 = "] is not a JSONObject.";
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8682838175053171
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?kZl";
      stringArray0[1] = "7B!)#wP\"HpGT";
      String string0 = " at character ";
      stringArray0[2] = " at character ";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.2365831426673877
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.optDouble("", Double.NaN);
      Long long0 = new Long((-1268L));
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      String string0 = "Expected a ',' or '}'";
      HashMap<Boolean, JSONArray> hashMap2 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      hashMap1.put("Expected a ',' or '}'", jSONObject0);
      jSONObject0.put("$dS-b6([GTj}lZF1", 0.0);
      try { 
        jSONObject0.getString("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("B|DQ!Cl~0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of B|DQ!Cl~0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1316932058084612
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(",,5'YwR6KdhU'@@$g\"", "null");
      jSONTokener0.syntaxError("null");
      JSONObject jSONObject1 = jSONObject0.put("", (-780.380203352));
      jSONObject0.optInt("null");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[2] = "null";
      stringArray0[3] = "";
      stringArray0[4] = ",,5'YwR6KdhU'@@$g\"";
      stringArray0[5] = "null";
      stringArray0[6] = "0@Q[>!av9DR/";
      stringArray0[7] = "null";
      stringArray0[8] = "null";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      jSONObject2.optLong("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject4 = jSONObject1.put("wheel.json.JSONException", (Collection) linkedList0);
      jSONObject4.toString(1882, 1882);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1377));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.873312122974524
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(903, (-4680));
      jSONObject0.optInt("", 903);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("{$0$W6],pzW", (Collection) linkedList0);
      jSONObject0.has("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.769569817515733
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Double double0 = new Double(0.0);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      Set<Map.Entry<Object, Long>> set0 = (Set<Map.Entry<Object, Long>>)hashMap0.entrySet();
      JSONObject.valueToString(set0);
      Long long0 = new Long(0L);
      Long.getLong("op", 0L);
      JSONObject jSONObject0 = new JSONObject(set0);
      JSONObject.valueToString(jSONObject0, (-2583), 46);
      Long long1 = new Long(0L);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject((Object) "op");
      Boolean.logicalXor(true, false);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      jSONObject1.put("op", (Map) hashMap1);
      JSONObject jSONObject2 = jSONObject1.put("[]", 37);
      try { 
        jSONObject2.getDouble("{\n\"java.lang.String@0000000005\": \"java.lang.Class@0000000006\",\n\"java.lang.String@0000000003\": java.lang.Boolean@0000000004\n                                              }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000005\\\": \\\"java.lang.Class@0000000006\\\",\\n\\\"java.lang.String@0000000003\\\": java.lang.Boolean@0000000004\\n                                              }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.854275680203606
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a number.";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "] is not a number.";
      stringArray0[5] = " !E(n";
      stringArray0[7] = "A JSONArray text must start with '['";
      stringArray0[8] = "Untermin%ted st_ing";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("", (-2661.0792582106774));
      jSONObject0.optInt("", 1261);
      jSONObject0.put(" !E(n", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.9531850804565751
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(0L);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getInt("nu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringWriter stringWriter0 = new StringWriter(88);
      String string0 = JSONObject.quote(" of ");
      assertEquals("\" of \"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.332526821032555
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",9%*";
      stringArray0[1] = "";
      stringArray0[2] = ")Q[B])-@y=7b#bDq";
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 3880L);
      Integer.getInteger(": ");
      JSONObject jSONObject2 = jSONObject0.accumulate("u3e)V^\"I+", (Object) null);
      jSONObject2.remove("wheel.json.JSONException");
      jSONObject2.opt((String) null);
      try { 
        jSONObject1.getJSONObject("Ra{flLf%w2ZZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ra{flLf%w2ZZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.9590960964240387
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getLong("M[?o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M[?o\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
