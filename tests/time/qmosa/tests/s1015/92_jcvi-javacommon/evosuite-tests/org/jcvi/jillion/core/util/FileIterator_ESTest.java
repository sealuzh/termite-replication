/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:04:10 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.net.URI;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5086684567003448
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      mockFile1.getAbsolutePath();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      MockFile.createTempFile("6''oc_Srz\"J", "");
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      assertFalse(fileIterator_FileIteratorBuilder1.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.412845975272661
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.delete();
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder2.build();
      fileIterator0.hasNext();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Iterator<File> iterator0 = fileIterator0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3379461854419485
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile1 = new MockFile("");
      mockFile1.delete();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      boolean boolean0 = fileIterator0.hasNext();
      assertFalse(boolean0);
      
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.9122811341774253
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.delete();
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder3.build();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder3.build();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder4.build();
      fileIterator0.next();
      MockFile mockFile1 = new MockFile("");
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator_FileIteratorBuilder5.build();
      File file0 = fileIterator1.getNextFile();
      assertEquals("/", file0.getParent());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6539458332273558
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      mockFile0.delete();
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder3.build();
      assertFalse(fileIterator0.hasNext());
      
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder4.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder5.includeDirectories(true);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      File file0 = fileIterator1.getNextFile();
      assertNotNull(file0);
      assertTrue(fileIterator1.hasNext());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.342726866335644
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      linkedList1.add((FileFilter) multipleFileFilter1);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList2);
      fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter6);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList4);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList4);
      linkedList4.add((FileFilter) multipleFileFilter8);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      assertFalse(fileIterator_FileIteratorBuilder4.equals((Object)fileIterator_FileIteratorBuilder3));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4897843302631175
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.setUpInitialState(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      FileFilter[] fileFilterArray0 = null;
      MultipleFileFilter multipleFileFilter0 = null;
      try {
        multipleFileFilter0 = new MultipleFileFilter((FileFilter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.83188841483957
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      assertTrue(fileIterator0.hasNext());
      
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.retainAll(linkedList1);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      mockFile0.delete();
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator1.iterator();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0090161465219465
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter2;
      linkedList1.add((FileFilter) multipleFileFilter2);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList2);
      linkedList0.add((FileFilter) multipleFileFilter2);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.7888253852828573
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      assertTrue(fileIterator0.hasNext());
      
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0958211767317163
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.delete();
      mockFile0.deleteOnExit();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = fileIterator_FileIteratorBuilder4.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder5.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder2.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder6 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      assertSame(fileIterator_FileIteratorBuilder6, fileIterator_FileIteratorBuilder5);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0958211767317163
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      mockFile0.delete();
      mockFile0.deleteOnExit();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = fileIterator_FileIteratorBuilder3.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = fileIterator_FileIteratorBuilder4.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder5.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder2.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder6 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      assertSame(fileIterator_FileIteratorBuilder6, fileIterator_FileIteratorBuilder4);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.57415598900554
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.updateFileIterator(mockFile0);
      assertTrue(fileIterator0.hasNext());
      
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      mockFile0.getAbsolutePath();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[|8DrF%tDv");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.7982395543215843
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter2;
      linkedList1.add((FileFilter) multipleFileFilter2);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter4);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      multipleFileFilter2.accept(mockFile0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.add((FileFilter) multipleFileFilter2);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList1);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.5743923702239773
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.spliterator();
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = null;
      try {
        multipleFileFilter2 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1369428097485703
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileFilter[] fileFilterArray0 = new FileFilter[0];
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter1);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      FileFilter[] fileFilterArray1 = new FileFilter[1];
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray1[0] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray1);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      assertNotSame(fileIterator_FileIteratorBuilder3, fileIterator_FileIteratorBuilder2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5852385059607434
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setReadable(true, false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator0.hasNext();
      fileIterator0.updateFileIterator(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<File> consumer1 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer1);
      fileIterator0.forEachRemaining(consumer0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      Iterator<File> iterator0 = fileIterator0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.551453022407744
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      assertTrue(fileIterator0.hasNext());
      
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator1.hasNext());
      
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      linkedList1.add((FileFilter) multipleFileFilter2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEachRemaining(consumer0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter2);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      linkedList0.toArray();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      linkedList0.add((FileFilter) multipleFileFilter2);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder3.build();
      assertFalse(fileIterator2.hasNext());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-2537));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer(1439);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4466856169199285
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4887161146838603
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeDirectories(false);
      fileIterator_FileIteratorBuilder3.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      linkedList0.add((FileFilter) multipleFileFilter4);
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter5;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter4;
      fileFilterArray0[6] = (FileFilter) multipleFileFilter4;
      fileFilterArray0[7] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[8] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      linkedList1.add((FileFilter) multipleFileFilter5);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList3);
      assertFalse(multipleFileFilter9.equals((Object)multipleFileFilter1));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "m");
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-2537));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer integer2 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer3;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }
}
