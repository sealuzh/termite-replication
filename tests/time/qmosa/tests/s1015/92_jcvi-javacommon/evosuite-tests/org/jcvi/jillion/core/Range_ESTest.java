/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:05:59 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6003577749429327
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.Comparators.values();
      range0.iterator();
      Range range1 = Range.of(2147485927L, 2147485927L);
      range0.isSubRangeOf(range0);
      range1.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Z^M_p#_<PM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Z^M_p#_<PM
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5990358195723355
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-2147483648L));
      Range.of((-7L), 355L);
      Range.of((-7L), 127L);
      Range.Builder range_Builder0 = new Range.Builder(1580L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[L4.L?F={(", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [L4.L?F={( into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.157344595537526
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-289L), (-289L));
      Range range1 = Range.ofLength(32767L);
      range1.iterator();
      Range range2 = Range.of(32767L);
      List<Range> list0 = range2.complement(range0);
      assertTrue(list0.contains(range2));
      
      List<Range> list1 = range2.complementFrom(list0);
      Range range3 = Range.ofLength(32767L);
      List<Range> list2 = range2.complementFrom(list1);
      assertEquals(0, list2.size());
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, (-626L), 9979L);
      Range.ofLength(9990L);
      List<Range> list3 = range4.complement(range3);
      assertFalse(list3.contains(range4));
      assertEquals(1, list3.size());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.9518041990571477
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 37L;
      Range range1 = Range.of(range_CoordinateSystem1, 37L, 2147483647L);
      Range.of(range_CoordinateSystem0, (-32773L), 2830L);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-1L), 37L);
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.390776384988023
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.of(65535L, 65535L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.8398882737350135
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 573L, 9223372036854742490L);
      range1.endsBefore(range2);
      range2.equals(range1);
      range2.getLength();
      Range range4 = Range.of(range_CoordinateSystem1, (-1L), 255L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.680892666219523
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 355L);
      range1.endsBefore(range0);
      Range range2 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range2.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6398971967905402
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 2147485927L;
      Range range0 = Range.of(2147485927L);
      Range.Comparators.values();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.endsBefore(range1);
      range1.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 3526L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 3526L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.38765610789697
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.Comparators.values();
      Range.of(292L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.7885111738590016
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(2568L);
      String string0 = range0.toString();
      assertEquals("[ -2147483648 .. -2147483648 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(5165L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.841625390176636
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range range1 = Range.of(2147485927L, 2147486217L);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      linkedList1.add(range0);
      range0.complementFrom(linkedList1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147486217L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(2041L);
      Range.of(2147485927L);
      Range.of(2280L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.745704605106358
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.of((-1L), (-1L));
      Range range0 = Range.ofLength(1001L);
      range0.split(1001L);
      String string0 = "b";
      range0.getLength();
      Range.of((-1013L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775322L, (-601L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -602 would make range [9223372036854775322 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.872466212895361
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L, 9223372036854774983L);
      range_Builder0.shift(9223372036854774983L);
      Range range0 = Range.of(255L);
      Range range1 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-32773L), (-1095L));
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-1642L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=4.0011651078307455
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.ofLength(1001L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      List<Range> list0 = range0.split(920L);
      range1.complementFrom(list0);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(range1);
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      Object object0 = new Object();
      range0.equals(object0);
      List<Range> list1 = range0.complement(range1);
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=4.013017773256333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1926L, 1926L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1926 .. 1926 ]/RB", string0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 255L, 2147485927L);
      Range range2 = Range.parseRange("[ 1926 .. 1926 ]/RB", range_CoordinateSystem1);
      Range range3 = Range.parseRange("[ 1926 .. 1926 ]/RB");
      List<Range> list0 = range0.complement(range3);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.endsBefore(range2);
      assertTrue(range2.isEmpty());
      
      Range range4 = Range.of(1926L, 4003L);
      Object object0 = new Object();
      range4.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range4.toString(range_CoordinateSystem2);
      range0.isEmpty();
      boolean boolean1 = range1.intersects(range0);
      assertTrue(boolean1 == boolean0);
      
      String string1 = range1.toString(range_CoordinateSystem2);
      assertEquals("[ 255 .. 2147485926 ]/0B", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.985814628747407
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1926L, 1926L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1926 .. 1926 ]/RB", string0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 255L, 2147485927L);
      Range range2 = Range.parseRange("[ 1926 .. 1926 ]/RB", range_CoordinateSystem1);
      Range range3 = Range.parseRange("[ 1926 .. 1926 ]/RB");
      List<Range> list0 = range0.complement(range3);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.endsBefore(range2);
      assertTrue(range2.isEmpty());
      
      Range range4 = Range.of(1926L, 4003L);
      Object object0 = new Object();
      range3.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string1 = range4.toString(range_CoordinateSystem2);
      assertEquals("[ 1926 .. 4003 ]/0B", string1);
      
      range0.isEmpty();
      boolean boolean1 = range1.intersects(range0);
      assertTrue(boolean1 == boolean0);
      
      String string2 = range1.toString(range_CoordinateSystem2);
      assertEquals("[ 255 .. 2147485926 ]/0B", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.909078349017738
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1044L), (-1044L));
      Range.Builder range_Builder1 = range_Builder0.shift((-1044L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin(824L);
      Range range0 = Range.of(824L);
      range_Builder2.shift((-1044L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range range1 = Range.ofLength(3788L);
      Range range2 = Range.of(486L);
      assertNotSame(range2, range0);
      
      Range range3 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      boolean boolean0 = range1.equals(range_Builder1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = range3.isEmpty();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.8727729363924497
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range range1 = Range.of(2147485927L);
      range1.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      linkedList1.add(range1);
      range0.complementFrom(linkedList1);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.ofLength(0L);
      range0.equals((Object) null);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 3019L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5264546713159137
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2147483647L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(9223372036854775807L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4845861148138995
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 2830L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-32773L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 255L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.909730580740014
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 3388L);
      Range range1 = Range.of((-2147483648L), 2147485927L);
      Range.Builder range_Builder0 = new Range.Builder(2147485927L);
      range0.intersection(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Range range2 = Range.ofLength(9223372036854775807L);
      range2.equals(range_Builder0);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-303L), (-555L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6239480527843684
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.068578499663663
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.ofLength(1001L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-3335L), (-1L));
      assertFalse(range3.isEmpty());
      
      boolean boolean0 = range0.endsBefore(range2);
      boolean boolean1 = range1.equals(range2);
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ -1 .. -1 ]/0B", string0);
      
      boolean boolean2 = range2.isEmpty();
      assertTrue(boolean2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.901310629630838
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(1834L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 835L, 4229L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(range_CoordinateSystem0, (-601L), 1834L);
      range0.endsBefore(range3);
      Object object0 = new Object();
      range3.equals(object0);
      long long0 = range2.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      range1.endsBefore(range0);
      range3.equals((Object) null);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      List<Range> list0 = range2.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range2));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.877292257230377
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-334L), 664L);
      boolean boolean1 = range0.endsBefore(range1);
      range1.endsBefore(range0);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.of((-334L), 784L);
      boolean boolean2 = range2.equals(range_CoordinateSystem0);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = range1.isEmpty();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5552971111894767
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range range1 = Range.of(2147485927L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2999L, 4294967295L);
      range0.endsBefore(range1);
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(2999L, (-2670L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4878637459546527
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-2147483675L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(2568L);
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(2568L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7850366736724608
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range range2 = Range.ofLength(2999L);
      Object object2 = new Object();
      boolean boolean1 = range0.equals(object2);
      assertTrue(boolean1 == boolean0);
      
      long long0 = range2.getLength();
      assertEquals(2999L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 51804627L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range range3 = range_Builder0.build();
      assertSame(range3, range2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5048317540828555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.expandEnd((-519L));
      Range range0 = Range.of((-519L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6962318768164697
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of(1834L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 835L, 4229L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(range_CoordinateSystem0, (-601L), 1834L);
      range0.endsBefore(range3);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 1834 .. 1834 ]/0B", string0);
      
      boolean boolean0 = range3.isEmpty();
      boolean boolean1 = range1.intersects(range2);
      assertSame(range2, range0);
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string1 = range1.toString(range_CoordinateSystem2);
      assertEquals("[ 836 .. 4229 ]/RB", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.98740187887514
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1225L, 1225L);
      Range.Builder range_Builder1 = new Range.Builder(1225L);
      Range.of((-32768L));
      Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-601L), 9223372036854774984L);
      Range range1 = Range.of(9223372036854774984L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.7387734068278364
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2905L);
      Range.Builder range_Builder1 = range_Builder0.shift((-85L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-935L));
      range_Builder2.expandEnd(2905L);
      Range range0 = Range.of((-935L));
      range_Builder0.shift(2905L);
      Range range1 = Range.of(1L);
      Range range2 = Range.of(32767L);
      range1.endsBefore(range2);
      Range.of(1L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2905L, 824L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = 824L;
      long long1 = (-32768L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.626720314785596
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.Comparators.values();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.endsBefore(range1);
      Range.of(range_CoordinateSystem0, 32767L, 2147485927L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.148367499373851
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range range1 = Range.of(2147485927L);
      boolean boolean0 = range0.intersects(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.9422478496188313
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range range1 = Range.of(2147485927L);
      range1.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      linkedList1.add(range1);
      range1.iterator();
      range0.complementFrom(linkedList1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147485927L, 2147485927L);
      Range.of(2147485927L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1475L, 2056L);
      range0.endsBefore(range1);
      Range range2 = Range.of(2147485927L);
      range2.iterator();
      range2.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, 3541L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4448078862137943
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2905L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2905L, 3753L);
      range_CoordinateSystem0.toString();
      Range.of(3753L);
      long long1 = 2743L;
      Range.of(2743L);
      // Undeclared exception!
      try { 
        Range.parseRange("+'dct]3^#1'T7M", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse +'dct]3^#1'T7M into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.662766789786497
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1044L), (-1044L));
      Range.of(255L);
      Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1044L), (-658L));
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.shift((-658L));
      range_Builder0.shift((-1432L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.652435126596826
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(22L);
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder1);
      Range range1 = Range.of(0L);
      range1.getBegin();
      range_Builder1.copy();
      range0.isSubRangeOf(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.6305250286188158
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of((-470L));
      Range range1 = Range.ofLength(22L);
      range1.isSubRangeOf(range0);
      long long0 = 2999L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 22L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.6127105659831247
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of((-1L));
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1L, 2281L);
      range1.equals(range_CoordinateSystem0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.114667323321533
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-289L), (-289L));
      Range range1 = Range.ofLength(32767L);
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.8225578882337685
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = range0.asRange();
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertTrue(list2.equals((Object)list1));
      //  // Unstable assertion: assertEquals(1, list2.size());
      
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range range2 = Range.of(4294967295L);
      boolean boolean0 = range1.endsBefore(range2);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.391546504356525
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.798369601513776
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-981L), 2928L);
      range_Builder0.contractBegin((-981L));
      range_Builder0.expandEnd(2928L);
      Range range0 = Range.of((-368L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(255L);
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(256L, long0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.785750267476842
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(22L);
      Range range0 = Range.of(22L, 22L);
      Range range1 = Range.of(22L);
      range1.intersection(range0);
      Range.of((-1766L));
      Range.Builder range_Builder2 = range_Builder0.expandEnd((-1766L));
      range_Builder2.expandEnd(0L);
      range_Builder1.shift((-1766L));
      Range.Comparators.values();
      range_Builder1.expandEnd(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      range0.complementFrom(linkedList1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.740761132997744
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.of(1L, 1L);
      Range range1 = range0.asRange();
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.784229608131976
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range range0 = Range.ofLength(0L);
      range_Builder0.shift(688L);
      range_Builder1.contractBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.782016010030942
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of(2147485927L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-2990L), (-422L));
      range_Builder0.shift((-422L));
      Range range1 = Range.of(827L);
      boolean boolean0 = range0.endsBefore(range1);
      Range range2 = Range.of((-2147483648L));
      boolean boolean1 = range2.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      Range range3 = Range.of(range_CoordinateSystem0, (-422L), (-1L));
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4593928922628496
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.of((-1505L), (-1505L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      range0.getEnd(range_CoordinateSystem0);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.811673529006928
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 3388L);
      Range.ofLength(2147485927L);
      Range range1 = Range.ofLength(3388L);
      long long0 = range1.getLength();
      assertEquals(3388L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range1);
      long long1 = range0.getLength();
      assertEquals(2147487037L, long1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.646886244527943
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      //  // Unstable assertion: assertTrue(range0.equals((Object)range1));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.6334333999002295
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1044L), (-1044L));
      Range.Builder range_Builder1 = range_Builder0.shift((-1044L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin(824L);
      range_Builder1.expandBegin(1051L);
      Range range0 = Range.of(824L);
      range_Builder2.shift((-1044L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range range1 = Range.of(255L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.245905362460896
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of((-579L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.711200250456394
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = 2147485927L;
      Range range0 = Range.of(2147485927L);
      Range range1 = Range.of(2147485927L);
      range1.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>(linkedList0);
      linkedList1.add(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.of((-1657L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.484850490226986
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1205L, 1205L);
      range_Builder0.shift(1205L);
      Range.of((-32768L));
      Range.of((-1L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1668L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.657329372129492
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-691L));
      range_Builder0.shift(0L);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range2, range0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5531820090846615
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      Range.Builder range_Builder1 = range_Builder0.shift((-1L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-1L));
      Range.of(824L);
      range_Builder0.shift((-1L));
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        Range.of(691L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=4.047122080460802
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.ofLength(1001L);
      List<Range> list0 = range1.split(1001L);
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(1001L, long0);
      
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      
      Range range2 = Range.of(1001L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range range3 = range2.intersection(range0);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      Range range4 = range1.intersection(range2);
      //  // Unstable assertion: assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=4.119983975886231
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L, 9223372036854774983L);
      range_Builder0.shift(9223372036854774983L);
      Range range0 = Range.of(255L);
      Range range1 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-32773L), (-1095L));
      Range range3 = range1.intersection(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range range4 = range3.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.of(range_CoordinateSystem1, (-4739L), (-1095L));
      boolean boolean0 = range5.startsBefore(range4);
      range4.endsBefore(range1);
      boolean boolean1 = range3.endsBefore(range2);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      range3.equals("Null Range used in intersection operation.");
      List<Range> list0 = range3.complement(range4);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.925842034405184
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1225L, 1225L);
      Range.Builder range_Builder1 = new Range.Builder(1225L);
      Range range0 = Range.of((-32768L));
      Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-601L), 9223372036854774984L);
      range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.312335425973952
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.ofLength(3788L);
      Range range0 = Range.of(486L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(486L, long0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.515261591594097
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractEnd((-2878L));
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-2878L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5752431508177223
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(22L);
      range_Builder0.contractBegin(22L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(22L);
      range1.intersection(range0);
      long long0 = (-1766L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1766L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2951698773245828
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(2568L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.6058073330575473
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-658L), (-1L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-2096L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.646940073460236
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(1001L);
      List<Range> list0 = range1.split(1001L);
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
      
      range1.getLength();
      range1.getLength();
      Range range2 = Range.ofLength(1001L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      long long0 = range1.getEnd();
      assertEquals(1000L, long0);
      assertSame(range1, range2);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.898332699792243
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = range0.asRange();
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      //  // Unstable assertion: assertFalse(list2.isEmpty());
      //  // Unstable assertion: assertFalse(list2.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift((-1L));
      range_Builder1.contractBegin(1L);
      Range.CoordinateSystem.values();
      range0.asRange();
      range0.toString();
      Range range2 = Range.of((-1L));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=4.05846647588298
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range range0 = Range.ofLength(1166L);
      Range range1 = Range.of(1166L);
      range1.intersects(range0);
      range1.spliterator();
      range0.complement(range1);
      Range range2 = Range.of((-4294967272L), 1166L);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range3.toString(range_CoordinateSystem0);
      Range range4 = Range.of((-4294967272L));
      range4.getEnd();
      // Undeclared exception!
      try { 
        range4.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.8533805157805427
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.ofLength(1001L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range2.getLength();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Sue]4h[_MD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Sue]4h[_MD
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.582599614125327
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.expandEnd((-519L));
      Range.of((-519L));
      Range.of(288L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("end of file after only %d bytes read (expected %d)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.end of file after only %d bytes read (expected %d)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.50778636058299
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-280L), (-280L));
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.5779677144618263
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1044L), (-1044L));
      Range.Builder range_Builder1 = range_Builder0.shift((-1044L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin(824L);
      range_Builder2.expandEnd(2L);
      Range.of(824L);
      Range.Builder range_Builder3 = range_Builder2.shift((-1044L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range_Builder0.expandEnd((-1L));
      Range.of(33318L);
      Range.of(2147485926L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("B|%,dKS8xCs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.B|%,dKS8xCs
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.5393819151636228
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(2568L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      assertNotSame(range_Builder1, range_Builder2);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3770742691085167
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.copy();
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      // Undeclared exception!
      try { 
        Range.parseRange("Ev");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Ev into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.662766789786496
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.of(0L, 0L);
      Object object0 = new Object();
      Range.of((-32768L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1L, 1000L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372034707289881L);
      assertSame(range_Builder0, range_Builder1);
  }
}
