/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:14:25 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StreamCorruptedException;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.util.Enumeration;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttribute;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      StringReader stringReader0 = new StringReader("|rg6Ow+v");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte byte0 = (byte) (-1);
      MockFile mockFile0 = new MockFile(" is in scope on: ", "uQMbl] >g`");
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      xMLFilterImpl0.unparsedEntityDecl("Core", "", "", "Core");
      xMLFilterImpl0.startPrefixMapping("", (String) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.isValidating();
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(boolean0);
      
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.563143854799521
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.setErrorHandler(defaultHandler0);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLReader0, defaultHandler0);
      sAXReader0.installXMLFilter(xMLReader0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("ngPkua");
      int int0 = 16;
      PipedInputStream pipedInputStream0 = new PipedInputStream(790);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5334958519940183
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      String string0 = "GguUU53";
      sAXReader0.getXMLReader();
      xMLFilterImpl0.startDocument();
      sAXReader0.removeHandler("GguUU53");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.setErrorHandler(defaultHandler0);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("GguUU53");
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      SAXReader sAXReader1 = new SAXReader(false);
      sAXReader0.setValidation(false);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.startPrefixMapping("]IIBL?%T-LSB)5{Y/:", "]IIBL?%T-LSB)5{Y/:");
      try { 
        sAXReader0.setXMLReaderClassName("}h%}?|Hjd");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class }h%}?|Hjd not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "/#@[9GX[f{?u(q`;";
      StringReader stringReader0 = new StringReader("");
      InputSource inputSource0 = new InputSource("");
      inputSource0.setEncoding("B`c|");
      inputSource0.getSystemId();
      inputSource0.getByteStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"B`C|\". Nested exception: Invalid encoding name \"B`C|\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.367650236312253
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("kbH0?S6[qtAgl{0f", (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("QzQ[l5Bi~Nz0", "");
      URI uRI0 = MockURI.aFileURI;
      MockURI.relativize(uRI0, uRI0);
      URL uRL0 = MockURI.toURL(uRI0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /tmp/foo.bar (No such file or directory) Nested exception: /tmp/foo.bar (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.066804160788062
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.removeHandler("");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.setErrorHandler(defaultHandler0);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      sAXReader0.installXMLFilter(xMLReader0);
      sAXReader0.setStringInternEnabled(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/IiWi3X-P");
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6204086093677565
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(".i:");
      sAXReader_SAXEntityResolver0.uriPrefix = "org.dom4j.tree.FlyweightText";
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.FlyweightText", "org.dom4j.tree.DefaultComment");
      sAXReader_SAXEntityResolver0.resolveEntity("\"%", "org.dom4j.tree.DefaultComment");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.DefaultComment", "\"%");
      sAXReader_SAXEntityResolver0.resolveEntity("ecXS8JwjLKr", "~cU{dg>K<>5H$Vs@M(");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.isIncludeInternalDTDDeclarations();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      InputSource inputSource0 = new InputSource("/#@[9GX[f{?u(q`;");
      inputSource0.getByteStream();
      String string0 = null;
      try { 
        sAXReader0.read("/#@[9GX[f{?u(q`;");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: /#@[9GX[f{?u(q`; Nested exception: no protocol: /#@[9GX[f{?u(q`;
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3671693709947967
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|?T=>ePs");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.installXMLFilter((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(false);
      StringReader stringReader0 = new StringReader("|?T=>ePs");
      try { 
        sAXReader1.read((Reader) stringReader0, "VMPvOsTt_2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/VMPvOsTt_2 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.getDefaultNamespace();
      QName qName0 = QName.get((String) null, (Namespace) null, "]2\"vX5)?");
      BeanElement beanElement0 = new BeanElement(qName0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(beanElement0, "", "");
      dOMNamespace0.getPath((Element) beanElement0);
      SAXReader sAXReader1 = new SAXReader(false);
      try { 
        sAXReader1.read("pz\"[D0erl0nJ7)8Px");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: pz\"[D0erl0nJ7)8Px Nested exception: no protocol: pz\"[D0erl0nJ7)8Px
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = new InputSource((String) null);
      SAXReader sAXReader0 = new SAXReader((String) null);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getDocumentFactory();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@3b01cc48 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      String string0 = "";
      MockFile mockFile0 = new MockFile(" of document ", "");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      InputSource inputSource0 = new InputSource("");
      inputSource0.getByteStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 47);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, sequenceInputStream0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.isValidating();
      xMLFilterImpl1.startDocument();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.getParent();
      xMLFilterImpl0.getEntityResolver();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.startPrefixMapping("org.dom4j.dom.DOMDocumentFactory", "<V{&Lf^)tZtDsJw'Qr");
      // Undeclared exception!
      try { 
        sAXReader0.configureReader(xMLFilterImpl2, defaultHandler0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.tree.AbstractCDATA", "");
      QName qName0 = QName.get("org.dom4j.tree.AbstractCDATA", (Namespace) dOMNamespace0, "U2de");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      sAXReader0.isStringInternEnabled();
      BeanElement beanElement0 = new BeanElement("Cannot lookup namespace URIs in DOM 2", qName0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      sAXReader0.getErrorHandler();
      sAXReader0.getEntityResolver();
      sAXReader0.getXMLFilter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-68);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 4D0D20BC
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.createDefaultEntityResolver((String) null);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9051066634117592
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(".i:");
      sAXReader_SAXEntityResolver0.uriPrefix = "org.dom4j.tree.DefaultComment";
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.DefaultComment", "org.dom4j.tree.DefaultComment");
      sAXReader_SAXEntityResolver0.resolveEntity("\"%", "org.dom4j.tree.DefaultComment");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.DefaultComment", "\"%");
      sAXReader_SAXEntityResolver0.resolveEntity("ecXS8JwjLKr", ".i:");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader("&");
      try { 
        sAXReader0.read((Reader) stringReader0, "Kwq'");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/Kwq' : Reference is not allowed in prolog. Nested exception: Reference is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.406843574312277
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      xMLReaderAdapter0.processingInstruction("", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SAXReader sAXReader1 = new SAXReader(false);
      sAXReader1.createDefaultEntityResolver("[o6]c(T$#}P");
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      EntityResolver entityResolver0 = sAXReader1.createDefaultEntityResolver("");
      sAXReader1.setEntityResolver(entityResolver0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(15);
      try { 
        sAXReader1.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-1);
      StringReader stringReader0 = new StringReader(" Nested exception: ");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "t% `";
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      sAXReader0.getEncoding();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setStripWhitespaceText(true);
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid path of length: 1 it must be greater than 2
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler((String) null, dispatchHandler0);
      sAXReader0.isStripWhitespaceText();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      try { 
        sAXReader0.setProperty("", "");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIgnoreComments(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.setXMLReader(xMLReader0);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("9]jD=.", mockFileInputStream0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '9]jD=.' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.334010586157512
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getDocumentFactory();
      BeanElement beanElement0 = new BeanElement("S?]4X", (Object) null);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      namespaceStack0.getDefaultNamespace();
      QName qName0 = QName.get("S?]4X", (Namespace) null, "");
      BeanElement beanElement1 = new BeanElement(qName0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(beanElement1, "Bkv(", "");
      dOMNamespace0.getPath((Element) beanElement1);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDocumentFactory();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.aFTPURI;
      URI uRI2 = MockURI.relativize(uRI1, uRI0);
      URL uRL0 = MockURI.toURL(uRI2);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /tmp/foo.bar (No such file or directory) Nested exception: /tmp/foo.bar (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("j6AN8F\"n|>`R+&O's+");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader_SAXEntityResolver0.resolveEntity("QzQ[l5Bi~Nz0", "UT#");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BeanElement beanElement0 = new BeanElement("", pipedInputStream0);
      Object object0 = new Object();
      BeanElement beanElement1 = new BeanElement((QName) null, object0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList1 = beanMetaData0.createAttributeList(beanElement1);
      BeanAttribute beanAttribute0 = new BeanAttribute(beanAttributeList1, 1018);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DOMNamespace dOMNamespace0 = new DOMNamespace((String) null, "");
      dOMNamespace0.getPath((Element) beanElement1);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0995015447694865
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      inputSource0.getSystemId();
      sAXReader0.setStripWhitespaceText(true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      sAXReader0.getEncoding();
      sAXReader0.setEncoding("");
      sAXReader0.setStringInternEnabled(true);
      sAXReader0.resetHandlers();
      sAXReader0.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3870297971924215
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.tree.AbstractCDATA", "");
      QName qName0 = QName.get("org.dom4j.tree.AbstractCDATA", (Namespace) dOMNamespace0, "Ue");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      sAXReader0.isStringInternEnabled();
      BeanElement beanElement0 = new BeanElement(qName0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      BeanElement beanElement1 = new BeanElement(qName0);
      dOMNamespace0.getPath((Element) beanElement1);
      try { 
        sAXReader0.read("Ue");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/Ue (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/Ue (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      sAXReader1.isIgnoreComments();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      pruningDispatchHandler0.resetHandlers();
      String string0 = "W0+KTE";
      try { 
        sAXReader0.setProperty("W0+KTE", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'W0+KTE' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3720491019563554
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.removeHandler("GguUU53");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl2.startDocument();
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      xMLFilterImpl4.getParent();
      DefaultHandler defaultHandler1 = new DefaultHandler();
      defaultHandler0.startPrefixMapping("WW", "GguUU53");
      sAXReader0.configureReader(xMLFilterImpl1, defaultHandler0);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(boolean0);
      
      sAXReader0.getXMLReader();
      XMLReader xMLReader1 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertSame(xMLReader1, xMLReader0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.991776477404904
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.removeHandler("GguUU53");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.resolveEntity(",|aF#dqF0L", "ov:9Y1Hl-");
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.setErrorHandler(defaultHandler0);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setStringInternEnabled(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("GguUU53");
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      DOMDocument dOMDocument0 = new DOMDocument();
      try { 
        sAXReader0.setProperty("GguUU53", xMLReader0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: GguUU53
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.628800685492354
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.skippedEntity((String) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.removeHandler((String) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      sAXReader0.configureReader(xMLReader0, defaultHandler0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9923760982112872
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.removeHandler("GguUU53");
      assertTrue(sAXReader0.isStringInternEnabled());
      
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      sAXReader0.installXMLFilter(xMLReader0);
      sAXReader0.setStringInternEnabled(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/IiWi3X-P");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader0.setMergeAdjacentText(false);
      assertFalse(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.5058805592598903
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      sAXReader0.removeHandler("GguUU53");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.setErrorHandler(defaultHandler0);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      StringReader stringReader0 = new StringReader("GguUU53");
      try { 
        sAXReader0.read((Reader) stringReader0, "4^!8i%^Eu_gDLU>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 29);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("QzQ[l5Bi~Nz0", "");
      URI uRI0 = MockURI.aFileURI;
      MockURI.relativize(uRI0, uRI0);
      MockURI.toURL(uRI0);
      DOMDocument dOMDocument0 = new DOMDocument("");
      assertNull(dOMDocument0.getNodeValue());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.tree.AbstractCDATA", "");
      QName.get("org.dom4j.tree.AbstractCDATA", (Namespace) dOMNamespace0, "Ue");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      sAXReader0.isStringInternEnabled();
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader1.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      try { 
        sAXReader1.setXMLReaderClassName("Cannot lookup namespace URIs in DOM 2");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class Cannot lookup namespace URIs in DOM 2 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.726808739797795
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("E%\"k");
      sAXReader_SAXEntityResolver0.resolveEntity("LA\"ivxfqxh|?^)", "LA\"ivxfqxh|?^)");
      sAXReader_SAXEntityResolver0.resolveEntity("E%\"k", "E%\"k");
      sAXReader_SAXEntityResolver0.uriPrefix = "NAMESPACE_NODE";
      sAXReader_SAXEntityResolver0.resolveEntity("E%\"k", "E%\"k");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getEntityResolver();
      sAXReader0.setXMLReader(parserAdapter0);
      xMLFilterImpl0.endDocument();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(xMLFilterImpl1, sAXContentHandler0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver(" [Document: name ");
      sAXReader_SAXEntityResolver0.resolveEntity("", " [Document: name ");
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.createDefaultEntityResolver(";9,bkW@;");
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      QName qName0 = QName.get("");
      qName0.getDocumentFactory();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName1 = new QName((String) null);
      qName0.getQualifiedName();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      sAXReader0.setStringInternEnabled(true);
      sAXReader0.setIgnoreComments(true);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.390776384988023
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = new InputSource();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("HZ}sc!Hb");
      sAXReader_SAXEntityResolver1.resolveEntity(" : ", "HZ}sc!Hb");
      BeanElement beanElement0 = new BeanElement(" : ", "HZ}sc!Hb");
      BeanElement beanElement1 = new BeanElement((QName) null, (Object) null);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      int int0 = 347;
      BeanAttribute beanAttribute0 = new BeanAttribute(beanAttributeList0, 347);
      BeanElement beanElement2 = new BeanElement((QName) null);
      DOMNamespace dOMNamespace0 = new DOMNamespace("", (String) null);
      dOMNamespace0.getPath((Element) null);
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, false);
      try { 
        sAXReader1.read(" : ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol:  :  Nested exception: no protocol:  : 
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createComment("Rs_");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "/#@[9GX[f{?u(q`;";
      InputSource inputSource0 = new InputSource("X*Mp");
      inputSource0.getByteStream();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilter xMLFilter0 = null;
      defaultHandler2_0.startCDATA();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setXMLFilter((XMLFilter) null);
      defaultHandler2_0.getExternalSubset("/#@[9GX[f{?u(q`;", "/#@[9GX[f{?u(q`;");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "X*Mp";
      InputSource inputSource0 = new InputSource("X*Mp");
      inputSource0.getByteStream();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilter xMLFilter0 = null;
      defaultHandler2_0.startCDATA();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.getXMLReader();
      try { 
        sAXReader0.read("I:Kz^T(sZ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unknown protocol: i Nested exception: unknown protocol: i
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      StringReader stringReader0 = new StringReader("|rg6Ow+v");
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)110;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.407629051723588
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace(" cannot be greater than ", "");
      QName.get("U2de", (Namespace) dOMNamespace0, "");
      QName qName0 = QName.get("");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      sAXReader0.isStringInternEnabled();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      MockException mockException0 = new MockException("");
      SAXParseException sAXParseException0 = new SAXParseException("U2de", locatorImpl0, mockException0);
      SAXParseException sAXParseException1 = new SAXParseException("org.jaxen.dom.NamespaceNode", "", (String) null, 8, (-2309), sAXParseException0);
      BeanElement beanElement0 = new BeanElement("U2de", sAXParseException1);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName1 = defaultDocumentFactory0.createQName("", "");
      BeanElement beanElement1 = new BeanElement(qName1);
      dOMNamespace0.getPath((Element) beanElement0);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, true);
      try { 
        sAXReader1.read("http://xml.org/sax/properties/lexical-handler");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@7060795d Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@7060795d Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      
      SAXReader sAXReader1 = new SAXReader(false);
      assertFalse(sAXReader1.isValidating());
      
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader1.configureReader(xMLFilterImpl0, defaultHandler0);
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.tree.AbstractCDATA", "");
      QName qName0 = QName.get("org.dom4j.tree.AbstractCDATA", (Namespace) dOMNamespace0, "Ue");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      BeanElement beanElement0 = new BeanElement(qName0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      QName.get("/", (Namespace) dOMNamespace0);
      BeanElement beanElement1 = new BeanElement(qName0);
      dOMNamespace0.getPath((Element) beanElement1);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("Warning: Caught exception attempting to use SAX to load a SAX XMLReader ", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class Warning: Caught exception attempting to use SAX to load a SAX XMLReader  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.dom4j.tree.DefaultComment");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String string0 = "org.dom4j.tree.NamespaceStack";
      dispatchHandler0.getHandler("org.dom4j.tree.NamespaceStack");
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      sAXReader0.getDocumentFactory();
      InputSource inputSource0 = new InputSource();
      MockFile mockFile0 = new MockFile("");
      try { 
        MockFile.createTempFile("org.dom4j.tree.DefaultComment", "", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "Kwq'");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0069724918931833
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.removeHandler("YMxni(sQ?CBA-QpF");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("j6AN8F\"n|>`R+&O's+");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader_SAXEntityResolver0.resolveEntity("QzQ[l5Bi~Nz0", "UT#");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BeanElement beanElement0 = new BeanElement("", pipedInputStream0);
      Object object0 = new Object();
      BeanElement beanElement1 = new BeanElement((QName) null, object0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList1 = beanMetaData0.createAttributeList(beanElement1);
      BeanAttribute beanAttribute0 = new BeanAttribute(beanAttributeList1, 1018);
      BeanElement beanElement2 = new BeanElement((QName) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DOMNamespace dOMNamespace0 = new DOMNamespace((String) null, "");
      dOMNamespace0.getPath((Element) beanElement1);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("QzQ[l5Bi~Nz0");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class QzQ[l5Bi~Nz0 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.338596728816859
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("QzQ[l5Bi~Nz0", "");
      sAXReader_SAXEntityResolver0.resolveEntity("", "UT#");
      BeanElement beanElement0 = new BeanElement("", inputSource0);
      BeanElement beanElement1 = new BeanElement((QName) null, sAXReader0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement1);
      BeanAttribute beanAttribute0 = new BeanAttribute(beanAttributeList0, 408);
      BeanElement beanElement2 = new BeanElement((QName) null);
      DOMNamespace dOMNamespace0 = new DOMNamespace((String) null, " data: ");
      dOMNamespace0.getPath((Element) beanElement2);
      try { 
        sAXReader0.read(" data: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unknown protocol: data Nested exception: unknown protocol: data
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("org.dom4j.tree.AbstractCDATA", "");
      QName.get("org.dom4j.tree.AbstractCDATA", (Namespace) dOMNamespace0, "5e");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.pop("eZuYxx3USXX0/`?");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getQNames();
      defaultDocumentFactory0.createQName("5e", (Namespace) dOMNamespace0);
      try { 
        sAXReader0.setFeature("Adding text to an XML document must not be null", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'Adding text to an XML document must not be null' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }
}
