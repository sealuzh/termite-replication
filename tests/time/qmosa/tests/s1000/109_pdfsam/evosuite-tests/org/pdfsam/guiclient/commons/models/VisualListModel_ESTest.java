/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:08:52 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.AWTEventMulticaster;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ComponentListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.Kernel;
import java.awt.image.renderable.ParameterBlock;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.media.jai.PerspectiveTransform;
import javax.media.jai.PlanarImage;
import javax.media.jai.SnapshotImage;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.JTree;
import javax.swing.plaf.multi.MultiListUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      visualListModel0.data = null;
      hashtable0.put(sunHints_Key0, "] cannot be instantiated due to access restrictions");
      BiConsumer<RenderingHints.Key, Object> biConsumer0 = (BiConsumer<RenderingHints.Key, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      hashtable0.putAll(hashMap0);
      Vector<String> vector0 = new Vector<String>();
      Vector<String> vector1 = new Vector<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(vector1);
      JComboBox<String> jComboBox0 = new JComboBox<String>();
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.getSize();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      visualListModel0.elementsChanged();
      PerspectiveTransform perspectiveTransform0 = new PerspectiveTransform(0.0F, 15.0F, 15.0F, 3421.4F, 1000.0F, (-1.0F), 0.0F, 3421.4F, 0.0F);
      AffineTransform.getRotateInstance((double) (-1.0F), 0.0, 707.7782420464);
      Point2D.Double point2D_Double0 = new Point2D.Double((-4280.37), 1000.0F);
      int[] intArray0 = new int[3];
      intArray0[1] = 1956;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<String> vector0 = new Vector<String>();
      int int0 = 1902;
      AffineTransform.getQuadrantRotateInstance(1902, (double) 1770, (double) 1770);
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      hashtable0.putAll(hashtable1);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "z8^E@Q|;&sXo";
      stringArray0[4] = "";
      stringArray0[5] = "v";
      arrayList0.toArray(stringArray0);
      arrayList0.spliterator();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) priorityQueue0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.setSize(215);
      stack0.toArray(stringArray0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      assertEquals(215, visualListModel0.getSize());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.getListDataListeners();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stack0.setSize(1);
      stack0.toArray(stringArray0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      // Undeclared exception!
      try { 
        visualListModel0.removeElements((int[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[0];
      VisualListModel visualListModel0 = new VisualListModel();
      boolean boolean0 = true;
      visualListModel0.removeElements(intArray0, true);
      int int0 = 102;
      int int1 = 6;
      OperationRegistry operationRegistry0 = new OperationRegistry();
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock((Vector<Object>) null, stack0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      TextStyle textStyle0 = TextStyle.FULL;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, textStyle0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "", parameterBlock0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.renderable.ParameterBlock", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-745);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-745), (double) (-745), (double) (-745));
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      affineTransform0.setToIdentity();
      Hashtable<RenderingHints.Key, String> hashtable2 = new Hashtable<RenderingHints.Key, String>();
      hashtable2.putAll(hashtable1);
      Hashtable<RenderingHints.Key, DefaultTableModel> hashtable3 = new Hashtable<RenderingHints.Key, DefaultTableModel>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable3);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-745));
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.data = null;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.removeElement((Object) null);
      visualListModel0.prependAllElements(vector0);
      int int0 = 16;
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndex(16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      int int0 = (-1718);
      intArray0[0] = (-1718);
      intArray0[1] = 1469;
      int int1 = 720;
      intArray0[2] = 720;
      int int2 = (-4635);
      intArray0[3] = (-4635);
      intArray0[4] = 1469;
      int int3 = (-403);
      intArray0[6] = (-403);
      // Undeclared exception!
      try { 
        visualListModel0.subList(1469, (-4635), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1469) > toIndex(-4635)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      hashtable0.put(sunHints_Key0, "");
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      hashtable1.putAll(hashtable0);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      List<VisualPageListItem> list0 = new ArrayList<VisualPageListItem>();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1204);
      intArray0[1] = (-4635);
      intArray0[2] = (-1718);
      intArray0[3] = (-744);
      intArray0[4] = (-4949);
      visualListModel0.rotateClockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      hashtable0.put(sunHints_Key0, "");
      Hashtable<RenderingHints.Key, String> hashtable2 = new Hashtable<RenderingHints.Key, String>();
      hashtable2.putAll(hashtable0);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      visualListModel0.getValidElements();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      Object object0 = new Object();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode(sunHints_Key1, true);
      defaultMutableTreeNode0.getChildCount();
      DefaultMutableTreeNode defaultMutableTreeNode1 = new DefaultMutableTreeNode();
      JTree jTree0 = new JTree(defaultMutableTreeNode1);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JTree jTree1 = new JTree(defaultMutableTreeNode1, false);
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree1, defaultTreeCellRenderer0);
      visualListModel0.getElementAt(0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      // Undeclared exception!
      try { 
        predicate0.and((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable1.replaceAll(biFunction0);
      hashtable1.putAll(hashtable0);
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      Integer integer0 = new Integer((-903));
      hashMap0.put(pdfGraphics2D_HyperLinkKey0, integer0);
      Hashtable<RenderingHints.Key, Integer> hashtable2 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable2);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      hashtable0.put(sunHints_Key0, "");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      hashMap0.put(sunHints_Key0, "");
      hashtable0.putAll(hashMap0);
      visualListModel0.getElementAt(8);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[0];
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(10000);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4993646124305886
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 1874;
      visualListModel0.moveUpIndexes(intArray0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate1);
      predicate0.and(predicate5);
      Predicate<Object> predicate6 = predicate3.and(predicate5);
      Predicate<Object> predicate7 = predicate6.and(predicate0);
      predicate7.negate();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      predicate2.or(predicate6);
      vector0.removeIf(predicate5);
      TreeSet<DefaultTreeCellEditor> treeSet0 = new TreeSet<DefaultTreeCellEditor>();
      vector0.removeAll(treeSet0);
      Integer integer0 = IIPResolutionDescriptor.MAX_RESOLUTION;
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)97;
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)97;
      intArray0[1] = (int) (byte)97;
      visualListModel0.reverseElements(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      TextStyle textStyle0 = TextStyle.NARROW;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) textStyle0);
      predicate0.negate();
      predicate0.negate();
      vector0.removeIf(predicate0);
      TreeSet<DefaultTreeCellEditor> treeSet0 = new TreeSet<DefaultTreeCellEditor>();
      vector0.removeAll(treeSet0);
      Integer integer0 = IIPResolutionDescriptor.MAX_RESOLUTION;
      assertEquals(Integer.MAX_VALUE, (int)integer0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Parsing layout options for \"";
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove(componentListener1, componentListener0);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener1);
      JComboBox<String> jComboBox0 = new JComboBox<String>(stringArray0);
      jComboBox0.removeComponentListener((ComponentListener) null);
      jComboBox0.createVolatileImage(91, (-1));
      visualListModel0.addListDataListener(jComboBox0);
      Object object0 = new Object();
      visualListModel0.moveDownIndex(0);
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance(91, (-1));
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      assertEquals((-91.0), affineTransform1.getDeterminant(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[6];
      intArray0[0] = (-2989);
      intArray0[1] = 16;
      intArray0[2] = (-1228);
      intArray0[3] = (-2325);
      intArray0[4] = 351;
      intArray0[5] = (-805);
      visualListModel0.undeleteElements(intArray0);
      assertArrayEquals(new int[] {(-2989), 16, (-1228), (-2325), 351, (-805)}, intArray0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      AffineTransform.getQuadrantRotateInstance(1770);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1770;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1770;
      floatArray0[1] = (float) 1770;
      PerspectiveTransform perspectiveTransform0 = new PerspectiveTransform((-1.0F), 0.0F, (-1401.6671F), 0.0F, (float) 2528, (float) 1, 255.0F, (-3010.0818F), 0.0F);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      Point2D point2D0 = perspectiveTransform0.transform((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 255.0F, (double) 1770.0F, 138.1, Double.NEGATIVE_INFINITY);
      Point2D point2D1 = perspectiveTransform0.transform((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      perspectiveTransform0.inverseTransform(point2D1, (Point2D) point2D_Double0);
      Point2D point2D2 = perspectiveTransform0.inverseTransform(point2D0, point2D1);
      affineTransform0.inverseTransform(point2D0, point2D2);
      point2D_Double0.clone();
      Point2D.Double point2D_Double1 = new Point2D.Double();
      Point2D point2D3 = affineTransform0.inverseTransform(point2D2, (Point2D) point2D_Double1);
      assertNotSame(point2D0, point2D3);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<String> vector0 = new Vector<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(vector0);
      JComboBox<String> jComboBox0 = new JComboBox<String>(defaultComboBoxModel0);
      defaultComboBoxModel0.removeElement(jComboBox0);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      defaultComboBoxModel0.getSelectedItem();
      Class<DefaultTreeCellEditor> class0 = DefaultTreeCellEditor.class;
      jComboBox0.getListeners(class0);
      vector0.parallelStream();
      visualListModel0.addListDataListener(jComboBox0);
      Object object0 = new Object();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      assertEquals(0, visualPageListItemArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = (-71);
      intArray0[1] = (-71);
      intArray0[2] = (-71);
      intArray0[3] = (-71);
      intArray0[4] = (-71);
      intArray0[5] = (-71);
      intArray0[6] = (-71);
      visualListModel0.reverseElements(intArray0);
      intArray0[7] = (-71);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.subList((-71), (-71), true);
      int[] intArray1 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(741, (-71), (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      hashtable0.putAll(hashtable1);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Parsing layout options for \"";
      stringArray0[1] = "";
      arrayList0.toArray(stringArray0);
      arrayList0.spliterator();
      visualListModel0.addAllElements(215, (Collection<VisualPageListItem>) arrayList0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(215, 0.0);
      AffineTransform.getRotateInstance(0.0, 2927.751920327138, 2213.0);
      AffineTransform affineTransform1 = AffineTransform.getScaleInstance(2927.751920327138, 2671.338865048);
      affineTransform1.setTransform(affineTransform0);
      AffineTransform affineTransform2 = new AffineTransform(affineTransform1);
      AffineTransform affineTransform3 = AffineTransform.getScaleInstance(1955.7505495, (-1.0));
      affineTransform2.isIdentity();
      AffineTransform affineTransform4 = new AffineTransform(affineTransform2);
      AffineTransform.getTranslateInstance((-1.0), 0.0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform3, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: -1
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2383497075834473
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 256;
      boolean boolean0 = false;
      visualListModel0.subList(256, 256, false);
      visualListModel0.addAllElements(256, (Collection<VisualPageListItem>) null);
      int int1 = (-1844);
      int int2 = 906;
      visualListModel0.moveUpIndex(906);
      visualListModel0.removeElements((-1844), 396, false);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      int int3 = (-709);
      // Undeclared exception!
      try { 
        visualListModel0.subList(906, (-709));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(906) > toIndex(-709)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      arrayList0.toArray(stringArray0);
      arrayList0.spliterator();
      visualListModel0.addAllElements(215, (Collection<VisualPageListItem>) arrayList0);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance(1000.0, (-548));
      double double0 = 0.0;
      AffineTransform affineTransform1 = AffineTransform.getRotateInstance(0.0, 3984.28712758, 0.0);
      affineTransform1.setTransform(affineTransform0);
      double[] doubleArray0 = new double[0];
      int int0 = 920;
      // Undeclared exception!
      try { 
        affineTransform0.inverseTransform(doubleArray0, 920, doubleArray0, (-3194), 4003);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 920
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = (-745);
      intArray0[1] = (-745);
      intArray0[2] = (-745);
      intArray0[3] = (-745);
      intArray0[4] = 43;
      intArray0[5] = (-745);
      intArray0[6] = (-745);
      intArray0[7] = (-745);
      visualListModel0.rotateClockwiseElements(intArray0);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-745), (double) (-745), (double) (-745));
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      hashtable0.putAll(hashtable1);
      RenderingHints renderingHints0 = new RenderingHints(hashtable1);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.subList(1, (-2523), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-2523)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElementAt((VisualPageListItem) null, 360);
      int[] intArray0 = new int[8];
      intArray0[0] = 2151;
      intArray0[1] = 360;
      intArray0[2] = 360;
      intArray0[3] = (-927);
      intArray0[4] = (-2626);
      intArray0[5] = 360;
      intArray0[6] = 2151;
      intArray0[7] = 360;
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.subList(2151, (-927), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2151) > toIndex(-927)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[0];
      VisualListModel visualListModel0 = new VisualListModel();
      boolean boolean0 = false;
      visualListModel0.removeElements((-1), 7, false);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) (-1));
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1024;
      floatArray0[1] = (float) 1270;
      floatArray0[2] = (float) 7;
      floatArray0[3] = (float) 1270;
      floatArray0[4] = (float) 1413;
      floatArray0[5] = (float) (-1);
      affineTransform0.transform(floatArray0, (-1), (double[]) null, (-807), (-807));
      AffineTransform affineTransform1 = AffineTransform.getQuadrantRotateInstance(1024, 1.0, (double) (-1));
      AffineTransform affineTransform2 = new AffineTransform(affineTransform1);
      AffineTransform affineTransform3 = AffineTransform.getQuadrantRotateInstance(1024);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform3, (-1084));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: -1084
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.147576009616535
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[0];
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.data = vector0;
      visualListModel0.rotateClockwiseElements(intArray0);
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-269), 0.0, 0.0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.reverseElements(intArray0);
      Object object0 = new Object();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-269);
      floatArray0[2] = (float) (-269);
      floatArray0[3] = (float) (-269);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) (-269);
      floatArray0[6] = (float) (-269);
      floatArray0[7] = (float) (-269);
      floatArray0[8] = (float) (-269);
      PerspectiveTransform perspectiveTransform0 = new PerspectiveTransform(floatArray0);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      PerspectiveTransform perspectiveTransform1 = new PerspectiveTransform((-269.0F), (-1.0F), (-269.0F), (-1.0F), (-269.0F), (-1.0F), (-269.0F), (float) (-269), (-269.0F));
      Point point0 = gridBagLayout0.getLayoutOrigin();
      Point2D point2D0 = perspectiveTransform0.transform((Point2D) point0, (Point2D) point0);
      Point2D point2D1 = perspectiveTransform0.transform(point2D0, point2D0);
      point2D0.setLocation(point2D1);
      AffineTransform affineTransform1 = AffineTransform.getRotateInstance(0.0, (double) (-269.0F), (-298.6));
      affineTransform0.inverseTransform(point2D0, point2D0);
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-269.0F));
      affineTransform1.inverseTransform((Point2D) point0, (Point2D) point0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel1.moveUpIndex(1);
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = (-1);
      intArray1[1] = 1;
      intArray1[2] = 1;
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[2];
      Vector<String> vector0 = new Vector<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(vector0);
      defaultComboBoxModel0.getSelectedItem();
      JComboBox<String> jComboBox0 = new JComboBox<String>(defaultComboBoxModel0);
      jComboBox0.createVolatileImage(1, 0);
      visualListModel1.addListDataListener(jComboBox0);
      visualListModel1.appendAllElements((Collection<VisualPageListItem>) null);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<String> vector0 = new Vector<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(vector0);
      JComboBox<String> jComboBox0 = new JComboBox<String>(defaultComboBoxModel0);
      jComboBox0.setIgnoreRepaint(false);
      visualListModel0.addListDataListener(jComboBox0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndex((-1513));
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      hashtable1.putAll(hashtable0);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      arrayList0.toArray(stringArray0);
      arrayList0.spliterator();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements((-1991), (Collection<VisualPageListItem>) arrayList0);
      int int0 = (-691);
      int int1 = 1435;
      int int2 = 1024;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1435;
      floatArray0[1] = 1.1235687F;
      floatArray0[2] = (float) 215;
      floatArray0[3] = 1.1235687F;
      floatArray0[4] = (float) (-2442);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(1024, (-2442), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 3, true);
      visualListModel0.removeElements(0, 0, true);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      visualListModel0.addAllElements(collection0);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      visualListModel0.removeElements(intArray0, true);
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>();
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[2];
      visualListModel0.subList(50000, 357, true);
      intArray0[0] = 4;
      intArray0[1] = 0;
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.updateElementAt(2308, (VisualPageListItem) null);
      visualListModel0.moveUpIndex(4);
      AffineTransform affineTransform0 = new AffineTransform();
      float float0 = (-1104.6757F);
      float float1 = 0.0F;
      PerspectiveTransform perspectiveTransform0 = new PerspectiveTransform(502.5F, (float) 4, (-1649.9231F), (-4534.0F), 0.0F, (-1649.9231F), (-1.0F), 0.0F, (float) 4);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        point2D_Double0.setLocation((Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Point2D", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[0];
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndexes(intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 40000;
      doubleArray0[1] = (double) 3795;
      doubleArray0[2] = (double) 40000;
      MultiListUI multiListUI0 = new MultiListUI();
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(0, 0, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(stack0);
      stack0.parallelStream();
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.addListDataListener(jComboBox0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.removeElements(0, (-2083), false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(255, 255, false);
      AffineTransform.getQuadrantRotateInstance(1413, (double) 255, 695.9235672178);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1413;
      doubleArray0[1] = (double) 255;
      doubleArray0[2] = (double) 255;
      int int0 = (-478);
      int int1 = 1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 255;
      floatArray0[1] = (float) 255;
      floatArray0[2] = (float) 255;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(1, 3029, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 3 and should be 3029
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3791235169376774
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      Vector<String> vector0 = new Vector<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(vector0);
      JComboBox<String> jComboBox0 = new JComboBox<String>(defaultComboBoxModel0);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      vector0.parallelStream();
      jComboBox0.removeComponentListener((ComponentListener) null);
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel0.subList(0, 0, false);
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.undeleteElements(intArray1);
      visualListModel1.moveUpIndex(1814);
      visualListModel1.removeElements(intArray1, false);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 4;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-244), 505);
      visualListModel0.addElementAt((VisualPageListItem) null, 4);
      Integer integer0 = IIPResolutionDescriptor.MAX_RESOLUTION;
      SnapshotImage snapshotImage0 = null;
      try {
        snapshotImage0 = new SnapshotImage((PlanarImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.media.jai.ImageLayout", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      hashtable0.put(sunHints_Key0, "");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      hashtable0.putAll(hashMap0);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer1);
      HashMap<RenderingHints.Key, String> hashMap1 = new HashMap<RenderingHints.Key, String>();
      hashtable0.putAll(hashMap1);
      HashMap<RenderingHints.Key, Integer> hashMap2 = new HashMap<RenderingHints.Key, Integer>();
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.appendAllElements(hashSet0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1);
      visualListModel0.removeElements(237, (-1), false);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(695.9235672178);
      float[] floatArray0 = new float[0];
      affineTransform0.deltaTransform((double[]) null, 1270, (double[]) null, (-2083), 0);
      double[] doubleArray0 = new double[9];
      affineTransform0.shear((-1), 1413);
      doubleArray0[0] = (double) 1413;
      doubleArray0[1] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      // Undeclared exception!
      try { 
        affineTransform0.transform(floatArray0, 1270, doubleArray0, (-1084), 1024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1270
         //
         verifyException("java.awt.geom.AffineTransform", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(stack0);
      Stack<String> stack1 = new Stack<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(stack1);
      JComboBox<String> jComboBox1 = new JComboBox<String>(defaultComboBoxModel0);
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 35;
      intArray0[4] = (-1790);
      intArray0[5] = (-1282);
      intArray0[6] = 873;
      visualListModel0.removeElements(intArray0, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable1.replaceAll(biFunction0);
      hashtable1.putAll(hashtable0);
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      HashMap<RenderingHints.Key, String> hashMap1 = new HashMap<RenderingHints.Key, String>();
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyString());
      hashMap1.compute(pdfGraphics2D_HyperLinkKey0, biFunction1);
      hashMap1.put(pdfGraphics2D_HyperLinkKey0, (String) null);
      BiFunction<Object, Object, String> biFunction2 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction2).apply(any() , any());
      hashMap1.compute(pdfGraphics2D_HyperLinkKey0, biFunction2);
      Hashtable<RenderingHints.Key, String> hashtable2 = new Hashtable<RenderingHints.Key, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<RenderingHints.Key, String> hashtable3 = new Hashtable<RenderingHints.Key, String>();
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1322);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      visualListModel0.removeElements(intArray0, true);
      assertArrayEquals(new int[] {(-1322), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.replaceAll(biFunction0);
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      hashtable0.putAll(hashMap0);
      HashMap<RenderingHints.Key, Integer> hashMap1 = new HashMap<RenderingHints.Key, Integer>();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      HashMap<RenderingHints.Key, String> hashMap2 = new HashMap<RenderingHints.Key, String>();
      BiFunction<RenderingHints.Key, Object, String> biFunction1 = (BiFunction<RenderingHints.Key, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any(java.awt.RenderingHints.Key.class) , any());
      hashMap0.compute(pdfGraphics2D_HyperLinkKey0, biFunction1);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      hashMap2.put(sunHints_Key0, "OiyRON;_qw?:'1G53");
      Hashtable<RenderingHints.Key, String> hashtable2 = new Hashtable<RenderingHints.Key, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<RenderingHints.Key, String> hashtable3 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable4 = new Hashtable<RenderingHints.Key, String>();
      hashtable1.putAll(hashMap0);
      RenderingHints renderingHints0 = new RenderingHints(hashtable4);
      hashtable3.putAll(hashMap2);
      RenderingHints renderingHints1 = new RenderingHints(hashtable2);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(110, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 110
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable1.replaceAll(biFunction0);
      hashtable1.putAll(hashtable0);
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      HashMap<RenderingHints.Key, String> hashMap1 = new HashMap<RenderingHints.Key, String>();
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyString());
      hashMap1.compute(pdfGraphics2D_HyperLinkKey0, biFunction1);
      hashMap1.put(pdfGraphics2D_HyperLinkKey0, (String) null);
      Hashtable<RenderingHints.Key, String> hashtable2 = new Hashtable<RenderingHints.Key, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<RenderingHints.Key, String> hashtable3 = new Hashtable<RenderingHints.Key, String>();
      hashtable1.putAll(hashtable3);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Predicate.isEqual((Object) integer0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) (-1788));
      affineTransform0.isIdentity();
      AffineTransform affineTransform1 = AffineTransform.getRotateInstance((double) (-1788), (double) (-1788), 1722.451400041139, (double) (-1788));
      affineTransform1.setTransform(affineTransform0);
      affineTransform0.inverseTransform((double[]) null, 3, (double[]) null, 1, (-1788));
      AffineTransform.getScaleInstance(0.0, (-1.0));
      AffineTransform affineTransform2 = new AffineTransform(affineTransform0);
      AffineTransform.getScaleInstance(0.0, 0.0);
      affineTransform1.isIdentity();
      AffineTransform affineTransform3 = new AffineTransform(affineTransform2);
      AffineTransform.getTranslateInstance(0.0, 0.0);
      AffineTransform affineTransform4 = AffineTransform.getRotateInstance(0.0, 0.0, 0.0);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform4, 1);
      assertEquals(1, affineTransformOp0.getInterpolationType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable1 = new Hashtable<RenderingHints.Key, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable1.replaceAll(biFunction0);
      hashtable1.putAll(hashtable0);
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      HashMap<RenderingHints.Key, String> hashMap1 = new HashMap<RenderingHints.Key, String>();
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyString());
      hashMap1.compute(pdfGraphics2D_HyperLinkKey0, biFunction1);
      hashMap1.put(pdfGraphics2D_HyperLinkKey0, "");
      Hashtable<RenderingHints.Key, String> hashtable2 = new Hashtable<RenderingHints.Key, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<RenderingHints.Key, String> hashtable3 = new Hashtable<RenderingHints.Key, String>();
      Hashtable<RenderingHints.Key, String> hashtable4 = new Hashtable<RenderingHints.Key, String>();
      hashtable1.putAll(hashtable4);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      stack0.remove((Object) integer0);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      assertTrue(stack0.empty());
  }
}
