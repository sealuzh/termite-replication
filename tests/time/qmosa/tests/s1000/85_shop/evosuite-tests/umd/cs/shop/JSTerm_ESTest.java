/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:29:56 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSPredicateForm0);
      jSTerm0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5720809552609603
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSPredicateForm0);
      StringReader stringReader0 = new StringReader("3?FC");
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.remove((Object) jSTerm2);
      StringReader stringReader1 = new StringReader("cf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      StringReader stringReader0 = new StringReader("(Cf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = null;
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1119339714219736
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("floor");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.728662928260952
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = (-2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.rightPar = 47;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      jSTerm0.isGround();
      jSSubstitution1.add((Object) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.813782155210461
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      streamTokenizer0.wordChars((-2), (-2));
      jSTerm0.makeFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      System.setCurrentTimeMillis((-966L));
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9035776873853445
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isEval();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.makeConstant();
      jSTerm1.clear();
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      jSTerm1.makeConstant();
      jSTerm1.isGround();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      jSTerm1.isGround();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm4.matches(jSTerm2, jSSubstitution0);
      assertEquals("[[]]", jSTerm0.toString());
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = 109;
      jSTerm0.add((Object) jSPredicateForm0);
      StringReader stringReader0 = new StringReader("3?FC");
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.slash = 2323;
      jSTerm0.remove((Object) jSTerm0);
      StringReader stringReader1 = new StringReader("%%%");
      StringReader stringReader2 = new StringReader(",");
      StringReader stringReader3 = new StringReader("3?FC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.812318542225415
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = (-2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.rightPar = 47;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      jSTerm0.isGround();
      jSSubstitution1.add((Object) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.506749936881248
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      streamTokenizer0.wordChars((-2), 45);
      jSTerm0.makeFunction();
      stringReader0.skip(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis(45);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      System.setCurrentTimeMillis(0);
      jSTerm0.isGround();
      jSSubstitution1.add((Object) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6344375665151545
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      streamTokenizer0.wordChars((-2), 45);
      jSTerm0.makeFunction();
      stringReader0.skip(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.skip(0L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis(2261L);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution0);
      System.setCurrentTimeMillis((-1L));
      jSTerm3.isGround();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7303817126510705
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSJshopVars.backquote = (-11);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("R)bW&ET$wZF5ef7");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm0.toStr();
      jSTerm3.isGround();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.545382062130925
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.isVariable();
      jSTerm0.isGround();
      jSTerm0.equals(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4578180242305514
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = "floor";
      StringReader stringReader0 = new StringReader("floor");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.lastElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<String> predicate1 = predicate0.negate();
      jSTerm0.removeIf(predicate1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.607085799958631
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = "floor";
      StringReader stringReader0 = new StringReader("floor");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.lastElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<String> predicate1 = predicate0.negate();
      jSTerm0.removeIf(predicate1);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3631322031433784
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("floor");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.lastElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<String> predicate1 = predicate0.negate();
      jSTerm0.removeIf(predicate1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9050206888283454
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = (-2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.rightPar = 47;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      jSTerm0.isGround();
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.140016795854641
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "6f";
      StringReader stringReader0 = new StringReader("6f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      streamTokenizer0.wordChars((-4), 45);
      jSTerm0.makeFunction();
      streamTokenizer0.wordChars((-568), (-568));
      jSTerm0.makeFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-2047), 6);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.874990685636644
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h0?");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.astherisk = (-1);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.makeConstant();
      jSTerm0.isFunction();
      jSTerm1.makeEval(false);
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSTerm2.isFunction();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm2.spliterator();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.isFunction();
      jSTerm3.equals(jSTerm4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.803349757165007
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isEval();
      jSTerm1.cloneT();
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      jSTerm1.makeConstant();
      jSTerm1.isGround();
      jSTerm1.standardizerTerm();
      jSTerm0.toStr();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6287539870087366
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      int int0 = 45;
      streamTokenizer0.wordChars((-2), 45);
      jSTerm0.makeFunction();
      stringReader0.skip(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis(2622L);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      System.setCurrentTimeMillis(0L);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1, jSSubstitution4);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      streamTokenizer0.wordChars((-1), (-1));
      jSTerm0.makeFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      SystemInUtil.addInputLine("6.0");
      streamTokenizer1.ordinaryChars((-885), (-1));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.print();
      SystemInUtil.addInputLine("wqSXAS[");
      streamTokenizer0.ordinaryChars((-885), (-878));
      // Undeclared exception!
      try { 
        jSTerm1.setElementAt("1zIu6E~U;+Hk!L$St", (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1925436021291564
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      stringReader0.skip(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      boolean boolean0 = true;
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis(0);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.418262209262572
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      SystemInUtil.addInputLine("nil");
      streamTokenizer0.wordChars((-2), 45);
      jSTerm0.makeFunction();
      stringReader0.skip(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEmpty();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis(45);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSTerm2.removeAll(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.287988646743151
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = (-2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-2));
      jSTerm0.makeEval(true);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9722928472376235
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = (-2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.rightPar = 47;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      jSTerm0.isGround();
      jSSubstitution1.add((Object) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      jSTerm1.call();
      System.setCurrentTimeMillis(2471L);
      jSTerm0.cloneT();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.761066569486839
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.makeVariable();
      jSTerm1.makeConstant();
      jSTerm1.isGround();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.call();
      jSTerm2.call();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5280883009539776
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6f");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.call();
      assertEquals((-2), streamTokenizer1.ttype);
      assertEquals("Token[n=6.0], line 1", streamTokenizer1.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9440906203747663
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution1);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.812318542225415
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = (-2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.rightPar = 47;
      jSTerm0.equals(jSTerm0);
      System.setCurrentTimeMillis((-2));
      jSTerm0.isGround();
      jSSubstitution1.add((Object) jSTerm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.959054975178306
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = (-2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSTerm0.matches(jSTerm1);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.isGround();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.111933971421973
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars(2123, 131);
      jSTerm0.makeVariable();
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.close();
      streamTokenizer0.lowerCaseMode(false);
      JSJshopVars.whiteSpace = 32;
      jSTerm0.equals(jSTerm1);
      jSTerm1.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.makeConstant();
      boolean boolean0 = jSTerm0.isConstant();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader(";{]_a8Bv63n");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      StringReader stringReader1 = new StringReader(">");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6210811289767744
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("floor");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.lastElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<String> predicate1 = predicate0.negate();
      jSTerm1.removeIf(predicate1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      jSTerm1.equals(jSTerm0);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      jSTerm2.isFunction();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8133465262345525
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = (-2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-2));
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.rightPar = 47;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      jSTerm0.isGround();
      jSSubstitution1.add((Object) jSTerm1);
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.837042635383627
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("floor");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm0.makeConstant();
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.spliterator();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isFunction();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9459959973559475
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("r5p00?en\"Ki*N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.296953103128917
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.call();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3789267893363286
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h0?");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader(";{]_a8Bv63n");
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      StringReader stringReader1 = new StringReader("-*.f");
      StringReader stringReader2 = new StringReader("EMNLC]6.a{Cg4");
      StringReader stringReader3 = new StringReader("EMNLC]6.a{Cg4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.357381488387466
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h0?");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(false);
      int int0 = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(47);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9280664210556253
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSJshopVars.backquote = (-11);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("R)bW&ET$wZF5ef7");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm2.removeAll(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.parseList(streamTokenizer0);
      jSTerm0.matches(jSTerm4, jSSubstitution0);
      jSTerm2.equals(jSTerm4);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(49);
      JSJshopVars.plus = (-4);
      streamTokenizer0.eolIsSignificant(true);
      JSJshopVars.rightPar = 47;
      streamTokenizer0.whitespaceChars(47, 47);
      stringReader0.skip((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.rightPar = 47;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(2471L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P]rP'G-J/rMue1poiZ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-3));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8757610050257791
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lc$4jn8 /(@R`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.ensureCapacity(45);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0273770757080736
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("(");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("6.0");
      streamTokenizer0.lowerCaseMode(false);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SystemInUtil.addInputLine("6.0");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8037501779968865
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.isGround();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.matches(jSTerm2, jSSubstitution0);
      jSTerm4.makeConstant();
      jSTerm3.isGround();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm3.isGround();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5635880613726973
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("floor");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.lastElement();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate<String> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      predicate1.negate();
      jSTerm0.removeIf(predicate1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader(";{]_a8Bv63n");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader(">");
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      jSTerm0.isEval();
      charArray0[1] = '!';
      charArray0[2] = '/';
      charArray0[3] = '4';
      charArray0[4] = 'K';
      stringReader1.read(charArray0);
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = "(";
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = false;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6f");
      StringReader stringReader1 = new StringReader("6f");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader2 = new StringReader(" ");
      System.setCurrentTimeMillis((-2274L));
      StringReader stringReader3 = new StringReader(">");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      streamTokenizer0.wordChars((-2), (-2));
      jSTerm0.makeFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("Expecting variable name in term");
      streamTokenizer1.eolIsSignificant(true);
      System.setCurrentTimeMillis((-2096L));
      StringReader stringReader2 = new StringReader("6f");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.quoteChar((-885));
      streamTokenizer1.resetSyntax();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4274162572375952
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6f");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.cloneT();
      jSTerm1.makeConstant();
      jSTerm1.makeFunction();
      SystemInUtil.addInputLine("umd.cs.shop.JSPredicateForm");
      jSTerm1.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.removeElementAt((-908));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -908
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.isVariable();
      JSJshopVars.percent = 1907;
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.call();
      jSTerm1.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.776732755959494
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.isVariable();
      StringReader stringReader0 = new StringReader(";{]_a8Bv63n");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) stringReader0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      jSTerm0.call();
      jSTerm0.toStr();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      stringReader0.markSupported();
      streamTokenizer0.slashStarComments(false);
      System.setCurrentTimeMillis((-215L));
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
