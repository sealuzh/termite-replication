/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:28:01 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5284051274331283
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ImprovedFile improvedFile0 = ImprovedFile.createTempDirectory("<}<~H3^3R", "<}<~H3^3R", (File) mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir((File) mockFile0);
      archiveScanner0.scan();
      Vector<Integer> vector0 = new Vector<Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      Vector<Integer> vector1 = new Vector<Integer>();
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<Integer> vector3 = new Vector<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) vector3);
      vector3.add((Integer) null);
      vector2.removeAll(linkedList0);
      vector3.iterator();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      Vector<Integer> vector4 = new Vector<Integer>();
      Integer integer2 = new Integer(6);
      improvedFile0.deleteAll();
      Integer integer3 = new Integer(3984);
      Integer integer4 = new Integer(3984);
      Integer integer5 = new Integer(0);
      archiveScanner0.processDirectory(mockFile0, "wZ6M9F?_M9", true);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "wZ6M9F?_M9", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /tmp/foo.bar/<}<~H3^3R0<}<~H3^3R
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.978563225201054
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "1H$3[}j3v IY{1pu~|.jar");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("1H$3[}j3v IY{1pu~|.jar", "1H$3[}j3v IY{1pu~|.jar");
      ImprovedFile improvedFile2 = new ImprovedFile(improvedFile1, "1H$3[}j3v IY{1pu~|.jar");
      improvedFile1.getCanonicalPath();
      improvedFile2.delete();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.setBasedir((File) improvedFile0);
      archiveScanner0.scan();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, ".ea@1r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "N3)Wz'*zd-M;+1>^");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.CANADA_FRENCH;
      locale1.getDisplayLanguage();
      locale1.getUnicodeLocaleKeys();
      Vector<String> vector1 = new Vector<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) vector1, locale_FilteringMode0);
      Vector<String> vector2 = new Vector<String>(list0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      DirectoryScanner.match("N3)Wz'*zd-M;+1>^", "N3)Wz'*zd-M;+1>^");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      MockFile mockFile0 = new MockFile("?cTm/64q");
      Vector<Integer> vector3 = new Vector<Integer>();
      vector3.add((Integer) 1);
      System.setCurrentTimeMillis(2517L);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner2.isArchive(improvedFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = archiveScanner0.isArchive(mockFile0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.073821387492419
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ImprovedFile improvedFile0 = ImprovedFile.createTempDirectory("M h>q;HtX*R4", "<}<~H3^3R", (File) mockFile0);
      ImprovedFile.createTempDirectory("<}<~H3^3R", "<}<~H3^3R", (File) mockFile0);
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      improvedFile1.delete();
      improvedFile1.setReadable(true);
      MockFile mockFile1 = new MockFile(improvedFile0, "qMii/[2'|+/j");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar/M h>q;HtX*R40<}<~H3^3R/tempdir1");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<}<~H3^3R");
      ImprovedFile improvedFile2 = new ImprovedFile("u!|!1].$", "qMii/[2'|+/j");
      improvedFile0.deleteAll();
      improvedFile1.delete();
      mockFile0.getAbsoluteFile();
      archiveScanner0.setBasedir((File) mockFile0);
      archiveScanner0.scan();
      String string0 = ")Embt|RCBX";
      archiveScanner0.processFile(string0);
      ImprovedFile improvedFile3 = new ImprovedFile(improvedFile1);
      try { 
        improvedFile1.tempBackup();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ImprovedFile improvedFile0 = ImprovedFile.createTempDirectory("<<~3^3R", "<<~3^3R", (File) mockFile0);
      Integer integer0 = new Integer((-2371));
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Object> vector1 = new Vector<Object>();
      vector0.retainAll(vector1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(14);
      linkedList0.add(integer2);
      vector0.addAll((Collection<? extends Integer>) linkedList0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<Integer> vector3 = new Vector<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "M h>q;HtX*R4");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.and(predicate1);
      vector3.removeIf(predicate3);
      vector3.iterator();
      Integer integer3 = new Integer((-2371));
      Integer integer4 = new Integer((-2371));
      Vector<Integer> vector4 = new Vector<Integer>();
      Integer integer5 = new Integer(0);
      vector2.add((Integer) null);
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(mockFile0);
      boolean boolean0 = archiveScanner0.isArchive(mockFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9918965585343875
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ImprovedFile improvedFile0 = ImprovedFile.createTempDirectory("<}<~H3^3R", "<}<~H3^3R", (File) mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir((File) mockFile0);
      archiveScanner0.scan();
      archiveScanner0.scan();
      Vector<Integer> vector0 = new Vector<Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.setBasedir((File) improvedFile0);
      archiveScanner0.scan();
      String string0 = ".zip";
      try { 
        archiveScanner0.processArchive(mockFile0, ".zip");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /tmp/foo.bar
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesNotIncluded = vector0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\"[laL1bUj<6>dY";
      stringArray0[3] = "?cTm/64q";
      stringArray0[4] = "!/";
      stringArray0[5] = "Mcs10,iMZH_!";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.processFile("Failed to remove file, ");
      DirectoryScanner.matchPath("3^3R", "\"[laL1bUj<6>dY");
      archiveScanner0.processArchive((File) null, "3^3R.jar");
      vector0.addElement("\"[laL1bUj<6>dY");
      vector0.addAll(0, (Collection<?>) archiveScanner0.filesNotIncluded);
      System.setCurrentTimeMillis(0L);
      archiveScanner0.processArchive((File) null, "TvhMTh2GO[cz");
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "M9R =_!'fp9cOj$~,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ImprovedFile improvedFile0 = ImprovedFile.createTempDirectory("<}<~H3^3R", "<}<~H3^3R", (File) mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile0.setReadable(false);
      MockFile mockFile1 = new MockFile(improvedFile0, "qMii/[2'|+/j");
      archiveScanner0.setBasedir((File) mockFile0);
      ImprovedFile improvedFile1 = new ImprovedFile(mockFile1, "<}<~H3^3R");
      improvedFile1.getCanonicalPath();
      improvedFile0.delete();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.setBasedir((File) mockFile1);
      archiveScanner0.scan();
      archiveScanner0.processArchive(mockFile0, "/tmp/foo.bar/<}<~H3^3R0<}<~H3^3R/qMii/[2'|+/j/<}<~H3^3R");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 7, (-1695));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1936);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, (-1848));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ImprovedFile improvedFile0 = ImprovedFile.createTempDirectory("B0oh", "swq#hMbxT2&@x:;WAp", (File) mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile0.setReadable(false);
      MockFile mockFile1 = new MockFile(uRI0);
      MockFile mockFile2 = new MockFile("swq#hMbxT2&@x:;WAp", "B0oh");
      MockFile mockFile3 = new MockFile("swq#hMbxT2&@x:;WAp", "swq#hMbxT2&@x:;WAp");
      archiveScanner0.toFileType(mockFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2478));
      assertEquals((-2478), (int)integer0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(2159L);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      MockFile mockFile0 = new MockFile("<}<~H3^3R");
      ImprovedFile improvedFile0 = ImprovedFile.createTempDirectory("<}<~H3^3R", "<}<~H3^3R0<}<~H3^3R.jar", (File) mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.scandir(improvedFile0, "ile ", true);
      assertEquals(0L, improvedFile0.getTotalSpace());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "<}<~H3^3R";
      String string1 = ".zip";
      ImprovedFile improvedFile0 = new ImprovedFile(".zip", "*Q");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.toFileType(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector1 = new Vector<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<Integer> vector3 = new Vector<Integer>();
      vector2.addAll((Collection<? extends Integer>) vector3);
      vector1.iterator();
      int int0 = 1078;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, archiveScanner1.FILE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5346423609656585
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ImprovedFile improvedFile0 = ImprovedFile.createTempDirectory("<}<~H3^3R", "<}<~H3^3R", (File) mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir((File) mockFile0);
      archiveScanner0.scan();
      Vector<Integer> vector0 = new Vector<Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      Vector<Integer> vector1 = new Vector<Integer>();
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<Integer> vector3 = new Vector<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      vector3.add((Integer) null);
      vector2.removeAll(linkedList0);
      vector3.iterator();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      Vector<Integer> vector4 = new Vector<Integer>();
      Integer integer2 = new Integer(6);
      improvedFile0.deleteAll();
      Integer integer3 = new Integer(3984);
      Integer integer4 = new Integer(3984);
      Integer integer5 = new Integer(0);
      archiveScanner0.processDirectory(mockFile0, "wZ6M9F?_M9", false);
      try { 
        archiveScanner0.processDirectory(improvedFile0, "wZ6M9F?_M9", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /tmp/foo.bar/<}<~H3^3R0<}<~H3^3R
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ".jar";
      ImprovedFile improvedFile0 = new ImprovedFile(".jar", ".jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      vector0.addAll((Collection<? extends Integer>) vector1);
      vector0.iterator();
      int int0 = 1078;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, archiveScanner1.ARCHIVE);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // .jar
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ImprovedFile improvedFile0 = new ImprovedFile("M h>q;HtX*R4");
      Integer integer0 = new Integer((-2371));
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Object> vector1 = new Vector<Object>();
      vector0.retainAll(vector1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(14);
      linkedList0.add(integer2);
      vector0.addAll((Collection<? extends Integer>) linkedList0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<Integer> vector3 = new Vector<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "M h>q;HtX*R4");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate4.and(predicate2);
      vector3.removeIf(predicate4);
      vector3.iterator();
      Integer integer3 = new Integer((-2371));
      Integer integer4 = new Integer((-2371));
      Vector<Integer> vector4 = new Vector<Integer>();
      Integer integer5 = new Integer(0);
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile0, "3^BR", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ImprovedFile.createTempDirectory("B0oh", "swq#hMbxT2&@x:;WAp", (File) mockFile0);
      mockFile0.setReadable(false);
      MockFile mockFile1 = new MockFile(uRI0);
      MockFile mockFile2 = new MockFile("swq#hMbxT2&@x:;WAp", "B0oh");
      MockFile mockFile3 = new MockFile("swq#hMbxT2&@x:;WAp", "swq#hMbxT2&@x:;WAp");
      mockFile3.getAbsoluteFile();
      MockFile mockFile4 = new MockFile(uRI0);
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile1, "5:MW bmK<M", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "<}<~H3^3R";
      ImprovedFile improvedFile0 = new ImprovedFile("<}<~H3^3R", "<}<~H3^3R");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      vector0.addAll((Collection<? extends Integer>) vector1);
      vector0.iterator();
      int int0 = 1078;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, archiveScanner1.ARCHIVE);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-79);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-41);
      byteArray0[1] = byte1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byteArray0[0], archiveScanner1.FILE);
      int int1 = 2;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, int1);
      byteArrayInputStream0.close();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(bufferedInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = "\"[laL1bUj<6>dY";
      stringArray0[2] = "\"[laL1bUj<6>dY";
      stringArray0[3] = "?cTm/64q";
      stringArray0[4] = "!/";
      stringArray0[5] = "Mcs10,iMZH_!";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("Uw=8BKhGfW jB`R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ImprovedFile improvedFile0 = new ImprovedFile("M h>q;HtX*R4");
      Integer integer0 = new Integer((-2371));
      Vector<Integer> vector0 = new Vector<Integer>();
      Vector<Object> vector1 = new Vector<Object>();
      vector0.retainAll(vector1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(14);
      linkedList0.add(integer2);
      vector0.addAll((Collection<? extends Integer>) linkedList0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<Integer> vector3 = new Vector<Integer>();
      vector3.removeAllElements();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "M h>q;HtX*R4");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.and(predicate1);
      vector3.removeIf(predicate3);
      vector3.iterator();
      Integer integer3 = new Integer((-2371));
      Integer integer4 = new Integer((-2371));
      Vector<Integer> vector4 = new Vector<Integer>();
      Integer integer5 = new Integer(0);
      System.setCurrentTimeMillis(0L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      DirectoryScanner.matchPatternStart("M h>q;HtX*R4", "M h>q;HtX*R4");
      boolean boolean0 = archiveScanner0.isArchive(mockFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "N3)Wz'*zd-M;+1>^");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.CANADA_FRENCH;
      locale1.getDisplayCountry();
      locale1.getDisplayLanguage();
      locale1.getUnicodeLocaleKeys();
      Vector<String> vector1 = new Vector<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      vector1.add("wlP:");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) vector1, locale_FilteringMode0);
      Vector<String> vector2 = new Vector<String>(list0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      linkedList0.add("wlP:");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      MockFile mockFile0 = new MockFile("?cTm/64q");
      try { 
        archiveScanner0.scanArchive(mockFile0, "N3)Wz'*zd-M;+1>^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, ?cTm/64q
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "<}<~H3^3R");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      Vector<String> vector1 = new Vector<String>(list0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      linkedList0.add("<}<~H3^3R");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "iO8{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "Zept4pQRsO83j}MuE");
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "85k&X@Mia-6");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      vector0.removeAllElements();
      Locale locale1 = Locale.CANADA_FRENCH;
      locale0.getDisplayLanguage();
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      Vector<String> vector1 = new Vector<String>(set0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("85k&X@Mia-6");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      MockFile mockFile0 = new MockFile(".EAR");
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      try { 
        archiveScanner0.scandir(mockFile0, "Zept4pQRsO83j}MuE", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/.EAR
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }
}
