/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:36:35 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.990944107312201
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 26);
      resultMatrixCSV0.WIN_STRING = "pJ(H{;";
      resultMatrixCSV0.m_ShowStdDev = false;
      resultMatrixCSV0.m_RowHidden = null;
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      resultMatrixCSV0.m_Significance = null;
      resultMatrixCSV0.setColNameWidth(0);
      resultMatrixCSV0.toStringKey();
      ResultMatrixCSV.main(stringArray0);
      resultMatrixCSV0.setColNameWidth((-37));
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.684500361431793
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(27, 40);
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.m_SignificanceWidth = 24;
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 40;
      doubleArray1[1] = (double) 40;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 24;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 27;
      doubleArray2[4] = (double) 24;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 24;
      doubleArray3[2] = (double) 24;
      doubleArray3[3] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 1;
      doubleArray0[5] = doubleArray6;
      resultMatrixHTML0.m_Mean = doubleArray0;
      resultMatrixHTML0.toStringRanking();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      int[][] intArray0 = new int[2][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 40;
      intArray0[1] = intArray2;
      resultMatrixHTML1.m_NonSigWins = intArray0;
      resultMatrixHTML1.countWidthTipText();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3976033235452654
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = (-513);
      intArray0[5] = 0;
      intArray0[6] = (-742);
      intArray0[7] = 0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize((String[][]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5229862148111044
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.LEFT_PARENTHESES = "Psp8WH(:,}L:.";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3, 0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixSignificance0.removeFilterName("Psp8WH(:,}L:.");
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixHTML0.toStringSummary();
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixHTML0.m_RowHidden = null;
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setStdDev((-1053), 0, 0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixSignificance0);
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML(resultMatrixHTML1);
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixCSV0.getPrintColNames();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.783967330537246
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.m_RowNameWidth = 2;
      resultMatrixLatex0.m_EnumerateRowNames = true;
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixLatex0.WIN_STRING = null;
      resultMatrixLatex0.getRowName(0);
      resultMatrixLatex0.LEFT_PARENTHESES = "(1) row0";
      resultMatrixLatex0.setRowHidden(1292, true);
      resultMatrixLatex0.toString();
      resultMatrixLatex0.getDefaultShowStdDev();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.7233152879313227
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(5, 97);
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.removeFilterName("-row-name-width <int>");
      resultMatrixCSV0.RIGHT_PARENTHESES = "{wPr]`R='a.;!k-";
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRowHidden(0, true);
      resultMatrixLatex0.toString();
      resultMatrixLatex0.toStringKey();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 1110;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setCount((-1123), 6.7);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8203878431249856
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.setStdDevWidth(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRowHidden(1, false);
      resultMatrixLatex0.toString();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.padString((String) null, 1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.1204080561097856
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.LEFT_PARENTHESES = "Psp8WH(:,}L:.";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3, 0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixSignificance0.removeFilterName("Psp8WH(:,}L:.");
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixHTML0.toStringSummary();
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixHTML0.m_RowHidden = null;
      resultMatrixHTML0.RIGHT_PARENTHESES = null;
      resultMatrixCSV0.m_ColNameWidth = 0;
      resultMatrixHTML0.setRowNameWidth(0);
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      
      resultMatrixCSV0.getDisplayName();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(3, 1);
      String[] stringArray0 = new String[0];
      resultMatrixPlainText0.setOptions(stringArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 1);
      resultMatrixLatex0.clearRanking();
      resultMatrixLatex0.isStdDev(409);
      String[] stringArray1 = new String[0];
      resultMatrixPlainText0.listOptions();
      ResultMatrixGnuPlot.main(stringArray1);
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixPlainText0.isRowName(2);
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.042925726817573
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixSignificance0.removeFilterName("");
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.listOptions();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixHTML0.toStringSummary();
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixHTML0.setRowNameWidth(0);
      resultMatrixCSV0.getDisplayName();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      resultMatrixPlainText0.toStringMatrix();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 13);
      resultMatrixLatex0.isStdDev(1297);
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.445966822264249
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[6];
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 27);
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.removeFilterName((String) null);
      ResultMatrixCSV resultMatrixCSV1 = null;
      try {
        resultMatrixCSV1 = new ResultMatrixCSV((-891), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.769116291209045
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 1110;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray0[1] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 1;
      resultMatrixHTML0.setStdDevWidth(2);
      assertEquals(2, resultMatrixHTML0.getStdDevWidth());
      
      intArray2[3] = 1;
      intArray2[4] = 26;
      intArray2[5] = (-239);
      intArray2[6] = 0;
      intArray2[7] = 1110;
      intArray0[7] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 1;
      intArray3[1] = 0;
      intArray3[2] = 26;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRowHidden(1, true);
      resultMatrixLatex0.toString();
      resultMatrixLatex0.padString(" ", 0, false);
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.779175173063808
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.getDisplayName();
      resultMatrixHTML0.getSummaryTitle(7);
      resultMatrixHTML0.showAverageTipText();
      String[][] stringArray0 = new String[2][3];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "HTML";
      stringArray1[1] = ")";
      stringArray1[2] = "(";
      stringArray1[3] = "h";
      stringArray1[4] = "h";
      stringArray1[5] = "v";
      stringArray1[6] = "h";
      resultMatrixHTML0.setCountWidth(7);
      stringArray1[7] = "*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      resultMatrixHTML0.listOptions();
      stringArray2[0] = " ";
      stringArray2[1] = " ";
      stringArray0[1] = stringArray2;
      resultMatrixHTML0.getColSize(stringArray0, 0, false, false);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.toStringSummary();
      resultMatrixHTML0.listOptions();
      resultMatrixLatex0.toStringSummary();
      assertEquals(7, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.316323847514183
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = "Psp8WH(:,}L:.";
      resultMatrixHTML0.LEFT_PARENTHESES = "Psp8WH(:,}L:.";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3, 0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixSignificance0.removeFilterName("Psp8WH(:,}L:.");
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.listOptions();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixHTML0.toStringSummary();
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixHTML0.m_RowHidden = null;
      int int0 = 0;
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML1.setRowNameWidth((-1144));
      resultMatrixCSV0.getDisplayName();
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-2873), 1989);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7114026348848417
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.LEFT_PARENTHESES = "Psp8WH(:,}L:.";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3, 0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixSignificance0.removeFilterName("Psp8WH(:,}L:.");
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.listOptions();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixHTML0.toStringSummary();
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixHTML0.m_RowHidden = null;
      resultMatrixCSV0.m_ColNameWidth = 0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixCSV0.m_ShowStdDev = true;
      resultMatrixPlainText0.setMeanWidth((-1));
      resultMatrixPlainText0.getRowOrder();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(2, 1);
      resultMatrixCSV1.toStringMatrix();
      resultMatrixPlainText0.setRowOrder((int[]) null);
      ResultMatrixCSV resultMatrixCSV2 = null;
      try {
        resultMatrixCSV2 = new ResultMatrixCSV((-1764), (-2489));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1738236858987574
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      resultMatrixGnuPlot0.TIE_STRING = "";
      stringArray0[3] = "";
      try { 
        resultMatrixGnuPlot0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.6057378417272283
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[4];
      intArray1[0] = 2;
      intArray1[1] = 1110;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray0[1] = intArray1;
      resultMatrixHTML0.setStdDevWidth(2);
      intArray0[2] = intArray1;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")";
      stringArray0[1] = "v";
      stringArray0[2] = ")";
      stringArray0[3] = "E7";
      stringArray0[4] = "v";
      stringArray0[5] = "";
      stringArray0[6] = "*";
      stringArray0[7] = "(";
      stringArray0[8] = "(";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      assertEquals(2, resultMatrixHTML0.getStdDevWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.974102689197645
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 2);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixSignificance0.setMeanPrec(511);
      resultMatrixCSV0.LOSS_STRING = "<>N";
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixCSV0);
      Vector<String> vector0 = new Vector<String>();
      resultMatrixSignificance1.m_HeaderKeys = vector0;
      resultMatrixCSV0.setMeanWidth(2);
      boolean boolean0 = false;
      resultMatrixSignificance0.m_EnumerateColNames = false;
      resultMatrixSignificance0.m_CountWidth = (-6044);
      resultMatrixSignificance1.toStringRanking();
      resultMatrixSignificance0.getOptions();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.9556502683886436
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.LEFT_PARENTHESES = "Psp8WH(:,}L:.";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 1);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixCSV0.m_MeanPrec = (-3771);
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 1;
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.getDefaultColNameWidth();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      ResultMatrixLatex.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.804111283839196
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.m_RowNameWidth = 2;
      resultMatrixLatex0.m_EnumerateRowNames = true;
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixLatex0.WIN_STRING = null;
      resultMatrixLatex0.getRowName(1);
      resultMatrixLatex0.setRowHidden(1292, true);
      resultMatrixLatex0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = null;
      stringArray0[2] = "(";
      try { 
        resultMatrixLatex0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.645265152930342
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(5, 97);
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.removeFilterName("-row-name-width <int>");
      resultMatrixCSV0.RIGHT_PARENTHESES = "{wPr]`R='a.;!k-";
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setStdDev(5, 97, 5);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.m_Significance = null;
      resultMatrixHTML0.getDefaultEnumerateColNames();
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      
      boolean boolean0 = resultMatrixCSV0.getPrintColNames();
      assertFalse(boolean0);
      assertEquals(5, resultMatrixCSV0.getVisibleColCount());
      
      resultMatrixCSV0.toStringMatrix();
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.8640527485899323
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1110;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.setShowStdDev(true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setShowStdDev(true);
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.toString();
      resultMatrixPlainText0.getDisplayCol(1);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(110, 1110);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.7756889435203655
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      resultMatrixHTML0.getDisplayName();
      String string1 = resultMatrixHTML0.getSummaryTitle(7);
      assertEquals("h", string1);
      
      resultMatrixHTML0.showAverageTipText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "HTML";
      stringArray0[1] = ")";
      stringArray0[2] = "(";
      stringArray0[3] = "h";
      stringArray0[4] = "h";
      stringArray0[5] = "v";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1230);
      resultMatrixCSV0.removeFilterName("v");
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setStdDev(25, (-2137), 0.0);
      assertEquals(1230, resultMatrixCSV0.getVisibleRowCount());
      
      resultMatrixCSV0.showStdDevTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      resultMatrixHTML1.getDefaultEnumerateColNames();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.073291247675771
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1251);
      intArray0[1] = 1515;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 1;
      resultMatrixHTML0.m_RankingLosses = intArray0;
      resultMatrixHTML0.setRemoveFilterName(false);
      int int0 = resultMatrixHTML0.getDefaultStdDevPrec();
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, int0);
      assertEquals(0, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2845658749149194
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = (-1069);
      resultMatrixCSV0.isStdDev((-1069));
      resultMatrixCSV0.m_ShowStdDev = false;
      // Undeclared exception!
      resultMatrixCSV0.setSize(327, 327);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.285358064110829
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.getColOrder();
      resultMatrixGnuPlot0.setSignificanceWidth(0);
      resultMatrixGnuPlot0.m_ColNameWidth = (-2428);
      resultMatrixGnuPlot0.setCountWidth(2456);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.toStringKey();
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML((-59), 668);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.037820580607789
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(5, 97);
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.removeFilterName("-row-name-width <int>");
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.setRowNameWidth(1);
      assertEquals(1, resultMatrixHTML0.getRowNameWidth());
      
      resultMatrixCSV0.getDisplayName();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(4, 97);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*";
      stringArray0[1] = "-row-name-width <int>";
      stringArray0[2] = "-row-name-width <int>";
      stringArray0[3] = "-row-name-width <int>";
      stringArray0[4] = " \\\n";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(16, 0);
      resultMatrixLatex0.m_RankingDiff = intArray0;
      resultMatrixLatex0.clearRanking();
      resultMatrixLatex0.isStdDev((-2390));
      resultMatrixPlainText0.listOptions();
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixPlainText0.isRowName(0);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2439591359392628
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.TIE_STRING = "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n</table>\n";
      resultMatrixHTML0.clearRanking();
      resultMatrixHTML0.getMeanPrec();
      boolean boolean0 = true;
      resultMatrixHTML0.padString("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n</table>\n", 542, true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringSummary();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, (-424));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.289897385509588
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(280, 2);
      resultMatrixHTML0.setColNameWidth(97);
      assertEquals(97, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3862618352374643
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.doubleToString(1098, 10);
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixHTML0.setColNameWidth(1098);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 1098);
      resultMatrixHTML0.setMeanWidth((-2959));
      assertEquals(1098, resultMatrixHTML0.getColNameWidth());
      
      resultMatrixGnuPlot0.clear();
      String string0 = resultMatrixGnuPlot0.toStringKey();
      assertEquals("Key:\n1 col0\n", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.9542177618552268
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2;
      resultMatrixPlainText0.m_RowOrder = intArray0;
      resultMatrixPlainText0.setShowStdDev(false);
      resultMatrixPlainText0.m_CountWidth = 110;
      resultMatrixPlainText0.toStringKey();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.7715228207627742
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.getRowName(2);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      
      String string0 = resultMatrixLatex0.toString();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & col0\\\\\n\\hline\nrow0                                               &     \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.541459350541712
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      String[][] stringArray0 = new String[0][0];
      int int0 = resultMatrixLatex0.getColSize(stringArray0, (-1112));
      assertEquals(0, int0);
      
      boolean boolean0 = resultMatrixLatex0.isMean(4992);
      assertTrue(boolean0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      String string0 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n", string0);
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.WIN_STRING = "$circ$";
      resultMatrixLatex1.setColName(2, "");
      assertEquals(1, resultMatrixLatex1.getRowCount());
      
      resultMatrixSignificance0.setShowStdDev(false);
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3704406083277867
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.setPrintRowNames(false);
      assertFalse(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.7208164601887335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.m_EnumerateRowNames = true;
      resultMatrixCSV0.getStdDevPrec();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 2);
      resultMatrixHTML0.getDefaultRowNameWidth();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[0];
      resultMatrixPlainText0.m_RowNames = stringArray0;
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "Xc}$E=qz";
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixHTML0.getColCount();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3476874612240746
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 747);
      resultMatrixGnuPlot0.globalInfo();
      resultMatrixSignificance0.getColCount();
      resultMatrixGnuPlot0.setColName(5, " ");
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(747, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2289874463186274
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearHeader();
      int[][] intArray0 = new int[4][9];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray1[3] = 0;
      intArray1[4] = 2;
      intArray1[5] = 0;
      intArray1[6] = 1;
      intArray1[7] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 2;
      intArray3[4] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      intArray0[3] = intArray4;
      resultMatrixSignificance0.m_Wins = intArray0;
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.enumerateRowNamesTipText();
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3841374990925095
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      int[][] intArray0 = new int[8][1];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 2;
      intArray1[6] = 1;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 2;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray2[7] = 2;
      intArray2[8] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = 1;
      intArray3[1] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 1;
      intArray4[1] = 1;
      intArray4[2] = 1;
      intArray4[3] = 1;
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 1;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      intArray5[0] = 1;
      intArray5[1] = 2;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 0;
      intArray5[5] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = 2;
      intArray6[1] = 2;
      intArray6[2] = (-1084);
      intArray6[3] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[4];
      intArray7[0] = (-1084);
      intArray7[1] = 3;
      intArray7[2] = 0;
      intArray7[3] = 1;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[1];
      intArray8[0] = 0;
      intArray0[7] = intArray8;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.listOptions();
      resultMatrixLatex0.enumerateRowNamesTipText();
      assertEquals(5, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      
      int int0 = resultMatrixPlainText0.getVisibleColCount();
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3817323364757055
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 1110;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray0[1] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 1;
      resultMatrixHTML0.setStdDevWidth(2);
      assertEquals(2, resultMatrixHTML0.getStdDevWidth());
      
      intArray2[3] = 1;
      intArray2[4] = 26;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setStdDev(0, 2828, 1110);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML1.getDefaultEnumerateColNames();
      boolean boolean0 = resultMatrixCSV0.getPrintColNames();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.396053397439355
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(5, 97);
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.removeFilterName("-row-name-width <int>");
      resultMatrixCSV0.RIGHT_PARENTHESES = "{wPr]`R='a.;!k-";
      String string0 = resultMatrixCSV0.toStringKey();
      assertEquals("Key,\n[1{wPr]`R='a.;!k-,col0\n[2{wPr]`R='a.;!k-,col1\n[3{wPr]`R='a.;!k-,col2\n[4{wPr]`R='a.;!k-,col3\n[5{wPr]`R='a.;!k-,col4\n", string0);
      
      resultMatrixCSV0.setStdDev(5, 97, 5);
      resultMatrixCSV0.showStdDevTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.m_Significance = null;
      resultMatrixHTML0.getDefaultEnumerateColNames();
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      
      resultMatrixCSV0.getPrintColNames();
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(97, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.835559005516396
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(26, 26);
      resultMatrixGnuPlot0.clear();
      int int0 = 0;
      resultMatrixGnuPlot0.setMeanPrec(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 26);
      resultMatrixCSV0.m_ShowStdDev = false;
      resultMatrixCSV0.getOptions();
      int int1 = 0;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize(26, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.674237036454818
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = ",ZXe2\"J@&^52|9bGcU";
      stringArray0[5] = "";
      stringArray0[6] = "";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.886091166478507
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(26, 26);
      resultMatrixGnuPlot0.setShowStdDev(false);
      resultMatrixGnuPlot0.clear();
      int int0 = 0;
      resultMatrixGnuPlot0.setEnumerateColNames(true);
      resultMatrixGnuPlot0.setMeanPrec(0);
      int int1 = 26;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 26);
      resultMatrixCSV0.m_ShowStdDev = false;
      resultMatrixCSV0.getOptions();
      int int2 = 0;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.208676515886898
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[4][0];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-1243);
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 2;
      intArray2[5] = 0;
      intArray2[6] = (-1243);
      intArray2[7] = 1;
      intArray2[8] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      intArray3[1] = 1;
      intArray3[2] = (-1243);
      intArray3[3] = (-1243);
      intArray3[4] = 1;
      intArray3[5] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = 1;
      intArray4[1] = (-1243);
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2128624599274356
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 1;
      intArray4[1] = 1;
      intArray4[2] = 2;
      intArray4[3] = 2;
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 2;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = 2;
      intArray5[1] = 1;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 2;
      intArray5[5] = 2;
      intArray5[6] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 2;
      intArray6[1] = 2;
      intArray6[2] = 2;
      intArray6[3] = 241;
      intArray6[4] = 1;
      intArray6[5] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = 0;
      intArray7[1] = 2;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[1];
      intArray8[0] = 0;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[1];
      intArray9[0] = 241;
      intArray0[8] = intArray9;
      resultMatrixSignificance0.setRanking(intArray0);
      resultMatrixSignificance0.clear();
      resultMatrixSignificance0.m_ShowAverage = false;
      resultMatrixSignificance0.getDefaultShowStdDev();
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2842228217416776
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.assign((ResultMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.885065304082434
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      boolean boolean0 = false;
      resultMatrixSignificance0.setShowAverage(false);
      resultMatrixSignificance0.m_ColNameWidth = 5;
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixSignificance0.toStringMatrix();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(5, 25);
      resultMatrixPlainText0.toStringMatrix();
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.344441234962104
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      resultMatrixCSV0.m_EnumerateRowNames = false;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1;
      resultMatrixCSV0.setPrintColNames(true);
      intArray0[6] = 1413;
      resultMatrixCSV0.setEnumerateRowNames(true);
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.getDefaultColNameWidth();
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4990106660337528
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2126);
      resultMatrixLatex0.LOSS_STRING = " ";
      String[][] stringArray0 = new String[4][0];
      String[] stringArray1 = new String[3];
      stringArray1[0] = " ";
      stringArray1[1] = " ";
      stringArray1[2] = "$circ$";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[1];
      stringArray1[0] = " ";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[7];
      stringArray3[0] = " ";
      stringArray3[1] = " ";
      stringArray3[2] = "(";
      stringArray3[3] = " ";
      stringArray3[4] = "(";
      stringArray3[5] = "!]}?z.{P(%aU";
      stringArray3[6] = ")";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[2];
      resultMatrixLatex0.setEnumerateColNames(true);
      stringArray4[0] = "$circ$";
      stringArray4[1] = " ";
      stringArray0[3] = stringArray4;
      int int0 = resultMatrixLatex0.getColSize(stringArray0, 2126);
      boolean boolean0 = resultMatrixLatex0.isMean(0);
      assertFalse(boolean0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      String string0 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n", string0);
      
      resultMatrixSignificance0.LOSS_STRING = "$circ$";
      resultMatrixLatex0.setColName(1, "(");
      resultMatrixSignificance0.colNameWidthTipText();
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      
      int int1 = resultMatrixLatex0.getDefaultCountWidth();
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(int1 == int0);
      assertEquals(2126, resultMatrixLatex0.getRowCount());
      assertEquals(0, int1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.645022782419662
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.LEFT_PARENTHESES = "Psp8WH(:,}L:.";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3, 0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixSignificance0.removeFilterName("Psp8WH(:,}L:.");
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.listOptions();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.padString("*", 0);
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_ColNameWidth = 0;
      resultMatrixHTML0.setRowNameWidth(0);
      resultMatrixCSV0.getDisplayName();
      resultMatrixSignificance0.toStringRanking();
      resultMatrixHTML0.setEnumerateColNames(false);
      int int0 = resultMatrixHTML0.getDisplayRow(638);
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4473241163627346
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1548, 2);
      resultMatrixLatex0.setSize(1, 1548);
      resultMatrixLatex0.setColName(97, "[");
      assertEquals(1548, resultMatrixLatex0.getVisibleRowCount());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.colNameWidthTipText();
      int int0 = resultMatrixCSV0.getDisplayRow((-421));
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.743105208594095
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[1] = 2;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 2);
      String[] stringArray0 = new String[0];
      resultMatrixGnuPlot0.setOptions(stringArray0);
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.8665264656500815
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setShowStdDev(false);
      int int0 = 110;
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.toString();
      resultMatrixPlainText0.getDisplayCol(578);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      resultMatrixPlainText1.setMeanWidth(1);
      resultMatrixPlainText1.getRowOrder();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(4458, 26);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.192313694045538
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-1295));
      vector0.add(integer0);
      resultMatrixCSV0.m_EnumerateRowNames = true;
      resultMatrixCSV0.m_HeaderKeys = vector0;
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixCSV0.getDefaultEnumerateColNames();
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      
      resultMatrixCSV0.clear();
      String[][] stringArray0 = new String[6][8];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[5];
      stringArray2[0] = " ";
      stringArray2[1] = "$\bullet$";
      stringArray2[2] = "(";
      stringArray2[3] = "$circ$";
      stringArray2[4] = "$circ$";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[1];
      stringArray3[0] = "(";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[3];
      stringArray4[0] = " ";
      stringArray4[1] = "fWJ m$eX{{";
      stringArray4[2] = "$circ$";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[4];
      stringArray5[0] = "fWJ m$eX{{";
      stringArray5[1] = " ";
      stringArray5[2] = "$circ$";
      stringArray5[3] = "fWJ m$eX{{";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[6];
      stringArray6[0] = " ";
      stringArray6[1] = "$circ$";
      stringArray6[2] = "(";
      stringArray6[3] = "(";
      stringArray6[4] = "$\bullet$";
      stringArray6[5] = " ";
      stringArray0[5] = stringArray6;
      int int0 = resultMatrixCSV0.getColSize(stringArray0, 95);
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, int0);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3499924536280767
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = ",ZXe2\"J@&^52|9bGcU";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[2];
      intArray0[0] = 481;
      intArray0[1] = 0;
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.getDefaultColNameWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(17, 17);
      resultMatrixHTML0.getRowOrder();
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(17, resultMatrixHTML0.getVisibleColCount());
      assertEquals(17, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.7383718430240127
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.getDisplayName();
      resultMatrixHTML0.getSummaryTitle(7);
      resultMatrixHTML0.showAverageTipText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "HTML";
      stringArray0[1] = ")";
      stringArray0[2] = ")";
      stringArray0[3] = "h";
      stringArray0[4] = "h";
      stringArray0[5] = "v";
      stringArray0[6] = "h";
      resultMatrixHTML0.setCountWidth(7);
      stringArray0[7] = "*";
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixHTML0.setColNameWidth(97);
      assertEquals(97, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.8226776034735837
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.m_RowNameWidth = 2;
      resultMatrixLatex0.setCountWidth(2140);
      resultMatrixLatex0.m_EnumerateRowNames = true;
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixLatex0.WIN_STRING = null;
      resultMatrixLatex0.getRowName(0);
      resultMatrixLatex0.setRowHidden(1292, true);
      resultMatrixLatex0.toString();
      boolean boolean0 = resultMatrixLatex0.isRowName(0);
      assertEquals(2, resultMatrixLatex0.getRowNameWidth());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3882341328006107
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 1645);
      int int0 = resultMatrixLatex0.getRowNameWidth();
      assertEquals(0, int0);
      assertEquals(1645, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.7603433088014317
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.getDisplayName();
      resultMatrixHTML0.getSummaryTitle(7);
      String[][] stringArray0 = new String[2][3];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "HTML";
      stringArray1[1] = ")";
      stringArray1[2] = "(";
      stringArray1[3] = "h";
      stringArray1[4] = "h";
      stringArray1[5] = "v";
      stringArray1[6] = "h";
      resultMatrixHTML0.setCountWidth(7);
      stringArray1[7] = "*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      resultMatrixHTML0.listOptions();
      stringArray2[0] = " ";
      stringArray2[1] = " ";
      stringArray0[1] = stringArray2;
      resultMatrixHTML0.getColSize(stringArray0, 0, false, false);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.toStringSummary();
      resultMatrixHTML0.listOptions();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.clear();
      assertEquals(7, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.429116304432002
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = 1;
      resultMatrixHTML1.setColOrder(intArray0);
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML1.getDefaultColNameWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertFalse(resultMatrixHTML1.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.17876392094377
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSignificance(46, 46);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.1516363074322267
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[8][5];
      int[] intArray1 = new int[4];
      intArray1[0] = 26;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 0;
      intArray2[1] = 26;
      intArray2[2] = 26;
      intArray2[3] = 2;
      intArray2[4] = 26;
      intArray2[5] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = 2;
      intArray4[1] = 1;
      intArray4[2] = 2;
      intArray4[3] = 1;
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 2;
      intArray5[2] = 1;
      intArray5[3] = 1;
      intArray5[4] = 2;
      intArray5[5] = 26;
      intArray5[6] = 1;
      intArray5[7] = 26;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 0;
      intArray6[1] = 26;
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = 26;
      intArray6[5] = 26;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = 26;
      intArray7[1] = 26;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[3];
      intArray8[0] = 1;
      intArray8[1] = 2;
      intArray8[2] = 1;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }
}
