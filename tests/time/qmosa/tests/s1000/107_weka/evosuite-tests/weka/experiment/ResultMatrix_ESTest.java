/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 14:30:10 GMT 2020
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9083826809913753
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.padString("jOuV$G<]p%zwm!cTjN", 0, true);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 3;
      resultMatrixLatex0.setColOrder(intArray0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.154022527735909
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixGnuPlot0.m_PrintColNames = true;
      resultMatrixGnuPlot0.setPrintColNames(false);
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      resultMatrixCSV0.m_SignificanceWidth = 0;
      resultMatrixCSV0.clear();
      resultMatrixCSV0.getDefaultMeanPrec();
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.removeFilterName("*");
      resultMatrixGnuPlot0.isRowName((-326));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1731027011044644
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      stringArray0[1] = "";
      stringArray0[2] = "v";
      stringArray0[3] = " ";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.setMean((-467), 2, 0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8526379562735795
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultEnumerateColNames();
      String[][] stringArray0 = new String[0][0];
      resultMatrixCSV0.m_ShowStdDev = true;
      resultMatrixCSV0.listOptions();
      int int0 = 5018;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getColSize(stringArray0, 5018);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.480400587097626
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance0.toString();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRemoveFilterName(false);
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.setRemoveFilterName(false);
      resultMatrixLatex0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText1.toStringMatrix();
      resultMatrixLatex0.isStdDev(2);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 0);
      resultMatrixGnuPlot0.setSize(88, 0);
      resultMatrixGnuPlot0.printColNamesTipText();
      // Undeclared exception!
      try { 
        resultMatrixPlainText1.getHeader("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3384409950869296
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 1);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 94);
      resultMatrixCSV1.setEnumerateRowNames(false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixCSV1.getOptions();
      resultMatrixGnuPlot0.setSize(110, 26);
      resultMatrixGnuPlot0.getRowNameWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(1, 5);
      // Undeclared exception!
      try { 
        resultMatrixHTML1.doubleToString(0.0, (-2032));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0366807500234874
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = "v";
      stringArray0[2] = "*";
      stringArray0[3] = ")";
      int[][] intArray0 = new int[8][2];
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.isMean(40);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.toStringKey();
      resultMatrixLatex0.setColName((-1729), "v");
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.colNameWidthTipText();
      resultMatrixLatex0.rowNameWidthTipText();
      resultMatrixLatex0.toStringKey();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9274829883654556
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(13, 13);
      resultMatrixCSV0.listOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixCSV0.setEnumerateRowNames(false);
      resultMatrixCSV0.getColNameWidth();
      resultMatrixGnuPlot0.getSignificance(97, 13);
      resultMatrixGnuPlot1.setSize(2, 0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.881362330045392
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.showAverageTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(97, 1);
      resultMatrixHTML1.setCountWidth(1);
      resultMatrixHTML1.listOptions();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      resultMatrixGnuPlot0.setSize(2, 2);
      resultMatrixGnuPlot0.getRowNameWidth();
      resultMatrixHTML1.listOptions();
      resultMatrixGnuPlot0.setOptions(stringArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2116, 2);
      // Undeclared exception!
      resultMatrixLatex0.toStringMatrix();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.539353814743901
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[1] = 1110;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      String[] stringArray0 = new String[0];
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getShowStdDev();
      resultMatrixGnuPlot0.getDisplayCol(1110);
      int int0 = resultMatrixGnuPlot0.getVisibleRowCount();
      assertEquals(1, int0);
      
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixGnuPlot0.toStringRanking();
      resultMatrixGnuPlot0.setColOrder(intArray2);
      resultMatrixGnuPlot0.globalInfo();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 489);
      resultMatrixCSV0.toStringRanking();
      resultMatrixGnuPlot0.getRowNameWidth();
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.529881130591447
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.globalInfo();
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixGnuPlot0.getShowStdDev();
      resultMatrixGnuPlot0.getDisplayCol(0);
      resultMatrixGnuPlot0.getVisibleRowCount();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.setColOrder((int[]) null);
      resultMatrixGnuPlot0.globalInfo();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 33);
      resultMatrixCSV0.toStringRanking();
      assertEquals(33, resultMatrixCSV0.getRowCount());
      
      resultMatrixGnuPlot1.getRowNameWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.toStringSummary();
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1675461940835694
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      int[] intArray0 = new int[3];
      resultMatrixCSV0.LEFT_PARENTHESES = "";
      intArray0[0] = 1413;
      intArray0[1] = 1;
      intArray0[2] = 1413;
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixCSV0.getOptions();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize((-1892), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0486351134047545
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.globalInfo();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "(";
      resultMatrixGnuPlot0.getRevision();
      stringArray0[2] = "Only outputs the significance indicators. Can be used for spotting patterns.";
      stringArray0[3] = "*";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[1];
      resultMatrixCSV0.setColOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot1);
      resultMatrixCSV1.removeFilterName("sT+");
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setStdDev(0, (-1049), 0);
      resultMatrixCSV0.showStdDevTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      
      resultMatrixSignificance0.enumerateRowNamesTipText();
      resultMatrixCSV1.printColNamesTipText();
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(50, resultMatrixCSV1.getRowNameWidth());
      assertTrue(resultMatrixCSV1.getPrintColNames());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      
      String string0 = resultMatrixGnuPlot0.toStringKey();
      assertEquals("Key:\n1 col0\n", string0);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      
      resultMatrixSignificance0.setShowAverage(false);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.02678610025683
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 13;
      intArray0[3] = 2;
      intArray0[4] = 1;
      resultMatrixPlainText0.m_RankingLosses = intArray0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      boolean boolean0 = resultMatrixCSV0.isRowName(0);
      assertTrue(boolean0);
      
      resultMatrixCSV0.getShowStdDev();
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getShowAverage());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.539353814743901
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getRowCount();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.globalInfo();
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "*";
      stringArray0[2] = "Only outputs the significance indicators. Can be used for spotting patterns.";
      stringArray0[3] = "*";
      stringArray0[4] = "Y@o(^=2`je4h(q";
      stringArray0[5] = "";
      stringArray0[6] = "Only outputs the significance indicators. Can be used for spotting patterns.";
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixGnuPlot0.getShowStdDev();
      int int0 = resultMatrixGnuPlot0.getDisplayCol(1);
      assertEquals((-1), int0);
      
      int int1 = resultMatrixGnuPlot0.getVisibleRowCount();
      assertEquals(1, int1);
      
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixGnuPlot0.toStringRanking();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 50;
      resultMatrixGnuPlot0.setColOrder(intArray0);
      resultMatrixGnuPlot0.globalInfo();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 0);
      resultMatrixCSV0.toStringRanking();
      resultMatrixGnuPlot0.getRowNameWidth();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      int[][] intArray0 = new int[0][6];
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8526379562735795
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getColSize((String[][]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4861071822069993
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1413;
      intArray0[1] = 1;
      intArray0[2] = 1413;
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixCSV0.setEnumerateRowNames(false);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.isStdDev(1);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = " ";
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixLatex0.setStdDevPrec((-435));
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.494778283826402
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.getStdDevPrec();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRemoveFilterName(false);
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.setRemoveFilterName(false);
      resultMatrixLatex0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText1.toStringRanking();
      resultMatrixPlainText1.toStringMatrix();
      resultMatrixLatex0.isStdDev(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.setSize(1, 1);
      resultMatrixGnuPlot0.printColNamesTipText();
      // Undeclared exception!
      try { 
        resultMatrixPlainText1.getHeader("[");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8322602295395347
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray0[1] = intArray1;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.setEnumerateRowNames(false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixPlainText0);
      assertEquals(1, resultMatrixPlainText0.getColCount());
      
      resultMatrixCSV0.getColNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSignificance(2, (-1));
      resultMatrixGnuPlot0.setSize(0, 1);
      resultMatrixGnuPlot0.printColNamesTipText();
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2864120442603477
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[9][0];
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 23;
      intArray3[1] = 0;
      intArray3[2] = 1;
      intArray3[3] = (-632);
      intArray3[4] = 0;
      intArray3[5] = 2;
      intArray3[6] = (-862);
      intArray3[7] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 2;
      intArray4[1] = (-862);
      intArray4[2] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      intArray5[0] = 1;
      intArray5[1] = (-862);
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = (-862);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      intArray6[0] = 2;
      intArray6[1] = 0;
      intArray6[3] = 1;
      intArray6[4] = (-632);
      intArray6[5] = 0;
      intArray6[6] = (-862);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[4];
      intArray7[0] = (-862);
      intArray7[1] = 2;
      intArray7[2] = 0;
      intArray7[3] = (-862);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      intArray8[0] = 23;
      intArray8[1] = 23;
      intArray8[2] = (-862);
      intArray8[3] = (-632);
      intArray8[4] = (-632);
      intArray8[5] = 0;
      intArray8[6] = 2;
      intArray8[7] = (-862);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[8];
      intArray9[0] = (-862);
      intArray9[1] = (-862);
      intArray9[2] = 0;
      intArray9[3] = (-862);
      intArray9[4] = 23;
      intArray9[5] = (-632);
      intArray9[6] = 2;
      intArray9[7] = 3250;
      intArray0[6] = intArray9;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.m_RowNameWidth = 2;
      resultMatrixLatex0.m_EnumerateRowNames = true;
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixLatex0.getRowName(835);
      resultMatrixLatex0.setRowHidden(2, false);
      resultMatrixLatex0.toString();
      resultMatrixLatex0.getDefaultPrintColNames();
      resultMatrixLatex0.getDefaultShowStdDev();
      assertEquals(2, resultMatrixLatex0.getSignificanceWidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.561163519607267
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.LEFT_PARENTHESES = "Psp8WH(:,}L:.";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      Vector<String> vector0 = new Vector<String>();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.setMeanWidth(0);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.toString();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.getStdDevPrec();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixLatex0.isStdDev(0);
      ResultMatrixGnuPlot.main((String[]) null);
      resultMatrixLatex0.setStdDevPrec(1421);
      assertEquals(1421, resultMatrixLatex0.getStdDevPrec());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.518671609412276
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 1413;
      int[][] intArray1 = new int[3][5];
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixCSV0.setEnumerateRowNames(false);
      resultMatrixCSV0.getColNameWidth();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2);
      resultMatrixPlainText0.toStringMatrix();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.isStdDev(2);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Dataset                   (1) col | (2)\n---------------------------------------\nrow0                       (0)    |    \nrow1                       (0)    |    \n---------------------------------------\n                          (v/ /* (0/0/0\n";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7458535301741085
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(26, 26);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.setMeanPrec(0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[][] intArray1 = new int[7][7];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[0];
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      resultMatrixGnuPlot0.m_NonSigWins = intArray1;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      resultMatrixGnuPlot0.getRowName(26);
      resultMatrixGnuPlot0.WIN_STRING = "Q$Q'";
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize(26, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.271260033111007
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.m_RowNameWidth = (-32);
      resultMatrixLatex0.m_EnumerateRowNames = true;
      resultMatrixLatex0.setSignificanceWidth((-32));
      resultMatrixLatex0.getRowName(1);
      resultMatrixLatex0.setRowHidden(1, true);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      
      String string0 = resultMatrixLatex0.toString();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\n(1) row0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(74, 26);
      resultMatrixLatex1.getDefaultPrintColNames();
      assertFalse(resultMatrixLatex1.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex1.getColNameWidth());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1417070364814803
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "]";
      stringArray0[1] = "v";
      stringArray0[2] = " gTwE";
      stringArray0[3] = "]";
      stringArray0[4] = "v";
      stringArray0[5] = " ";
      stringArray0[6] = "[";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      
      resultMatrixCSV0.getRowNameWidth();
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3693801921040074
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setShowStdDev(true);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.setMeanPrec(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 35);
      resultMatrixCSV0.m_ShowStdDev = true;
      resultMatrixCSV0.getOptions();
      int int0 = 0;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize(35, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3114155519107094
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setCountWidth(2);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(2, 110);
      resultMatrixHTML1.listOptions();
      resultMatrixGnuPlot0.setOptions((String[]) null);
      assertFalse(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(44, 44);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML1.m_ColNameWidth = 44;
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 44;
      intArray0[3] = 2554;
      intArray0[4] = 0;
      resultMatrixHTML0.m_RankingDiff = intArray0;
      resultMatrixHTML1.toStringSummary();
      resultMatrixHTML1.WIN_STRING = "QaE]yP;gi";
      resultMatrixHTML1.meanWidthTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText(26, (-1772));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7878762280875957
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.m_RowNameWidth = 2;
      resultMatrixLatex0.setSignificanceWidth((-4067));
      resultMatrixLatex0.getRowName((-1313));
      resultMatrixLatex0.setRowHidden((-1313), false);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      int[][] intArray0 = new int[3][9];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 2107;
      intArray1[2] = 0;
      intArray1[3] = 1615;
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 1615;
      intArray2[1] = 0;
      intArray2[2] = 1615;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = (-4058);
      intArray3[3] = 1615;
      intArray3[4] = 2;
      intArray3[5] = (-1313);
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9004624252731603
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2126);
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      boolean boolean0 = resultMatrixLatex0.isMean(1);
      assertTrue(boolean0);
      assertEquals(0, resultMatrixLatex0.getColCount());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.toStringKey();
      resultMatrixLatex0.setColName(3046, "& multicolumn{4}{c}{");
      resultMatrixSignificance0.colNameWidthTipText();
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      
      resultMatrixLatex0.rowNameWidthTipText();
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2126, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2864120442603477
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 5;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 2;
      resultMatrixLatex0.m_RankingWins = intArray0;
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.m_RowNameWidth = 2;
      resultMatrixLatex0.m_EnumerateRowNames = true;
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixLatex0.WIN_STRING = null;
      resultMatrixLatex0.getRowName((-22));
      resultMatrixLatex0.setRowHidden(1292, true);
      resultMatrixLatex0.toString();
      resultMatrixLatex0.getRowOrder();
      assertEquals(2, resultMatrixLatex0.getSignificanceWidth());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8466796372141983
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[1] = 1110;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(1, 2020);
      // Undeclared exception!
      resultMatrixSignificance1.toStringRanking();
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9288799345939394
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      resultMatrixSignificance0.m_SignificanceWidth = 932;
      intArray0[1] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.getRowOrder();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringRanking();
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[1] = null;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[1];
      intArray2[0] = 932;
      intArray1[3] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 932;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = null;
      intArray1[7] = intArray0;
      intArray1[8] = null;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSummary(intArray1, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.816579439475865
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.m_RowNameWidth = 2;
      resultMatrixLatex0.m_ColNameWidth = 2452;
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixLatex0.getRowName(835);
      resultMatrixLatex0.setRowHidden(2, false);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[5];
      intArray1[0] = 2538;
      intArray1[1] = 1;
      intArray1[2] = 835;
      intArray1[3] = 2;
      intArray1[4] = 2452;
      intArray0[0] = intArray1;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      assertEquals(2, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.044404464687264
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[1] = 1110;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 2;
      intArray3[2] = 1;
      intArray3[3] = 0;
      intArray3[4] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColOrder(intArray1);
      resultMatrixCSV0.removeFilterName("(");
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setStdDev((-622), 0, (-3931.592266));
      resultMatrixCSV0.showStdDevTipText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      // Undeclared exception!
      resultMatrixGnuPlot0.setSize(233, 233);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.048906685163189
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(5, 97);
      int[] intArray0 = new int[1];
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.removeFilterName("/$Ez\"OcGx:");
      resultMatrixCSV0.RIGHT_PARENTHESES = "{wPr]`R='a.;!k-";
      String string0 = resultMatrixCSV0.toStringKey();
      assertEquals("Key,\n[1{wPr]`R='a.;!k-,col0\n[2{wPr]`R='a.;!k-,col1\n[3{wPr]`R='a.;!k-,col2\n[4{wPr]`R='a.;!k-,col3\n[5{wPr]`R='a.;!k-,col4\n", string0);
      
      resultMatrixCSV0.setStdDev(5, 97, 5);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(5, 40);
      String string1 = resultMatrixLatex0.rowNameWidthTipText();
      assertEquals("The maximum width for the row names (0 = optimal).", string1);
      
      resultMatrixLatex0.getDisplayName();
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(40, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.832109705558426
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2126);
      resultMatrixLatex0.LOSS_STRING = "";
      String[][] stringArray0 = new String[4][0];
      String[] stringArray1 = new String[3];
      stringArray1[0] = " ";
      stringArray1[1] = "";
      stringArray1[2] = "$circ$";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[1];
      stringArray2[0] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[7];
      stringArray3[0] = "";
      stringArray3[1] = " ";
      stringArray3[2] = "(";
      stringArray3[3] = " ";
      stringArray3[4] = "(";
      stringArray3[5] = "!]}?z.{P(%aU";
      stringArray3[6] = ")";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[2];
      stringArray4[0] = "$circ$";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setEnumerateRowNames(true);
      resultMatrixCSV0.getColNameWidth();
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
      
      resultMatrixGnuPlot0.getSignificance(4207, 0);
      // Undeclared exception!
      resultMatrixGnuPlot0.setSize(1, 2126);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7430494002109467
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[4] = 0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[][] stringArray0 = new String[12][3];
      String[] stringArray1 = new String[7];
      resultMatrixCSV0.TIE_STRING = "]";
      stringArray1[1] = " ";
      stringArray1[2] = "]";
      stringArray1[3] = "$\bullet$";
      stringArray1[4] = "v";
      stringArray1[5] = ")";
      stringArray1[6] = ")";
      stringArray0[0] = stringArray1;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getColSize(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.026290054272112
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 1);
      resultMatrixLatex0.setSignificanceWidth(2564);
      resultMatrixLatex0.setRowHidden(0, true);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.337419269370699
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixLatex0.getRowName((-3776));
      resultMatrixLatex0.setRowHidden(0, false);
      assertEquals(2, resultMatrixLatex0.getSignificanceWidth());
      
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.toString();
      resultMatrixLatex1.getDefaultPrintColNames();
      String string0 = resultMatrixCSV0.toStringMatrix();
      assertEquals("Dataset,col0\nrow0,''\n'v/ /*',''\n", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.950391601025311
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = (-4107);
      resultMatrixHTML0.showAverageTipText();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(97, 1);
      resultMatrixHTML1.setCountWidth(1);
      resultMatrixHTML1.listOptions();
      String[][] stringArray0 = new String[0][5];
      int int1 = 2891;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.getColSize(stringArray0, 2891, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.214238761894358
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      resultMatrixHTML0.getDisplayName();
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(5, 1);
      resultMatrixGnuPlot0.getSignificance(2, 2);
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.897357129212931
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(26, 26);
      resultMatrixGnuPlot0.setShowStdDev(false);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.setMeanPrec(0);
      assertEquals(0, resultMatrixGnuPlot0.getMeanPrec());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 26);
      resultMatrixCSV0.m_ShowStdDev = false;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixHTML0.setColNameWidth((-1396));
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5467255668990756
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.getColSize((String[][]) null, 0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.33569941435864
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.getDisplayName();
      resultMatrixHTML0.getSummaryTitle(7);
      resultMatrixHTML0.showAverageTipText();
      String[][] stringArray0 = new String[2][3];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "HTML";
      stringArray1[1] = ")";
      stringArray1[2] = "(";
      stringArray1[3] = "h";
      stringArray1[4] = "h";
      stringArray1[5] = "v";
      stringArray1[6] = "h";
      resultMatrixHTML0.setCountWidth(7);
      stringArray1[7] = "*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      resultMatrixHTML0.listOptions();
      stringArray2[0] = " ";
      stringArray2[1] = " ";
      stringArray0[1] = stringArray2;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.getSignificance((-3113), (-2076));
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3670084687075517
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[4] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      String string0 = resultMatrixSignificance0.toString();
      assertEquals("Dataset [1]\n-----------\nrow0       \n", string0);
      
      resultMatrixSignificance0.getStdDevPrec();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      String[][] stringArray0 = new String[1][7];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "v";
      stringArray1[1] = " ";
      stringArray1[2] = " ";
      stringArray1[3] = "]";
      stringArray1[4] = "v";
      stringArray1[5] = "]";
      stringArray1[6] = "*";
      stringArray1[7] = "]";
      stringArray1[8] = "*";
      stringArray0[0] = stringArray1;
      int int0 = resultMatrixLatex0.getColSize(stringArray0, 0);
      assertEquals(1, int0);
      
      boolean boolean0 = resultMatrixLatex0.isMean(0);
      assertFalse(boolean0);
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.toStringKey();
      resultMatrixLatex0.setColName(2, "S*EBgcG*%\u0004A#a");
      resultMatrixSignificance1.colNameWidthTipText();
      resultMatrixLatex0.rowNameWidthTipText();
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.549373555162297
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.getStdDevPrec();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRemoveFilterName(false);
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.setRemoveFilterName(false);
      resultMatrixLatex0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText1.toStringRanking();
      resultMatrixPlainText1.toStringMatrix();
      resultMatrixLatex0.isStdDev(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      stringArray0[1] = "#/K=S~H3Y<jlzuO3l1";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9911896206109247
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 2);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(8, 2);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixSignificance1.removeFilterName("");
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance1.listOptions();
      resultMatrixSignificance1.setEnumerateRowNames(false);
      resultMatrixSignificance0.padString("# ", 32);
      resultMatrixSignificance1.toStringRanking();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixHTML0.setRowNameWidth(2);
      resultMatrixCSV1.getDisplayName();
      resultMatrixSignificance0.toStringRanking();
      resultMatrixHTML0.setEnumerateColNames(false);
      int int0 = resultMatrixHTML0.getDisplayRow(2084);
      assertEquals(2, resultMatrixHTML0.getRowNameWidth());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8588959059829886
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(37, 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 37;
      intArray0[1] = 37;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      resultMatrixCSV1.setColOrder(intArray0);
      resultMatrixCSV0.removeFilterName("col");
      resultMatrixCSV1.toStringKey();
      resultMatrixCSV0.setStdDev(37, (-974), 1);
      resultMatrixCSV0.showStdDevTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixCSV1.assign(resultMatrixHTML0);
      assertEquals(1, resultMatrixCSV1.getRowCount());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9963067983056164
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setShowStdDev(false);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.removeFilterName("@~Mhc+)SB'Sl^M");
      resultMatrixCSV0.setStdDev(3726, 1098, 0);
      resultMatrixCSV0.showStdDevTipText();
      int[][] intArray0 = new int[1][1];
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.824364840923503
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      resultMatrixLatex0.LOSS_STRING = "";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSignificance(0, 0);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.758995095564265
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[1] = 1110;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 2;
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray3[4] = 0;
      intArray3[5] = (-239);
      intArray3[6] = 0;
      intArray3[7] = 1110;
      intArray0[2] = intArray3;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.removeFilterName("");
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setStdDev(0, 712, (-239));
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(717, 527);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.31729276231956
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      resultMatrixSignificance0.m_SignificanceWidth = 932;
      intArray0[1] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.getRowOrder();
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getPrintColNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringRanking();
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[1] = null;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[1];
      intArray2[0] = 932;
      intArray1[3] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 932;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      String string0 = resultMatrixLatex0.toString();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1) col0\\\\\n\\hline\nrow0                      &         \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      
      resultMatrixLatex0.getDefaultPrintColNames();
      assertEquals(5, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      
      resultMatrixPlainText0.getColOrder();
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3845379572897274
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.getStdDevPrec();
      resultMatrixSignificance0.getStdDevPrec();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.toStringRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixCSV0.setEnumerateRowNames(true);
      resultMatrixCSV0.getColNameWidth();
      resultMatrixGnuPlot0.getSignificance(2, 2097);
      resultMatrixGnuPlot0.setSize(803, 10);
      assertEquals(803, resultMatrixGnuPlot0.getVisibleColCount());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1251);
      intArray0[1] = 1515;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 1;
      resultMatrixHTML0.m_RankingLosses = intArray0;
      resultMatrixHTML0.setRemoveFilterName(false);
      int int0 = resultMatrixHTML0.getDefaultStdDevPrec();
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(40, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.549373555162297
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.getStdDevPrec();
      resultMatrixSignificance0.getStdDevPrec();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.setRemoveFilterName(false);
      resultMatrixLatex0.toStringRanking();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText1.toStringMatrix();
      resultMatrixLatex0.isStdDev(2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = "-ranking data not set-";
      stringArray0[2] = "-ranking data not set-";
      stringArray0[3] = ")";
      stringArray0[4] = "k8nF`";
      stringArray0[5] = "R@'";
      stringArray0[6] = "$circ$";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7127291374784415
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.getSignificance(1, 46);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixCSV0.clear();
      resultMatrixGnuPlot0.setSignificance(2, 0, 2110);
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.06938175097516
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toArray();
      String string0 = "";
      // Undeclared exception!
      resultMatrixCSV0.setSize(1376, 97);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = (-1069);
      resultMatrixCSV0.isStdDev((-1069));
      resultMatrixCSV0.m_ShowStdDev = false;
      // Undeclared exception!
      resultMatrixCSV0.setSize(327, 327);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.743535678836661
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.m_RowNameWidth = 2;
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixLatex0.getRowName(659);
      resultMatrixLatex0.setRowHidden((-1313), true);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      assertEquals(2, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.425555003473302
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 2;
      resultMatrixHTML1.clearRanking();
      String[] stringArray0 = new String[9];
      resultMatrixHTML1.clearHeader();
      stringArray0[0] = "(";
      stringArray0[1] = " ";
      stringArray0[2] = "(";
      stringArray0[3] = "(";
      stringArray0[4] = "weka.experiment.ResultMatrixGnuPlot";
      stringArray0[5] = " ";
      stringArray0[6] = ")";
      stringArray0[7] = "v";
      stringArray0[8] = "v";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7284075400342926
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(5, 97);
      assertEquals(97, resultMatrixCSV0.getVisibleRowCount());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixHTML0.setColNameWidth((-903));
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(5, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      
      int int0 = resultMatrixPlainText0.getMeanPrec();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7485462919025654
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.TIE_STRING = "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n</table>\n";
      resultMatrixHTML0.clearRanking();
      resultMatrixHTML0.getMeanPrec();
      boolean boolean0 = true;
      resultMatrixHTML0.padString("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n</table>\n", 542, true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringSummary();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, (-424));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 26);
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[1] = 1110;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 2;
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray3[4] = 0;
      intArray3[5] = (-239);
      intArray3[6] = 0;
      intArray3[7] = 1110;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray4[3] = 0;
      intArray4[4] = 26;
      intArray4[5] = 2;
      intArray4[6] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 0;
      intArray5[1] = 1;
      intArray5[2] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 1;
      intArray6[1] = 2;
      intArray6[2] = 1110;
      intArray6[3] = 2;
      intArray6[4] = 1;
      intArray6[5] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      intArray7[0] = 26;
      intArray7[1] = 97;
      intArray7[2] = 1110;
      intArray7[3] = 1892;
      intArray7[4] = 1110;
      intArray7[5] = (-239);
      intArray7[6] = 2;
      intArray7[7] = 2;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[3];
      intArray8[1] = 1892;
      intArray8[2] = 1;
      intArray0[7] = intArray8;
      resultMatrixHTML0.m_NonSigWins = intArray0;
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixHTML0.setColNameWidth(26);
      assertEquals(26, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.4659353192406694
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.getColOrder();
      resultMatrixGnuPlot0.setSignificanceWidth(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setRowOrder((int[]) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      resultMatrixGnuPlot1.toStringRanking();
      ResultMatrixGnuPlot.main((String[]) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot(1, 1128);
      resultMatrixGnuPlot2.getSignificance(0, 2);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot2.setSize(89, (-1522));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.3448263977261727
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 2);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixSignificance0.setMeanPrec(511);
      resultMatrixCSV0.LOSS_STRING = "<>N";
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixCSV0);
      Vector<String> vector0 = new Vector<String>();
      resultMatrixSignificance1.m_HeaderKeys = vector0;
      resultMatrixCSV0.setMeanWidth(2);
      resultMatrixSignificance0.m_EnumerateColNames = false;
      resultMatrixSignificance1.toStringRanking();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.1536817275549054
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setColNameWidth(0);
      String string0 = resultMatrixCSV0.toStringMatrix();
      assertEquals("Dataset,col0\nrow0,''\n'v/ /*',''\n", string0);
      
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixCSV0.toStringRanking();
      resultMatrixGnuPlot0.getEnumerateRowNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML1.getDefaultEnumerateColNames();
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML();
      resultMatrixHTML0.setColNameWidth(0);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9025538185947704
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 1413;
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.getDefaultColNameWidth();
      resultMatrixCSV0.setEnumerateColNames(true);
      int int0 = resultMatrixCSV0.getSignificanceWidth();
      assertEquals(0, int0);
      
      resultMatrixCSV0.removeFilterNameTipText();
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5349026041643485
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 1413;
      resultMatrixCSV0.setRowOrder(intArray0);
      int[][] intArray1 = new int[3][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      resultMatrixCSV0.m_NonSigWins = intArray1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.299668260750111
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixGnuPlot0.toStringKey();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(97, 1);
      resultMatrixHTML1.setCountWidth(1);
      resultMatrixHTML1.listOptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(";
      stringArray0[1] = " ";
      stringArray0[2] = "*";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getColCount();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.2128189783784378
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = ",ZXe2\"J@&^52|9bGcU";
      stringArray0[5] = "";
      resultMatrixGnuPlot0.WIN_STRING = "Ek>/ cIt";
      stringArray0[6] = "";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.setCountWidth((-1616));
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearHeader();
      int[][] intArray0 = new int[4][9];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray1[3] = 0;
      intArray1[4] = 2;
      intArray1[5] = 0;
      intArray1[6] = 1;
      intArray1[7] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 2;
      intArray3[4] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      intArray0[3] = intArray4;
      resultMatrixSignificance0.m_Wins = intArray0;
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.enumerateRowNamesTipText();
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.0039611610832577
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2126);
      resultMatrixLatex0.LOSS_STRING = "";
      String[][] stringArray0 = new String[4][0];
      String[] stringArray1 = new String[3];
      stringArray1[0] = " ";
      stringArray1[1] = "";
      stringArray1[2] = "$circ$";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[1];
      stringArray2[0] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[7];
      stringArray3[0] = "";
      stringArray3[1] = " ";
      stringArray3[2] = "(";
      stringArray3[3] = " ";
      stringArray3[4] = "(";
      stringArray3[5] = "!]}?z.{P(%aU";
      stringArray3[6] = ")";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[2];
      stringArray4[0] = "$circ$";
      stringArray4[1] = "";
      stringArray0[3] = stringArray4;
      int int0 = resultMatrixLatex0.getColSize(stringArray0, 2126);
      assertEquals(0, int0);
      
      boolean boolean0 = resultMatrixLatex0.isMean(0);
      assertFalse(boolean0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.LOSS_STRING = "$circ$";
      resultMatrixLatex0.setColName(1, "(");
      resultMatrixSignificance0.colNameWidthTipText();
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      
      resultMatrixLatex0.rowNameWidthTipText();
      assertEquals(2126, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.0517008018558625
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray0[1] = intArray1;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[][] stringArray0 = new String[1][8];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      int int0 = resultMatrixLatex0.getColSize(stringArray0, (-21));
      assertEquals(0, int0);
      
      boolean boolean0 = resultMatrixLatex0.isMean((-21));
      assertFalse(boolean0);
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixSignificance0);
      String string0 = resultMatrixSignificance2.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      
      resultMatrixLatex0.setColName(2105, "(");
      resultMatrixSignificance2.colNameWidthTipText();
      assertFalse(resultMatrixSignificance2.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance2.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance2.getMeanPrec());
      assertTrue(resultMatrixSignificance2.getPrintRowNames());
      assertEquals(40, resultMatrixSignificance2.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance2.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance2.getMeanWidth());
      assertEquals(2, resultMatrixSignificance2.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance2.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance2.getCountWidth());
      
      resultMatrixLatex0.rowNameWidthTipText();
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.0814088789070087
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRemoveFilterName(true);
      resultMatrixGnuPlot0.getSignificance(46, 46);
      resultMatrixGnuPlot0.getVisibleColCount();
      assertTrue(resultMatrixGnuPlot0.getRemoveFilterName());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringKey();
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.889292138267767
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      int[][] intArray0 = new int[8][1];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 2;
      intArray1[6] = 1;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 2;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray2[7] = 2;
      intArray2[8] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = 1;
      intArray3[1] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 1;
      intArray4[1] = 1;
      intArray4[2] = 1;
      intArray4[3] = 1;
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 1;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      intArray5[0] = 1;
      intArray5[1] = 2;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 0;
      intArray5[5] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = 2;
      intArray6[1] = 2;
      intArray6[2] = (-1084);
      intArray6[3] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[4];
      intArray7[0] = (-1084);
      intArray7[1] = 3;
      intArray7[2] = 0;
      intArray7[3] = 1;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[1];
      intArray8[0] = 0;
      intArray0[7] = intArray8;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.listOptions();
      resultMatrixLatex0.enumerateRowNamesTipText();
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(5, resultMatrixLatex0.getCountWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      
      int int0 = resultMatrixPlainText0.getVisibleColCount();
      assertEquals(1, int0);
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertFalse(resultMatrixPlainText0.getDefaultShowStdDev());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.8221331284714175
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2126);
      resultMatrixLatex0.LOSS_STRING = "";
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      resultMatrixLatex0.WIN_STRING = "#15P`f|8~gI2GYln%";
      intArray0[1] = 111;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 2126;
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.getSignificance(95, 1);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize((-1939), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.246601712090598
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setShowStdDev(true);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.setMeanPrec(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 35);
      resultMatrixCSV0.m_ShowStdDev = false;
      String[] stringArray0 = new String[0];
      resultMatrixGnuPlot0.setOptions(stringArray0);
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3693801921040074
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setShowStdDev(true);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.setMeanPrec(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 35);
      resultMatrixCSV0.m_ShowStdDev = false;
      resultMatrixCSV0.getOptions();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize(35, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 1;
      doubleArray2[2] = (-685.8);
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (-685.8);
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = (double) 2;
      doubleArray5[4] = (-685.8);
      doubleArray5[5] = (double) 1;
      doubleArray5[6] = (-4010.0);
      doubleArray5[7] = (-685.8);
      doubleArray5[8] = (double) 1;
      doubleArray0[4] = doubleArray5;
      resultMatrixPlainText0.m_Mean = doubleArray0;
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.setShowStdDev(false);
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertFalse(resultMatrixPlainText0.getShowStdDev());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.2794518157267287
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(97, 2);
      String[] stringArray0 = new String[4];
      resultMatrixGnuPlot0.m_StdDevPrec = (-4523);
      resultMatrixHTML0.m_ColNameWidth = 17;
      stringArray0[0] = "*";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = " ";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      int int0 = resultMatrixGnuPlot0.getStdDevWidth();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3384409950869296
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 94);
      resultMatrixCSV1.setEnumerateRowNames(false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixCSV1.getOptions();
      resultMatrixGnuPlot0.setSize(110, 26);
      resultMatrixGnuPlot0.getRowNameWidth();
      resultMatrixCSV0.setEnumerateRowNames(false);
      resultMatrixCSV1.getColNameWidth();
      resultMatrixGnuPlot0.getSignificance((-610), (-1648));
      assertEquals(26, resultMatrixGnuPlot0.getVisibleRowCount());
      
      resultMatrixGnuPlot0.setSize(0, 1);
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.7184804374555256
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 1;
      intArray4[1] = 1;
      intArray4[2] = 2;
      intArray4[3] = 2;
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 2;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = 2;
      intArray5[1] = 1;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 2;
      intArray5[5] = 2;
      intArray5[6] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 2;
      intArray6[1] = 2;
      intArray6[2] = 2;
      intArray6[3] = 241;
      intArray6[4] = 1;
      intArray6[5] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = 0;
      intArray7[1] = 2;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[18];
      intArray8[0] = 0;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[1];
      intArray9[0] = 241;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.7184804374555256
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 1;
      intArray4[1] = 1;
      intArray4[2] = 2;
      intArray4[3] = 2;
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 2;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = 2;
      intArray5[1] = 1;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 2;
      intArray5[5] = 2;
      intArray5[6] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 2;
      intArray6[1] = 2;
      intArray6[2] = 2;
      intArray6[3] = 241;
      intArray6[4] = 1;
      intArray6[5] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = 0;
      intArray7[1] = 2;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[1];
      intArray8[0] = 0;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[1];
      intArray9[0] = 241;
      intArray0[8] = intArray9;
      resultMatrixSignificance0.setRanking(intArray0);
      resultMatrixSignificance0.clear();
      resultMatrixSignificance0.m_ShowAverage = false;
      resultMatrixSignificance0.getDefaultShowStdDev();
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.assign((ResultMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8322602295395347
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1413;
      intArray0[1] = 1;
      resultMatrixCSV0.setEnumerateColNames(true);
      intArray0[2] = 1413;
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixCSV0.setEnumerateRowNames(false);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV1.getColNameWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setRowNameWidth((-131));
      resultMatrixCSV1.getDisplayName();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      
      resultMatrixHTML0.setEnumerateColNames(false);
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.005896287989489
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(5, 97);
      int[] intArray0 = new int[1];
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.removeFilterName("/$Ez\"OcGx:");
      resultMatrixCSV0.RIGHT_PARENTHESES = "{wPr]`R='a.;!k-";
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setStdDev(5, 97, 5);
      String string0 = resultMatrixCSV0.showStdDevTipText();
      assertEquals("Whether to display the standard deviation column.", string0);
      assertEquals(97, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(5, resultMatrixCSV0.getColCount());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.0633435657157673
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setShowStdDev(true);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.setMeanPrec(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 35);
      resultMatrixCSV0.m_ShowStdDev = false;
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV0.getColNameWidth();
      resultMatrixGnuPlot0.getSignificance(47, (-399));
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.setShowAverage(true);
      resultMatrixGnuPlot1.setSize(888, 4);
      resultMatrixGnuPlot0.printColNamesTipText();
      assertEquals(0, resultMatrixGnuPlot0.getMeanPrec());
      
      resultMatrixCSV1.padString("*", 0);
      int int0 = resultMatrixGnuPlot1.getRowNameWidth();
      assertEquals(50, int0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.34852454389262
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixCSV0.setRowOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 94);
      resultMatrixCSV1.setEnumerateRowNames(false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.getColNameWidth();
      resultMatrixLatex0.getRowName(1);
      resultMatrixLatex0.toString();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      boolean boolean0 = resultMatrixLatex1.getDefaultPrintColNames();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8526379562735795
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = ",ZXe2\"J@&^52|9bGcU";
      stringArray0[5] = "";
      stringArray0[6] = "";
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getDisplayRow((-3012));
      assertEquals((-1), int0);
      
      boolean boolean0 = resultMatrixGnuPlot0.getColHidden(1423);
      assertFalse(boolean0);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.1473924506661075
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.LEFT_PARENTHESES = "Psp8WH(:,}L:.";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3, 0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixSignificance0.removeFilterName("Psp8WH(:,}L:.");
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.listOptions();
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.padString("*", 0);
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_ColNameWidth = 0;
      resultMatrixHTML0.setRowNameWidth(0);
      resultMatrixCSV0.getDisplayName();
      resultMatrixSignificance0.toStringRanking();
      resultMatrixHTML0.setEnumerateColNames(false);
      int int0 = resultMatrixHTML0.getDisplayRow(638);
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[1];
      resultMatrixLatex0.padString("\begin{tabular}{cl}\\\n", (-1283), true);
      intArray0[0] = 1;
      resultMatrixLatex0.setColOrder(intArray0);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.0039611610832577
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2126);
      resultMatrixLatex0.LOSS_STRING = "";
      String[][] stringArray0 = new String[4][0];
      String[] stringArray1 = new String[3];
      stringArray1[0] = " ";
      stringArray1[2] = "$circ$";
      resultMatrixLatex0.getColSize(stringArray0, 0);
      boolean boolean0 = resultMatrixLatex0.isMean((-1));
      assertFalse(boolean0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.toStringKey();
      resultMatrixLatex0.setColName(0, " ");
      resultMatrixSignificance0.colNameWidthTipText();
      resultMatrixLatex0.rowNameWidthTipText();
      int int0 = resultMatrixLatex0.getColSize(stringArray0, 1402, false, true);
      assertEquals(0, int0);
      
      resultMatrixSignificance0.getDefaultEnumerateRowNames();
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2126, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.648625546111829
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[2];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      String string0 = resultMatrixCSV0.doubleToString(0, 0);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals("0.", string0);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.2856174955537476
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      
      resultMatrixLatex0.m_RowNameWidth = 2;
      resultMatrixLatex0.m_EnumerateRowNames = true;
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixLatex0.WIN_STRING = null;
      resultMatrixLatex0.getRowName(0);
      resultMatrixLatex0.setRowHidden(1292, true);
      String string0 = resultMatrixLatex0.toString();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\n(1 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.280510198610675
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.getDisplayName();
      resultMatrixHTML0.getSummaryTitle(7);
      resultMatrixHTML0.showAverageTipText();
      String[][] stringArray0 = new String[2][3];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "HTML";
      stringArray1[2] = "(";
      stringArray1[3] = "h";
      stringArray1[4] = "h";
      stringArray1[6] = "h";
      resultMatrixHTML0.setCountWidth(7);
      stringArray1[7] = "*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      resultMatrixHTML0.listOptions();
      stringArray2[0] = " ";
      stringArray2[1] = " ";
      stringArray0[1] = stringArray2;
      resultMatrixHTML0.getColSize(stringArray0, 0, false, false);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.toStringSummary();
      resultMatrixHTML0.listOptions();
      resultMatrixHTML0.getSignificanceCount(3, 1273);
      resultMatrixLatex0.getMean(2119, 3);
      assertEquals(7, resultMatrixHTML0.getCountWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.9963067983056155
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 2);
      String[][] stringArray1 = new String[5][7];
      stringArray1[0] = stringArray0;
      stringArray1[1] = stringArray0;
      stringArray1[2] = stringArray0;
      stringArray1[3] = stringArray0;
      stringArray1[4] = stringArray0;
      resultMatrixHTML0.getColSize(stringArray1, (-2904), true, true);
      resultMatrixHTML0.setColNameWidth(2509);
      resultMatrixGnuPlot0.getSummaryTitle(4);
      resultMatrixGnuPlot0.getColHidden(2);
      resultMatrixHTML0.listOptions();
      resultMatrixHTML0.getDefaultRemoveFilterName();
      assertEquals(2509, resultMatrixHTML0.getColNameWidth());
      
      String string0 = resultMatrixGnuPlot0.getSummaryTitle(2);
      assertEquals("c", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.9458755173797666
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[8];
      stringArray0[4] = "(";
      stringArray0[1] = "v";
      stringArray0[2] = "*";
      stringArray0[3] = ")";
      int[][] intArray0 = new int[8][2];
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(1625, 1);
      resultMatrixHTML1.showAverageTipText();
      resultMatrixHTML1.setCountWidth(1);
      resultMatrixHTML0.listOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      try { 
        resultMatrixGnuPlot0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.3425359764412272
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[9][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 1;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.setCountWidth(1121);
      resultMatrixHTML0.listOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "v";
      stringArray0[1] = ">Xew-`7NC";
      resultMatrixGnuPlot0.setRowNameWidth(1);
      stringArray0[2] = " ";
      stringArray0[3] = "(";
      stringArray0[4] = " ";
      stringArray0[5] = "*";
      stringArray0[6] = "v";
      stringArray0[7] = "*";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      assertFalse(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.658841686907302
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = " ";
      stringArray0[4] = ",ZXe2\"J@&^52|9bGcU";
      stringArray0[5] = "";
      stringArray0[6] = "";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }
}
