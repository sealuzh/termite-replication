/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 15:14:21 GMT 2020
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.AbstractFileLoader;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.estimators.KernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.72939743094511
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource();
      databaseLoader0.setSource(".bsi");
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.numTrueNegatives((-1));
      evaluation0.unweightedMacroFmeasure();
      evaluation0.meanPriorAbsoluteError();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = ".arff";
      stringArray0[2] = " ";
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.trueNegativeRate(1);
      evaluation0.weightedFMeasure();
      normalizedPolyKernel0.setDebug(false);
      evaluation0.numFalseNegatives(16);
      evaluation0.errorRate();
      Random.setNextRandom(1);
      evaluation0.numTruePositives(217);
      evaluation0.incorrect();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (-2524.48);
      doubleArray0[6] = (double) 1;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.839026284198643
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("}cA)&C}F '", 2885);
      Classifier[] classifierArray0 = AbstractClassifier.makeCopies(costSensitiveClassifier0, 2885);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.areaUnderROC(1);
      normalizedPolyKernel0.getRevision();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation2.numTrueNegatives(8);
      try { 
        evaluation2.evaluateModel((Classifier) gaussianProcesses0, instances1, (Object[]) classifierArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.meta.CostSensitiveClassifier cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8173049742513874
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = normalizedPolyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      capabilities0.toSource("}cA)&C}F '", 2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setSource("q(");
      Environment environment0 = new Environment();
      databaseLoader1.setEnvironment(environment0);
      databaseLoader0.resetStructure();
      databaseLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      databaseLoader0.setSource("// Generated with Weka ");
      testInstances0.setNumInstancesRelational(12);
      databaseLoader0.getNextInstance(instances0);
      normalizedPolyKernel0.setDebug(false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(12);
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.falseNegativeRate(1);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      evaluation0.SFSchemeEntropy();
      MockRandom mockRandom0 = new MockRandom(2);
      evaluation0.meanAbsoluteError();
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances0, 2, (java.util.Random) mockRandom0, (Object[]) gaussianProcesses0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9368883075390159
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.clean();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2794, intArray0, (-1690));
      instances0.add((Instance) binarySparseInstance0);
      normalizedPolyKernel0.getRevision();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.069365371805505
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      databaseLoader0.setSource("c\")/Wl+Z<Vl");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      evaluation0.toMatrixString("@relation");
      evaluation0.areaUnderROC(5);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.areaUnderROC(118);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.numTrueNegatives(11);
      evaluation2.SFPriorEntropy();
      evaluation1.toCumulativeMarginDistributionString();
      evaluation1.toSummaryString();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.576593516938441
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("[NbEyCvqV", 59);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AbstractClassifier.makeCopies(additiveRegression0, 2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "                                                           weka.core.Capabilities [NbEyCvqV = new weka.core.Capabilities(this);\n\n\n\n                                                           [NbEyCvqV.setMinimumNumberInstances(1);\n\n";
      stringArray0[1] = "weka/core/Capabilities.props";
      GaussianProcesses.main(stringArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1567.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 300.0;
      doubleArray0[5] = 300.0;
      doubleArray0[6] = 300.0;
      doubleArray0[7] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance((-1774.6208688), doubleArray0);
      try { 
        evaluation0.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1219599235548445
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("}cA)&C}F '", 2885);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2885);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toClassDetailsString((String) null);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.areaUnderROC(1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-3332));
      evaluation0.areaUnderROC((-1));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation4 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader1);
      converterUtils_DataSource0.nextElement(instances1);
      try { 
        evaluation4.evaluateModelOnce(1.7976931348623157E308, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      KernelEstimator kernelEstimator0 = new KernelEstimator(3.141592653589793);
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      int int0 = 2885;
      capabilities0.toSource("}cA)&C}F '", (-1));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      Environment environment0 = new Environment();
      databaseLoader1.setEnvironment(environment0);
      databaseLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      databaseLoader1.setSource("@data");
      testInstances0.setNumInstancesRelational(2885);
      databaseLoader0.getNextInstance(instances0);
      normalizedPolyKernel0.setDebug(false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.849308882322829
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumClasses(18);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities0.disableDependency(capabilities_Capability0);
      testInstances0.setNumInstancesRelational(2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      normalizedPolyKernel0.setDebug(false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(0);
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.priorEntropy();
      evaluation0.falseNegativeRate(38);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      SelectedTag selectedTag0 = sGD0.getLossFunction();
      gaussianProcesses1.setFilterType(selectedTag0);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.SFSchemeEntropy();
      try { 
        evaluation2.evaluationForSingleInstance((Classifier) gaussianProcesses0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9888959448602528
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("}cA)&C}F '", 2885);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2885);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation2 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation2.numFalseNegatives((-1363));
      evaluation3.m_MissingClass = 0.0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[0] = (double) (-1363);
      evaluation2.getRevision();
      capabilities0.getAttributeCapabilities();
      try { 
        evaluation3.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.323016385839208
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC(1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-5583));
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.SFEntropyGain();
      evaluation1.KBInformation();
      evaluation2.numTrueNegatives((-2));
      evaluation1.numTrueNegatives((-1));
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.falseNegativeRate(7);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation2.kappa();
      evaluation2.getClassPriors();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      normalizedPolyKernel0.clean();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Evaluation.makeOptionString((Classifier) null, true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      try { 
        AbstractClassifier.makeCopies((Classifier) null, (-1014));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model classifier set
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.077101574886211
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("[NbEyCvqV", 59);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AbstractClassifier.makeCopies(additiveRegression0, 2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      String[] stringArray0 = new String[2];
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.enableDependency(capabilities_Capability0);
      stringArray0[0] = "                                                           weka.core.Capabilities [NbEyCvqV = new weka.core.Capabilities(this);\n\n\n\n                                                           [NbEyCvqV.setMinimumNumberInstances(1);\n\n";
      capabilities0.toSource("@relation", 1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.numFalseNegatives(2);
      evaluation2.numTrueNegatives(115);
      instances0.spliterator();
      evaluation0.totalCost();
      evaluation2.toSummaryString(true);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.269740143023502
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", 19);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      databaseLoader0.setSource("@data");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.toMatrixString("                   weka.core.Capabilities c\")/Wl+Z<Vl = new weka.core.Capabilities(this);\n\n\n\n                   c\")/Wl+Z<Vl.setMinimumNumberInstances(1);\n\n");
      evaluation0.areaUnderROC((-1732));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      evaluation0.numFalseNegatives((-920));
      evaluation0.areaUnderROC(6);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalseNegatives(112);
      evaluation1.numTrueNegatives(112);
      evaluation0.errorRate();
      evaluation1.kappa();
      evaluation1.weightedTrueNegativeRate();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3114313374732374
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("weka/core/Capabilities.props", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.sizeOfPredictedRegions();
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8173819862890284
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("}cA)&C}F '", 2885);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2885);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation2 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation2.numFalseNegatives((-1363));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1363);
      MockRandom mockRandom0 = new MockRandom((-2550L));
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances1, 0, (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9666774072746953
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      normalizedPolyKernel0.listOptions();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-54);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      databaseLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(108);
      evaluation0.numTrueNegatives((-2103));
      evaluation0.totalCost();
      evaluation0.toSummaryString(false);
      evaluation0.totalCost();
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4572768352813976
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      capabilities0.toSource("weka.core.Capabilities c\")/Wl+Z<Vl = new weka.core.Capabilities(this);\n\n\n\nc\")/Wl+Z<Vl.setMinimumNumberInstances(1);\n\n", 120);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      normalizedPolyKernel0.setDebug(false);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(2);
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.falseNegativeRate(0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        instances0.addAll((Collection<? extends Instance>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5694395699649593
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource(".bsi");
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.numTrueNegatives((-1));
      evaluation0.unweightedMacroFmeasure();
      evaluation0.meanPriorAbsoluteError();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = ".arff";
      stringArray0[2] = " ";
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.trueNegativeRate(1);
      evaluation0.weightedFMeasure();
      evaluation0.avgCost();
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4055012743076603
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      Instances instances1 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource(".bsi", 1);
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@data";
      stringArray0[1] = "setLikelihoodThreshold";
      stringArray0[2] = "@data";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@relation";
      stringArray0[5] = " weka.core.Capabilities .bsi = new weka.core.Capabilities(this);\n\n\n\n .bsi.setMinimumNumberInstances(1);\n\n";
      stringArray0[6] = "@relation";
      GaussianProcesses.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(0);
      normalizedPolyKernel0.getRevision();
      Instances instances2 = testInstances0.generate("@relation");
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.numTrueNegatives(120);
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation1.falseNegativeRate(1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      instances0.addAll((Collection<? extends Instance>) instances1);
      Evaluation.main(stringArray0);
      evaluation1.kappa();
      evaluation0.sizeOfPredictedRegions();
      evaluation1.weightedPrecision();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.195400653773342
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("}cA)&C}F '", 2885);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2885);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation2 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation2.numFalseNegatives((-1363));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation3.trueNegativeRate((-1363));
      evaluation2.totalCost();
      evaluation0.toMatrixString();
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5780264069193701
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumClasses(18);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      capabilities0.toSource("}cA)&C}F '", 2885);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(0);
      evaluation0.numTrueNegatives(63);
      evaluation0.totalCost();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5996592024272063
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      capabilities0.toSource("}cA)&C}F '", 2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      Environment environment0 = new Environment();
      databaseLoader1.setEnvironment(environment0);
      databaseLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      databaseLoader0.setSource("// Generated with Weka ");
      testInstances0.setNumInstancesRelational(12);
      databaseLoader0.getNextInstance(instances0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      databaseLoader2.setSource("setC");
      databaseLoader1.getNextInstance(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.numFalseNegatives(757);
      evaluation0.numTrueNegatives((byte) (-122));
      evaluation0.setDiscardPredictions(false);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3325576781242847
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = normalizedPolyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      capabilities0.toSource("@relation", 92);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      Environment environment0 = new Environment();
      DatabaseLoader databaseLoader2 = new DatabaseLoader();
      databaseLoader2.setEnvironment(environment0);
      databaseLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      databaseLoader1.setSource(" ");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1983444248));
      NormalizedPolyKernel normalizedPolyKernel1 = new NormalizedPolyKernel(instances0, (-1983444248), 92, false);
      normalizedPolyKernel1.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      evaluation1.numTrueNegatives((-1983444248));
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation1.numTrueNegatives(0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.unweightedMacroFmeasure();
      evaluation2.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation2.truePositiveRate(93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8015056284911086
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumClasses(18);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      testInstances0.setNumInstancesRelational(2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      normalizedPolyKernel0.setDebug(false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(0);
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.priorEntropy();
      evaluation0.falseNegativeRate(38);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      SGD sGD0 = new SGD();
      SelectedTag selectedTag0 = sGD0.getLossFunction();
      gaussianProcesses1.setFilterType(selectedTag0);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances0, 2, (java.util.Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8316394468845985
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      capabilities0.toSource("weka.core.Capabilities c\")/Wl+Z<Vl = new weka.core.Capabilities(this);\n\n\n\nc\")/Wl+Z<Vl.setMinimumNumberInstances(1);\n\n", 120);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      normalizedPolyKernel0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives(1);
      try { 
        evaluation1.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) gaussianProcesses0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.771623955677366
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("[NbEyCvqV", 59);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AbstractClassifier.makeCopies(additiveRegression0, 2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource(".bsi");
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      evaluation0.numTrueNegatives(2202);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.meanPriorAbsoluteError();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = ".cost";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@relation";
      Evaluation.main(stringArray0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0352729033086923
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1954653100));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.227200592902789
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      capabilities0.toSource("}cA)&C}F '", 2885);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2885);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation2 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation2.numFalseNegatives((-1363));
      evaluation2.numTrueNegatives((-72));
      evaluation3.unweightedMacroFmeasure();
      evaluation3.coverageOfTestCasesByPredictedRegions();
      evaluation1.numFalseNegatives(76);
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "vcw");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5251186204692913
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costMatrix0.normalize();
      evaluation0.areaUnderPRC((-1983444248));
      capabilities0.toSource("ZE,U", 2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.GaussianProcesses:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -L <double>
         // \tLevel of Gaussian Noise wrt transformed target. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5996592024272063
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("UQ", 9);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-118);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      databaseLoader0.setSource("setC");
      databaseLoader0.getNextInstance(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.numFalseNegatives(110);
      evaluation0.numTrueNegatives(2226);
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9710906449455452
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("-split-percentage <percentage>\n", 112);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      capabilities0.toSource("eZuYxx3USXX0/`?", (-2));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(480);
      evaluation0.numTrueNegatives(112);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses1, (Instance) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6296589645301482
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource(".bsi");
      databaseLoader0.getNextInstance((Instances) null);
      evaluation0.toMatrixString("usePairwiseCouplingTipText");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      evaluation0.numTrueNegatives((-2));
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForPredictor(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.205697772011519
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("@data", (-1456206972));
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      capabilities0.toSource("@relation", 2);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.numFalseNegatives((-338));
      double double0 = new Float((double) 1);
      ArffLoader arffLoader0 = new ArffLoader();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7596848249279362
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      capabilities0.toSource("}cA)&C}F '", 2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      Environment environment0 = new Environment();
      databaseLoader1.setEnvironment(environment0);
      databaseLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      databaseLoader0.setSource("// Generated with Weka ");
      testInstances0.setNumInstancesRelational(12);
      databaseLoader0.getNextInstance(instances0);
      normalizedPolyKernel0.setDebug(false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.errorRate();
      MockRandom mockRandom0 = new MockRandom((-2));
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7045514452672972
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.areaUnderPRC(1);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.precision(1);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9049064184622742
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource(".bsi");
      databaseLoader0.getNextInstance(instances0);
      costSensitiveClassifier0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCostMatrix();
      double double0 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.correct();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.441660565330434
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.clean();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2794, intArray0, (-1690));
      normalizedPolyKernel0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      ArffLoader arffLoader1 = new ArffLoader();
      evaluation0.falseNegativeRate((-1656));
      evaluation1.matthewsCorrelationCoefficient(102);
      evaluation1.SFMeanEntropyGain();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1454.277091996325);
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = 0.0;
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8284657726734082
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.fMeasure(1);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.clean();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArffLoader arffLoader0 = new ArffLoader();
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2794, intArray0, (-1690));
      normalizedPolyKernel0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader1 = new ArffLoader();
      evaluation0.matthewsCorrelationCoefficient(102);
      evaluation0.SFMeanEntropyGain();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_KkuYxjt";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff.gz";
      stringArray0[3] = ".arff.gz";
      stringArray0[4] = ".arff.gz";
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      int int0 = (-2);
      evaluation0.numFalseNegatives(102);
      CostMatrix costMatrix0 = new CostMatrix(2794);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.824397224076639
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SystemInUtil.addInputLine("costMatrixTipText");
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("costMatrixTipText", 2);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 65);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource("SG\"Qs)PL");
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.getCostMatrix();
      double double0 = evaluation0.numTrueNegatives(2);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.777750714739128
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      capabilities0.toSource("weka.core.Capabilities c\")/Wl+Z<Vl = new weka.core.Capabilities(this);\n\n\n\nc\")/Wl+Z<Vl.setMinimumNumberInstances(1);\n\n", 120);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      gaussianProcesses0.setKernel(normalizedPolyKernel0);
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      normalizedPolyKernel0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1182;
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9164408049003612
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-206797271));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.areaUnderROC((byte)74);
      Evaluation evaluation2 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation1.numFalseNegatives((-206797271));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      try { 
        evaluation2.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2105169459429996
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      capabilities0.toSource("}cA)&C}F '", 2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      Environment environment0 = new Environment();
      databaseLoader1.setEnvironment(environment0);
      databaseLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      databaseLoader0.setSource("// Generated with Weka ");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1983444248));
      normalizedPolyKernel0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      double double0 = evaluation0.numTrueNegatives((-1983444248));
      assertEquals(0.0, double0, 0.01);
      
      ArffLoader arffLoader0 = new ArffLoader();
      double double1 = evaluation0.falseNegativeRate((-80));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0101953097959013
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      String string0 = capabilities0.toSource("}cA)&C}F '", 2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".arff";
      stringArray0[2] = string0;
      stringArray0[3] = " ";
      GaussianProcesses.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2178);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string1 = evaluation1.toClassDetailsString("weka.core.neighboursearch.TreePerformanceStats");
      assertEquals("weka.core.neighboursearch.TreePerformanceStats\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string1);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.areaUnderROC(1691);
      Evaluation evaluation3 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation4 = new Evaluation(instances1);
      evaluation2.numFalseNegatives((-4835));
      evaluation4.areaUnderROC(6);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation5 = new Evaluation(instances0);
      evaluation4.numFalseNegatives((-2));
      evaluation2.numTrueNegatives(18);
      assertEquals(Double.NaN, evaluation2.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4582044327855743
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.clean();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArffLoader arffLoader0 = new ArffLoader();
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2794, intArray0, (-1690));
      normalizedPolyKernel0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader1 = new ArffLoader();
      evaluation0.matthewsCorrelationCoefficient(102);
      evaluation0.SFMeanEntropyGain();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_KkuYxjt";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff.gz";
      stringArray0[3] = ".arff.gz";
      stringArray0[4] = ".arff.gz";
      stringArray0[5] = ".bsi";
      stringArray0[6] = ".arff";
      evaluation0.KBInformation();
      stringArray0[7] = ".bsi";
      Evaluation.main(stringArray0);
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) ".bsi";
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) "8034";
      objectArray0[3] = (Object) normalizedPolyKernel0;
      objectArray0[4] = (Object) normalizedPolyKernel0;
      objectArray0[5] = (Object) ".bsi";
      try { 
        evaluation0.crossValidateModel(classifier0, instances0, (-2077), (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9335736267098784
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.areaUnderROC(543);
      Evaluation evaluation2 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation1.numFalseNegatives((-3339));
      evaluation3.numTrueNegatives(46);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation1.updateStatsForPredictor((-584.0486598), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5292482930376912
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      capabilities0.toSource("}cA)&C}F '", 2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      Environment environment0 = new Environment();
      databaseLoader1.setEnvironment(environment0);
      databaseLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      databaseLoader0.setSource("// Generated with Weka ");
      testInstances0.setNumInstancesRelational(12);
      databaseLoader0.getNextInstance(instances0);
      normalizedPolyKernel0.setDebug(false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.errorRate();
      MockRandom mockRandom0 = new MockRandom((-2));
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.3;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) 2885;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 12;
      doubleArray1[7] = 1.7976931348623157E308;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.3;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) 2885;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) 12;
      doubleArray5[3] = (double) 12;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = Double.NaN;
      doubleArray7[1] = (double) 2885;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 1.7976931348623157E308;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = (double) 0;
      doubleArray7[6] = (double) 1;
      doubleArray7[7] = 1.7976931348623157E308;
      doubleArray7[8] = (double) 2885;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = Double.NaN;
      doubleArray8[1] = 1.7976931348623157E308;
      doubleArray8[2] = (double) 2;
      doubleArray8[3] = (double) 1;
      doubleArray8[4] = (double) 2;
      doubleArray8[5] = (double) 2885;
      doubleArray8[6] = (double) 0;
      doubleArray8[7] = (double) (-1);
      doubleArray8[8] = (double) 0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = 300.0;
      doubleArray9[1] = (double) 0;
      doubleArray9[2] = (double) 12;
      doubleArray9[3] = (double) 2885;
      doubleArray9[4] = (double) (-1);
      doubleArray9[5] = (double) 2885;
      doubleArray9[6] = 1.7976931348623157E308;
      doubleArray0[8] = doubleArray9;
      gaussianProcesses0.m_L = doubleArray0;
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8513131063793105
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives((-2));
      double double1 = evaluation0.numTrueNegatives(2);
      assertEquals(double1, double0, 0.01);
      
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      double double2 = evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.pctCorrect();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3760552852604169
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = normalizedPolyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      int int0 = 2885;
      capabilities0.toSource("}cA)&C}F '", 2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setSource("q(");
      Environment environment0 = new Environment();
      databaseLoader1.setEnvironment(environment0);
      databaseLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      C45Loader c45Loader0 = new C45Loader();
      AbstractFileLoader.runFileLoader(c45Loader0, testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.SFEntropyGain();
      C45Loader c45Loader1 = new C45Loader();
      try { 
        c45Loader1.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.143994296996684
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", 19);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      databaseLoader0.setSource("@data");
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.toMatrixString("                   weka.core.Capabilities c\")/Wl+Z<Vl = new weka.core.Capabilities(this);\n\n\n\n                   c\")/Wl+Z<Vl.setMinimumNumberInstances(1);\n\n");
      evaluation0.areaUnderROC((-1732));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      evaluation0.numFalseNegatives((-920));
      evaluation0.areaUnderROC(6);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader2.setDirectory(file0);
      textDirectoryLoader2.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numTrueNegatives((-1732));
      evaluation0.numFalsePositives((-1));
      evaluation1.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation1.precision((-100));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -100
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4844496430362217
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.clean();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2794, intArray0, (-1690));
      normalizedPolyKernel0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      ArffLoader arffLoader1 = new ArffLoader();
      double double0 = evaluation0.falseNegativeRate((-1656));
      evaluation1.areaUnderROC(24);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.numFalseNegatives((-1994981129));
      evaluation2.areaUnderROC(2794);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader3 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      Evaluation evaluation3 = new Evaluation(instances0);
      double double1 = evaluation0.numFalseNegatives(2794);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation2.numTrueNegatives(118);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.errorRate();
      double double4 = evaluation3.kappa();
      assertEquals(1.0, double4, 0.01);
      
      double double5 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = evaluation2.KBRelativeInformation();
      assertEquals(double6, double3, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.351080823422605
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.clean();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArffLoader arffLoader0 = new ArffLoader();
      int[] intArray0 = new int[2];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2794, intArray0, (-1690));
      normalizedPolyKernel0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader1 = new ArffLoader();
      evaluation0.matthewsCorrelationCoefficient(102);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_KkuYxjt";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff.gz";
      stringArray0[3] = ".arff.gz";
      stringArray0[4] = ".arff.gz";
      stringArray0[5] = ".bsi";
      stringArray0[6] = ".arff";
      evaluation0.KBInformation();
      stringArray0[7] = ".bsi";
      Evaluation.main(stringArray0);
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ".bsi";
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) "8034";
      objectArray0[3] = (Object) normalizedPolyKernel0;
      objectArray0[4] = (Object) normalizedPolyKernel0;
      objectArray0[5] = (Object) ".bsi";
      try { 
        evaluation0.crossValidateModel(classifier0, instances0, 102, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8302774930422285
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(15);
      evaluation0.m_NumTrainClassVals = (-1);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5934242371738903
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.clean();
      SMOreg sMOreg0 = new SMOreg();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.toSource(".arff", 1232);
      int int0 = 217;
      AbstractClassifier.makeCopies(sMOreg0, 210);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource("k[25Z6^ pgQ7");
      evaluation0.toMatrixString("rz9\"j~");
      evaluation0.areaUnderROC(0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.3229228125749404
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
          Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
          TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
          Instances instances0 = testInstances0.generate();
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
          FileSystemHandling.appendStringToFile(evoSuiteFile0, " ");
          normalizedPolyKernel0.clean();
          CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
          costSensitiveClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
          capabilities0.toSource("}cA)&C}F '", 2885);
          AbstractClassifier.makeCopies(costSensitiveClassifier0, 2885);
          GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
          EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
          byte[] byteArray0 = new byte[0];
          FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
          GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
          Evaluation evaluation0 = new Evaluation(instances0);
          evaluation0.areaUnderROC(2);
          Evaluation evaluation1 = new Evaluation(instances0);
          Integer integer0 = new Integer((-2));
          Evaluation evaluation2 = new Evaluation(instances0);
          InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
          Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
          Evaluation evaluation3 = new Evaluation(instances1);
          evaluation2.numFalseNegatives((-1358));
          double double0 = evaluation2.numTrueNegatives((-1358));
          assertEquals(0.0, double0, 0.01);
          
          double double1 = evaluation2.m_WithClass;
          evaluation0.falseNegativeRate(1);
          Evaluation.main(testInstances0.DEFAULT_WORDS);
          double double2 = evaluation0.kappa();
          assertEquals(1.0, double2, 0.01);
          
          double double3 = evaluation2.numFalsePositives(1);
          assertNotEquals(double3, double2, 0.01);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2283103521608822
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\"/Wl+Z<Vl", (-2));
      capabilities0.getClassCapabilities();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource(".bsi");
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      evaluation0.falseNegativeRate((-2985));
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.060678131692832
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("}cA)&C}F '", 2885);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2885);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(0);
      evaluation0.numTrueNegatives(63);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation1.updateStatsForClassifier((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.0657956616900046
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " ");
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setOptions(testInstances0.DEFAULT_WORDS);
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2885);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      Integer integer0 = new Integer((-2));
      Evaluation evaluation2 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation2.numFalseNegatives((-1363));
      evaluation2.numTrueNegatives((-1363));
      evaluation2.trueNegativeRate((-1));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation2.updateStatsForPredictor(2, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3114313374732376
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource(".arff", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 372);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource("weka/core/Capabilities.props");
      testInstances0.setNumInstancesRelational(28);
      databaseLoader0.getNextInstance(instances0);
      normalizedPolyKernel0.setDebug(false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9710906449455452
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("setOptions", (-2));
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      OneR oneR0 = new OneR();
      Capabilities capabilities1 = oneR0.getCapabilities();
      capabilities1.toSource(" ", 1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-980));
      evaluation0.numTrueNegatives(2);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderPRC();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9710906449455452
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      SystemInUtil.addInputLine("weka/core/Capabilities.props");
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource(".bsi", (-1));
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      capabilities0.toSource("^*t\"=p=}WU", (-2));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives(112);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      int int0 = (-2271);
      arffLoader0.setRetrieval((-2271));
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.weightedAreaUnderPRC();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-366), true, true);
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = Evaluation.makeOptionString(logitBoost0, true);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String string1 = capabilities0.toSource(string0, 2);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      capabilities0.toSource((String) null, 1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-366);
      doubleArray0[2] = (double) 1;
      String[] stringArray0 = new String[8];
      stringArray0[0] = string1;
      stringArray0[1] = " weka.core.Capabilities null = new weka.core.Capabilities(this);\n\n null.enable(weka.core.Capabilities.Capability.NOMINAL_ATTRIBUTES);\n null.enable(weka.core.Capabilities.Capability.NUMERIC_ATTRIBUTES);\n null.enable(weka.core.Capabilities.Capability.DATE_ATTRIBUTES);\n null.enable(weka.core.Capabilities.Capability.MISSING_VALUES);\n null.enable(weka.core.Capabilities.Capability.NOMINAL_CLASS);\n null.enable(weka.core.Capabilities.Capability.MISSING_CLASS_VALUES);\n\n\n null.setMinimumNumberInstances(1);\n\n";
      stringArray0[2] = null;
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[5] = string0;
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = string1;
      try { 
        gaussianProcesses0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.326257174557899
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("[NbEyCvqV", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource(".bsi");
      databaseLoader0.getNextInstance((Instances) null);
      evaluation0.toMatrixString("setC");
      evaluation0.areaUnderROC((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9476162651726858
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-811));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(0);
      evaluation0.numTrueNegatives((-1658));
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation2.updateStatsForClassifier((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9512595041439562
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.clean();
      SMOreg sMOreg0 = new SMOreg();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.areaUnderPRC(1);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2794, intArray0, (-1690));
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, binarySparseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3114313374732374
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("[NbEyCvqV", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.pctUnclassified();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.649248354870898
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("weka/core/Capabilities.props", (-2));
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 217);
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      normalizedPolyKernel0.clean();
      SMOreg sMOreg0 = new SMOreg();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ArffLoader arffLoader0 = new ArffLoader();
      int int0 = 2794;
      evaluation0.areaUnderPRC(1);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC(113);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"GHA@!WV*5";
      try { 
        Evaluation.evaluateModel("\"GHA@!WV*5", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name \"GHA@!WV*5.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5780264069193701
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      capabilities0.toSource((String) null, 1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-109));
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.numFalseNegatives(1);
      double double1 = evaluation1.numTrueNegatives(2);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.560402761177371
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      capabilities0.toSource("c\")/Wl+Z<Vl", (-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      capabilities0.toSource("weka.core.Capabilities c\")/Wl+Z<Vl = new weka.core.Capabilities(this);\n\n\n\nc\")/Wl+Z<Vl.setMinimumNumberInstances(1);\n\n", 2);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      capabilities0.toSource("kaQ'c2g}ffS1UlJb", 101);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances0);
      double double1 = evaluation3.numFalseNegatives((-2));
      double double2 = evaluation0.numTrueNegatives(1);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1761856615603072
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      normalizedPolyKernel0.clean();
      SMOreg sMOreg0 = new SMOreg();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      ArffLoader arffLoader0 = new ArffLoader();
      evaluation0.areaUnderPRC(1);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2794, intArray0, (-1690));
      evaluation0.numTrueNegatives(18);
      evaluation0.areaUnderROC(6);
      evaluation0.trueNegativeRate(122);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5813632638474333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      capabilities0.toSource("}cA)&C}F '", 2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      databaseLoader0.setSource("// Generated with Weka ");
      testInstances0.setNumInstancesRelational(12);
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(15);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5813632638474333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.getCapabilities();
      normalizedPolyKernel0.clean();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8733572325792056
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      capabilities0.toSource("}cA)&C}F '", 2885);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      Environment environment0 = new Environment();
      databaseLoader1.setEnvironment(environment0);
      databaseLoader1.setOptions(testInstances0.DEFAULT_WORDS);
      databaseLoader0.setSource("// Generated with Weka ");
      testInstances0.setNumInstancesRelational(12);
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(2885);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC(117);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(12);
      evaluation2.numTrueNegatives((-2));
      // Undeclared exception!
      try { 
        evaluation2.precision(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.2353177280975793
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities0 = new Capabilities(normalizedPolyKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      normalizedPolyKernel0.clean();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation2 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation3 = null;
      try {
        evaluation3 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1494.841963121488);
      doubleArray0[1] = (-1494.841963121488);
      doubleArray0[2] = (-1494.841963121488);
      doubleArray0[4] = 2516.929;
      doubleArray0[4] = (-1494.841963121488);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1494.841963121488), doubleArray0);
      binarySparseInstance0.dataset();
      SGD sGD0 = new SGD();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "p9";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "Wx$QRLN)uF=bzuT";
      stringArray0[5] = "Wx$QRLN)uF=bzuT";
      stringArray0[6] = ",{U";
      stringArray0[7] = "@data";
      try { 
        Evaluation.evaluateModel((Classifier) sGD0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-366), false, false);
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = Evaluation.makeOptionString(logitBoost0, false);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      simpleLogistic0.getCapabilities();
      capabilities0.toSource(string0, (-366));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setSource("#Q5c:U1V1J6");
      C45Loader c45Loader0 = new C45Loader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      // Undeclared exception!
      try { 
        ConverterUtils.DataSource.read("#Q5c:U1V1J6");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string0 = Evaluation.makeOptionString(gaussianProcesses0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("KK0}TWEv", (-922));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = (-978);
      Evaluation.handleCostOption((String) null, (-978));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P.>in";
      stringArray0[1] = null;
      try { 
        Evaluation.evaluateModel((String) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.6615632381579821
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(randomTree0);
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) additiveRegression0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AdditiveRegression:
         // 
         // -S
         // \tSpecify shrinkage rate. (default = 1.0, ie. no shrinkage)
         // 
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.RandomTree:
         // 
         // -K <number of attributes>
         // \tNumber of attributes to randomly investigate
         // \t(<0 = int(log_2(#attributes)+1)).
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // -S <num>
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the tree, 0 for unlimited.
         // \t(default 0)
         // -N <num>
         // \tNumber of folds for backfitting (default 0, no backfitting).
         // -U
         // \tAllow unclassified instances.
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(31, false, true);
      try { 
        Evaluation.handleCostOption("[Mx", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("[Mx", 31);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",{U";
      stringArray0[1] = "qSNTZ";
      int[] intArray0 = new int[8];
      intArray0[0] = 14;
      intArray0[1] = (-2194);
      intArray0[2] = 1005;
      intArray0[3] = 0;
      intArray0[4] = 640;
      intArray0[5] = 2925;
      intArray0[6] = 1199;
      intArray0[7] = (-1842177144);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, intArray0, 1199);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.dataset();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      try { 
        Evaluation.evaluateModel("", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
