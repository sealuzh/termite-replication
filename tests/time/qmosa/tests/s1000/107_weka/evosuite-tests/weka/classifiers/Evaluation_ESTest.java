/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:32:26 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.clusterers.EM;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.kdtrees.KMeansInpiredMethod;
import weka.core.neighboursearch.kdtrees.MidPointOfWidestDimension;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3899111208170685
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      naiveBayesUpdateable0.getCapabilities();
      naiveBayesUpdateable0.setDebug(true);
      Evaluation.makeOptionString(naiveBayesUpdateable0, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedAreaUnderPRC();
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      charArray0[1] = '6';
      charArray0[2] = 'J';
      charArray0[3] = '2';
      String string1 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string1);
      
      charArray0[4] = '\\';
      charArray0[5] = ']';
      String string2 = evaluation0.num2ShortID(19, charArray0, 19);
      assertEquals("                 J6", string2);
      
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalsePositiveRate();
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3734060446742618
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      naiveBayesUpdateable0.getCapabilities();
      naiveBayesUpdateable0.listOptions();
      naiveBayesUpdateable0.setDebug(true);
      Evaluation.makeOptionString(naiveBayesUpdateable0, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedAreaUnderPRC();
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = '6';
      charArray0[2] = 'J';
      charArray0[3] = '2';
      charArray0[4] = '\\';
      Evaluation evaluation1 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation1.m_PriorEstimator = univariateKernelEstimator0;
      evaluation0.recall(963);
      evaluation1.falseNegativeRate((-2053));
      double double1 = evaluation0.trueNegativeRate((-2053));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.665321523159016
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-19);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "maxBoostingIteraionsTipText");
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalString((byte)33);
      Instances instances0 = testInstances0.generate("M .2v~ZKlaPUw");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)9;
      doubleArray0[1] = (double) (-1);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.kappa();
      evaluation0.addNumericTrainClass((-1), (byte) (-19));
      evaluation0.totalCost();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedTruePositiveRate();
      evaluation0.SFMeanSchemeEntropy();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)33;
      intArray0[1] = (int) (byte)33;
      intArray0[2] = (int) (byte) (-19);
      intArray0[3] = (int) (byte)37;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (int) (byte)44;
      SparseInstance sparseInstance0 = new SparseInstance((-739.7153582211565), doubleArray0, intArray0, (byte) (-19));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.updateStatsForPredictor((-2720.321523802273), sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.171107934481571
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KDTree kDTree0 = new KDTree();
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      kDTree0.setNodeSplitter(kMeansInpiredMethod0);
      MockRandom mockRandom0 = new MockRandom(2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalString((byte)110);
      Instances instances0 = testInstances0.generate("getMinWordFrequency");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockFile mockFile0 = new MockFile("@data", ".arff");
      KDTree kDTree0 = new KDTree((Instances) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(false);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = 'A';
      charArray0[2] = '6';
      charArray0[3] = '\\';
      charArray0[4] = ']';
      charArray0[5] = 'J';
      charArray0[7] = '\\';
      charArray0[7] = 'Y';
      charArray0[8] = '6';
      String string0 = evaluation0.num2ShortID(37, charArray0, 0);
      assertEquals("", string0);
      
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numInstances();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.445016927730797
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockFile mockFile0 = new MockFile("@data", ".arff");
      textDirectoryLoader0.getRevision();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.setDebug(false);
      NaiveBayes naiveBayes1 = new NaiveBayes();
      Evaluation.makeOptionString(naiveBayes1, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '3';
      String string0 = evaluation0.num2ShortID(16, charArray0, 16);
      assertEquals("            2232", string0);
      
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.549521821245012
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      naiveBayesUpdateable0.setDebug(true);
      Evaluation.makeOptionString(naiveBayesUpdateable0, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EM eM0 = new EM();
      Capabilities capabilities0 = eM0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("M .2v~ZKlaPUw");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      String string0 = "<bL:oZW@jF]";
      MockFile mockFile0 = new MockFile("@data", ".arff");
      KDTree kDTree0 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = null;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.145911432752059
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockFile mockFile0 = new MockFile("@data", ".arff");
      KDTree kDTree0 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      kDTree0.globalInfo();
      evaluation0.toMatrixString("<bL:oZW@jF]");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.falseNegativeRate(1802);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1802;
      doubleArray0[1] = (double) 3927;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1802;
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, 1.7976931348623157E308);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 450750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("M .2v~ZKlaPUw");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      try { 
        evaluation0.updateStatsForPredictor(3.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.62718925967838
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalString((byte)0);
      Instances instances0 = testInstances0.generate("M .2v~ZKlaPUw");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)9;
      doubleArray0[1] = (double) (-1);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.SFSchemeEntropy();
      evaluation0.addNumericTrainClass((-1), (byte) (-19));
      evaluation0.totalCost();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedTruePositiveRate();
      evaluation0.SFMeanSchemeEntropy();
      int[] intArray0 = new int[7];
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-19);
      intArray0[3] = (int) (byte)9;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (int) (byte)44;
      SparseInstance sparseInstance0 = new SparseInstance((-739.7153582211565), doubleArray0, intArray0, (byte) (-19));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.updateStatsForPredictor((-2720.321523802273), sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1012448189540684
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "? \"iV:TD");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder(evoSuiteFile1);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("getNumBoostingIterations");
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 12;
      intArray0[4] = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemInUtil.addInputLine("The number of neighbours to use.");
      SparseInstance sparseInstance0 = new SparseInstance(12);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      sparseInstance1.mergeInstance(sparseInstance0);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.incorrect();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      int int0 = 16;
      int int1 = 10;
      textDirectoryLoader0.getRevision();
      CostMatrix costMatrix0 = new CostMatrix(17);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("M .2v~ZKlaPUw");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)37;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (byte)12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.521243506571064
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      KDTree kDTree0 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      kDTree0.globalInfo();
      evaluation0.m_TotalSizeOfRegions = 2914.56;
      evaluation0.toMatrixString("g");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.falseNegativeRate(90);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.addNumericTrainClass(0.0, (-359.78));
      evaluation0.totalCost();
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3878037538591776
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      KDTree kDTree0 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      kDTree0.globalInfo();
      evaluation0.toMatrixString("Class implementing the KDTree search algorithm for nearest neighbour search.\nThe connection to dataset is only a reference. For the tree structure the indexes are stored in an array. \nBuilding the tree:\nIf a node has <maximal-inst-number> (option -L) instances no further splitting is done. Also if the split would leave one side empty, the branch is not split any further even if the instances in the resulting node are more than <maximal-inst-number> instances.\n**PLEASE NOTE:** The algorithm can not handle missing values, so it is advisable to run ReplaceMissingValues filter if there are any missing values in the dataset.\n\nFor more information see:\n\nJerome H. Friedman, Jon Luis Bentley, Raphael Ari Finkel (1977). An Algorithm for Finding Best Matches in Logarithmic Expected Time. ACM Transactions on Mathematics Software. 3(3):209-226.\n\nAndrew Moore (1991). A tutorial on kd-trees.");
      kDTree0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.falseNegativeRate(0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.addNumericTrainClass(0.0, 0.0);
      evaluation0.getDiscardPredictions();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5080467677759697
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      KDTree kDTree0 = new KDTree(instances0);
      KDTree kDTree1 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      kDTree1.globalInfo();
      evaluation0.toMatrixString("getWeightTrimBeta");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.falseNegativeRate(1);
      double double1 = evaluation1.SFSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.numInstances();
      double double2 = evaluation1.sizeOfPredictedRegions();
      double double3 = evaluation1.rootMeanSquaredError();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4699913100731523
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)9;
      SGDText sGDText0 = new SGDText();
      Evaluation.makeOptionString(sGDText0, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate((byte)33);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numInstances();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.sizeOfPredictedRegions();
      double double4 = evaluation1.m_WithClass;
      double double5 = evaluation0.avgCost();
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5114184053114665
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = 10;
      textDirectoryLoader0.getRevision();
      CostMatrix costMatrix0 = new CostMatrix(17);
      Evaluation.handleCostOption("", 10);
      textDirectoryLoader0.getRevision();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".cost");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setDiscardPredictions(false);
      SparseInstance sparseInstance0 = new SparseInstance(16);
      evaluation0.setNumericPriorsFromBuffer();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      evaluation0.totalCost();
      evaluation0.unweightedMicroFmeasure();
      try { 
        CostMatrix.parseMatlab("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2376830354502575
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      KDTree kDTree0 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      kDTree0.globalInfo();
      evaluation0.toMatrixString("getNumBoostingIterations");
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      intArray0[2] = 2;
      intArray0[3] = 12;
      intArray0[4] = 0;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.m_SumSqrPredicted = 4.9E-324;
      double double0 = evaluation0.falseNegativeRate(1802);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      textDirectoryLoader0.getDirectory();
      int int0 = 12;
      KDTree kDTree0 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      kDTree0.globalInfo();
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      evaluation1.num2ShortID(12, charArray0, 2);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.498845104929732
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("getNumBoostingIterations");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      evaluation1.toMatrixString((String) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation1.falseNegativeRate(0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-2021957220), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7132524152491486
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      naiveBayesUpdateable0.getCapabilities();
      naiveBayesUpdateable0.setDebug(true);
      Evaluation.makeOptionString(naiveBayesUpdateable0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#!3IPb><*");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalString((-2406));
      Instances instances0 = testInstances1.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.addNumericTrainClass((byte)37, 961.04112065);
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.39365710338923
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[0] = 12;
      intArray0[4] = 0;
      SystemInUtil.addInputLine("The number of neighbours to use.");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.KBInformation();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3145277828233923
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-19);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "maxBoostingIterationsTipText");
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalString((byte)33);
      Instances instances0 = testInstances0.generate("M .2v~ZKlaPUw");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      evaluation0.toSummaryString("aries", false);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 3936.990205391);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9489486659250668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("getNumBoostingIterations");
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'D';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      charArray0[6] = 'Q';
      charArray0[7] = 'Q';
      textDirectoryLoader0.getStructure();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2021957220), charArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.39365710338923
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      KDTree kDTree0 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("getNumBoostingIterations");
      int[] intArray0 = new int[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = 0;
      intArray0[1] = 2;
      SystemInUtil.addInputLine((String) null);
      double[] doubleArray0 = new double[1];
      instances0.getRevision();
      doubleArray0[0] = 2383.7192121673;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2383.7192121673);
      double double0 = evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.KBInformation();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.correct();
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9532851011693377
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDirectory();
      KDTree kDTree0 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("getNumBoostingIterations");
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 12;
      intArray0[4] = 0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      evaluation0.num2ShortID(15, charArray0, 725);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2747123862506635
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-46);
      byteArray0[0] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      KDTree kDTree0 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString((String) null, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "useKernelEstimatorTipText");
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      evaluation0.priorEntropy();
      MockRandom mockRandom0 = new MockRandom((-384L));
      mockRandom0.nextGaussian();
      try { 
        evaluation0.crossValidateModel(".bsi", instances0, 2144526088, (String[]) null, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5607695051300583
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Evaluation.makeOptionString(naiveBayesMultinomialText0, false);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation0.weightedTruePositiveRate();
      try { 
        Evaluation.handleCostOption("'u3ZV4fY/^(GbU+", 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      naiveBayes0.setDisplayModelInOldFormat(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".xml");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "lGGo");
      naiveBayes0.setDebug(true);
      try { 
        Evaluation.handleCostOption(".xml", 103);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"lGGo\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.329520499930726
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("M .2v~ZKlaPUw");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2021.3706190150388));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.KBInformation();
      evaluation0.equals(instances0);
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.145911432752059
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockFile mockFile0 = new MockFile("@data", ".arff");
      KDTree kDTree0 = new KDTree(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      kDTree0.globalInfo();
      evaluation0.toMatrixString("<bL:oZW@jF]");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.falseNegativeRate(1802);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1802;
      doubleArray0[1] = (double) 3927;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1802;
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, 1.7976931348623157E308);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 450750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("M .2v~ZKlaPUw");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 14, (byte) (-19));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.210479123819425
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1534), true, true);
      simpleLogistic0.globalInfo();
      simpleLogistic0.getRevision();
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.makeOptionString(multiScheme0, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SystemInUtil.addInputLine("");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2132.8239554402);
      doubleArray0[1] = (double) 16;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (-2132.8239554402);
      doubleArray0[5] = (-2132.8239554402);
      doubleArray0[6] = 1228.0;
      doubleArray0[8] = (double) (-1534);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1654.2956278617));
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'n';
      charArray0[2] = '%';
      charArray0[3] = 'c';
      charArray0[4] = 'Q';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      charArray0[7] = 'M';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1534), charArray0, (-249));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.680209500570168
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KDTree kDTree0 = new KDTree();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      naiveBayesUpdateable0.setDebug(false);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Evaluation.makeOptionString(naiveBayesMultinomialText0, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      evaluation0.weightedTruePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(2, (char[]) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("f1=`0c0d6I{yu");
      KDTree kDTree0 = new KDTree(instances0);
      MidPointOfWidestDimension midPointOfWidestDimension0 = new MidPointOfWidestDimension();
      kDTree0.setNodeSplitter(midPointOfWidestDimension0);
      SystemInUtil.addInputLine("");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2666);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      try { 
        Evaluation.handleCostOption("?UX$q?US]", 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[1];
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      randomSubSpace0.setSeed(2500);
      RandomSubSpace randomSubSpace1 = new RandomSubSpace();
      randomSubSpace0.setSeed(2500);
      randomSubSpace1.getTechnicalInformation();
      try { 
        Evaluation.evaluateModel((Classifier) randomSubSpace0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-978);
      Evaluation.handleCostOption((String) null, (-978));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      String[] stringArray0 = new String[0];
      Instances.main(stringArray0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      KDTree kDTree0 = new KDTree();
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      kMeansInpiredMethod0.globalInfo();
      kDTree0.setNodeSplitter(kMeansInpiredMethod0);
      try { 
        Evaluation.handleCostOption("(8IF@", (-833));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("c7FGqo", arrayList0, 23);
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getRelationalClassFormat();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      try { 
        Evaluation.evaluateModel("", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) filteredClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.FilteredClassifier:
         // 
         // -F <filter specification>
         // \tFull class name of filter to use, followed
         // \tby filter options.
         // \teg: \"weka.filters.unsupervised.attribute.Remove -V -R 1,2\"
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.J48)
         // 
         // Options specific to classifier weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0615632381579823
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      KDTree kDTree0 = new KDTree();
      KMeansInpiredMethod kMeansInpiredMethod0 = new KMeansInpiredMethod();
      kDTree0.setNodeSplitter(kMeansInpiredMethod0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
