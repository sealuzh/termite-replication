/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:15:26 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      assertFalse(discretize1.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      discretize0.getBinRangesString(62);
      discretize0.m_ClassIndex = 1265;
      discretize0.getRevision();
      discretize0.setInvertSelection(true);
      discretize0.getAttributeIndices();
      discretize0.setOutputFormat();
      discretize0.getInvertSelection();
      discretize0.globalInfo();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[3] = (byte) (-30);
      byte byte0 = (byte)60;
      byteArray0[4] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("-m%eL+&qap2aZ mb3y");
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (double) (byte) (-30);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (byte) (-30);
      doubleArray2[1] = (double) (byte) (-30);
      doubleArray2[2] = (double) (byte)60;
      doubleArray2[3] = (double) (byte) (-30);
      doubleArray2[4] = (double) (byte) (-30);
      doubleArray2[5] = 0.5;
      doubleArray2[6] = (double) (byte) (-30);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) (byte) (-30);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (double) (byte) (-30);
      doubleArray5[3] = 0.5;
      doubleArray5[4] = (double) (byte) (-30);
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((byte) (-30));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -30
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.setUseEqualFrequency(false);
      discretize0.globalInfo();
      discretize0.m_DiscretizeCols = null;
      System.setCurrentTimeMillis((-2920L));
      // Undeclared exception!
      try { 
        discretize0.getAttributeIndices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.798534689126567
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("first-last");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)97;
      discretize0.m_MakeBinary = true;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.getOptions();
      discretize0.binsTipText();
      discretize0.makeBinaryTipText();
      discretize0.invertSelectionTipText();
      Instances instances0 = null;
      try {
        instances0 = new Instances((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine("4\"yCO&");
      SystemInUtil.addInputLine("4\"yCO&");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("1E");
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1645.4334005);
      discretize0.setIgnoreClass(true);
      doubleArray1[2] = 79.1976175;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1645.4334005);
      doubleArray1[5] = (-2413.6747022);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1645.4334005);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 79.1976175;
      doubleArray2[3] = (-2413.6747022);
      doubleArray2[4] = (-1645.4334005);
      doubleArray2[5] = 79.1976175;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-2413.6747022);
      doubleArray3[1] = (-1645.4334005);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1539.8194);
      doubleArray3[4] = (-1539.8194);
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("1E");
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1645.4334005);
      doubleArray1[2] = 79.1976175;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1539.8194);
      doubleArray1[5] = (-1645.4334005);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1645.4334005);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 79.1976175;
      doubleArray2[3] = (-1539.8194);
      doubleArray2[4] = (-1645.4334005);
      doubleArray2[5] = 79.1976175;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1539.8194);
      doubleArray3[1] = (-1645.4334005);
      doubleArray2[2] = 0.0;
      doubleArray3[3] = (-1539.8194);
      doubleArray3[4] = (-1539.8194);
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(1455);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1455
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "yg";
      stringArray0[1] = "?;L~I_R.<JF4qE";
      stringArray0[2] = "";
      stringArray0[3] = "invalid CVS revision - not dots!";
      stringArray0[4] = "WT/E3.]";
      stringArray0[5] = "-";
      stringArray0[6] = "YgD=E@?qm";
      stringArray0[7] = "Local package list is missing, trying a cache refresh to restore...";
      stringArray0[8] = "Class index: ";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.invertSelectionTipText();
      discretize0.listOptions();
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("Sv");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 89;
      SparseInstance sparseInstance0 = new SparseInstance(89);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("=g?O@");
      discretize0.getUseBinNumbers();
      discretize0.getBinRangesString(86);
      String string0 = "EE L&wW)_\\z";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      String string1 = "z.8";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("7r7_LBOx", "3uo7uU-O}Q9x'N");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 3uo7uU-O}Q9x'N
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance1);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "&a}*_CV=RJ..g)rb%%";
      SystemInUtil.addInputLine("&a}*_CV=RJ..g)rb%%");
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&a}*_CV=RJ..g)rb%%");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = "WTE3.]";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WTE3.]");
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 89;
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      doubleArray0[5] = (double) 89;
      discretize0.getCutPoints(89);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1678.9626620001;
      doubleArray1[3] = 2775.28357482332;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 5.3;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 1678.9626620001;
      doubleArray2[3] = 1678.9626620001;
      doubleArray2[4] = 1678.9626620001;
      doubleArray2[5] = 2775.28357482332;
      doubleArray2[6] = 1678.9626620001;
      discretize0.getBinRangesString(2148);
      String string1 = discretize0.attributeIndicesTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string1);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SystemInUtil.addInputLine("O=g?O@^");
      int int0 = 89;
      SparseInstance sparseInstance0 = new SparseInstance(89);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "O=g?O@^";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "O=g?O@^";
      stringArray0[2] = "O=g?O@^";
      Discretize discretize0 = new Discretize("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      discretize0.useEqualFrequencyTipText();
      stringArray0[6] = "O=g?O@^";
      // Undeclared exception!
      try { 
        sparseInstance0.replaceMissingValues((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unequal number of attributes!
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.invertSelectionTipText();
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1678.9626620001;
      doubleArray1[3] = 2775.28357482332;
      doubleArray1[4] = 0.0;
      discretize0.setInvertSelection(true);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 5.3;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 1678.9626620001;
      doubleArray2[3] = 1678.9626620001;
      doubleArray2[4] = 1678.9626620001;
      doubleArray2[5] = 2775.28357482332;
      doubleArray2[6] = 1678.9626620001;
      doubleArray2[7] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 2775.28357482332;
      doubleArray3[1] = 5.3;
      Discretize discretize1 = new Discretize();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemInUtil.addInputLine("No capabilities set!");
      SystemInUtil.addInputLine("Expected comma in range,found:");
      SystemInUtil.addInputLine("No capabilities set!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)60;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected comma in range,found:");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemInUtil.addInputLine("Expected comma in range,found:");
      SystemInUtil.addInputLine("_'9|EJI");
      Discretize discretize0 = new Discretize("_'9|EJI");
      String[] stringArray0 = new String[13];
      stringArray0[0] = "No capabilities set!";
      stringArray0[1] = "No capabilities set!";
      stringArray0[2] = "Expected comma in range,found:";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemInUtil.addInputLine("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(678);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      properties2.keySet();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties3 = new Properties();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(2151);
      Properties properties4 = new Properties();
      Discretize discretize0 = new Discretize("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      discretize0.getRevision();
      discretize0.setFindNumBins(true);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2151);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SystemInUtil.addInputLine("*F1dc.j^8]P");
      Discretize discretize0 = new Discretize("*F1dc.j^8]P");
      discretize0.getBins();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      
      Filter.makeCopy(discretize0);
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 10;
      doubleArray1[1] = (double) 10;
      doubleArray1[2] = (double) 10;
      doubleArray1[3] = (double) 10;
      doubleArray1[4] = (double) 10;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 10;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 10;
      doubleArray2[3] = (double) 10;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      
      String string1 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("&a}*_CV=RJ..g)rb%%");
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      int[] intArray0 = new int[9];
      intArray0[0] = 46;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      intArray0[1] = 0;
      intArray0[2] = 15;
      intArray0[3] = 3582;
      intArray0[4] = 492;
      intArray0[5] = 68;
      intArray0[6] = 45;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 3582);
      discretize0.setAttributeIndicesArray(intArray0);
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.binsTipText();
      discretize0.getRevision();
      discretize0.setMakeBinary(true);
      discretize0.getMakeBinary();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SystemInUtil.addInputLine("&a}*_CV=RJ..g)rb%%");
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&a}*_CV=RJ..g)rb%%");
      SparseInstance sparseInstance0 = new SparseInstance(1068);
      discretize0.setMakeBinary(true);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6174998898943667
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      discretize0.getOptions();
      Properties properties0 = new Properties();
      discretize0.getUseEqualFrequency();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2021161078));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F");
      Discretize discretize0 = new Discretize();
      int int0 = 77;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 826;
      int[] intArray0 = new int[3];
      SparseInstance sparseInstance0 = new SparseInstance(5.55555, doubleArray0, intArray0, (-3690));
      sparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SystemInUtil.addInputLine("45\"yCO&");
      SystemInUtil.addInputLine("45\"yCO&");
      SparseInstance sparseInstance0 = new SparseInstance(2220);
      sparseInstance0.dataset();
      int[] intArray0 = new int[3];
      intArray0[0] = 2220;
      intArray0[1] = 2220;
      intArray0[2] = 95;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-64.435202917), intArray0, 2220);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2343.63854), intArray0, 2005);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-636.1361966129), intArray0, 1258);
      Discretize discretize0 = new Discretize("p~");
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2220);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getMakeBinary();
      discretize0.setOutputFormat();
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[9];
      intArray0[2] = 460;
      intArray0[3] = 27;
      intArray0[5] = 1467;
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Filter.makeCopy(discretize0);
      discretize0.setUseEqualFrequency(false);
      discretize0.getBinRangesString(62);
      discretize0.m_ClassIndex = 1265;
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      
      discretize0.setInvertSelection(false);
      String string1 = discretize0.getAttributeIndices();
      assertEquals("first-last", string1);
      
      discretize0.setOutputFormat();
      boolean boolean0 = discretize0.getInvertSelection();
      String string2 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string2);
      
      boolean boolean1 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7995122062331164
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.m_UseBinNumbers = true;
      discretize0.setUseEqualFrequency(true);
      discretize0.getBinRangesString(62);
      discretize0.getAttributeIndices();
      discretize0.getOptions();
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1370466234504795
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize("WTE3.]");
      String[] stringArray0 = discretize0.getOptions();
      Properties properties0 = new Properties();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3594);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      SystemInUtil.addInputLine(" that meets constraint ");
      SystemInUtil.addInputLine(" that meets constraint ");
      Discretize discretize1 = new Discretize("WTE3.]");
      discretize1.setOptions(stringArray0);
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize1.getUseBinNumbers());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 0.24487378531668672;
      doubleArray1[2] = 1678.9626620001;
      doubleArray1[3] = 0.24487378531668672;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 5.3;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 1678.9626620001;
      doubleArray2[3] = 1678.9626620001;
      doubleArray2[4] = 1678.9626620001;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(10);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      discretize0.getBinRangesString(77);
      discretize0.getCutPoints(66);
      String string0 = discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertEquals("first-last", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.invertSelectionTipText();
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1678.9626620001;
      doubleArray1[3] = 2775.28357482332;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 5.3;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 1678.9626620001;
      doubleArray2[3] = 1678.9626620001;
      doubleArray2[4] = 1678.9626620001;
      doubleArray2[5] = 2775.28357482332;
      doubleArray2[6] = 1678.9626620001;
      doubleArray2[7] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 2775.28357482332;
      doubleArray3[1] = 5.3;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 2775.28357482332;
      doubleArray3[4] = 1678.9626620001;
      doubleArray3[5] = 1.7976931348623157E308;
      doubleArray3[6] = 2775.28357482332;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1.7976931348623157E308;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 1.7976931348623157E308;
      doubleArray4[4] = 1678.9626620001;
      doubleArray4[5] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 2775.28357482332;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 2775.28357482332;
      doubleArray5[4] = Double.POSITIVE_INFINITY;
      doubleArray5[5] = 1678.9626620001;
      doubleArray5[6] = 1110.0188;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 2775.28357482332;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize("O=g?O@^");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("A%@lNl{sGNAt");
      StringReader stringReader0 = new StringReader("9WY>M,CRRAFh");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[9WY>M], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SystemInUtil.addInputLine("4\"yCO&");
      SystemInUtil.addInputLine("4\"yCO&");
      SparseInstance sparseInstance0 = new SparseInstance(2220);
      sparseInstance0.dataset();
      int[] intArray0 = new int[3];
      intArray0[0] = 2220;
      intArray0[1] = 2220;
      intArray0[2] = 2220;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-64.435202917), intArray0, 2220);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2343.63854), intArray0, 2005);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-636.1361966129), intArray0, 1258);
      Discretize discretize0 = new Discretize("p~");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2220);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties2);
      protectedProperties0.values();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      Discretize discretize0 = new Discretize("first-last");
      discretize0.getBinRangesString((-1879048189));
      discretize0.getCutPoints((-1879048189));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize("Expected comma in range, found: ");
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8198531862850538
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      SystemInUtil.addInputLine("&a}*_CV=RJ..g)rb%%");
      SystemInUtil.addInputLine("&a}*_CV=RJ..g)rb%%");
      Discretize discretize0 = new Discretize("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      assertFalse(discretize0.getFindNumBins());
      
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      discretize0.getFindNumBins();
      String string0 = discretize0.findNumBinsTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SystemInUtil.addInputLine("4\"yCO&");
      SystemInUtil.addInputLine("4\"yCO&");
      SparseInstance sparseInstance0 = new SparseInstance(2220);
      sparseInstance0.dataset();
      int[] intArray0 = new int[3];
      intArray0[0] = 2220;
      intArray0[1] = 2220;
      intArray0[2] = 95;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-64.435202917), intArray0, 2220);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2343.63854), intArray0, 2005);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-636.1361966129), intArray0, 1258);
      Discretize discretize0 = new Discretize("p~");
      discretize0.setOutputFormat();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.710283334414665
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize("first-last");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.getOptions();
      discretize0.binsTipText();
      discretize0.makeBinaryTipText();
      Instances instances0 = null;
      try {
        instances0 = new Instances((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "";
      Discretize discretize0 = new Discretize("");
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 1265;
      discretize0.setBins(1265);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1265);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9930948689671983
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString(0);
      discretize0.setBins(98);
      discretize0.m_ClassIndex = (-784);
      discretize0.m_ClassIndex = 98;
      String[] stringArray0 = new String[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-784);
      intArray0[3] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      Discretize.main(stringArray0);
      discretize0.setBins(0);
      assertEquals(0, discretize0.getBins());
  }
}
