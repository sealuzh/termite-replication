/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:13:48 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 2613);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("~i(y4:\"P0MR.,DK)*y", 2613);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 2251);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.testPOP3("**R\u00E9ponse du serveur incorrect**", 2251);
      System.setCurrentTimeMillis(2251);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://**Erreur d'E/S** (:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "w");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("**Erreur d'E/S** (", 0);
      assertEquals(2, services_HTTP_Result0.page_weight);
      
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("w", 4165);
      String string0 = services_HTTP_Result1.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: w) **.\n****", string0);
      
      Services.HTTP_Result services_HTTP_Result2 = new Services.HTTP_Result();
      assertEquals(0, services_HTTP_Result2.page_weight);
      assertEquals(0, services_HTTP_Result2.code);
      assertEquals(0L, services_HTTP_Result2.time);
      assertFalse(services_HTTP_Result2.works);
      
      boolean boolean0 = services_HTTP_Result0.works;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0343946195677223
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://**Erreur d'E/S** (:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "w");
      Services.testHTTPS("**Erreur d'E/S** (", 0);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("w", 4165);
      services_HTTP_Result0.toString();
      Services.testHTTP("**Erreur d'E/S** (", 0);
      boolean boolean0 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.reset();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://**Erreur d'E/S** (:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      Services.testHTTPS("**Erreur d'E/S** (", 0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)3;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", 3046);
      assertEquals(0, services_HTTP_Result0.page_weight);
      
      services_HTTP_Result0.page_weight = 3046;
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 3046 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **.\n****", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("**R\u00E9ponse du serveur incorrect**", (-1));
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Services.testHTTP((String) null, 0);
      System.setCurrentTimeMillis(0L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)26;
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis((-87L));
      System.setCurrentTimeMillis((-87L));
      System.setCurrentTimeMillis((-717L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1482L);
      System.setCurrentTimeMillis(0L);
      Services services0 = new Services();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result0.works = true;
      services_SIMPLE_Result0.works = true;
      services_SIMPLE_Result0.toString();
      Services.testPOP3("hOOM>;Cnw", 1);
      services_SIMPLE_Result0.reset();
      assertFalse(services_SIMPLE_Result0.works);
      
      Services.testSMTP("+d.f@-6>@O;vlo.a@R", (-1));
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("", 844);
      assertEquals(0L, services_SIMPLE_Result1.time);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("220", (-1343));
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **URL Mal Form\u00E9** (java.net.MalformedURLException: Invalid port number :-1343) **.\n****", string0);
      
      services_HTTP_Result0.reset();
      services_HTTP_Result0.code = (-1343);
      services_HTTP_Result0.Error = "220";
      services_HTTP_Result0.reset();
      services_HTTP_Result0.reset();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("220", (-81));
      assertEquals(0, services_HTTP_Result1.page_weight);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-107L));
      System.setCurrentTimeMillis((-107L));
      System.setCurrentTimeMillis((-107L));
      System.setCurrentTimeMillis(196L);
      System.setCurrentTimeMillis(4463L);
      System.setCurrentTimeMillis((-521L));
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS((String) null, 0);
      assertEquals(0, services_HTTP_Result0.code);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
  }
}
