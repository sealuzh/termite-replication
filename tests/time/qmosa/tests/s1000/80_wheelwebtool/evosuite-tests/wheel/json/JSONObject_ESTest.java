/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:23:50 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.766431388516817
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("m*mP{e", (Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.putOpt("OvE<BkgNfA(lL", object0);
      JSONObject.valueToString("JSON does not allow non-finite numbers.", 92, 41);
      JSONObject jSONObject3 = jSONObject1.put("-}:skkG!_lpI", 41);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "OvE<BkgNfA(lL";
      stringArray0[1] = "-}:skkG!_lpI";
      stringArray0[2] = "\"java.lang.String@0000000006\"";
      stringArray0[3] = "OvE<BkgNfA(lL";
      stringArray0[4] = "\"java.lang.String@0000000006\"";
      stringArray0[5] = "m*mP{e";
      stringArray0[6] = "\"java.lang.String@0000000006\"";
      stringArray0[7] = "-}:skkG!_lpI";
      stringArray0[8] = "-}:skkG!_lpI";
      JSONObject jSONObject4 = new JSONObject(jSONObject1, stringArray0);
      JSONObject.quote("OvE<BkgNfA(lL");
      jSONObject2.toString((-1515), (-1515));
      try { 
        jSONObject3.getJSONArray("W^o7xp j<]nRK}BN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W^o7xp j<]nRK}BN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.77241954392974
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.put(115, (Collection) linkedList0);
      Long long0 = new Long((-172L));
      Integer integer0 = new Integer(12);
      linkedList0.add(integer0);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.keys();
      JSONObject.getNames(jSONObject0);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONArray1.toJSONObject(jSONArray0);
      jSONObject0.accumulate("issplit", jSONObject2);
      jSONObject0.optInt("issplit");
      jSONArray0.toJSONObject(jSONArray1);
      String string0 = "ue`FG)a\"dR";
      try { 
        jSONObject0.getBoolean("ue`FG)a\"dR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ue`FG)a\\\"dR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3315878163148978
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("", object0);
      JSONObject.valueToString(object0, 58, 97);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject.valueToString(linkedList0);
      jSONObject1.keys();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.808230852162046
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList0);
      Object object0 = new Object();
      jSONObject0.putOpt("", "OvE<BkgNfA(lL");
      Double double0 = new Double(92);
      JSONObject.valueToString(double0, 41, 125);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Double double1 = new Double(1.0);
      JSONObject.valueToString(double1, (-2078), 41);
      boolean boolean0 = jSONObject1.optBoolean("");
      assertEquals(2, jSONObject1.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0871913770165262
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "get";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "get";
      jSONObject0.optInt("Ag>MBqYIL]`q", (-552));
      Short.compare((short)4, (short)4);
      short short0 = (short) (-644);
      Short.compare((short) (-644), (short)4);
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "get";
      jSONObject1.optBoolean("K%U~3jM[");
      stringArray1[1] = ",7<.7Rb D5w!B+c";
      stringArray1[2] = "E%){AN'<W";
      stringArray1[3] = "E%){AN'<W";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray1);
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)93);
      JSONTokener jSONTokener0 = new JSONTokener("=+J6(hAM)");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of =+J6(hAM)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6900919307291113
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      Short.compare((short)0, (short) (-281));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      Float float0 = new Float((double) (short)1248);
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      JSONObject.valueToString(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONObject@0000000003", 4071);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) "wheel.json.JSONObject@0000000003");
      jSONObject0.optBoolean("\"\"");
      jSONObject0.optLong("Goi)0yoSZ@CTuj^Y");
      jSONObject2.opt("jo\"</a$ U-%!5Lp@");
      try { 
        jSONObject2.getJSONArray("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9982609309756807
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)89);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.doubleToString(Double.NaN);
      stringWriter0.append((CharSequence) "null");
      jSONObject0.write(stringWriter0);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6650428768430166
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("J", 0);
      jSONObject0.names();
      Short short0 = new Short((short)0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject1.optString((String) null);
      jSONObject1.optJSONArray("log");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "Zy$K)%l";
      jSONObject0.names();
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      Float float0 = new Float((-1.0));
      Float float1 = new Float(0.0);
      hashMap1.put(float0, float1);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5210199267732674
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("#R^`c#zqYO>f[q", (Collection) linkedList0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#R^`c#zqYO>f[q";
      JSONObject jSONObject2 = new JSONObject("#R^`c#zqYO>f[q", stringArray0);
      String string0 = jSONObject2.toString();
      jSONObject0.isNull("#R^`c#zqYO>f[q");
      String string1 = jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.876670001001524
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Y*", 0L);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject1.put(",\n", (Collection) linkedList1);
      assertEquals(2, jSONObject1.length());
      
      JSONObject.valueToString("", 92, 92);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 92, 5);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9185503403412514
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V X\"odbg";
      stringArray0[1] = "V X\"odbg";
      stringArray0[2] = "V X\"odbg";
      JSONObject jSONObject0 = new JSONObject("toS", stringArray0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      BiFunction<Double, Integer, Integer> biFunction0 = (BiFunction<Double, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      jSONObject0.has("null");
      JSONObject jSONObject1 = new JSONObject((Object) "d|1hkt9");
      String string0 = JSONObject.quote("V X\"odbg");
      assertEquals("\"V X\\\"odbg\"", string0);
      
      String string1 = jSONObject1.toString(65);
      String string2 = JSONObject.valueToString(hashMap1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("{}", string2);
      
      Short short0 = new Short((short)2134);
      int int0 = jSONObject1.optInt("");
      assertEquals(0, int0);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4094990393403917
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 0;
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (JSONObject) null);
      jSONObject0.getDouble("");
      jSONObject1.optBoolean("");
      jSONObject1.keys();
      String string0 = "Z!0W1#[";
      Integer.compareUnsigned(1423, 0);
      try { 
        jSONObject1.getLong("Z!0W1#[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z!0W1#[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7747801682315698
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("*ALC,88/", (Collection) linkedList0);
      JSONObject.valueToString("E%){AN'<W", 92, 92);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject.valueToString(linkedList0, 958, (-457));
      int int0 = (-283);
      try { 
        Short.valueOf(",7<.7Rb D5w!B+c", (-283));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -283 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6210682892406103
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String[] stringArray0 = new String[18];
      stringArray0[0] = null;
      String string0 = "toL";
      Byte byte0 = new Byte((byte)4);
      JSONObject.testValidity(byte0);
      JSONObject jSONObject0 = new JSONObject((Object) "toL");
      try { 
        jSONObject0.put(stringArray0[0], (-5277.56592026));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.574337865325543
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      JSONObject.getNames(jSONObject0);
      jSONObject0.isNull("] is not a JSONArray.");
      Object object2 = JSONObject.NULL;
      jSONObject0.put("] is not a JSONArray.", (Object) "|M(%;4`@7P'RBE");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5229881755017796
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      Short short0 = new Short((short)2284);
      JSONObject.getNames((Object) short0);
      stringArray0[0] = "";
      Byte byte0 = new Byte((byte)46);
      Byte.toUnsignedLong((byte)39);
      JSONObject jSONObject1 = new JSONObject(byte0, stringArray0);
      jSONObject0.optBoolean("Ek>/ cIt");
      jSONObject0.optLong("Ek>/ cIt");
      JSONObject.quote("");
      jSONObject0.opt("");
      JSONObject jSONObject2 = jSONObject1.put("", false);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8653491570827416
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      Short.compare((short)0, (short) (-281));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.optInt("jo\"</a$ U-%!5Lp@", 0);
      boolean boolean0 = new Boolean("jo\"</a$ U-%!5Lp@");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.putOpt("wheel.json.JSONArray", short0);
      linkedList0.removeLastOccurrence(jSONArray0);
      jSONObject0.put("I@4P0", (Collection) linkedList0);
      JSONObject.getNames((Object) linkedList0);
      JSONObject.getNames((Object) "I@4P0");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString("jo\"</a$ U-%!5Lp@", 2, (-3241));
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getJSONObject("jo\"</a$ U-%!5Lp@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jo\\\"<\\/a$ U-%!5Lp@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.474566847926083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      Short.compare((short)0, (short) (-281));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.optInt("jo\"</a$ U-%!5Lp@", 0);
      jSONObject0.optBoolean("wheel.json.JSONArray");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      Short short1 = new Short((short)8448);
      JSONObject jSONObject1 = new JSONObject(short1, stringArray0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      hashMap1.putAll(hashMap0);
      jSONObject0.has("wheel.json.JSONArray");
      jSONObject0.optBoolean("`@Gx|FWXahWj$3.");
      Short short2 = new Short((short) (-2432));
      Integer integer0 = new Integer(2030);
      jSONObject0.append(")1PbQl@Qj^@", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("xaUA=", "xaUA=");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V X\"odbg";
      stringArray0[1] = "V X\"odbg";
      int int0 = (-3092);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.valueToString(float0, 92, (-3092));
      try { 
        Short.valueOf("lo", 242);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 242 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)65);
      String[] stringArray0 = new String[14];
      stringArray0[0] = "";
      stringArray0[1] = "Ek>/ cIt";
      stringArray0[2] = "Ek>/ cIt";
      stringArray0[3] = "Ek>/ cIt";
      stringArray0[4] = "Ek>/ cIt";
      JSONObject jSONObject2 = new JSONObject(byte0, stringArray0);
      jSONObject2.optJSONArray((String) null);
      Boolean boolean0 = Boolean.FALSE;
      Integer.getInteger((String) null);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject.quote("O=/Gsh");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("\"O=/Gsh\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"O=/Gsh\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8503189776933264
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      Short.compare((short)0, (short) (-281));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.optInt("jo\"</a$ U-%!5Lp@", 0);
      jSONObject0.optBoolean("wheel.json.JSONArray");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.removeLastOccurrence(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("I@4P0", (Collection) linkedList0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("I@4P0", (Map) hashMap0);
      JSONObject.getNames((Object) linkedList0);
      JSONObject.getNames((Object) "I@4P0");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.names();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getJSONObject("jo\"</a$ U-%!5Lp@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jo\\\"<\\/a$ U-%!5Lp@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4757577415093195
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("E%){AN'<W", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1, 92, 92);
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "d|1hkt9";
      jSONObject0.toString(65, 65);
      JSONObject.valueToString("");
      JSONObject jSONObject2 = jSONObject0.put("", 4071);
      jSONObject2.names();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.085902032244092
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "get";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "get";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("E%){AN'<W", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1, 92, 92);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject.valueToString("get", 242, 958);
      try { 
        Short.valueOf("Missing value", 958);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 958 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6590859780271745
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), 0.0);
      JSONObject.numberToString(double0);
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedLong((byte)102);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Double@0000000001";
      stringArray0[1] = "toS";
      stringArray0[2] = "V X\"odbg";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optString("!|Fi$@v?OQ", (String) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("Z", (Collection) linkedList0);
      String string0 = "\\4Y5aWA>)DTZ|c/";
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.798116080939257
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      Short.compare((short)0, (short) (-281));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      Short.compare((short)8448, (short)1248);
      jSONObject0.optInt("jo\"</a$ U-%!5Lp@", 0);
      Boolean boolean0 = new Boolean("jo\"</a$ U-%!5Lp@");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.putOpt("wheel.json.JSONArray", short0);
      linkedList0.removeLastOccurrence(jSONArray0);
      jSONObject0.put("I@4P0", (Collection) linkedList0);
      assertEquals(2, jSONObject0.length());
      
      jSONObject0.getLong("wheel.json.JSONArray");
      JSONObject.getNames((Object) linkedList0);
      String[] stringArray1 = JSONObject.getNames((Object) "I@4P0");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.put("-}:skkG!_lpI", 594);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      String string0 = JSONObject.valueToString(jSONObject1, 4351, (short)8448);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString((Object) null, 2096, 242);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6230252858838696
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject.quote("Oh=@sh");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("i_B-#6_+j31Pc<&n66J");
      jSONObject0.put("\"Oh=@sh\"", 580.3618761094066);
      jSONObject0.optDouble("\"Oh=@sh\"", 0.0);
      jSONObject0.remove("Oh=@sh");
      jSONObject0.optDouble("i_B-#6_+j31Pc<&n66J");
      Iterator iterator0 = jSONObject0.keys();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = new JSONObject(iterator0);
      try { 
        jSONObject1.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.564248634897059
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      String string0 = "A=^@(X7";
      JSONObject jSONObject1 = jSONObject0.accumulate("A=^@(X7", "A=^@(X7");
      jSONObject1.optLong("A=^@(X7");
      jSONObject1.optString("A=^@(X7", "A=^@(X7");
      try { 
        jSONObject0.getJSONArray("islongBitsToDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islongBitsToDouble\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5743378653255435
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("");
      jSONObject0.optBoolean((String) null, true);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.put("", (Object) boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.590143032458963
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "Ek>/ cIt";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "d|1hkt9";
      JSONObject.valueToString("");
      JSONObject jSONObject1 = jSONObject0.put("", 4071);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) boolean0);
      jSONObject1.optBoolean("qvS+^5@h");
      jSONObject1.optLong("Goi)0yoSZ@CTuj^Y");
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jSONObject1.opt("");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5120335228628443
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Short.compare((short) (-281), (short) (-281));
      String[] stringArray0 = JSONObject.getNames((Object) "toS");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject("V X\"odbg", stringArray0);
      String string0 = "jo\"</a$ U-%!5Lp@";
      jSONObject0.optInt("Nsr21d2LCV", (int) (short) (-281));
      Boolean boolean0 = new Boolean("toS");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.putOpt("Nsr21d2LCV", jSONObject0);
      linkedList0.removeLastOccurrence(boolean0);
      jSONObject0.put("gettoHexString", (Collection) linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONArray");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONArray
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5021142749799516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "IXv^6";
      Boolean boolean0 = new Boolean("IXv^6");
      Boolean.getBoolean("Q\"MBh)nEU/5yUE~l");
      Boolean.logicalOr(false, false);
      JSONObject.valueToString(boolean0, 281, 123);
      String string1 = "m";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of m
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0201785936635317
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.names();
      String string0 = "E-;j4)3JpyS";
      jSONObject0.put("E-;j4)3JpyS", (-1284.0882515));
      try { 
        Integer.decode("getfloatToIntBits");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getfloatToIntBits\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3085781000463086
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Map<Integer, Float> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.keys();
      String string0 = "F64:\\\"6(c";
      try { 
        jSONObject0.getJSONObject("F64:\"6(c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F64:\\\"6(c\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8423943585863412
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("E%){AN'<W", (Collection) linkedList0);
      String string0 = "OvE<BkgNfA(lL";
      try { 
        jSONObject1.getString("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5636867965505963
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V X\"odbg";
      stringArray0[1] = "V X\"odbg";
      stringArray0[2] = "V X\"odbg";
      JSONObject jSONObject0 = new JSONObject("toS", stringArray0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      BiFunction<Double, Integer, Integer> biFunction0 = (BiFunction<Double, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      hashMap0.putAll(hashMap1);
      jSONObject0.has("null");
      jSONObject0.optBoolean("V X\"odbg");
      Short short0 = new Short((short)4290);
      jSONObject0.put("V X\"odbg", 0L);
      Integer integer0 = new Integer((short)4290);
      Short short1 = new Short((short)2287);
      JSONObject jSONObject1 = jSONObject0.append("] is not a number.", short1);
      jSONObject1.optInt("t2@eit!f5$Lo}$^$4a");
      jSONObject0.optJSONObject("] is not a number.");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6518201698173876
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      short short0 = (short)8448;
      Short short1 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      short short2 = (short) (-281);
      Short.compare((short)0, (short) (-281));
      String[] stringArray0 = JSONObject.getNames((Object) short1);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      String string0 = "jo\"</a$ U-%!5Lp@";
      jSONObject0.optInt("jo\"</a$ U-%!5Lp@", 0);
      jSONObject0.optBoolean("wheel.json.JSONArray");
      String string1 = "I@4P0";
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      linkedList0.removeLastOccurrence(jSONArray0);
      jSONObject0.put("I@4P0", (Collection) linkedList0);
      JSONObject.getNames((Object) linkedList0);
      JSONObject.getNames((Object) "I@4P0");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getJSONObject("jo\"</a$ U-%!5Lp@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jo\\\"<\\/a$ U-%!5Lp@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = jSONObject0.optBoolean("Null key.", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject.doubleToString((-1151.7123259118957));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject((-317));
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "V X\"odbg";
      JSONObject.doubleToString(2956.2257244);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerFirst("V X\"odbg");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)89);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "ol?Tf+\"diN\\";
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      jSONObject0.put("ol?Tf+\"diN", (Map) hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4608683763656645
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "V X\"odbg";
      stringArray0[2] = "V X\"odbg";
      JSONObject jSONObject0 = new JSONObject("toS", stringArray0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      BiFunction<Double, Integer, Integer> biFunction0 = (BiFunction<Double, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      int int0 = 65;
      JSONObject jSONObject1 = new JSONObject((Object) "d|1hkt9");
      int int1 = 4664;
      // Undeclared exception!
      jSONObject1.toString(65, 4664);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2391997573006275
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "pqk*";
      jSONObject0.opt("pqk*");
      try { 
        jSONObject0.getJSONArray("pqk*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pqk*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6084629316512524
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "Ek>/ cIt";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "d|1hkt9";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(65, 65);
      JSONObject.valueToString("");
      JSONObject jSONObject2 = jSONObject0.put("", 4071);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.getNames((Object) boolean0);
      Double double0 = new Double(232.2072898553);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(double0, biFunction0);
      jSONObject2.opt("");
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.394018283998852
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject.quote("Oh=@sh");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("i_B-#6_+j31Pc<&n66J");
      JSONObject jSONObject1 = jSONObject0.put("\"Oh=@sh\"", 580.3618761094066);
      jSONObject1.put("sG/v", 4071);
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Double double0 = new Double(580.3618761094066);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      BiFunction<Double, Integer, Integer> biFunction0 = (BiFunction<Double, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyDouble() , anyInt());
      hashMap0.compute(double0, biFunction0);
      jSONObject1.opt("\"Oh=@sh\"");
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0086693532456037
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[3] = ",7<.7Rb D5w!B+c";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6847854169135204
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Y*", 0L);
      jSONObject0.optDouble("JSON does not allow non-finite numbers.", (-1182.8754648495542));
      jSONObject0.optInt("Y*", (-6139));
      String string0 = "";
      Short.compare((short)4, (short)92);
      Short.compare((short)4, (short)1383);
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y*";
      stringArray0[1] = "HZKnU==`O/v`e";
      stringArray0[3] = "Y*";
      stringArray0[5] = "";
      stringArray0[6] = "Y*";
      stringArray0[7] = "";
      stringArray0[8] = "Y*";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short)0);
      Short.compare((short)0, (short) (-281));
      String string0 = "isvalueOf";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(short0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Float float0 = new Float(0.0F);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("h9Z");
      linkedList0.offerFirst(";&`SU#aEa");
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      jSONArray0.toJSONObject(jSONArray1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";&`SU#aEa";
      stringArray0[1] = ";&`SU#aEa";
      stringArray0[2] = ";&`SU#aEa";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.461043926438619
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.putOpt("", "OvE<BkgNfA(lL");
      Double double0 = new Double(92);
      JSONObject.valueToString(double0, 41, 125);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      int int0 = jSONObject2.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), 0.0);
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedLong((byte)0);
      Byte.compare((byte)0, (byte) (-58));
      Byte.toUnsignedInt((byte)0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1613));
      hashMap0.put(integer1, (Integer) null);
      Integer integer2 = new Integer((-893));
      jSONObject0.names();
      int int0 = 1658;
      int int1 = 8448;
      jSONObject0.optString("P", "P");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6680812935137173
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), 0.0);
      JSONObject.numberToString(double0);
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedLong((byte)102);
      Byte.compare((byte)0, (byte)0);
      Byte.compare((byte)0, (byte) (-56));
      Byte.toUnsignedInt((byte)0);
      JSONObject.testValidity(byte0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-893));
      hashMap0.put(integer0, integer1);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      Double.sum(1.0, 1658);
      String string0 = JSONObject.valueToString(jSONObject0, 1658, 8448);
      assertEquals("{}", string0);
      
      jSONObject0.optLong("java.lang.Double@0000000001", (long) (byte)0);
      jSONObject0.optJSONObject("java.lang.Double@0000000001");
      double double1 = jSONObject0.optDouble("isparseDouble");
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6598325455280591
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), 0.0);
      JSONObject.doubleToString(0.0);
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedLong((byte)0);
      Byte.compare((byte)0, (byte) (-56));
      Byte.toUnsignedInt((byte)0);
      JSONObject.testValidity(byte0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.TRUE;
      jSONObject0.put("rD{Q", (Object) boolean1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Short short0 = new Short((short) (-151));
      String string0 = "";
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8423943585863412
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "!\\]}?z.{P(%aU";
      JSONObject jSONObject1 = jSONObject0.put("!]}?z.{P(%aU", false);
      String string1 = "] is not a JSONArray.";
      try { 
        jSONObject1.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1000914490529095
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "b!NMriYgXM";
      stringArray0[1] = "b!NMriYgXM";
      stringArray0[2] = "b!NMriYgXM";
      stringArray0[3] = "b!NMriYgXM";
      stringArray0[4] = "(KgbHNuM/S6Z7";
      stringArray0[5] = "^/w`sOO9TX,9j*Q";
      JSONObject jSONObject0 = new JSONObject("b!NMriYgXM", stringArray0);
      jSONObject0.optString("#A)N{VH#Y&a{B-,5`", "#A)N{VH#Y&a{B-,5`");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("b!NMriYgXM", (Collection) linkedList0);
      jSONObject0.put("b!NMriYgXM", true);
      try { 
        jSONObject1.getDouble("^/w`sOO9TX,9j*Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^/w`sOO9TX,9j*Q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("getdoubleToRawLongBits");
      hashMap0.put(boolean0, "getdoubleToRawLongBits");
      jSONObject0.optJSONObject("JSONArray[");
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 0L);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.2546035572389735
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Short short0 = new Short((short)8448);
      Short.toUnsignedInt((short) (-25));
      Short.compare((short) (-25), (short)8448);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.optInt("jo\"</a$ U-%!5Lp@", 65511);
      jSONObject0.optBoolean("wheel.json.JSONArray");
      jSONObject0.optString((String) null, "I@4P0");
      String string0 = "islongBitsToDouble";
      String string1 = "getparseDouble";
      try { 
        jSONObject0.getJSONArray("getparseDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getparseDouble\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1571582659550645
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(float0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Float@0000000001";
      stringArray0[1] = "java.lang.Float@0000000001";
      stringArray0[2] = "java.lang.Float@0000000001";
      stringArray0[3] = "java.lang.Float@0000000001";
      stringArray0[4] = "java.lang.Float@0000000001";
      stringArray0[5] = "java.lang.Float@0000000001";
      stringArray0[6] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject("java.lang.Float@0000000001", stringArray0);
      try { 
        jSONObject0.accumulate((String) null, "java.lang.Float@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.958956864947583
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optBoolean("]E");
      jSONObject0.optLong("rIa&e-8l");
      JSONObject.quote("isnotify");
      Object object0 = jSONObject0.opt("8");
      assertNull(object0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.495448374532822
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("E%){AN'<W", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.putOpt("OvE<BkgNfA(lL", "");
      jSONObject2.remove("E%){AN'<W");
      int int0 = 92;
      JSONObject.valueToString(jSONObject1, 92, 92);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject.valueToString("", 242, 958);
      try { 
        jSONObject0.getBoolean(",7<.7Rb D5w!B+c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",7<.7Rb D5w!B+c\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.1873041214526907
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "V X\"odbg";
      stringArray0[2] = "V X\"odbg";
      JSONObject jSONObject0 = new JSONObject("toS", stringArray0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      BiFunction<Double, Integer, Integer> biFunction0 = (BiFunction<Double, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Short short0 = new Short((short)1365);
      Integer integer0 = new Integer(32);
      Short short1 = new Short((short)2287);
      Short.compare((short)4290, (short)8192);
      Short short2 = new Short((short) (-899));
      JSONObject jSONObject1 = jSONObject0.append("] is not a number.", short2);
      Short.toUnsignedInt((short)8192);
      jSONObject1.optInt("V X\"odbg");
      jSONObject0.optJSONObject("V X\"odbg");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.108335652604384
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 0;
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (JSONObject) null);
      jSONObject0.getDouble("");
      jSONObject1.keys();
      String string0 = "Z!0W1#[";
      Integer.compareUnsigned(1423, 0);
      try { 
        jSONObject1.getLong("Z!0W1#[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z!0W1#[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("Me$$p}", (Collection) linkedList0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.568879534422382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject.quote("Oh=@sh");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("i_B-#6_+j31Pc<&n66J");
      jSONObject0.put("\"Oh=@sh\"", 580.3618761094066);
      jSONObject0.putOpt("A", (Object) null);
      jSONObject0.optDouble("\"Oh=@sh\"", 0.0);
      jSONObject0.remove("Oh=@sh");
      jSONObject0.optDouble("i_B-#6_+j31Pc<&n66J");
      jSONObject0.keys();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONTokener jSONTokener0 = new JSONTokener("pa");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of pa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.848638009084771
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Y*", 0L);
      jSONObject0.optDouble("Y*", (-1182.8754648495542));
      jSONObject0.optInt("Y*", (-6139));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject1.put("getlowestOneBit", (Collection) linkedList0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = jSONObject0.putOpt((String) null, boolean0);
      Long long0 = new Long(92);
      Long.compare(0L, 0);
      JSONObject.valueToString(long0, 106, 106);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Double double0 = new Double(958);
      JSONObject.valueToString(double0, (-6139), 8);
      jSONObject0.toString();
      jSONObject2.putOpt("div", long0);
      JSONObject.valueToString(jSONObject1);
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("Ek>/ cIt");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = jSONObject0.put("gettoLowerCase", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.3259523732756016
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JSONObject jSONObject1 = jSONObject0.put("E%){AN'<W", (Collection) linkedList0);
      jSONObject0.putOpt("E%){AN'<W", "");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString(jSONObject2, 92, 92);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject.valueToString(",7<.7Rb D5w!B+c", (-2032), (-1746));
      try { 
        jSONObject1.getJSONObject("VP:fy?Rsdjbh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VP:fy?Rsdjbh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.9799721345200934
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("JSON does not allow non-finite numbers.", (-1182.8754648495542));
      jSONObject0.optInt("Y*", (-6139));
      Short.compare((short)4, (short)92);
      Short.compare((short)4, (short)1383);
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[9];
      jSONObject0.optInt("JSONObject[", 1081);
      stringArray0[0] = "Y*";
      stringArray0[1] = "HZKnU==`O/v`e";
      stringArray0[3] = "Y*";
      stringArray0[5] = "";
      stringArray0[6] = "Y*";
      stringArray0[7] = "";
      stringArray0[8] = "Y*";
      jSONObject0.optLong("Y*");
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.getJSONArray("HZKnU==`O/v`e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HZKnU==`O/v`e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8178699867219894
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "g3M-/*8!?Y";
      try { 
        jSONObject0.get("g3M-/*8!?Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g3M-/*8!?Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) "JSONArray[");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean.valueOf(false);
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      Boolean boolean0 = Boolean.FALSE;
      Short short0 = new Short((short)91);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[0] = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0978388742377967
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("m*mP{e", (Collection) linkedList0);
      Object object0 = new Object();
      jSONObject1.putOpt("OvE<BkgNfA(lL", object0);
      assertEquals(2, jSONObject0.length());
      
      JSONObject.valueToString("JSON does not allow non-finite numbers.", 92, 41);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(hashMap0, (-944), 242);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.2659980330682585
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      stringArray0[2] = "";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("E%){AN'<W", (Collection) linkedList0);
      jSONObject1.putOpt("OvE<BkgNfA(lL", "");
      String string0 = JSONObject.valueToString(jSONObject1, 92, 92);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      String string1 = JSONObject.valueToString("", 242, 958);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6743391578059517
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "k]C6n";
      stringArray0[1] = "/LeYufI";
      stringArray0[2] = "";
      stringArray0[3] = "~wR-cLA@emA@f%9kA";
      String string0 = " of ";
      stringArray0[4] = " of ";
      stringArray0[5] = "UFOadTb.|jwq93H9l3";
      stringArray0[6] = "-g6~#-r)xi%=:_%&st";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.toString(2688);
      try { 
        jSONObject0.get("UFOadTb.|jwq93H9l3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"UFOadTb.|jwq93H9l3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7332604125915365
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[6];
      stringArray0[4] = "";
      stringArray0[1] = ",7<.7Rb D5w!B+c";
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      boolean boolean0 = jSONObject0.isNull("iZ$x9HLI=_hLEqJNu-o");
      assertTrue(boolean0);
      
      int int0 = jSONObject0.optInt("_]6{\u00018F5ZB_BOfE6u{");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.keySet();
      String string0 = null;
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.460462837375577
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("i_B-#6_+j31Pc<&n66J");
      JSONObject jSONObject1 = jSONObject0.put("i_B-#6_+j31Pc<&n66J", 580.3618761094066);
      jSONObject0.put("E{\"?9x Xs7UHd", 4071);
      Boolean boolean0 = Boolean.FALSE;
      Object object0 = new Object();
      JSONObject.getNames((Object) hashMap0);
      Double double0 = new Double(0L);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap2.compute(double0, biFunction0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.310856658845861
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean.valueOf(true);
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      Boolean boolean0 = Boolean.FALSE;
      String string0 = "?s\"i>1BR";
      hashMap1.put(boolean0, "?s\"i>1BR");
      jSONObject0.names();
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      Float float0 = new Float((-1.0));
      hashMap2.put(float0, float0);
      jSONObject0.put("?s\"i>1BR", (Map) hashMap2);
      JSONObject jSONObject1 = new JSONObject(boolean0);
      try { 
        jSONObject1.getDouble("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.7015068093160193
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("ajF#\"Y", hashMap0);
      jSONObject1.optDouble("ajF#\"Y");
      jSONObject0.get("ajF#\"Y");
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0174624867451163
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1673.125F);
      JSONObject.valueToString(float0);
      String string0 = "";
      try { 
        jSONObject0.getLong("t3#fKsMp9}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t3#fKsMp9}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      JSONObject.valueToString(boolean0);
      Boolean boolean1 = Boolean.FALSE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.492673896082832
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      String string0 = "A=^@(X7";
      JSONObject jSONObject1 = jSONObject0.accumulate("A=^@(X7", "A=^@(X7");
      jSONObject1.optLong("A=^@(X7");
      String string1 = "&w";
      jSONObject1.optString("&w", "A=^@(X7");
      String string2 = "\\u";
      try { 
        jSONObject0.getJSONArray(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V X\"odbg";
      stringArray0[1] = "V X\"odbg";
      stringArray0[2] = "V X\"odbg";
      JSONObject jSONObject0 = new JSONObject("toS", stringArray0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      Double double0 = new Double(0.0F);
      Integer integer0 = new Integer(48);
      Integer.divideUnsigned(48, 48);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(double0, integer0, biFunction0);
      BiFunction<Double, Integer, Integer> biFunction1 = (BiFunction<Double, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyDouble() , anyInt());
      hashMap0.replaceAll(biFunction1);
      HashMap<Double, Integer> hashMap1 = new HashMap<Double, Integer>();
      Integer integer1 = new Integer(166);
      HashMap<Double, Integer> hashMap2 = new HashMap<Double, Integer>();
      boolean boolean0 = jSONObject0.isNull("V X\"odbg");
      assertTrue(boolean0);
  }
}
