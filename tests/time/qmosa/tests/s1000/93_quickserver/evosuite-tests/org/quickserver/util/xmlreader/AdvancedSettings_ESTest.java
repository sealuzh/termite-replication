/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:23:45 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-554));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      assertEquals("ISO-8859-1", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.225227939993955
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientIdentifier("LM/G]{;J&Xt_D\"5+");
      advancedSettings0.setClientSocketReceiveBufferSize(2511);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setQSObjectPoolMaker("]nDe^2Tqb*05OAFI'Q");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(0);
      advancedSettings1.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesBandwidth(2511);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.getMaxThreadsForNioWrite();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getQSObjectPoolMaker();
      advancedSettings1.setSocketLinger(1192);
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings3.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      assertEquals("LM/G]{;J&Xt_D\"5+", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1045194659164395
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(1534);
      advancedSettings0.setMaxThreadsForNioWrite(379);
      advancedSettings0.setClientSocketReceiveBufferSize(873);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(1856);
      advancedSettings0.setMaxThreadsForNioWrite((-745));
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.getMaxThreadsForNioWrite();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings1.setSocketLinger(1534);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setCharset("");
      advancedSettings1.getMaxThreadsForNioWrite();
      int int0 = advancedSettings1.getMaxThreadsForNioWrite();
      assertEquals(1534, advancedSettings1.getSocketLinger());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(2614);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("]X2TU");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getBacklog();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientIdentifier();
      assertEquals(2614, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("</use-direct-byte-buffer>\n");
      advancedSettings0.setPerformancePreferencesLatency((-215));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals("</use-direct-byte-buffer>\n", advancedSettings0.getClientIdentifier());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketSendBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-socket-receive-buffer-sizh\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-socket-receive-buffer-sizh
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4900312121629535
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(2694);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize((-62));
      advancedSettings1.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize(2694);
      advancedSettings0.setClientSocketReceiveBufferSize((-62));
      advancedSettings1.toXML("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings1.toXML((String) null);
      assertEquals((-62), advancedSettings1.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(1551);
      advancedSettings0.setClientSocketReceiveBufferSize((-62));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize(1856);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(873);
      advancedSettings0.setMaxThreadsForNioWrite(873);
      advancedSettings0.setPerformancePreferencesBandwidth(873);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger((-633));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getByteBufferSize();
      assertEquals(873, advancedSettings0.getPerformancePreferencesBandwidth());
      
      int int0 = advancedSettings1.getByteBufferSize();
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9397928111645655
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(1534);
      advancedSettings0.setClientSocketReceiveBufferSize(873);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger(1534);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("</client-identifier>\n");
      advancedSettings1.getClientIdentifier();
      advancedSettings0.setClientIdentifier("</client-identifier>\n");
      assertEquals("</client-identifier>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1572993769863045
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(2694);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesLatency(200);
      advancedSettings0.setClientIdentifier("\t<debug-non-blocking-mode>");
      advancedSettings0.setCharset("");
      advancedSettings0.setQSObjectPoolMaker("|lW,q_");
      advancedSettings0.setPerformancePreferencesBandwidth((-844));
      advancedSettings0.setPerformancePreferencesBandwidth((-2771));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTrafficClass("|lW,q_");
      advancedSettings0.getPerformancePreferencesLatency();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals("\t<debug-non-blocking-mode>", advancedSettings0.getClientIdentifier());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.430978654771881
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(1534);
      advancedSettings0.setMaxThreadsForNioWrite(1534);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      assertEquals(1534, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.947200218571973
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime(2785);
      advancedSettings0.setSocketLinger(1);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setSocketLinger(2110);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesLatency(2110);
      advancedSettings0.setPerformancePreferencesConnectionTime(804);
      advancedSettings1.setClientSocketTrafficClass("cH9}G@C");
      advancedSettings1.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings0.setMaxThreadsForNioWrite(804);
      advancedSettings1.setPerformancePreferencesBandwidth(0);
      advancedSettings1.setClientIdentifier("");
      assertEquals(2110, advancedSettings1.getSocketLinger());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("m");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // m
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9740420290828737
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(1534);
      advancedSettings0.setClientSocketReceiveBufferSize((-62));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketSendBufferSize(1856);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(883);
      advancedSettings0.setMaxThreadsForNioWrite(883);
      advancedSettings0.setPerformancePreferencesBandwidth(883);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      assertEquals((-62), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3039214422364647
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientIdentifier("LM/G]{;J&Xt_D\"5+");
      advancedSettings0.setQSObjectPoolMaker("3-");
      advancedSettings0.setClientIdentifier("+!<*m#h$");
      advancedSettings0.setClientSocketTrafficClass("%lR");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("3-");
      advancedSettings0.setPerformancePreferencesConnectionTime(2456);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesBandwidth(3461);
      advancedSettings0.setPerformancePreferencesBandwidth(2456);
      advancedSettings0.setQSObjectPoolMaker("\t<client-socket-send-buffer-size>");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTrafficClass("+!<*m#h$");
      advancedSettings0.setSocketLinger(356);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals("+!<*m#h$", advancedSettings0.getClientIdentifier());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-2080));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1737502027185687
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("C`U +MPV");
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setMaxThreadsForNioWrite((-2437));
      advancedSettings0.setClientIdentifier("Rn[w5sS");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass("BT|XL3");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketSendBufferSize((-1967));
      advancedSettings0.setBacklog(362);
      advancedSettings0.setClientSocketReceiveBufferSize(362);
      advancedSettings0.setUseDirectByteBuffer(false);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-1967), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.702699032096082
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setSocketLinger((-3));
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1282));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.setBacklog((-1282));
      advancedSettings0.toXML("P(%");
      boolean boolean0 = false;
      advancedSettings0.setClientSocketTcpNoDelay(false);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("P(%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // P(%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4915349715614497
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.toXML("GoV=sQ)U.(rmF/");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.toXML("");
      advancedSettings0.getBacklog();
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>0</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class></client-socket-traffic-class>\n</advanced-settings>\n");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTrafficClass();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(0, advancedSettings0.getSocketLinger());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4882967972644554
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(2694);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize((-1737));
      advancedSettings0.toXML("");
      assertEquals(2694, advancedSettings0.getClientSocketSendBufferSize());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketTrafficClass();
      int int0 = advancedSettings1.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1262368167947456
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(1551);
      advancedSettings0.setClientSocketReceiveBufferSize((-62));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize(1856);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-62));
      advancedSettings0.setMaxThreadsForNioWrite(873);
      advancedSettings0.setPerformancePreferencesBandwidth(873);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger((-633));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("hQHM");
      advancedSettings0.getByteBufferSize();
      assertEquals((-633), advancedSettings0.getSocketLinger());
      
      int int0 = advancedSettings1.getByteBufferSize();
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.027841181869761
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime(0);
      advancedSettings1.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setPerformancePreferencesLatency(0);
      advancedSettings1.setQSObjectPoolMaker("|lW,q_");
      advancedSettings0.setPerformancePreferencesBandwidth((-844));
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings1.setUseDirectByteBuffer(true);
      advancedSettings1.setPerformancePreferencesLatency(1596);
      advancedSettings1.setUseDirectByteBuffer(true);
      advancedSettings0.getSocketLinger();
      advancedSettings1.setSocketLinger((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals((-844), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2295488300275705
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(32);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(1660);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("O$");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      assertEquals("O$", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.757034259466139
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("0un[V|\" ez");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("\t<debug-non-blocking-mode>");
      advancedSettings0.setClientIdentifier("\t<client-socket-send-buffer-size>");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("0un[V|\" ez");
      advancedSettings0.setCharset("");
      assertEquals("0un[V|\" ez", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      String string0 = advancedSettings0.getCharset();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", string0);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientIdentifier();
      advancedSettings0.setBacklog(2122);
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.getClientIdentifier();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      assertEquals(2122, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7130415601881177
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientIdentifier("*lRh['Y");
      advancedSettings0.setClientIdentifier("*lRh['Y");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("!<*m#h$");
      advancedSettings0.setClientIdentifier("");
      assertEquals("!<*m#h$", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.437570807897146
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(2694);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize((-1737));
      advancedSettings0.toXML("");
      assertEquals(2694, advancedSettings0.getClientSocketSendBufferSize());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketTrafficClass();
      int int0 = advancedSettings1.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.456872374135548
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime(2785);
      advancedSettings0.setSocketLinger(1);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setSocketLinger(2110);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings1.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.setClientIdentifier("wBP['&'=-hFm");
      assertEquals(2110, advancedSettings1.getSocketLinger());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setQSObjectPoolMaker("]V");
      advancedSettings0.getQSObjectPoolMaker();
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6243301779952075
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(482);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("bc.y4Ws");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("bc.y4Ws");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("bc.y4Ws");
      assertEquals(482, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-3));
      advancedSettings0.setClientSocketReceiveBufferSize((-3));
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-3), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(10);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(10, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1058266554589236
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime(2785);
      advancedSettings0.setSocketLinger(1);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setSocketLinger(2110);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesLatency(2110);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesConnectionTime(804);
      advancedSettings1.setClientSocketTrafficClass("cH9}G@C");
      advancedSettings1.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings1.getPerformancePreferencesLatency();
      advancedSettings1.getClientIdentifier();
      assertEquals(2110, advancedSettings1.getSocketLinger());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      int int0 = advancedSettings2.getPerformancePreferencesLatency();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7186438010844762
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier(">pB1p<nmN-yuX5m~3~");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientIdentifier(">pB1p<nmN-yuX5m~3~");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      assertEquals(">pB1p<nmN-yuX5m~3~", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7239348063754814
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("0un[V|\" ez");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("\t<debug-non-blocking-mode>");
      advancedSettings0.setClientIdentifier("\t<client-socket-send-buffer-size>");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("0un[V|\" ez");
      advancedSettings0.getClientIdentifier();
      assertEquals("0un[V|\" ez", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(2694);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize((-1737));
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(2694, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals((-1737), int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.722453324894
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("0fun[V|\" ez");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("\t<debug-non-blocking-mode>");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      assertEquals("\t<debug-non-blocking-mode>", advancedSettings0.getClientIdentifier());
  }
}
