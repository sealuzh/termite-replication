/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 13:57:16 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientCommandHandler();
      defaultClientEventHandler0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("+OK Done, Errors: ", 2);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTrusted(false);
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      theClient0.getAuthenticator();
      theClient0.getAuthenticator();
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      theClient0.getClientBinaryHandler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getClientEventHandler();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3781766359449454
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeout(596);
      theClient0.getCommunicationLogging();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeout(4);
      theClient0.getAuthenticator();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setTimeoutMsg("org.quickserver.net.server.TheClient");
      theClient0.toString();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getSocket();
      assertEquals(4, theClient0.getTimeout());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4367466714741326
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.setCommunicationLogging(false);
      theClient0.setMaxAuthTry((-85));
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-85));
      commandHandler0.lostConnection(blockingClientHandler0);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getAuthenticator();
      theClient0.getClientCommandHandler();
      theClient0.setTimeout(24);
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientEventHandler();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientCommandHandler();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getServer();
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.getClientCommandHandler();
      theClient0.toString();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      assertEquals((-85), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1218159503049137
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setClientEvent(clientEvent0);
      theClient0.toString();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setMaxAuthTryMsg("{TheClient no socket, Event: (ClientEvent-Write)}");
      ClientEvent clientEvent1 = ClientEvent.CLOSE_CON;
      theClient0.setCommunicationLogging(false);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getAuthenticator();
      theClient0.getCommunicationLogging();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((InetAddress) null, (-5), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.122928297357194
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setTimeout(125);
      QuickServer quickServer0 = new QuickServer("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      quickServer0.setClientAuthenticationHandler("");
      theClient0.setServer(quickServer0);
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      nonBlockingClientHandler0.setSecure(true);
      nonBlockingClientHandler0.getSocketChannel();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.getClientAuthenticationHandler();
      theClient0.setTrusted(true);
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.setMaxConnectionMsg("writeAllByteBuffer is true!");
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getSocket();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getTimeout();
      theClient0.getClientData();
      theClient0.getServer();
      assertEquals(125, theClient0.getTimeout());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.322102232945105
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTry();
      theClient0.getClientAuthenticationHandler();
      theClient0.toString();
      TheClient theClient1 = new TheClient();
      theClient1.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient1.setTimeout(1480);
      theClient0.setTimeoutMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient1.getCommunicationLogging();
      theClient0.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient1.setMaxAuthTry(51);
      theClient1.getServer();
      Data data0 = new Data();
      Data data1 = new Data();
      data1.setUsername("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient1.getClientData();
      theClient1.setClientData((ClientData) null);
      TheClient theClient2 = new TheClient();
      theClient2.getServer();
      theClient0.getTimeoutMsg();
      theClient1.getServer();
      int int0 = theClient1.getMaxAuthTry();
      assertEquals(1480, theClient1.getTimeout());
      assertEquals(51, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.toString();
      theClient0.getClientEventHandler();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.setMaxAuthTryMsg("Waiting for other thread of ");
      theClient0.getCommunicationLogging();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getClientEvent();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxConnectionMsg("=P:I0j1QUqs.");
      theClient0.setTimeout((-167));
      theClient0.setTimeoutMsg("");
      theClient0.getAuthenticator();
      theClient0.getTrusted();
      theClient0.getMaxAuthTryMsg();
      theClient0.getCommunicationLogging();
      theClient0.setCommunicationLogging(false);
      theClient0.getTimeoutMsg();
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress("@WgUpffe$A2", (-167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-167
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.getClientBinaryHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setAuthenticator((Authenticator) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.380167676263512
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      String string0 = theClient1.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient1.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.setMaxAuthTryMsg("");
      theClient1.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTimeout(0);
      theClient1.setMaxConnectionMsg("");
      theClient0.setMaxConnectionMsg("$QRLN)u");
      theClient1.getClientBinaryHandler();
      theClient1.getMaxAuthTryMsg();
      theClient1.getSocket();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      int int0 = theClient1.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.125543816101745
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setTimeout(125);
      QuickServer quickServer0 = new QuickServer("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      quickServer0.setClientAuthenticationHandler("");
      theClient0.setServer(quickServer0);
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      nonBlockingClientHandler0.setSecure(true);
      nonBlockingClientHandler0.getSocketChannel();
      theClient0.getClientAuthenticationHandler();
      theClient0.setTrusted(true);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getSocket();
      theClient0.getTimeout();
      theClient0.setCommunicationLogging(false);
      theClient0.setTrusted(true);
      theClient0.getServer();
      QuickServer quickServer1 = new QuickServer((String) null);
      theClient0.setServer(quickServer1);
      theClient0.getClientWriteHandler();
      assertEquals(125, theClient0.getTimeout());
      
      TheClient theClient1 = new TheClient();
      theClient1.setClientCommandHandler(commandHandler0);
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3805678363275375
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      String string0 = theClient1.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient1.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.setMaxAuthTryMsg("");
      theClient1.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTimeout(0);
      theClient1.setMaxConnectionMsg("");
      theClient0.setMaxConnectionMsg("$QRLN)u");
      theClient1.getClientBinaryHandler();
      theClient1.getMaxAuthTryMsg();
      theClient1.getSocket();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      assertEquals(0, theClient0.getTimeout());
      
      int int0 = theClient1.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient1.getClientData();
      theClient1.getMaxConnectionMsg();
      assertTrue(theClient1.getCommunicationLogging());
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg((String) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("handshakeStatus: ", 101);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.getMaxAuthTry();
      theClient0.setTrusted(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.getTrusted();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("", 0, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2fd50fbb
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.127429422638514
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      String string0 = theClient1.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient1.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.setMaxAuthTryMsg("");
      theClient1.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTimeout(0);
      theClient1.setMaxConnectionMsg("");
      theClient0.setMaxConnectionMsg("$QRLN)u");
      assertEquals(0, theClient0.getTimeout());
      
      theClient1.getClientBinaryHandler();
      theClient1.getMaxAuthTryMsg();
      theClient1.getAuthenticator();
      int int0 = theClient1.getTimeout();
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setTimeout(520);
      theClient1.getCommunicationLogging();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.setTimeout(520);
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient1.setClientEvent(clientEvent0);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getAuthenticator();
      int int0 = theClient0.getTimeout();
      assertEquals(520, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEvent();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2597682094192684
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      theClient1.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeout((byte) (-115));
      theClient0.getAuthenticator();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient1.toString();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      TheClient theClient2 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient1.getClientAuthenticationHandler();
      theClient0.getClientObjectHandler();
      theClient0.getTimeout();
      theClient1.getClientData();
      theClient0.getSocketChannel();
      assertEquals((-115), theClient0.getTimeout());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(false);
      theClient0.setMaxConnectionMsg("");
      theClient0.setMaxAuthTry((-1));
      theClient0.setTimeout((-637));
      theClient0.setMaxAuthTryMsg("UhG9b(afI");
      theClient0.getMaxAuthTry();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setMaxAuthTryMsg("42");
      theClient0.setTimeout((-1));
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientWriteHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1239058144637433
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeout(596);
      theClient0.toString();
      theClient0.setTimeoutMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.getAuthenticator();
      theClient0.getTrusted();
      theClient0.getMaxAuthTryMsg();
      theClient0.getCommunicationLogging();
      TheClient theClient1 = new TheClient();
      theClient1.setCommunicationLogging(true);
      theClient0.getTimeoutMsg();
      int int0 = 917;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("!Ox,bMN0qRxGwJ-", 917);
      mockInetSocketAddress0.getHostName();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      mockInetSocketAddress0.getHostName();
      // Undeclared exception!
      try { 
        SocketChannel.open((SocketAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setTimeout(125);
      QuickServer quickServer0 = new QuickServer("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      quickServer0.setClientAuthenticationHandler("");
      theClient0.setServer(quickServer0);
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setMaxAuthTryMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientAuthenticationHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      BlockingClientHandler blockingClientHandler1 = new BlockingClientHandler((-1));
      // Undeclared exception!
      try { 
        blockingClientHandler1.getSocketChannel();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1982462795335826
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setCommunicationLogging(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Error on Event:{0} - Socket:{1} : {2}");
      theClient0.getServer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientCommandHandler();
      theClient0.setMaxConnectionMsg("Error on Event:{0} - Socket:{1} : {2}");
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.setCommunicationLogging(false);
      theClient0.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientCommandHandler();
      theClient0.getAuthenticator();
      theClient0.getClientEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getServer();
      theClient0.getClientCommandHandler();
      theClient0.getClientCommandHandler();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1952296882816973
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient1.toString();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient1.getAuthenticator();
      boolean boolean0 = theClient1.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient1.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.getClientExtendedEventHandler();
      theClient1.setMaxAuthTry(0);
      theClient1.getServer();
      Data data0 = new Data();
      Data data1 = new Data();
      data1.setUsername("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      byte[] byteArray0 = new byte[0];
      data1.setPassword(byteArray0);
      data1.setUsername("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient1.getClientWriteHandler();
      theClient1.getClientAuthenticationHandler();
      theClient1.getClientObjectHandler();
      TheClient theClient2 = new TheClient();
      theClient2.setClientObjectHandler((ClientObjectHandler) null);
      String string0 = theClient1.toString();
      assertFalse(theClient1.getTrusted());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertEquals(0, theClient1.getMaxAuthTry());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<client-handler-object-pool>\n");
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(680);
      assertEquals("<ClientHandler-Pool#680-ID:1>", blockingClientHandler0.getName());
      
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2597682094192684
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getAuthenticator();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientData((ClientData) null);
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = 0;
      theClient0.setTimeout(0);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      boolean boolean0 = true;
      theClient0.setTrusted(true);
      theClient0.toString();
      theClient0.setTrusted(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-115);
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-97, -115]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("8P3i^8I/mcn");
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setServer(quickServer0);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
