/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:30:45 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTKeyStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Rectangle2D;
import java.awt.image.ImageObserver;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JInternalFrame;
import javax.swing.JRootPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.ChangeListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.metal.MetalScrollBarUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleContext;
import org.apache.batik.ext.awt.image.renderable.MorphologyRable8Bit;
import org.apache.batik.ext.awt.image.renderable.TurbulenceRable8Bit;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1249281689435735
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray2[1] = object0;
      objectArray2[2] = (Object) null;
      objectArray2[3] = (Object) jDayChooser0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      objectArray2[4] = (Object) null;
      objectArray2[5] = (Object) null;
      objectArray2[6] = (Object) jDayChooser0;
      objectArray2[7] = (Object) jDayChooser0;
      objectArray2[8] = (Object) jDayChooser0;
      jDayChooser0.updateUI();
      Timestamp timestamp0 = new Timestamp((-937L));
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2301810169013785
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDayBordersVisible(false);
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, false, false, false);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      AWTKeyStroke.getAWTKeyStroke('C');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.createVolatileImage(11, 11);
      jDayChooser1.unregisterKeyboardAction((KeyStroke) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      Point point0 = new Point(11, (-1266));
      jMonthChooser0.getLocation(point0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setMonthChooser(jMonthChooser0);
      jDayChooser2.checkImage((Image) null, 14, 14, (ImageObserver) jRootPane0);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser0.setYear((-41));
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser3, (-1266), "b]P:C)nCmI@2FK", 14);
      // Undeclared exception!
      try { 
        jDayChooser2.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.096591278091726
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K=S~H3Y<jlzuO3l");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SchemeMode schemeMode0 = new SchemeMode();
      // Undeclared exception!
      try { 
        schemeMode0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.schememode.SchemeMode", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2545197865397655
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jDayChooser0;
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) jDayChooser0;
      Object object0 = jDayChooser0.getTreeLock();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) null;
      objectArray1[3] = (Object) jDayChooser0;
      objectArray1[4] = (Object) null;
      objectArray1[5] = (Object) null;
      objectArray1[6] = (Object) jDayChooser0;
      objectArray1[7] = (Object) jDayChooser0;
      objectArray1[8] = (Object) jDayChooser0;
      jDayChooser0.setFocus();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.updateUI();
      jDayChooser1.removeKeyListener(jDayChooser0);
      jDayChooser0.setMaxDayCharacters(7);
      jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.256071207530411
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(">M>._AHpVs|]M", true);
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem("Dialog Plain 11", true);
      jCheckBoxMenuItem1.getAccelerator();
      AWTKeyStroke.getAWTKeyStroke('(');
      jDayChooser0.createVolatileImage((-1266), (-1266));
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      Point point0 = new Point((-4432), (-1709));
      jMonthChooser0.getLocation(point0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters((-1895));
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.097469316004617
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.getComponentPopupMenu();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setDecorationBackgroundVisible(true);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      jDayChooser1.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1345606492920375
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = new StyleContext();
      styleContext0.getEmptySet();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      defaultStyledDocument0.getForeground(attributeSet0);
      MetalScrollBarUI metalScrollBarUI0 = new MetalScrollBarUI();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      AWTKeyStroke.getAWTKeyStroke('7');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.createVolatileImage((-1266), (-1266));
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      JMonthChooser jMonthChooser1 = new JMonthChooser();
      Point point0 = new Point((-1266), (-1266));
      jMonthChooser1.getLocation(point0);
      Color color0 = jDayChooser1.getSundayForeground();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertEquals((-6029312), color0.getRGB());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1016375222848858
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(142L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) jDayChooser0;
      objectArray0[2] = (Object) jDayChooser0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 48);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect((-1226));
      jDayChooser0.scrollRectToVisible(rectangle0);
      jDayChooser0.getMaxSelectableDate();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1046910228451723
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser1.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.205567847238633
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((String) null, true);
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem((String) null, false);
      jCheckBoxMenuItem1.getAccelerator();
      AWTKeyStroke.getAWTKeyStroke('(');
      jDayChooser0.createVolatileImage((-1266), (-1266));
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      Point point0 = new Point((-4432), (-1266));
      jMonthChooser0.getLocation(point0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createImage(1958, 1958);
      jDayChooser0.imageUpdate((Image) null, 1958, 1958, 0, 0, 0);
      jDayChooser0.getMouseListeners();
      jDayChooser0.getInputMap(0);
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-622), (-622), 523, 0, '<', 0);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.decorationBackgroundVisible = false;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.24136931312065
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDayBordersVisible(false);
      JButton[] jButtonArray0 = new JButton[7];
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, false, false, false);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      jRootPane0.getDefaultButton();
      jButtonArray0[0] = null;
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      JButton jButton0 = new JButton((Icon) null);
      jButtonArray0[1] = jButton0;
      JButton jButton1 = jDayChooser1.selectedDay;
      jButtonArray0[2] = null;
      JMonthChooser jMonthChooser0 = jDayChooser1.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser1.setFocus();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.updateUI();
      jDayChooser1.setMonth(1056);
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser2.initDecorations();
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3011802354730313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.setDoubleBuffered(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.initDecorations();
      BorderLayout borderLayout0 = new BorderLayout((-2305), 281);
      jDayChooser0.setLayout(borderLayout0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addNotify();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setDecorationBackgroundVisible(false);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = null;
      try {
        pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, (OutputStream) null, 0, 10043);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.fop.pdf.PDFDocument", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1345606492920375
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AWTKeyStroke.getAWTKeyStroke('*');
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      Point point0 = new Point(3, 22);
      jMonthChooser0.getLocation(point0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1708493740339265
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setDayBordersVisible(false);
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, false, false, false);
      JRootPane jRootPane0 = jInternalFrame0.getRootPane();
      jRootPane0.getDefaultButton();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      JButton jButton0 = new JButton((Icon) null);
      JButton jButton1 = jDayChooser1.selectedDay;
      JButton jButton2 = new JButton((String) null, (Icon) null);
      JButton jButton3 = new JButton("4IXZY-", (Icon) null);
      JButton jButton4 = new JButton();
      jDayChooser0.transferFocusBackward();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isValidateRoot();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      Color.RGBtoHSB(0, 917, 917, (float[]) null);
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.240406120826188
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = new StyleContext();
      styleContext0.getEmptySet();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      Color color0 = defaultStyledDocument0.getForeground(attributeSet0);
      MetalScrollBarUI metalScrollBarUI0 = new MetalScrollBarUI();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      styleContext0.removeChangeListener((ChangeListener) null);
      jDayChooser0.setLayout(metalScrollBarUI0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setSundayForeground(color0);
      AWTKeyStroke.getAWTKeyStroke(':');
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(':');
      jDayChooser0.unregisterKeyboardAction(keyStroke0);
      JMonthChooser jMonthChooser1 = new JMonthChooser();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.setMonth((-1666));
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((String) null, true);
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem((String) null, false);
      jCheckBoxMenuItem1.getAccelerator();
      AWTKeyStroke.getAWTKeyStroke('(');
      jDayChooser0.createVolatileImage((-1266), (-1266));
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      int int0 = 16;
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-1266), (-1266), 16, (-1266), '(', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "5.";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      JTable jTable0 = new JTable();
      jYearChooser0.createVolatileImage(0, 7);
      Rectangle rectangle0 = jTable0.getCellRect(0, (-1950), false);
      TurbulenceRable8Bit turbulenceRable8Bit0 = new TurbulenceRable8Bit(rectangle0, (-2566), (-624), 0, 0, false, false);
      MorphologyRable8Bit morphologyRable8Bit0 = new MorphologyRable8Bit(turbulenceRable8Bit0, 7, 1.0E-6, false);
      Rectangle2D rectangle2D0 = morphologyRable8Bit0.getBounds2D();
      rectangle0.setFrame(rectangle2D0);
      jYearChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setYearChooser(jYearChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 7);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.167881841697888
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((String) null, true);
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem((String) null, false);
      jCheckBoxMenuItem1.getAccelerator();
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("", false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jCheckBoxMenuItem0, (-1954), (-1954), 18434, 214, (-220), 214, (-1954), 9, false, 214, (-1954), 2424);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      jCheckBoxMenuItem0.processMouseEvent(mouseWheelEvent0, menuElementArray0, (MenuSelectionManager) null);
      jCheckBoxMenuItem0.getAccelerator();
      jDayChooser0.getTreeLock();
      jDayChooser0.firePropertyChange("", (short)164, (short)33);
      jDayChooser0.setYear((-1719));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInputVerifier();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1410682228425664
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      AttributeSet attributeSet0 = styleContext_NamedStyle0.copyAttributes();
      Color color0 = styleContext0.getBackground(attributeSet0);
      jDayChooser1.setBackground(color0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }
}
