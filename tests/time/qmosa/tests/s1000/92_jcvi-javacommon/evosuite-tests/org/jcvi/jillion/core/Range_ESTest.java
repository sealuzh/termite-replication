/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:20:08 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.948600775686114
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of((-2L), (-2L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range1.getBegin();
      Object object0 = new Object();
      Range range2 = Range.ofLength(607L);
      range1.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.intersects(range2);
      range0.toString();
      long long0 = 4476L;
      Range.Builder range_Builder1 = new Range.Builder(0L, 4294967295L);
      Range.Builder range_Builder2 = range_Builder0.expandEnd((-126L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 255L, 587L);
      Range.of(0L);
      Range.Builder range_Builder3 = new Range.Builder(1L);
      range_Builder3.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem1, 607L, 9223372036854775423L);
      range_Builder3.shift((-2L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.9008624546899933
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.ofLength(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range2.toString();
      range0.endsBefore(range1);
      range1.toString();
      range1.intersects(range0);
      range1.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L, 4476L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1058L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1058L, 9223372036854775423L);
      Range.of(1058L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem2, 9223372036854775423L, (-547L));
      range_Builder2.shift(385L);
      Range range3 = Range.of(range_CoordinateSystem1, 385L, 4476L);
      // Undeclared exception!
      try { 
        range3.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7679778326447964
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 607L;
      Range range0 = Range.of((-2L), (-2L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      Range.ofLength(607L);
      range1.equals(object0);
      long long1 = 0L;
      range_Builder0.contractBegin(0L);
      range_Builder0.build();
      String string0 = "org.jcvi.jillion.core.util.MapUtil";
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.util.MapUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.util.MapUtil into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.011867943661045
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(3455L);
      String string0 = null;
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      Range range2 = range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      long long0 = 0L;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      range2.isEmpty();
      long long1 = 255L;
      Range.ofLength(3455L);
      range1.endsBefore(range0);
      Range.of(284L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.034952548972772
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(32767L, 32767L);
      range0.toString();
      Range range2 = Range.of(0L, 2506L);
      range0.startsBefore(range2);
      range0.isSubRangeOf(range2);
      range0.endsBefore(range0);
      range0.toString();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.equals("[ 0 .. 1057 ]/SB");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.copy();
      long long0 = 0L;
      Range.of(range_CoordinateSystem1, (-546L), 32767L);
      range_Builder0.contractEnd((-766L));
      Range.of(2506L);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, (-848L), (-848L));
      range_Builder2.copy();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem2, 5429L, (-848L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.7884853758976935
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 386 .. 386 ]/RB", string0);
      
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range0.toString();
      boolean boolean0 = range0.endsBefore(range1);
      range1.toString();
      range1.isEmpty();
      range1.toString();
      range0.toString();
      Range range3 = Range.of(1L);
      assertFalse(range3.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-44L), 2119L);
      Range range4 = Range.of((-44L));
      range0.isEmpty();
      boolean boolean1 = range2.intersects(range4);
      assertTrue(boolean1 == boolean0);
      assertSame(range2, range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.013013714902309
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 386 .. 386 ]/RB", string0);
      
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range2.toString();
      boolean boolean0 = range0.endsBefore(range1);
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 1L, 385L);
      range0.startsBefore(range2);
      Range range4 = Range.ofLength(385L);
      boolean boolean1 = range4.endsBefore(range0);
      assertFalse(boolean1 == boolean0);
      
      Range range5 = Range.of(2147483647L);
      range2.split(1023L);
      Range range6 = Range.of(2147483647L);
      boolean boolean2 = range3.endsBefore(range6);
      Object object0 = new Object();
      boolean boolean3 = range5.equals(object0);
      assertFalse(boolean3 == boolean2);
      
      List<Range> list0 = new LinkedList<Range>();
      List<Range> list1 = range2.complement(range4);
      assertEquals(1, list1.size());
      assertFalse(range4.isEmpty());
      
      range6.split(2147483647L);
      Range range7 = range6.asRange();
      assertFalse(range7.isEmpty());
      assertSame(range7, range5);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.864321744453081
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      long long0 = (-2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.of(range_CoordinateSystem0, (-2147483648L), 2147483647L);
      range0.startsBefore(range1);
      range0.getEnd(range_CoordinateSystem0);
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.9504161315809774
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of(3455L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      Range range2 = range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString(range_CoordinateSystem1);
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(255L);
      range0.toString();
      range0.intersects(range3);
      range2.toString();
      range2.toString();
      long long1 = 1L;
      Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = (-1L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem2, 255L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.205849789650719
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of(3455L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      Range range2 = range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(255L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem2.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.shift(0L);
      Range.Builder range_Builder3 = range_Builder1.expandEnd(3455L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem3, (-2147483648L), 255L);
      Range.of((-2147483648L));
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem4, 255L, 3455L);
      range_Builder3.shift(2435L);
      range_Builder0.build();
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 3455L, 281L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.118050925460892
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of((-1217L));
      Range range1 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.ofLength(1L);
      range1.getEnd(range_CoordinateSystem0);
      range2.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1L, 0L);
      range1.startsBefore(range0);
      long long0 = 9223372034707292161L;
      Range range3 = Range.ofLength(9223372034707292161L);
      range2.endsBefore(range1);
      Range.of(1023L);
      Range.of((-1451L));
      range0.endsBefore(range2);
      Object object0 = new Object();
      range3.equals(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complement(range3);
      // Undeclared exception!
      try { 
        Range.parseRange("Z", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Z into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5117046813380886
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.equals((Object) null);
      range0.toString(range_CoordinateSystem0);
      Range.of(1057L);
      // Undeclared exception!
      try { 
        Range.of(1057L, (-1334L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.8417948234153005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      Range range1 = Range.of(65535L, 4294967295L);
      range1.toString(range_CoordinateSystem0);
      long long0 = (-1538L);
      Range.of(9223372034707292161L);
      Range.of((-32768L), 1367L);
      range0.toString();
      Range range2 = Range.ofLength(3387L);
      range2.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 1426L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.8521508643825424
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of((-1217L));
      long long0 = 127L;
      Range range1 = Range.of(127L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.startsBefore(range0);
      long long1 = 4294967295L;
      Range range2 = Range.of(range_CoordinateSystem0, 384L, 4294967295L);
      range0.startsBefore(range1);
      Range.ofLength(255L);
      range0.endsBefore(range2);
      long long2 = 1023L;
      Range range3 = Range.of(127L);
      range3.split(384L);
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.864139881895817
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.of(range_CoordinateSystem0, (-2147483648L), 2147483647L);
      range1.toString();
      Range.of((-6177L), 2506L);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("[ 2147483647 .. 2147483646 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.814765508586646
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-5L);
      Range.of(range_CoordinateSystem0, (-5L), 127L);
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      long long1 = 2413L;
      Long long2 = new Long(2413L);
      range1.equals(range0);
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.copy();
      long long3 = 4476L;
      range_Builder1.expandEnd((-5L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2413L, 252L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.0222924871097625
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      Range range1 = Range.ofLength(65535L);
      Range range2 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range3 = range2.intersection(range0);
      range3.toString();
      boolean boolean0 = range3.intersects(range1);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ -5 .. 126 ]/0B", string0);
      
      String string1 = range3.toString();
      assertEquals("[ 1057 .. 1056 ]/0B", string1);
      
      Range range4 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-44L), 65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range range5 = Range.of(4476L);
      boolean boolean1 = range4.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      
      Range.of(132L);
      boolean boolean2 = range4.endsBefore(range5);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.705589651381619
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of(0L, 4476L);
      Range range1 = Range.of(0L);
      Range range2 = Range.of(4476L, 4476L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 4476 ]/0B", string0);
      
      range0.endsBefore(range1);
      Range range3 = Range.of(0L, 0L);
      range3.toString();
      boolean boolean0 = range3.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      String string1 = range3.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 3454 ]/0B", string1);
      
      long long0 = range2.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      range1.isSubRangeOf(range2);
      Range.Comparators.values();
      range3.iterator();
      Range.CoordinateSystem.values();
      boolean boolean1 = range1.isEmpty();
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=4.1903843921724775
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L);
      range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-538L), (-538L));
      Range range2 = Range.of(range_CoordinateSystem0, (-36L), (-36L));
      Long long0 = new Long((-1335L));
      Long.divideUnsigned((-4122L), (-538L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.equals(long0);
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.shift((-3888L));
      range_Builder1.contractEnd((-36L));
      range_Builder0.expandEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem2, 0L, (-1335L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.522185959441516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 385L, 385L);
      List<Range> list0 = range0.split(385L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(1, list1.size());
      
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(385L, long1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.9382568213849836
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(32767L, 32767L);
      range0.toString();
      Range range2 = Range.of(0L, 2506L);
      range0.startsBefore(range2);
      range0.isSubRangeOf(range2);
      range0.endsBefore(range0);
      range0.toString();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.equals("[ 0 .. 1057 ]/SB");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = range_Builder2.shift(1057L);
      range_Builder3.expandEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 3455L, 9223372036854772353L);
      Object object0 = new Object();
      range1.getEnd();
      Object object1 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder4 = range_Builder1.expandEnd(2234L);
      assertSame(range_Builder1, range_Builder4);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9944763287759137
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 1057L);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      assertSame(range1, range2);
      
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long((-1L));
      boolean boolean0 = range3.equals(long0);
      assertFalse(boolean0);
      
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 0L, (-1L));
      Range range4 = Range.of(0L);
      assertNotSame(range4, range2);
      
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem3, (-1L), 1044L);
      range_Builder0.shift(1057L);
      Range range5 = range_Builder0.build();
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.360538514024816
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1L, 1L);
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8073007327833595
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(1057L, 1057L);
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range.of(32767L, 32767L);
      Range range1 = Range.of(1057L);
      range0.startsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, (-2815L), 4294967295L);
      range1.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-5183L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6535213608513835
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = (-765L);
      Range range0 = Range.of((-765L), (-765L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals("");
      long long1 = (-1194L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1194L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.9600509452877315
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      Range range1 = Range.ofLength(65535L);
      Range range2 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range3 = range2.intersection(range0);
      range3.toString();
      range3.intersects(range1);
      String string0 = range0.toString();
      assertEquals("[ -5 .. 126 ]/0B", string0);
      
      String string1 = range3.toString();
      assertEquals("[ 1057 .. 1056 ]/0B", string1);
      
      Range range4 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-44L), 65535L);
      range_Builder0.contractBegin(3455L);
      range_Builder0.expandBegin(2887L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.of(4476L);
      boolean boolean0 = range4.isSubRangeOf(range1);
      assertFalse(range4.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.720366424236172
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(32767L, 32767L);
      range0.toString();
      Range range2 = Range.of(0L, 1057L);
      range0.startsBefore(range2);
      range0.isSubRangeOf(range2);
      range0.endsBefore(range0);
      range0.toString();
      range0.intersects(range1);
      range0.toString();
      range1.toString();
      Range.of(1041L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-427L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-427L), (-1L));
      Range.Builder range_Builder1 = range_Builder0.shift((-9223372036854775808L));
      range_Builder1.expandEnd(3662L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854772148 would make range [9223372036854775381 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.829864924766844
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(385L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range1.getEnd();
      range1.complement(range0);
      Range.of(385L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Null Range used in intersection operation.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Null Range used in intersection operation.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.7190245006476697
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      long long0 = (-1339L);
      Range.of((-1339L), 1034L);
      range1.toString(range_CoordinateSystem0);
      Range.of((-1339L));
      Range.of((-1L), 642L);
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("inputstream can not be null", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse inputstream can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.091543622509437
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = 385L;
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range0.toString();
      range0.endsBefore(range1);
      range1.toString();
      range1.isEmpty();
      range1.toString();
      range0.toString();
      range0.spliterator();
      Range.of(range_CoordinateSystem0, 1L, 1L);
      range2.endsBefore(range1);
      Range range3 = Range.of((-5L));
      range0.equals(range3);
      range2.complement(range3);
      Range.of(range_CoordinateSystem0, (-5L), (-5L));
      range2.complement(range1);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.880114976958794
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-484L), (-484L));
      List<Range> list0 = range0.split(1608L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("sdYW", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse sdYW into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.7681681711838957
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.of(range_CoordinateSystem0, (-2147483648L), 2147483647L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range0.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.120563419269894
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 386 .. 386 ]/RB", string0);
      
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range2.toString();
      range0.endsBefore(range1);
      boolean boolean0 = range2.intersects(range1);
      assertTrue(boolean0);
      
      range2.spliterator();
      List<Range> list0 = range0.split(121L);
      Range.of(121L);
      range2.isSubRangeOf(range0);
      Range.Builder range_Builder0 = new Range.Builder(121L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin(0L);
      Range range3 = range_Builder0.build();
      range2.getLength();
      List<Range> list1 = range0.complement(range1);
      Range range4 = Range.of(385L, 385L);
      range3.complement(range0);
      List<Range> list2 = range3.complementFrom(list0);
      assertFalse(range3.isEmpty());
      assertFalse(list2.equals((Object)list1));
      
      Range range5 = Range.of(385L);
      Range range6 = range5.asRange();
      assertSame(range6, range4);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.866605691850371
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 386 .. 386 ]/RB", string0);
      
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range2.toString();
      range0.endsBefore(range1);
      range1.toString();
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      range1.toString();
      range0.toString();
      Range range3 = Range.of(1L);
      range1.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.shift((-1L));
      Range range4 = range0.intersection(range1);
      range3.asRange();
      range4.split(1L);
      assertFalse(range4.isEmpty());
      assertSame(range1, range4);
      
      Range range5 = range2.intersection(range3);
      assertTrue(range5.isEmpty());
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.53497976770234
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.of(1L);
      Range.ofLength(2721L);
      Range.Builder range_Builder0 = new Range.Builder((-6L), 2163L);
      Range.Builder range_Builder1 = range_Builder0.shift((-6L));
      range_Builder1.expandEnd(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-6L), (-3583L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.539855502421623
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(385L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range2.toString();
      range0.endsBefore(range1);
      range1.toString();
      range1.intersects(range0);
      range1.toString();
      long long0 = 1L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-764L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.203209486802904
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(2721L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.8389574283382233
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1071L);
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(32767L, 32767L);
      range0.toString();
      Range range2 = Range.of(0L, 2506L);
      range0.startsBefore(range2);
      range0.isSubRangeOf(range2);
      range0.endsBefore(range0);
      range0.toString();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.equals("[ 0 .. 1071 ]/SB");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder1.shift(1071L);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 3455L;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem3, 32767L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2995793963713953
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of(3455L);
      String string0 = "b";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3497L), (-3497L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.9282310101847537
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(32767L, 32767L);
      range0.toString();
      long long0 = 2506L;
      Range range2 = Range.of(0L, 2506L);
      range0.startsBefore(range2);
      range0.isSubRangeOf(range2);
      range0.endsBefore(range0);
      range0.toString();
      range0.intersects(range1);
      range0.toString();
      range1.toString();
      Range.of(1041L);
      range0.getLength();
      Range range3 = Range.of(0L, 1041L);
      range0.complement(range3);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.8869582350108143
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-3933L);
      Range range0 = Range.of((-3933L));
      Range range1 = Range.of((-3933L));
      range0.complement(range1);
      Range range2 = Range.of((-3933L));
      range1.equals(range0);
      range2.endsBefore(range0);
      range2.toString();
      range2.intersects(range2);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.7771722037755984
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 607L;
      long long1 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      long long2 = new Long(607L);
      Object object0 = new Object();
      Range range2 = Range.ofLength(607L);
      range1.intersects(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      long long3 = 0L;
      range_Builder0.contractBegin(0L);
      range_Builder0.build();
      String string0 = "org.jcvi.jillion.core.util.MapUtil";
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.util.MapUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.util.MapUtil into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.029899825713459
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = 385L;
      Range range0 = Range.of(385L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(385L);
      Range range2 = Range.of(385L, 385L);
      range2.toString();
      range0.endsBefore(range1);
      range2.intersects(range1);
      range2.spliterator();
      range0.split(127L);
      Range.of(127L);
      range2.isSubRangeOf(range0);
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin(0L);
      range_Builder0.build();
      range2.getLength();
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.5266991241398578
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, (-2463L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.9441418808937496
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.of((-765L), (-765L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      Range range1 = Range.of((-765L), (-765L));
      range1.endsBefore(range0);
      range0.startsBefore(range1);
      Range range2 = Range.of((-765L));
      range2.startsBefore(range0);
      Range.ofLength(1951L);
      range0.getEnd();
      range0.startsBefore(range2);
      Range range3 = Range.of((-765L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range3.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.194414089399652
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of(385L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 385L, 385L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 385L, 4294967295L);
      range1.startsBefore(range2);
      Range range3 = Range.ofLength(2507L);
      range3.endsBefore(range1);
      Range range4 = Range.of(4294967295L);
      range3.complement(range4);
      Range range5 = Range.of((-9223372036854775808L), (-3350L));
      range5.endsBefore(range1);
      range0.equals("DwumBuXcnCr");
      // Undeclared exception!
      try { 
        Range.parseRange("DwumBuXcnCr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse DwumBuXcnCr into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.7872783467548086
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 607L;
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range1.getBegin();
      Object object0 = new Object();
      Range.ofLength(607L);
      range1.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      long long1 = 0L;
      range_Builder0.contractBegin(0L);
      range_Builder0.build();
      String string0 = "org.jcvi.jillion.core.util.MapUtil";
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.util.MapUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.util.MapUtil into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.882836107283237
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 607L;
      Range range0 = Range.of((-2L), (-2L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range1.getBegin();
      Object object0 = new Object();
      Range.ofLength(607L);
      range1.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      long long1 = 0L;
      range_Builder0.contractBegin(0L);
      range_Builder0.build();
      String string0 = "org.jcvi.jillion.core.util.MapUtil";
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.util.MapUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.util.MapUtil into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.9060989017063608
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.of(2070L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 138L, 2070L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-2147483648L), 138L);
      range2.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, (-385L), 127L);
      range1.startsBefore(range0);
      Range range4 = Range.ofLength(637L);
      range0.endsBefore(range1);
      Range.of(127L);
      range3.split(9223372036854775807L);
      range4.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, (-385L), (-687L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.9372799834951864
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-3933L));
      Range range1 = Range.of((-3933L));
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-3933L), (-3933L));
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      long long1 = 3495L;
      Range range2 = Range.of(range_CoordinateSystem1, 1L, 3495L);
      range1.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2773L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.071200400491152
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of(385L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(385L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range2 = Range.of(385L);
      List<Range> list0 = range2.split(1L);
      range1.endsBefore(range0);
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(boolean0);
      
      List<Range> list1 = range2.complement(range1);
      Range range3 = Range.of(3201L);
      range3.complement(range1);
      List<Range> list2 = range2.complementFrom(list0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list2.isEmpty());
      
      range2.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.5539105344435304
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long long0 = (-1217L);
      Range range0 = Range.of((-1217L));
      long long1 = 127L;
      Range range1 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.ofLength(1L);
      range1.getEnd(range_CoordinateSystem0);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=4.099849868158065
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 607L, 607L);
      Range range1 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-3350L), 127L);
      Range range3 = range1.intersection(range2);
      range3.toString();
      Range range4 = Range.parseRange("[ 0 .. 127 ]/0B");
      range4.intersects(range1);
      range4.startsBefore(range0);
      range1.toString();
      range2.toString();
      Range.of((-1472L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372036854775808L), (-1472L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range4.intersection(range2);
      Range.of(4476L);
      Range.ofLength(1942L);
      range1.isSubRangeOf(range2);
      range4.asRange();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2721904284013466
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(255L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.0988010750299955
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-484L), 1039L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1469L));
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-1469L));
      Range range0 = Range.of((-1443L), 1039L);
      Range.Builder range_Builder3 = range_Builder2.contractEnd(1039L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder4.expandBegin(1L);
      Range.Builder range_Builder5 = range_Builder0.contractEnd((-3298L));
      Range.Builder range_Builder6 = new Range.Builder(range_Builder3);
      range_Builder6.copy();
      range_Builder5.copy();
      range_Builder3.contractEnd((-1443L));
      range_Builder4.shift((-1L));
      range0.iterator();
      range0.isEmpty();
      range_Builder5.shift(4294967295L);
      Range range1 = Range.ofLength(1236L);
      Range range2 = range0.intersection(range1);
      Range range3 = range1.asRange();
      Range range4 = Range.of((-9223372036854775808L));
      List<Range> list0 = range4.split(1054L);
      assertTrue(list0.contains(range4));
      
      Range range5 = range2.intersection(range3);
      assertSame(range5, range2);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.9688777149464407
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      Range.ofLength(65535L);
      Range range1 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      Range range2 = range1.intersection(range0);
      range0.toString(range_CoordinateSystem0);
      range1.intersects(range1);
      range0.toString();
      range2.toString();
      Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-28L), 65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.of(4476L);
      // Undeclared exception!
      try { 
        Range.ofLength((-28L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.868676606804971
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.of(3455L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3455L, 3455L);
      Range range2 = range0.intersection(range1);
      long long0 = 1L;
      Range range3 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range3.intersects(range2);
      range3.spliterator();
      // Undeclared exception!
      try { 
        range3.split((-577L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.086495642745897
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), (-5L));
      Range range1 = Range.ofLength(1057L);
      Range range2 = Range.of(range_CoordinateSystem0, (-5L), 1057L);
      Range range3 = range2.intersection(range1);
      long long0 = range3.getBegin(range_CoordinateSystem0);
      assertFalse(range3.isEmpty());
      assertEquals(0L, long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range4 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.startsBefore(range4);
      assertTrue(range4.isEmpty());
      assertTrue(boolean0);
      
      range0.toString();
      assertTrue(range0.isEmpty());
      
      range_CoordinateSystem0.toString();
      String string0 = range1.toString();
      assertSame(range1, range3);
      assertEquals("[ 0 .. 1056 ]/0B", string0);
      
      Range range5 = Range.of((-316L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1L, 0L);
      Range.Builder range_Builder1 = range_Builder0.shift((-5L));
      range_Builder1.build();
      boolean boolean1 = range5.isEmpty();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.8860860618298556
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      Range.ofLength(65535L);
      Range range1 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      range1.intersection(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(1057L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.200767051101671
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.of(127L);
      // Undeclared exception!
      try { 
        range0.split((-2202L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.8455396633520813
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      range0.toString(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(32767L, 32767L);
      range0.toString();
      Range range2 = Range.of(0L, 2506L);
      range0.startsBefore(range2);
      range0.isSubRangeOf(range2);
      range0.endsBefore(range0);
      range0.toString();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.equals("[ 0 .. 1057 ]/SB");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = range_Builder2.shift(1057L);
      range_Builder3.expandEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 3455L;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(range_CoordinateSystem3, 32767L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.9272187737395683
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 1057L);
      range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long((-1L));
      range2.equals(long0);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(1057L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.802332535601064
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.CoordinateSystem.valueOf("RESIDUE_BASED");
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.expandBegin(1L);
      Range.Builder range_Builder3 = range_Builder0.contractBegin(1L);
      range_Builder3.expandBegin(1L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        Range.parseRange("RESIDUE_BASED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RESIDUE_BASED into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3881286759048383
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 14L;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-19L));
      long long1 = 4487L;
      long long2 = 2147483647L;
      Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775423L, 668L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=4.117053436239442
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(1057L);
      Range range1 = Range.of(1057L);
      range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-538L), (-538L));
      Range.of(range_CoordinateSystem0, (-36L), (-36L));
      Long long0 = new Long((-538L));
      Long.divideUnsigned((-4122L), (-538L));
      Range.Builder range_Builder0 = new Range.Builder((-767L), 335L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(0L);
      Range.of((-2847L));
      range_Builder3.copy();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem2, 335L, 9223372036854775681L);
      range_Builder1.shift(255L);
      Range range2 = range_Builder0.build();
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.943835659596332
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.ofLength(3L);
      List<Range> list0 = range0.split(3L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3L, 3L);
      range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = (-27L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-27L), (-27L));
      long long1 = (-142L);
      // Undeclared exception!
      try { 
        Range.of(3L, (-142L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.836313172950046
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.of(range_CoordinateSystem0, (-2147483648L), 2147483647L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1L, 1L);
      range0.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2433546687129593
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.792660576520096
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5L), 127L);
      long long0 = 1057L;
      Range.ofLength(65535L);
      Range range1 = Range.of(range_CoordinateSystem0, 1057L, 1057L);
      range1.intersection(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, 583L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.080210692235636
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372036854772353L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      long long0 = 385L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-145L), 1L);
      // Undeclared exception!
      try { 
        Range.parseRange("$VALUES");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $VALUES into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.7258828135785187
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.of((-765L), (-765L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = 127L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 127L, 127L);
      Range.ofLength(3455L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1057L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
