/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 14:14:36 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1525394410472902
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.dollar();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNull(token7);
      
      xPathLexer0.setXPath("t:ZS2H}||:7~");
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      xPathLexer0.currentPosition();
      Token token9 = xPathLexer0.nextToken();
      assertEquals(18, token9.getTokenType());
      assertEquals(":", token9.getTokenText());
      
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token11 = xPathLexer1.comma();
      assertEquals(32, token11.getTokenType());
      assertEquals("c", token11.getTokenText());
      
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("o", token12.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.setXPath("V==AA");
      Token token13 = xPathLexer1.leftParen();
      assertEquals("m", token13.getTokenText());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.009168054300677
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.whitespace();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(']');
      Token token1 = xPathLexer0.dots();
      assertEquals("m.", token1.getTokenText());
      assertEquals(14, token1.getTokenType());
      
      xPathLexer0.setXPath("8_aoKJDP}u*-UeA");
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      boolean boolean1 = xPathLexer0.isIdentifierChar('@');
      assertTrue(boolean1 == boolean0);
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("o", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals("m", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("werken.saxpath.XPathLexer", token7.getTokenText());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer2 = new XPathLexer("8_aoKJDP}u*-UeA");
      Token token8 = xPathLexer2.comma();
      assertEquals("8", token8.getTokenText());
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("`Ve3LA\"ivxfqxh|?^)");
      xPathLexer3.setPreviousToken(token6);
      assertEquals(31, token6.getTokenType());
      assertEquals(".", token6.getTokenText());
      
      xPathLexer0.setXPath("");
      Token token10 = xPathLexer0.leftParen();
      assertEquals(1, token10.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.074223772684683
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer(",n.j");
      xPathLexer2.dots();
      xPathLexer1.setXPath("`Ve3LA\"ivxfqxh|?^)");
      xPathLexer1.whitespace();
      xPathLexer2.rightBracket();
      xPathLexer2.at();
      xPathLexer1.number();
      xPathLexer2.nextToken();
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.comma();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      xPathLexer2.relationalOperator();
      xPathLexer2.literal();
      xPathLexer2.setXPath("`Ve3LA\"ivxfqxh|?^)");
      xPathLexer3.number();
      xPathLexer0.or();
      xPathLexer0.number();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7856218294972288
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.dollar();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("8/g;6i2x3");
      xPathLexer2.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer2.notEquals();
      xPathLexer1.not();
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      xPathLexer3.notEquals();
      xPathLexer2.nextToken();
      xPathLexer3.dollar();
      xPathLexer3.pipe();
      xPathLexer0.at();
      xPathLexer1.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.setXPath("[ (");
      xPathLexer2.notEquals();
      Token token0 = xPathLexer0.number();
      xPathLexer3.leftParen();
      xPathLexer2.literal();
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      xPathLexer2.comma();
      xPathLexer4.plus();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7176974860113803
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.and();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.not();
      String string0 = token1.toString();
      assertEquals("[ (23) (o)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("g%.JZR");
      Token token4 = xPathLexer0.dots();
      assertEquals("w", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertEquals("rk", token5.getTokenText());
      assertEquals(27, token5.getTokenType());
      assertNotNull(token5);
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("n", token6.getTokenText());
      
      xPathLexer1.setPreviousToken(token0);
      assertEquals("c", token0.getTokenText());
      
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token7);
      assertEquals(15, token7.getTokenType());
      assertEquals("g", token7.getTokenText());
      
      xPathLexer1.setXPath("FEJ(FOn!L3 ");
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      assertEquals("F", token8.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(".s", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.183676739944664
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.notEquals();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.setXPath("8_aoKJDP}u*-UeA");
      xPathLexer0.isIdentifierChar('T');
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token5 = xPathLexer1.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer1.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer1.number();
      Token token8 = xPathLexer0.nextToken();
      assertNotSame(token8, token2);
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      assertEquals("_", token9.getTokenText());
      
      xPathLexer1.div();
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      xPathLexer0.setXPath("");
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.233589703476421
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("t2H}||:7");
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("t2H}||:7");
      xPathLexer1.comma();
      xPathLexer1.notEquals();
      xPathLexer1.consume((-3257));
      // Undeclared exception!
      try { 
        xPathLexer1.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2204883720714412
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer1.identifier();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume((-289));
      // Undeclared exception!
      try { 
        xPathLexer2.dots();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7114915952290422
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(']');
      assertFalse(boolean0);
      
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("m.werken.saxpath.XPathLexer", token0.getTokenText());
      
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("8_aoKJDP}u*-UeA");
      xPathLexer0.isIdentifierChar('T');
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("`Ve3LA\"ivxfqxh|?^)");
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("`", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals("_", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("ao", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("K", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer1.leftParen();
      Token token7 = xPathLexer0.rightParen();
      assertEquals("}", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.setXPath("`Ve3LA\"ivxfqxh|?^)");
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      assertEquals("`", token8.getTokenText());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8360428786530543
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(23, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("m", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals(".w", token3.getTokenText());
      
      xPathLexer0.setXPath("^Uz9&B78J:;ku9)$E2");
      boolean boolean0 = xPathLexer0.isIdentifierChar('@');
      assertFalse(boolean0);
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("U", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals("z", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer1.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("co", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("9", token8.getTokenText());
      
      xPathLexer0.leftParen();
      Token token9 = xPathLexer1.literal();
      assertNull(token9);
      
      XPathLexer xPathLexer2 = new XPathLexer("^Uz9&B78J:;ku9)$E2");
      Token token10 = xPathLexer2.comma();
      assertEquals("^", token10.getTokenText());
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer0.plus();
      String string0 = token11.toString();
      assertEquals("[ (5) (B)", string0);
      
      xPathLexer1.setPreviousToken(token11);
      xPathLexer2.setXPath("");
      Token token12 = xPathLexer0.leftParen();
      assertEquals("7", token12.getTokenText());
      assertEquals(1, token12.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.351847532573072
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("w", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("k", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("en.saxpath.Token", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.dollar();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      xPathLexer0.setXPath("hn&;x$%");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer1.relationalOperator();
      xPathLexer1.number();
      xPathLexer1.currentPosition();
      xPathLexer0.or();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.isIdentifierChar('>');
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer0.dots();
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer2.number();
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      Token token9 = xPathLexer3.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("c", token9.getTokenText());
      
      Token token10 = xPathLexer3.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals("n", token11.getTokenText());
      assertEquals(1, token11.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token12 = xPathLexer2.plus();
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer0.whitespace();
      assertEquals((-2), token13.getTokenType());
      
      Token token14 = xPathLexer3.dots();
      assertEquals(14, token14.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7934241712012309
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(']');
      assertFalse(boolean0);
      
      Token token0 = xPathLexer0.dots();
      assertEquals("m.", token0.getTokenText());
      assertEquals(14, token0.getTokenType());
      
      xPathLexer0.setXPath("8_aoKJDP}u*-UeA");
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("`Ve3LA\"ivxfqxh|?^)");
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("`", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer1.or();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("_a", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer1.nextToken();
      assertEquals("Ve3LA", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.leftParen();
      assertEquals("o", token5.getTokenText());
      
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      assertEquals("\"", token6.getTokenText());
      
      xPathLexer0.setXPath("Uk");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.mod();
      xPathLexer2.leftParen();
      Token token7 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2336029806545867
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.literal();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierStartChar(']');
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.setXPath("`Ve3LA\"ivxfqxh|?^)");
      xPathLexer0.isIdentifierChar(']');
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("V", token6.getTokenText());
      
      Token token7 = xPathLexer0.at();
      assertEquals("e", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals("3", token8.getTokenText());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("LA", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("", token10.getTokenText());
      
      xPathLexer0.literal();
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      xPathLexer0.number();
      Token token12 = xPathLexer0.literal();
      assertNull(token12);
      
      xPathLexer0.setXPath("");
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
      
      Token token14 = xPathLexer0.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      Token token15 = xPathLexer0.equals();
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer0.plus();
      assertEquals(5, token16.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2408671965272102
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierStartChar(']');
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.setXPath("`Ve3LA\"ivxfqxh|?^)");
      xPathLexer0.isIdentifierChar(']');
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("V", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("e", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals("3", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertNotSame(token7, token0);
      assertEquals("LA\"ivxfqxh|?^)", token7.getTokenText());
      
      xPathLexer0.literal();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer0.div();
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      xPathLexer0.setXPath("");
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      xPathLexer0.equals();
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7967493163111383
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sU\"4^+tNk");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer1.number();
      xPathLexer0.currentPosition();
      xPathLexer1.or();
      boolean boolean0 = xPathLexer1.isIdentifierChar('-');
      assertTrue(boolean0);
      
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("U", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("\"", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals("4", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer1.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8490485769716423
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.number();
      Token token1 = xPathLexer1.not();
      token1.toString();
      XPathLexer xPathLexer2 = new XPathLexer("?kl:x\"+2U&+@<[(^5w");
      xPathLexer2.dollar();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer("g%.JZR");
      xPathLexer3.dots();
      xPathLexer2.literal();
      xPathLexer1.notEquals();
      xPathLexer2.div();
      xPathLexer3.literal();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.118554652239034
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.consume((-766));
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.651760534930837
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3673));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.296103507040466
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(".w", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.setXPath("^Uz9&B78J:;ku9)$E2");
      boolean boolean0 = xPathLexer0.isIdentifierChar('@');
      assertFalse(boolean0);
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("U", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer1.notEquals();
      assertEquals("co", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("m.werken.saxpath.XPathLexer", token9.getTokenText());
      
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      assertEquals("9", token11.getTokenText());
      
      Token token12 = xPathLexer0.plus();
      String string0 = token12.toString();
      assertEquals("[ (5) (&)", string0);
      
      xPathLexer1.setPreviousToken(token12);
      xPathLexer1.setXPath("");
      Token token13 = xPathLexer0.leftParen();
      assertEquals(1, token13.getTokenType());
      
      Token token14 = xPathLexer1.star();
      assertEquals(20, token14.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0293980059486403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightBracket();
      xPathLexer0.consume((-1208));
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&}m89");
      xPathLexer0.pipe();
      xPathLexer0.consume((-424));
      xPathLexer0.equals();
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.564651444574961
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.minus();
      assertEquals("o", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("m.werken.saxpath.Token", token3.getTokenText());
      
      xPathLexer0.star();
      xPathLexer0.consume(0);
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(1);
      xPathLexer0.and();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.at();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken((Token) null);
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9154416250555255
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.minus();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.identifier();
      assertEquals("m.werken.saxpath.Token", token2.getTokenText());
      
      xPathLexer0.star();
      xPathLexer0.consume(0);
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(1);
      xPathLexer0.and();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token9 = xPathLexer0.leftParen();
      assertEquals(1, token9.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.127754353520336
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "=";
      XPathLexer xPathLexer0 = new XPathLexer("=");
      xPathLexer0.comma();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer0.consume((-289));
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8582710085835656
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.leftParen();
      xPathLexer0.LA(0);
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.226208140285931
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      char char0 = 'Q';
      xPathLexer0.leftBracket();
      xPathLexer0.isIdentifierStartChar('Q');
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.consume((-1970));
      xPathLexer0.isIdentifierStartChar('Q');
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.629277648004724
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.div();
      xPathLexer0.currentPosition();
      xPathLexer0.LA(6);
      xPathLexer0.minus();
      xPathLexer0.pipe();
      xPathLexer0.LA(6);
      xPathLexer0.doubleColon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.doubleColon();
      xPathLexer0.whitespace();
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      xPathLexer0.plus();
      xPathLexer0.setXPath("#,{U+Z$x?W;ZY\"um");
      assertEquals("#,{U+Z$x?W;ZY\"um", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1713394217199493
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.dollar();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(1458);
      xPathLexer0.setXPath("t:ZS2H}||:7~");
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.currentPosition();
      xPathLexer0.or();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(":", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals("Z", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals("", token10.getTokenText());
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      assertEquals("S", token11.getTokenText());
      
      Token token12 = xPathLexer0.leftParen();
      assertEquals("2", token12.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
      assertEquals("H", token13.getTokenText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.34343584996245
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.setXPath(",ZXe2\"J@&^52|9bGcU");
      Token token2 = xPathLexer0.slashes();
      assertEquals(",", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      Token token4 = xPathLexer0.comma();
      assertEquals("X", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("e2", token5.getTokenText());
      assertNotNull(token5);
      
      xPathLexer0.identifier();
      xPathLexer0.setXPath("1E*J");
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("*", token7.getTokenText());
      
      xPathLexer0.setPreviousToken(token3);
      Token token8 = xPathLexer0.getPreviousToken();
      assertEquals("Z", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.346771922831142
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hn&;x$%");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("h", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("n", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.star();
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(";", token3.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(']');
      assertFalse(boolean0);
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.LA(1620);
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2322421220075013
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierStartChar(']');
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.setXPath("`Ve3LA\"ivxfqxh|?^)");
      xPathLexer0.isIdentifierChar(']');
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("V", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals("e", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals("3L", token7.getTokenText());
      
      xPathLexer0.number();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("A\"ivxfqxh|?^)", token8.getTokenText());
      
      xPathLexer0.literal();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer0.div();
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      xPathLexer0.setXPath("");
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer0.equals();
      assertEquals(21, token14.getTokenType());
      
      Token token15 = xPathLexer0.plus();
      assertEquals(5, token15.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.162575140867351
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.star();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.star();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.plus();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.hasMoreChars();
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4220604250807662
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "com.werken.saxpath.Token";
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.comma();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.and();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.dollar();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8156053684203257
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QoY?~^$ox)wuMNk%");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.literal();
      assertEquals(27, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.slashes();
      assertEquals("w", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.identifier();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("%", token4.getTokenText());
      
      token3.toString();
      token3.toString();
      token3.toString();
      char char0 = xPathLexer0.LA(1046);
      assertEquals('\uFFFF', char0);
      
      String string0 = token3.toString();
      assertEquals("[ (15) (uMNk)", string0);
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token3);
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.consume(0);
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      xPathLexer0.and();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.div();
      int int0 = xPathLexer0.endPosition();
      assertEquals(16, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.21721069340634
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      xPathLexer0.setXPath("t2H}||:7");
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("}", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("|", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      XPathLexer xPathLexer1 = new XPathLexer("t2H}||:7");
      Token token11 = xPathLexer1.comma();
      assertEquals(32, token11.getTokenType());
      assertEquals("t", token11.getTokenText());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals("2H", token12.getTokenText());
      assertEquals(22, token12.getTokenType());
      
      xPathLexer1.div();
      Token token13 = xPathLexer0.literal();
      assertNull(token13);
      
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      xPathLexer1.or();
      Token token14 = xPathLexer1.number();
      assertEquals(30, token14.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7374567162911017
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QoY?~^$ox)wuMNk%");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.literal();
      assertEquals(27, token0.getTokenType());
      assertEquals("Y?~^$", token0.getTokenText());
      assertNotNull(token0);
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(")", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.identifier();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
      
      String string0 = token3.toString();
      assertEquals("[ (15) (wuMNk)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      xPathLexer0.colon();
      Token token6 = xPathLexer1.leftParen();
      assertEquals(1, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('%');
      assertFalse(boolean0);
      
      xPathLexer0.identifier();
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken((Token) null);
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0093587191040765
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QoY?~^$ox)wuMNk%");
      xPathLexer0.dollar();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("oY", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.identifier();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("~", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      String string0 = token2.toString();
      assertEquals("[ (15) ()", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("QoY?~^$ox)wuMNk%");
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("$", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer2.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("Q", token6.getTokenText());
      
      Token token7 = xPathLexer1.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer1.number();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token8 = xPathLexer3.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer1.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer1.div();
      Token token10 = xPathLexer3.literal();
      assertNull(token10);
      
      xPathLexer0.setXPath("u'([YmnQYnMF[Ig");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.number();
      assertEquals(30, token11.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9144882009016517
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("8/g;6i2x3");
      Token token0 = xPathLexer1.rightBracket();
      assertEquals("8", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer1.notEquals();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      xPathLexer3.number();
      xPathLexer2.currentPosition();
      xPathLexer1.or();
      boolean boolean0 = xPathLexer2.isIdentifierChar('-');
      assertTrue(boolean0);
      
      Token token3 = xPathLexer2.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer2.dollar();
      assertEquals("[", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer3.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer2.leftParen();
      assertEquals(" ", token6.getTokenText());
      
      Token token7 = xPathLexer2.plus();
      assertEquals("(", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("8/g;6i2x3");
      Token token8 = xPathLexer4.notEquals();
      assertEquals("8/", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.249054410758558
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("t2H}||:7");
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("t", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.number();
      assertEquals("2", token6.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.or();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNull(token7);
      
      xPathLexer0.isIdentifierChar('\\');
      xPathLexer0.identifier();
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("}", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals("|", token10.getTokenText());
      
      Token token11 = xPathLexer1.rightParen();
      assertEquals(2, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("t2H}||:7");
      xPathLexer2.setXPath(")");
      Token token12 = xPathLexer2.leftParen();
      assertEquals(")", token12.getTokenText());
      
      Token token13 = xPathLexer2.identifier();
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.6073125447795267
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.div();
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.div();
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5384301527718471
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.consume(1);
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(13, token2.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.002113346771954
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.comma();
      Token token1 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("c", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.number();
      Token token2 = xPathLexer1.not();
      token2.toString();
      token2.toString();
      xPathLexer1.not();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      String string0 = token2.toString();
      assertEquals("[ (23) (c)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token4 = xPathLexer2.dollar();
      assertEquals("c", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.plus();
      Token token5 = xPathLexer2.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("o", token5.getTokenText());
      
      Token token6 = xPathLexer1.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer2.plus();
      assertEquals("m", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer2.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals(".", token8.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      Token token9 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      assertNotNull(token9);
      
      Token token10 = xPathLexer2.number();
      assertEquals(30, token10.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.562897027321056
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.LA(0);
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.literal();
      String string0 = xPathLexer0.getXPath();
      assertEquals("", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3614306399278373
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.pipe();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.consume((-1));
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.getPreviousToken();
      xPathLexer0.endPosition();
      xPathLexer0.endPosition();
      xPathLexer0.not();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.leftParen();
      xPathLexer0.div();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer0.currentPosition();
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.number();
      xPathLexer0.currentPosition();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0398047957104537
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.getXPath();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(4, token0.getTokenType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0400798686047708
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.star();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.star();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.plus();
      xPathLexer0.not();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.colon();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.and();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.574163437278162
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L(T$XAEdF_I'");
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.number();
      Token token0 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.dollar();
      xPathLexer0.plus();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("L(T$XAEdF_I'");
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5786617845015707
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.comma();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      assertEquals("c", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.number();
      Token token2 = xPathLexer0.not();
      assertEquals("m", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      token3.toString();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (20) (.)", string0);
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      xPathLexer0.plus();
      Token token5 = xPathLexer0.dots();
      assertEquals("r", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.literal();
      Token token7 = xPathLexer0.plus();
      assertEquals("e", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.setPreviousToken(token6);
      assertEquals(27, token6.getTokenType());
      assertEquals("en.saxpath.To", token6.getTokenText());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      Token token9 = xPathLexer0.number();
      assertEquals("", token9.getTokenText());
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals("n", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.153146012957451
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.plus();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.hasMoreChars();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9020324704867777
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.comma();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      String string0 = token1.toString();
      assertEquals("[ (23) (o)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.number();
      xPathLexer0.not();
      Token token2 = xPathLexer0.slashes();
      token2.toString();
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (11) (.)", string1);
      
      xPathLexer0.dollar();
      xPathLexer0.plus();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
      
      Token token4 = xPathLexer0.literal();
      assertNotNull(token4);
      
      Token token5 = xPathLexer0.plus();
      assertEquals("e", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token4);
      assertEquals("en.saxpath.To", token4.getTokenText());
      assertEquals(27, token4.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("n", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals("", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.084077480533798
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("a`m-Zg_gf%y");
      xPathLexer1.and();
      xPathLexer1.identifier();
      xPathLexer1.star();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.324969807598284
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.getPreviousToken();
      char char0 = xPathLexer0.LA(2595);
      assertEquals('\uFFFF', char0);
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.5154555170993675
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.consume(1);
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.and();
      xPathLexer1.identifier();
      xPathLexer1.star();
      xPathLexer1.equals();
      Token token2 = xPathLexer1.leftParen();
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3535567381512217
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.rightBracket();
      xPathLexer1.at();
      xPathLexer1.leftParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.034541798326475
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.179471162708633
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("c", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.number();
      Token token1 = xPathLexer0.dollar();
      String string0 = token1.toString();
      assertEquals("[ (26) (m)", string0);
      
      XPathLexer xPathLexer2 = new XPathLexer("?kl:x\"+2U&+@<[(^5w");
      Token token2 = xPathLexer2.not();
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      String string1 = token2.toString();
      assertEquals("[ (23) (?)", string1);
      
      xPathLexer0.dollar();
      xPathLexer0.plus();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("e", token4.getTokenText());
      
      Token token5 = xPathLexer2.literal();
      assertNull(token5);
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (26) (m)");
      xPathLexer0.dollar();
      Token token6 = xPathLexer3.plus();
      assertEquals("[", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer2.slashes();
      xPathLexer3.setPreviousToken(token7);
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertEquals("om.werken.saxpath.XPathLexer", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
  }
}
