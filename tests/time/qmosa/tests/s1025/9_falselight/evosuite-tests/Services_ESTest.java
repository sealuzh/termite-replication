/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:57:54 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 1854);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress(" octets\n", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      Services.testSMTP("", 1854);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("OG5K=GGUCOxB", 1009);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ".\n****");
      Services.testHTTPS("0", 0);
      System.setCurrentTimeMillis((-740L));
      System.setCurrentTimeMillis((-2704L));
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("", 0);
      assertTrue(services_HTTP_Result0.works);
      assertEquals(7, services_HTTP_Result0.page_weight);
      
      System.setCurrentTimeMillis(353L);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("Services$HTTP_Result", (-234));
      assertEquals(0, services_HTTP_Result1.code);
      assertEquals(0, services_HTTP_Result1.page_weight);
      assertEquals(0L, services_HTTP_Result1.time);
      assertFalse(services_HTTP_Result1.works);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7650191976280696
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Services services0 = new Services();
      Services.testHTTPS("`~P}<m!/", (-90));
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP((String) null, (-1));
      services_SIMPLE_Result0.toString();
      String string0 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-1**.\n****", string0);
      
      services_SIMPLE_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result1 = new Services.SIMPLE_Result();
      String string1 = services_SIMPLE_Result1.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string1);
      
      services_SIMPLE_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result2 = new Services.SIMPLE_Result();
      services_SIMPLE_Result2.reset();
      Services.SIMPLE_Result services_SIMPLE_Result3 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.toString();
      services_SIMPLE_Result3.reset();
      Services.SIMPLE_Result services_SIMPLE_Result4 = Services.testPOP3("H0^r#Im+", (-1));
      services_SIMPLE_Result4.reset();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://m=u^]%F`\\H;e1%3jA:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-1**.\n****");
      Services.testHTTP("m=u^]%F`H;e1%3jA", 0);
      services_SIMPLE_Result0.reset();
      Services.testHTTP("7w+L+snus", 0);
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0L, services_HTTP_Result0.time);
      
      Services.testPOP3("AR1xWI.N /:", 2121);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS((String) null, 847);
      assertFalse(services_HTTP_Result1.works);
      assertEquals(0L, services_HTTP_Result1.time);
      assertEquals(0, services_HTTP_Result1.page_weight);
      assertEquals(0, services_HTTP_Result1.code);
      
      services_SIMPLE_Result4.reset();
      assertEquals(0L, services_SIMPLE_Result4.time);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 1854);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress(" octets\n", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      Services.testSMTP("LLyW103OL}C:}wo'o@", (-1));
      Services.testPOP3("$$9", 1854);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("", 1854);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP((String) null, 986);
      assertEquals(0, services_HTTP_Result0.code);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      assertEquals(0, services_HTTP_Result0.page_weight);
      
      services_HTTP_Result0.page_weight = 1485;
      services_HTTP_Result0.toString();
      services_HTTP_Result0.works = false;
      services_HTTP_Result0.page_weight = 0;
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3((String) null, 0);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 1854);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress(" octets\n", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "d.x{7IMX_pusG~m#.");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress2 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress2);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress2);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("$++tim", 1854);
      services_SIMPLE_Result0.toString();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      System.setCurrentTimeMillis(666L);
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.reset();
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
      
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.reset();
      services_HTTP_Result0.reset();
      services_HTTP_Result0.reset();
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      
      Services.HTTP_Result services_HTTP_Result1 = new Services.HTTP_Result();
      Services.HTTP_Result services_HTTP_Result2 = new Services.HTTP_Result();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("", (-3412));
      services_SIMPLE_Result1.reset();
      assertEquals(0L, services_SIMPLE_Result1.time);
  }
}
