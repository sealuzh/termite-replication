/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:47:19 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", "aSNw1w1.j5r");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "aSNw1w1.j5r");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "aSNw1w1.j5r";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector0;
      stringArray0[1] = "aSNw1w1.j5r";
      stringArray0[2] = "aSNw1w1.j5r";
      stringArray0[3] = "aSNw1w1.j5r";
      stringArray0[4] = "3bI|9#";
      improvedFile1.setExecutable(false, false);
      stringArray0[5] = ".WAR";
      stringArray0[6] = ".WAR";
      improvedFile1.createTempDir();
      stringArray0[7] = "aSNw1w1.j5r";
      stringArray0[8] = "aSNw1w1.j5r";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile1, ".WAR", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4659497192528061
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "aw$wvw1.ja+";
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", "aw$wvw1.ja+");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir(".WAR", ".WAR");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3bI|9#";
      stringArray0[1] = "3bI|9#";
      stringArray0[2] = ".WAR";
      stringArray0[3] = "aw$wvw1.ja+";
      stringArray0[4] = "aw$wvw1.ja+";
      archiveScanner0.setIncludes(stringArray0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile1);
      archiveScanner1.isArchive(improvedFile1);
      DirectoryScanner.matchPath("3bI|9#", "3bI|9#");
      archiveScanner1.isArchive(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "3bI|9#", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", "aS$w1w1.jar");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "aS$w1w1.jar");
      ImprovedFile improvedFile2 = ImprovedFile.createTempImprovedFile("aS$w1w1.jar", "aS$w1w1.jar", improvedFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "aS$w1w1.jar";
      stringArray0[1] = "aS$w1w1.jar";
      stringArray0[2] = "aS$w1w1.jar";
      stringArray0[3] = "aS$w1w1.jar";
      stringArray0[4] = "3bI|9#";
      stringArray0[5] = ".WAR";
      stringArray0[6] = ".WAR";
      stringArray0[7] = "aS$w1w1.jar";
      stringArray0[8] = "aS$w1w1.jar";
      archiveScanner0.includes = stringArray0;
      ImprovedFile.backup((File) improvedFile2, false);
      ImprovedFile improvedFile3 = new ImprovedFile(".WAR", "aS$w1w1.jar");
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile3, ".EAR", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("ZClX&8l#~Z", "ZClX&8l#~Z");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir("ZClX&8l#~Z");
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesNotIncluded = vector0;
      vector0.add("&TbnPDA&WaiEsGZ>8");
      System.setCurrentTimeMillis(2);
      vector0.containsAll(archiveScanner0.filesNotIncluded);
      System.setCurrentTimeMillis(2);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2);
      archiveScanner0.processFile("UHN7FdcW%t&IK-yiS+?");
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("WyAR", "aw$wvw1.ja+");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".WAR/aw$wvw1.ja+");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      improvedFile0.delete();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "WyAR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9140273284145395
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", "aSNw1w1.j5r");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "aSNw1w1.j5r");
      ImprovedFile improvedFile2 = ImprovedFile.createTempImprovedFile("aSNw1w1.j5r", "aSNw1w1.j5r", improvedFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "aSNw1w1.j5r";
      stringArray0[1] = "aSNw1w1.j5r";
      stringArray0[2] = "aSNw1w1.j5r";
      stringArray0[3] = "aSNw1w1.j5r";
      stringArray0[4] = "3bI|9#";
      improvedFile2.setExecutable(false, false);
      stringArray0[5] = ".WAR";
      stringArray0[6] = ".WAR";
      improvedFile1.createTempDir();
      stringArray0[7] = "aSNw1w1.j5r";
      stringArray0[8] = "aSNw1w1.j5r";
      archiveScanner0.includes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile1, ".WAR", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", "aS$w1w1.jar");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".WAR/aS$w1w1.jar/aS$w1w1.jar/aS$w1w1.jar0aS$w1w1.jar");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0, "aS$w1w1.jar");
      ImprovedFile improvedFile2 = ImprovedFile.createTempImprovedFile("aS$w1w1.jar", "aS$w1w1.jar", improvedFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "aS$w1w1.jar";
      stringArray0[1] = "aS$w1w1.jar";
      stringArray0[2] = "aS$w1w1.jar";
      stringArray0[3] = "aS$w1w1.jar";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[4] = "3bI|9#";
      improvedFile0.toPath();
      stringArray0[5] = ".WAR";
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile1, ".WAR0.WAR.jar", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("ZClX&8l#~Z", "ZClX&8l#~Z");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      PipedInputStream pipedInputStream2 = new PipedInputStream(2628);
      pipedInputStream2.mark((-156992907));
      PipedInputStream pipedInputStream3 = new PipedInputStream(2628);
      pipedInputStream3.skip(0L);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream0.mark(2628);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream2, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream3);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.setSize(2628);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0, 1054);
      pipedInputStream3.markSupported();
      Object object0 = new Object();
      Object object1 = new Object();
      vector0.add((Object) pushbackInputStream0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "cMd@g|pa!m#^v)@<g", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/ZClX&8l#~Z/ZClX&8l#~Z
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR");
      ImprovedFile improvedFile1 = improvedFile0.createTempDir();
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.markSupported();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedInputStream pipedInputStream3 = new PipedInputStream(6507);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream3.connect(pipedOutputStream0);
      pipedInputStream1.close();
      pipedInputStream3.skip(0L);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream1, pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0, 6507);
      vector0.add((Object) ".WAR");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      archiveScanner0.scandir(improvedFile1, "r@T7aO`Fa;", false);
      assertTrue(improvedFile1.exists());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      DirectoryScanner.matchPath(".WAR", "aS$w1w1.jar");
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      archiveScanner0.filesNotIncluded = vector0;
      ArchiveScanner archiveScanner1 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner1.toFileType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add(object0);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "Could not create temporary directory for archive: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ".WAR";
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", ".WAR");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir(".WAR");
      String[] stringArray0 = new String[0];
      archiveScanner0.includes = stringArray0;
      boolean boolean0 = archiveScanner0.haveSlowResults;
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(".WAR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", "aw$wvw1.ja+");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      improvedFile0.delete();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, ".WAR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      MockFile mockFile1 = new MockFile("");
      MockFile mockFile2 = new MockFile("", "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      mockFile1.renameTo(mockFile2);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      DirectoryScanner.matchPath("", "");
      archiveScanner0.toFileType(mockFile1);
      mockFile1.getCanonicalPath();
      MockFile mockFile3 = new MockFile(improvedFile0, "9T>OAZJk?B*s");
      System.setCurrentTimeMillis((-3138L));
      int int0 = archiveScanner0.toFileType(mockFile1);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("ZClX&8l#~Z", "ZClX&8l#~Z");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      PipedInputStream pipedInputStream2 = new PipedInputStream(2628);
      pipedInputStream2.mark((-156992907));
      PipedInputStream pipedInputStream3 = new PipedInputStream(2628);
      pipedInputStream3.skip(0L);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream2, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream3);
      Vector<Object> vector0 = new Vector<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<InputStream> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<InputStream, String> function1 = unaryOperator1.andThen((Function<? super InputStream, ? extends String>) function0);
      unaryOperator0.compose((Function<? super InputStream, ?>) function1);
      vector0.replaceAll(unaryOperator0);
      vector0.setSize(2628);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pipedInputStream0, 1054);
      Object object0 = new Object();
      Object object1 = new Object();
      vector0.add((Object) pushbackInputStream0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "wA0DMmJ\"@x b~<=}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/ZClX&8l#~Z/ZClX&8l#~Z
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = MockFile.createTempFile(".Z{P", ".Z{P");
      File file1 = ImprovedFile.createTempFileName((String) null, (String) null, file0);
      ImprovedFile improvedFile0 = new ImprovedFile(file0, ".Z{P");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      file0.delete();
      file0.setWritable(true, true);
      archiveScanner0.toFileType(file1);
      MockFile.createTempFile("b6:Sz=wZ=rmn^D+;", (String) null, file0);
      file0.getCanonicalPath();
      file0.getCanonicalPath();
      MockFile mockFile0 = new MockFile("/tmp/.Z{P0.Z{P", "~]H0*JaG\"N4Erz;{rrn");
      MockFile mockFile1 = new MockFile(file0, "IZo_`I5=chEl/<?.j%?");
      assertFalse(mockFile1.equals((Object)file1));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = MockFile.createTempFile(".Z{P", ".Z{P");
      File file1 = ImprovedFile.createTempFileName((String) null, ".zip", file0);
      ImprovedFile improvedFile0 = new ImprovedFile(file0, ".Z{P");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      file0.delete();
      file0.setWritable(true, true);
      archiveScanner0.toFileType(file1);
      File file2 = MockFile.createTempFile("b6:SzwZ=rm^D+;", (String) null, file0);
      file0.getCanonicalPath();
      file0.getCanonicalPath();
      MockFile mockFile0 = new MockFile("/tmp/.Z{P0.Z{P", "~]H0*JaG\"N4Erz;{rrn");
      MockFile mockFile1 = new MockFile(file0, "IZo_`I5=chEl/<?.j%?");
      assertFalse(mockFile1.equals((Object)file2));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("ZClX&8l#~Z", "ZClX&8l#~Z");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      pipedInputStream0.close();
      PipedInputStream pipedInputStream2 = new PipedInputStream(2628);
      pipedInputStream2.mark((-156992907));
      PipedInputStream pipedInputStream3 = new PipedInputStream(2628);
      pipedInputStream3.skip(0L);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream2, pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream3);
      Vector<Object> vector0 = new Vector<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<InputStream> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<InputStream, String> function1 = unaryOperator1.andThen((Function<? super InputStream, ? extends String>) function0);
      Function<Object, BufferedInputStream> function2 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends BufferedInputStream>) function2);
      vector0.add((Object) pipedInputStream3);
      unaryOperator0.compose((Function<? super InputStream, ?>) function1);
      improvedFile0.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.haveSlowResults = false;
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "ZClX&8l#~Z", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.458787927599531
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("s55", ".ZIP");
      File file1 = ImprovedFile.createTempFileName((String) null, ".zip", file0);
      ImprovedFile improvedFile0 = new ImprovedFile(file0, "s55");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(file1);
      //  // Unstable assertion: assertEquals(0, int0);
      
      int int1 = archiveScanner0.toFileType(file0);
      //  // Unstable assertion: assertEquals(0, int1);
  }
}
