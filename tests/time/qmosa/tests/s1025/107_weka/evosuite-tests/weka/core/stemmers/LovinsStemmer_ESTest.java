/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:26:26 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.813601651794466
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("9qbgs=y<rQ6QV;y:p");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("publishesmit");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer1.stemString("ax");
      assertEquals("ax", string1);
      
      String string2 = lovinsStemmer0.stemString("9qbgs=y<rq6qv;y:p");
      assertEquals("9qbg=y<rq6qv;y:p", string2);
      
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer1.stem("dex");
      assertEquals("dic", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5902923918352314
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("tic");
      lovinsStemmer0.stem("Neop&T#[=^{IqV@G|;?");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ancies");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("ealy");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("eal");
      lovinsStemmer1.getRevision();
      lovinsStemmer1.toString();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7098697921150596
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("'X9p:0");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("8034ax");
      lovinsStemmer0.stemString("'$");
      String string0 = lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("A");
      String string1 = lovinsStemmer0.stem(".");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6904999584291702
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "edition";
      stringArray0[1] = "<|5l7vv%K_";
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmer");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString(": ");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer3.stemString("N31Npp>=#B#d");
      assertEquals("n31np>=#b#d", string1);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer2.toString();
      assertFalse(string3.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6650277486723168
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "edition";
      stringArray0[1] = "<|5l7vv%K_";
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("<|5l7vv%K_");
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "yK&VBh;nJ0";
      lovinsStemmer0.stemString("D'D`8c}=w^&BTTO]st");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("edition");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer3.stemString("yK&VBh;nJ0");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6382225559460153
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ian");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "TJJUfz&+CEdR<";
      stringArray0[1] = "<l+vMkTr";
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("[90kYX");
      lovinsStemmer0.stemString("1");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("ex");
      assertEquals("ex", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("ening");
      assertEquals("ening", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("The authors affiliation.");
      assertEquals("the authors affiliation.", string3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.596888754902619
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stem("title");
      stringArray0[0] = "Jk";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("title");
      assertEquals("titl", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("titl");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("i5U|");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer2.toString();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("titl");
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer2.stem("Induction of decision trees");
      assertEquals("induction of decision tree", string3);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6390964770091785
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "edition";
      stringArray0[2] = "yK&VBh;nJ0";
      stringArray0[3] = "MO .=r^";
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("_zp(I");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("flagex");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6187092462959043
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "B";
      stringArray0[1] = "KF_RopUF*";
      stringArray0[2] = "TECHREPORT";
      stringArray0[3] = "lud";
      stringArray0[4] = "@#";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("TECHREPORT");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerex");
      lovinsStemmer0.stemString("lud");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("booktitle");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("uad");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8183142917761028
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer3.stemString("d!<7?a'-vveea4nher");
      assertEquals("d!<7?a'-vveea4nhes", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      lovinsStemmer3.toString();
      String string3 = lovinsStemmer1.stem("QrR");
      assertEquals("qr", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4721377470033805
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "<|5l7vv%K_";
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "yK&VBh;nJ0";
      stringArray0[3] = "MO .=r^";
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("PROCEEDINGS");
      assertEquals("proceed", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "<|5l7vv%K_";
      stringArray1[2] = "yK&VBh;nJ0";
      stringArray1[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[6] = "8034";
      stringArray1[7] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer0.stem("pand");
      assertEquals("pans", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5984536291941824
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Jk";
      stringArray0[1] = "Jk";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("weka.core.stemmers.lovinsstemererid");
      assertEquals("weka.core.stemmers.lovinsstemereris", string0);
      
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("8034");
      String string3 = lovinsStemmer1.stem("");
      assertFalse(string3.equals((Object)string2));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6491115228974011
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer3.getTechnicalInformation();
      String string0 = lovinsStemmer2.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string0);
      
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7497642849191002
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("pex");
      lovinsStemmer0.stem("pic");
      lovinsStemmer0.stemString("\t");
      lovinsStemmer0.stem("gOt");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      assertFalse(lovinsStemmer3.equals((Object)lovinsStemmer2));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6047665956358697
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("pex");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.646953987575892
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "edition";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("edition");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("lucbex");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer2.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer2.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("t|n\"R6z");
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("<|5l7vv%K_");
      String string1 = lovinsStemmer3.stem("e");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6853161297745882
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("icide");
      assertEquals("ic", string0);
      
      String string1 = lovinsStemmer0.stemString("#Y`Ccw]]PCF%bnB");
      assertEquals("#y`ccw]]pcf%bnb", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("#y`ccw]]pcf%bnb");
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("uad");
      assertEquals("uas", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6529992753843228
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("JAngTBV$sNG%m");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("bex");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "jangtbv$sng%m";
      stringArray0[1] = "jangtbv$sng%m";
      stringArray0[2] = "JAngTBV$sNG%m";
      stringArray0[3] = "jangtbv$sng%m";
      stringArray0[4] = "JAngTBV$sNG%m";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("elily");
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.stem("fully");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer3.stemString("fl");
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7232484443409744
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "abstract";
      stringArray0[1] = "d+y!n6Q(aw1I";
      stringArray0[2] = "pp";
      stringArray0[3] = "eiC1)M.S?'0TFiY#J";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("encing");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("s%/{{[tg_52b&*");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("VT'4oq1O%iE7MyZ~,3G");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6581996505039014
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("JAngTBV$sNG%m");
      assertEquals("jangtbv$sng%m", string0);
      
      String string1 = lovinsStemmer0.stemString("bibliographet");
      assertEquals("bibliographes", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6598478455340304
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "abstract";
      stringArray0[1] = "d+y!n6Q(aw1I";
      stringArray0[2] = "pp";
      stringArray0[3] = "eiC1)M.S?'0TFiY#J";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("abstract");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("booktitle");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6425881310344896
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("L\u0007NZ~M0xjdt");
      lovinsStemmer0.stemString("Pdx");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("OQo&u[ruqrRM");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer0.stemString("-[~JC$b0N%KuiBu[wh8");
      assertEquals("-[~jc$b0n%kuibu[wh8", string1);
      
      String string2 = lovinsStemmer0.stemString("Warning, unable to load properties file(s) from system resource (Utils.java): ");
      assertEquals("warn, un to load propers fil(s) from system resourc (util.jav): ", string2);
      
      String string3 = lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.68873049730087
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "edition";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("edition");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("<|5l7vv%K_");
      lovinsStemmer1.stemString("Type: ");
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer0.stemString("?u~3)~iOzCQO#^!E");
      assertEquals("?u~3)~iozcq#^!e", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.erid");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.eris", string1);
      
      String string2 = lovinsStemmer3.stemString("Pv$U&l\"|TeO]:?dK");
      assertEquals("pv$u&l\"|te]:?dk", string2);
      
      String string3 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer3.stem("pv$u&l\"|te]:?dk");
      assertEquals("pv$u&l\"|te]:?dk", string4);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6837258750298405
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("tic");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Neop&T#[=^{IqV@G|;?";
      stringArray0[1] = "tic";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("tic");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("mm");
      assertEquals("mm", string1);
      
      lovinsStemmer1.getRevision();
      String string2 = lovinsStemmer1.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string2);
      
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6807025241107039
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stem("title");
      stringArray0[0] = "Jk";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("title");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("e&2=\"zu6z9,rud");
      lovinsStemmer0.stemString("titl");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("istr");
      lovinsStemmer0.stemString("e&2=\"zu6z9,rus");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("titl");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6396456619374786
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("9qbgs=y<rQ6QV;y:p");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("publishesmit");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("8034");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("lingucid");
      String string1 = lovinsStemmer1.stemString("KEYWORDS");
      assertEquals("keyword", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.stemString("publishesmit");
      assertEquals("publishesmis", string2);
      
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.634876416800304
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9qbgs=y<rQ6QV;y:p";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer3.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stem("Z}nO>MDl8:Esrv");
      String string1 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer4.stemString("Z}nO>MDl8:Esrv");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.toString();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stem("cismit");
      assertEquals("cismis", string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.569131061530734
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("9qbgs=y<rQ6QV;y:p");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("9qbgs=y<rQ6QV;y:p");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stem("lucond");
      assertEquals("lucons", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7246340436366787
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "edition";
      stringArray0[1] = "<|5l7vv%K_";
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "yK&VBh;nJ0";
      stringArray0[3] = "MO .=r^";
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("'X9p:0");
      assertEquals("'x9p:0", string0);
      
      String[] stringArray1 = new String[9];
      stringArray1[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[3] = "w3&|HFc['";
      stringArray1[4] = "<|5l7vv%K_";
      stringArray1[5] = "'X9p:0";
      stringArray1[6] = "'X9p:0";
      stringArray1[7] = "yK&VBh;nJ0";
      stringArray1[8] = "<|5l7vv%K_";
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer0.stemString("itousness");
      assertEquals("it", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.stemString("keywordrud");
      assertEquals("keywordrus", string3);
      
      String string4 = lovinsStemmer0.getRevision();
      assertEquals("8034", string4);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6177995646844683
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stem("title");
      stringArray0[0] = "Jk";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("title");
      assertEquals("titl", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("e&2=\"zu6z9,rud");
      lovinsStemmer0.stemString("titl");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("istr");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8329326204067655
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ian");
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("TJJUfz&+CEdR<");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "ian";
      stringArray0[3] = "tjjufz&+cedr<";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("TJJUfz&+CEdR<");
      assertEquals("tjjufz&+cedr<", string1);
      
      String string2 = lovinsStemmer0.stem("kahgyt");
      assertEquals("kahgys", string2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7193642021068776
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("LkQ6DED4");
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      stringArray0[0] = "lkq6ded4";
      lovinsStemmer0.toString();
      stringArray0[1] = "lkq6ded4";
      stringArray0[2] = "lkq6ded4";
      stringArray0[3] = "LkQ6DED4";
      stringArray0[4] = "lkq6ded4";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("LkQ6DED4");
      lovinsStemmer0.stem("LkQ6DED4");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("uascid");
      assertEquals("uascis", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("LkQ6DED4");
      lovinsStemmer0.stem("uascid");
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("alness");
      assertEquals("al", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("@5;*Z_-%oyTkb\"4& r");
      assertEquals("@5;*z_-%oytkb\"4& r", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7680138652228834
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("JAngTBV$sNG%m");
      assertEquals("jangtbv$sng%m", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("JAngTBV$sNG%m");
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lux";
      stringArray0[1] = "lud";
      stringArray0[2] = "jangtbv$sng%m";
      stringArray0[3] = "jangtbv$sng%m";
      stringArray0[4] = "JAngTBV$sNG%m";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer1.stemString("lud");
      assertEquals("lus", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5497905638061946
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("lux");
      assertEquals("luc", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String[] stringArray0 = new String[5];
      lovinsStemmer0.toString();
      stringArray0[0] = "R'GT|5qiAagB";
      lovinsStemmer0.toString();
      stringArray0[1] = "N]>";
      stringArray0[2] = "ens";
      stringArray0[3] = "zptuond";
      lovinsStemmer0.toString();
      stringArray0[4] = "her";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6495540500437402
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "edition";
      stringArray0[1] = "<|5l7vv%K_";
      stringArray0[2] = "yK&VBh;nJ0";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem(".");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("EhL?Y_w%CF");
      lovinsStemmer0.stem("yK&VBh;nJ0");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("ehl?y_w%cf");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("edition");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("elily");
      assertEquals("el", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.stem("fulness");
      assertEquals("fl", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      String string3 = lovinsStemmer2.stemString(".");
      assertEquals(".", string3);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7254989682178912
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "abstract";
      stringArray0[1] = "d+y!n6Q(aw1I";
      stringArray0[2] = "pp";
      stringArray0[3] = "eiC1)M.S?'0TFiY#J";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("encing");
      lovinsStemmer0.stemString("/Em@G.7}:PG,E");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("/Em@G.7}:PG,E");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6441844664095437
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("9qbgs=y<rQ6QV;y:p");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("->uj<.An0dpX dobK");
      String string0 = lovinsStemmer0.stemString("A Master's thesis.");
      assertEquals("a master thes.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stem("j2EQv5>gV");
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("1x^I[zow*p?");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer0.stem("j2eqv5>gv");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer3.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer4.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string2);
      
      String string3 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6537188726514973
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("}");
      lovinsStemmer0.getRevision();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7237043478395777
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r4: > Q?kdr ";
      stringArray0[1] = "r4: > Q?kdr ";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("r4: > Q?kdr ");
      assertEquals("r4: > q?kdr ", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("");
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6293577031592967
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("9qbgs=y<rQ6QV;y:p");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[0];
      lovinsStemmer0.stem("9qbgs=y<rQ6QV;y:p");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("Uuj>T[3!&e");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stem("ental");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7059162236433307
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";EVJF#'";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem(";EVJF#'");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getRevision();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("ialize");
      assertEquals("ial", string1);
      
      String string2 = lovinsStemmer1.stemString("csu)z;H");
      assertEquals("csu)z;h", string2);
      
      String string3 = lovinsStemmer2.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2451153165908269
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmeruad");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6169331868930352
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("-?TISiX?L^O4h(");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7026640323114108
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "edition";
      stringArray0[1] = "<|5l7vv%K_";
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "yK&VBh;nJ0";
      stringArray0[3] = "MO .=r^";
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("'X9p:0");
      assertEquals("'x9p:0", string0);
      
      String[] stringArray1 = new String[9];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[3] = "w3&|HFc['";
      stringArray1[4] = "<|5l7vv%K_";
      stringArray1[5] = "'X9p:0";
      stringArray1[6] = "'X9p:0";
      stringArray1[7] = "yK&VBh;nJ0";
      stringArray1[8] = "<|5l7vv%K_";
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer0.stemString("itousness");
      assertEquals("it", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("jh`k");
      String string3 = lovinsStemmer0.stemString("vad");
      assertEquals("vas", string3);
      
      lovinsStemmer0.toString();
      String string4 = lovinsStemmer0.stemString(",3ZLYf#FeoMpD=o");
      assertEquals(",3zlyf#feompd=o", string4);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.707962013065702
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "edition";
      stringArray0[1] = "<|5l7vv%K_";
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "yK&VBh;nJ0";
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("JWa=I");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("JWa=I");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      assertFalse(lovinsStemmer3.equals((Object)lovinsStemmer1));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4288970881310523
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("linguher");
      assertEquals("linguhes", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7068668623879995
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("The work's title, typed as explained in the LaTeX book.");
      assertEquals("th work titl, typ as explain in th latic book.", string0);
      
      lovinsStemmer0.stemString("th work titl, typ as explain in th latic book.");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "th work titl, typ as explain in th latic book.";
      lovinsStemmer0.getRevision();
      stringArray0[1] = "th work titl, typ as explain in th latic book.";
      lovinsStemmer0.getRevision();
      stringArray0[2] = "th work titl, typ as explain in th latic book.";
      stringArray0[3] = "th work titl, typ as explain in th latic book.";
      stringArray0[4] = "The work's title, typed as explained in the LaTeX book.";
      stringArray0[6] = "th work titl, typ as explain in th latic book.";
      stringArray0[7] = "th work titl, typ as explain in th latic book.";
      stringArray0[8] = "th work titl, typ as explain in th latic book.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("th work titl, typ as explain in th latic book.");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5587677522510572
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("JAngTBV$sNG%m");
      assertEquals("jangtbv$sng%m", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4203906061344713
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stem("title");
      stringArray0[0] = "Jk";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }
}
