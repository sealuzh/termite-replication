/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:25:29 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement(2289);
      optimization_DynamicIntArray0.addElement(788);
      optimization_DynamicIntArray0.removeAllElements();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5.,w;%:");
      optimization_DynamicIntArray0.getRevision();
      Optimization optimization1 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray1 = optimization1.new DynamicIntArray(788);
      Optimization optimization2 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray2 = optimization2.new DynamicIntArray(4);
      optimization_DynamicIntArray2.getRevision();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bled, Slovenia");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      optimization_DynamicIntArray1.addElement((-1803));
      Random.setNextRandom(2289);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 987;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(987, 3185);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      boolean[] booleanArray0 = new boolean[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.5;
      doubleArray0[1] = (double) 3185;
      doubleArray0[2] = (double) 987;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = 0.5;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = 0.5;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":");
      Random.setNextRandom(2);
      Random.setNextRandom((-1778));
      Random.setNextRandom(1532);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-1778);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 2;
      doubleArray0[1] = doubleArray2;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.constructWithCopy(doubleArray0);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      double[] doubleArray3 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1778.0)}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(987, 3185);
      double[] doubleArray0 = new double[2];
      boolean[] booleanArray0 = new boolean[6];
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(3, 3);
      weka.core.matrix.Matrix matrix2 = matrix1.times((double) 3185);
      matrix2.getRevision();
      matrix1.chol();
      booleanArray0[0] = false;
      weka.core.matrix.Matrix matrix3 = matrix1.arrayRightDivide(matrix2);
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      Optimization.solveTriangle(matrix3, doubleArray0, true, booleanArray1);
      Random.setNextRandom(1679);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 39;
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int1 = 1;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(1);
      optimization_DynamicIntArray0.addElement(39);
      Locale locale0 = Locale.CHINESE;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = null;
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 39);
      // Undeclared exception!
      try { 
        decimalFormat0.format((-1311L), (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-111), 7);
      double[] doubleArray1 = new double[0];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition((-14));
      StringBuffer stringBuffer1 = decimalFormat0.format(2526.9761734059, stringBuffer0, fieldPosition0);
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = '\"';
      charArray0[2] = 'O';
      charArray0[3] = 'A';
      stringBuffer1.insert(9, charArray0);
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity(125, 35);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 316.6787451447785;
      doubleArray0[1] = (double) 'O';
      doubleArray0[2] = (double) 125;
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = (double) 's';
      doubleArray0[5] = (double) 's';
      doubleArray0[6] = (double) 'O';
      doubleArray0[7] = (-2929.546700688);
      doubleArray0[8] = (double) 9;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      assertArrayEquals(new double[] {316.6787451447785, 79.0, 125.0, (-2.0), 115.0, 115.0, 79.0, (-2929.546700688), 9.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Indices from sort (ints): ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(4);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(4, 4, 4);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(988, 3185);
      double[] doubleArray0 = new double[2];
      boolean[] booleanArray0 = new boolean[6];
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(3, 3);
      weka.core.matrix.Matrix matrix2 = weka.core.matrix.Matrix.identity(3, 3);
      matrix1.chol();
      weka.core.matrix.Matrix matrix3 = matrix1.arrayRightDivide(matrix2);
      booleanArray0[1] = true;
      int[] intArray0 = new int[5];
      intArray0[0] = 988;
      intArray0[1] = 3185;
      String[] stringArray0 = new String[7];
      matrix2.arrayLeftDivide(matrix3);
      matrix3.lu();
      stringArray0[0] = "OZ;9[pJ+m t?w)dcjI[";
      stringArray0[1] = "";
      matrix2.lu();
      matrix3.setMatrix(3, 3, 2889, 3, matrix1);
      matrix2.lu();
      matrix2.toString();
      stringArray0[2] = "OZ;9[pJ+m t?w)dcjI[";
      weka.core.matrix.Matrix.main(stringArray0);
      matrix1.qr();
      matrix2.plus(matrix1);
      matrix3.setMatrix(intArray0, 2889, (-23), matrix2);
      double[] doubleArray1 = Optimization.solveTriangle(matrix2, doubleArray0, false, booleanArray0);
      assertEquals(2, doubleArray1.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(987, 987);
      double[] doubleArray0 = new double[2];
      boolean[] booleanArray0 = new boolean[6];
      weka.core.matrix.Matrix matrix1 = weka.core.matrix.Matrix.identity(3, 987);
      weka.core.matrix.Matrix matrix2 = matrix1.times((double) 987);
      matrix2.getRevision();
      matrix1.chol();
      booleanArray0[0] = true;
      matrix1.arrayRightDivide(matrix2);
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      double[] doubleArray1 = Optimization.solveTriangle(matrix1, doubleArray0, false, booleanArray0);
      assertEquals(2, doubleArray1.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean[] booleanArray0 = new boolean[3];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)78;
      byte byte0 = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)89;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[8] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, (double[]) null, false, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(988, 3185);
      double[] doubleArray0 = new double[2];
      boolean[] booleanArray0 = new boolean[6];
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(3, 3);
      weka.core.matrix.Matrix matrix2 = weka.core.matrix.Matrix.identity(3, 3);
      matrix1.chol();
      booleanArray0[0] = true;
      weka.core.matrix.Matrix matrix3 = matrix1.arrayRightDivide(matrix2);
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[5];
      intArray0[0] = 988;
      intArray0[1] = 3185;
      intArray0[4] = 3185;
      String[] stringArray0 = new String[7];
      matrix2.arrayLeftDivide(matrix3);
      matrix3.lu();
      stringArray0[0] = "OZ;9[pJ+m t?w)dcjI[";
      stringArray0[1] = "";
      matrix2.lu();
      matrix3.setMatrix(3, 3, 2889, 3, matrix1);
      matrix2.lu();
      matrix2.toString();
      stringArray0[2] = "OZ;9[pJ+m t?w)dcjI[";
      weka.core.matrix.Matrix.main(stringArray0);
      matrix1.qr();
      matrix2.plus(matrix1);
      matrix3.setMatrix(intArray0, 11, 1, matrix2);
      double[] doubleArray1 = Optimization.solveTriangle(matrix2, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-72.65);
      doubleArray0[1] = (-1120.84866884137);
      doubleArray0[2] = 1996.4886;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (-1093.21852177);
      doubleArray0[5] = (-0.5);
      doubleArray0[6] = 5.5;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean[] booleanArray0 = new boolean[6];
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.identity(3, 3185);
      StringWriter stringWriter0 = new StringWriter(3185);
      StringBuffer stringBuffer0 = new StringBuffer("6|W:uFm5,5;Ed,f2]t");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      matrix0.write(mockPrintWriter0);
      booleanArray0[0] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4297811167972485
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(710);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(710);
      optimization_DynamicIntArray0.addElement(710);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.size();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 19;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(19);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      int int1 = 1184;
      optimization_DynamicIntArray0.addElement(1184);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.282325506963904
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 395;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(395);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(395);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(395);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement((-1632));
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(395);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(395);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt(395);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 395
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }
}
