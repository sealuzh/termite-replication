/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:34:38 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "X#7:U";
      Filter.runFilter(allFilter0, stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "X#7:U");
      Filter.runFilter(filter0, stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Filter.runFilter(allFilter0, stringArray0);
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0321495811925083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setIgnoreClass(false);
      SystemInUtil.addInputLine("\"e<r49k");
      discretize0.getOptions();
      discretize0.setBins(1937);
      discretize0.useBinNumbersTipText();
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      discretize0.getCapabilities();
      Discretize discretize1 = new Discretize();
      discretize1.useEqualFrequencyTipText();
      Discretize discretize2 = new Discretize();
      discretize1.setBins((-2391));
      discretize0.findNumBinsTipText();
      assertEquals(1937, discretize0.getBins());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "  public static Object[][] filter(Object[][] i) {\n";
      String string0 = "#>DI])SNDgcyRb,31n";
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "X#7:U";
      stringArray0[2] = "8@9Kg0Svm;4\t.;}]A";
      Filter.runFilter(filter0, stringArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 3.0;
      SparseInstance sparseInstance0 = new SparseInstance(3.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1310.4422), (int[]) null, 15);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      discretize0.findNumBinsTipText();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      
      String string1 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", string1);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getUseBinNumbers();
      discretize0.attributeIndicesTipText();
      String string0 = null;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.901099090320704
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize(":cMP");
      discretize0.setIgnoreClass(true);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 4.410745585544634;
      SystemInUtil.addInputLine("k=nLN?y6c5K3A<~}fC");
      discretize0.getOptions();
      discretize0.m_NumBins = (-1);
      discretize0.setBins(1937);
      discretize0.useBinNumbersTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getCapabilities();
      discretize0.useEqualFrequencyTipText();
      int[] intArray0 = new int[2];
      intArray0[0] = 729;
      Discretize discretize1 = new Discretize("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.");
      discretize1.setBins(122);
      discretize1.findNumBinsTipText();
      assertEquals(122, discretize1.getBins());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9620853025448155
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[8];
      intArray0[0] = 77;
      intArray0[1] = 77;
      SystemInUtil.addInputLine("Name");
      discretize0.getOptions();
      discretize0.setBins(77);
      discretize0.useBinNumbersTipText();
      Discretize discretize1 = new Discretize("B");
      discretize1.getDesiredWeightOfInstancesPerInterval();
      Discretize discretize2 = new Discretize();
      discretize2.getCapabilities();
      Discretize discretize3 = new Discretize("YXb2=~S_#h/<");
      discretize0.setBins(857);
      discretize0.findNumBinsTipText();
      assertEquals(857, discretize0.getBins());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[2] = "b:8S";
      stringArray0[1] = "fist-last";
      stringArray0[2] = "9->";
      stringArray0[3] = "my#&Gai{KSZIG]";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(false);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.029747178790106
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = 3.0;
      doubleArray0[6] = 3.0;
      discretize0.setFindNumBins(true);
      discretize0.setUseBinNumbers(false);
      discretize0.setOutputFormat();
      discretize0.getOptions();
      discretize0.setUseEqualFrequency(false);
      discretize0.setBins((-215));
      discretize0.getCutPoints(15000);
      assertEquals((-215), discretize0.getBins());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9576035098277282
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize("V&-ce8..R}pMUZkF$");
      discretize0.useEqualFrequencyTipText();
      discretize0.setOutputFormat();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1534);
      discretize0.setDesiredWeightOfInstancesPerInterval((-381.03));
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getBinRangesString((-1713));
      discretize0.getBinRangesString((-1713));
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2901.6412605148);
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (-2901.6412605148);
      doubleArray0[3] = (-2901.6412605148);
      doubleArray0[4] = (-2901.6412605148);
      doubleArray0[5] = 3.0;
      doubleArray0[6] = (-2901.6412605148);
      SparseInstance sparseInstance0 = new SparseInstance((-2901.6412605148), doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-618);
      intArray0[1] = (-618);
      intArray0[2] = (-1952257859);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2901.6412605148), intArray0, (-2034458190));
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize("zVYIOTb48}z2+\"KB");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(allFilter1);
      String[] stringArray0 = new String[0];
      Filter.runFilter(multiFilter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(allFilter0, stringArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      Filter.runFilter(multiFilter1, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter2 = new AllFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-291.5469003989596);
      doubleArray0[1] = (-291.5469003989596);
      doubleArray0[2] = (-291.5469003989596);
      doubleArray0[3] = (-291.5469003989596);
      doubleArray0[4] = (-291.5469003989596);
      doubleArray0[5] = (-291.5469003989596);
      doubleArray0[6] = 553.0102278352966;
      doubleArray0[7] = (-291.5469003989596);
      doubleArray0[8] = (-291.5469003989596);
      DenseInstance denseInstance0 = new DenseInstance((-291.5469003989596), doubleArray0);
      Discretize discretize0 = new Discretize("aO]!");
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "  public static Object[][] filter(Object[][] i) {\n";
      stringArray0[1] = "#>DI])SNDgcyRb,31n";
      stringArray0[2] = "4qnq$'=";
      stringArray0[3] = "'B";
      stringArray0[4] = "-]`,";
      stringArray0[5] = "qNZ.m>JX(oH";
      stringArray0[6] = "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes";
      stringArray0[7] = "tZ{";
      Filter.runFilter(discretize0, stringArray0);
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[8];
      intArray0[0] = 77;
      intArray0[1] = 77;
      intArray0[2] = 0;
      intArray0[3] = 77;
      discretize0.setAttributeIndices("gAI6:Z<BANM7~HDX");
      discretize0.getCutPoints((-1717986916));
      Discretize discretize1 = new Discretize("gAI6:Z<BANM7~HDX");
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualWidthBinning((-1665));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      AllFilter allFilter0 = new AllFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "cMP";
      stringArray0[2] = "zHA{.hl&EF9";
      stringArray0[2] = "";
      Filter.runFilter(filter0, stringArray0);
      Filter.runFilter(filter0, stringArray0);
      Filter filter1 = Filter.makeCopy(filter0);
      Filter.runFilter(filter1, stringArray0);
      Filter.runFilter(allFilter0, stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[1] = "";
      stringArray1[2] = "cMP";
      stringArray1[3] = "zHA{.hl&EF9";
      stringArray1[4] = "zHA{.hl&EF9";
      Filter.runFilter(multiFilter1, stringArray1);
      Filter.runFilter(filter1, stringArray0);
      Filter.runFilter(allFilter0, stringArray1);
      Filter.runFilter(multiFilter0, stringArray1);
      Filter.runFilter(filter0, stringArray0);
      AllFilter allFilter1 = new AllFilter();
      Filter.runFilter(multiFilter1, stringArray0);
      Filter.runFilter(filter0, stringArray1);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1954));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9737955386768893
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize(":cMP");
      discretize0.setIgnoreClass(true);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 4.410745585544634;
      SystemInUtil.addInputLine("k=nLN?y6c5K3A<~}fC");
      discretize0.getOptions();
      discretize0.m_NumBins = (-1);
      discretize0.setBins(1937);
      discretize0.useBinNumbersTipText();
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      discretize0.getCapabilities();
      discretize0.useEqualFrequencyTipText();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      Discretize discretize1 = new Discretize();
      discretize1.setBins(122);
      discretize1.findNumBinsTipText();
      discretize0.useBinNumbersTipText();
      assertEquals(1937, discretize0.getBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "X#7:U";
      stringArray0[2] = "8@9Kg0Svm;4\t.;}]A";
      Filter.runFilter(filter0, stringArray0);
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2.0376841012476814;
      Filter.runFilter(filter0, stringArray0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 3.0;
      doubleArray1[3] = 772.674931372;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2356.9;
      doubleArray1[6] = (-745.7);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-745.7);
      doubleArray3[1] = 3.0;
      doubleArray3[2] = (-745.7);
      doubleArray3[3] = 772.674931372;
      doubleArray3[4] = 3.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-745.7);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 772.674931372;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 772.674931372;
      doubleArray4[6] = 3.0;
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1.7976931348623157E308;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 772.674931372;
      doubleArray6[1] = 2356.9;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 772.674931372;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 1.7976931348623157E308;
      doubleArray7[1] = 772.674931372;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 3.0;
      doubleArray7[5] = (-745.7);
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = 0.0;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(100000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100000
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.728107624018292
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("zVYIOTb48}z2+\"KB");
      boolean boolean0 = false;
      discretize0.setUseBinNumbers(false);
      EvoSuiteFile evoSuiteFile0 = null;
      discretize0.m_UseBinNumbers = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = discretize0.getOptions();
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter.makeCopy(allFilter1);
      String[] stringArray0 = new String[1];
      Filter.runFilter((Filter) null, stringArray0);
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 2.0;
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "V&-ce8..R}pMUZkF$";
      Discretize discretize0 = new Discretize("V&-ce8..R}pMUZkF$");
      discretize0.useEqualFrequencyTipText();
      discretize0.setOutputFormat();
      discretize0.setInvertSelection(false);
      discretize0.getCutPoints((-1952257859));
      DenseInstance denseInstance0 = new DenseInstance(104);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(214);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.setDesiredWeightOfInstancesPerInterval(2.0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.000528086156513
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-D";
      stringArray0[1] = "I[@}6-L8phn";
      stringArray0[2] = "";
      stringArray0[3] = "9DDcc]gn4[Y<<h~|o";
      stringArray0[4] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      stringArray0[5] = "Unable to find the name of the package in the Description file for ";
      Discretize.main(stringArray0);
      discretize0.setMakeBinary(false);
      discretize0.setUseBinNumbers(false);
      discretize0.setUseBinNumbers(false);
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      
      Discretize.main(stringArray0);
      discretize0.useEqualFrequencyTipText();
      String string1 = discretize0.useEqualFrequencyTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string1);
      
      discretize0.setOptions(stringArray0);
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "BuC,:7dU;q)f+f?r";
      Discretize discretize0 = new Discretize("BuC,:7dU;q)f+f?r");
      discretize0.getCutPoints(1650);
      discretize0.makeBinaryTipText();
      discretize0.getFindNumBins();
      long long0 = 0L;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      StringReader stringReader0 = new StringReader("Make resulting attributes binary.");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Make], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      int int0 = 68;
      int int1 = 0;
      int[] intArray0 = new int[0];
      int int2 = (-1952257859);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, (-1952257859));
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "  protected Object[] instanceToObjects(Instance inst) {\n";
      stringArray0[1] = "?WXs";
      stringArray0[2] = "Unary attributes";
      stringArray0[3] = "first-last";
      stringArray0[4] = "'Rx";
      stringArray0[5] = "zHA{.hl&EF9";
      stringArray0[6] = "G&(8.HAU|";
      stringArray0[7] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[8] = "\"7m zQED4|d+7gxZ";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.invertSelectionTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "X#7:U";
      stringArray0[2] = "8@9Kg0Svm;4\t.;}]A";
      Filter.runFilter(filter0, stringArray0);
      SystemInUtil.addInputLine("8@9Kg0Svm;4\t.;}]A");
      Discretize discretize0 = new Discretize("X#7:U");
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize(":cMP");
      String[] stringArray0 = discretize0.getOptions();
      Filter.runFilter(discretize0, stringArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1115.90006652451);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 414.3926653185849;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 4;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, intArray0, 4);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2068454943532685
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("Current weight of instance copy (set to 2): ");
      discretize0.setDesiredWeightOfInstancesPerInterval(2868.81);
      discretize0.setOptions((String[]) null);
      int[] intArray0 = new int[27];
      intArray0[0] = (-1917);
      intArray0[1] = 9;
      intArray0[3] = 125;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = (-5802);
      intArray0[7] = 10;
      discretize0.m_UseBinNumbers = true;
      intArray0[8] = 4;
      discretize0.setAttributeIndicesArray(intArray0);
      System.setCurrentTimeMillis(2L);
      discretize0.attributeIndicesTipText();
      discretize0.getRevision();
      discretize0.getInvertSelection();
      discretize0.getBins();
      discretize0.getBins();
      discretize0.useEqualFrequencyTipText();
      discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[0];
      discretize0.getBins();
      StringReader stringReader0 = new StringReader("sRS@ew,y` ML'8{ah6");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[sRS@ew], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getMakeBinary();
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.", arrayList0, 0);
      Filter.wekaStaticWrapper(allFilter0, "\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.", instances0, instances0);
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals(10, discretize0.getBins());
      
      discretize0.setBins(0);
      discretize0.setFindNumBins(false);
      assertEquals(0, discretize0.getBins());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.0;
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize0, stringArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(3.0, doubleArray1);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SparseInstance sparseInstance3 = new SparseInstance(2, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-618);
      intArray0[1] = 2;
      intArray0[2] = (-618);
      intArray0[3] = (-618);
      intArray0[4] = 2;
      intArray0[5] = 3150;
      intArray0[6] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 4);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance3);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1717986916));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vgPi+FkrZK(uJ&`Jt");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Filter.runFilter(discretize0, (String[]) null);
      String string0 = discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("first-last", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SystemInUtil.addInputLine("hO&f=Nb+ NQZ:G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[9];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nUsage:\n\tweka.core.Instances help\n\t\tPrints this help\n\tweka.core.Instances <filename>\n\t\tOutputs dataset statistics\n\tweka.core.Instances merge <filename1> <filename2>\n\t\tMerges the datasets (must have same number of rows).\n\t\tGenerated dataset gets output on stdout.\n\tweka.core.Instances append <filename1> <filename2>\n\t\tAppends the second dataset to the first (must have same number of attributes).\n\t\tGenerated dataset gets output on stdout.\n\tweka.core.Instances headers <filename1> <filename2>\n\t\tCompares the structure of the two datasets and outputs whether they\n\t\tdiffer or not.\n\tweka.core.Instances randomize <seed> <filename>\n\t\tRandomizes the dataset and outputs it on stdout.\n", arrayList0, 1);
      Instances instances1 = new Instances(instances0, 1);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }
}
