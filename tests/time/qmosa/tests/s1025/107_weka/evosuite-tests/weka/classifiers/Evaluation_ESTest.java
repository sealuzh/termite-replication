/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:07:04 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.OneRAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ConverterUtils;
import weka.core.converters.Loader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.LinearNNSearch;
import weka.filters.AllFilter;
import weka.filters.Filter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.528253137329484
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getCapabilities();
      OneR oneR0 = new OneR();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "KyU_TY7WvgkuUcJ;");
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation0.toSummaryString(false);
      double double0 = evaluation0.m_SumKBInfo;
      String string0 = evaluation0.toMatrixString("Zc}(oh+h2");
      assertEquals("Zc}(oh+h2\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string0);
      
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      AllFilter allFilter0 = new AllFilter();
      evaluation0.areaUnderPRC((-1));
      evaluation0.SFMeanPriorEntropy();
      double double2 = evaluation0.numTrueNegatives(1271);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.782371436938019
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P|0]G_k&trQ\">S";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      instances0.lastIndexOf(naiveBayesMultinomialUpdateable0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.lastIndexOf((Object) null);
      SVMLightLoader sVMLightLoader1 = new SVMLightLoader();
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.toMatrixString("P|0]G_k&trQ\">S");
      evaluation1.errorRate();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.getHeader();
      evaluation0.matthewsCorrelationCoefficient(1);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) regressionByDiscretization0, instances0, (-1669), (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3992593442855883
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P|0]G_k&trQ\">S";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      instances0.lastIndexOf(naiveBayesMultinomialUpdateable0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setMinimizeAbsoluteError(true);
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.lastIndexOf((Object) null);
      SVMLightLoader sVMLightLoader1 = new SVMLightLoader();
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.toMatrixString("P|0]G_k&trQ\">S");
      evaluation1.errorRate();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.areaUnderPRC(2);
      evaluation1.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 486, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 486
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0549626987123517
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[9];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      instances0.lastIndexOf(naiveBayesMultinomialUpdateable0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.toMatrixString("@data");
      double double0 = evaluation0.m_SumKBInfo;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1);
      doubleArray1[0] = (double) (-1);
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 2.0;
      evaluation0.correct();
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5937191065066494
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName((String) null);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getCapabilities();
      OneR oneR0 = new OneR();
      instances0.lastIndexOf(oneR0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation.getGlobalInfo(oneR0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.meanAbsoluteError();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.weightedFalsePositiveRate();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      evaluation1.trueNegativeRate(0);
      evaluation1.getHeader();
      String[] stringArray0 = new String[6];
      mockRandom0.doubles(0L, (-1863.4979131375048), 770.0);
      stringArray0[0] = "@data";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "@relation";
      stringArray0[4] = "@data";
      stringArray0[5] = null;
      try { 
        evaluation0.crossValidateModel((String) null, instances0, 0, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: null
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3129960189225
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName("");
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$,r/");
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate((String) null);
      textDirectoryLoader0.listOptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      instances1.lastIndexOf(oneR0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation1.toSummaryString(false);
      evaluation1.toMatrixString("numExecutionSlotsTipText");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4308816379993172
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName((String) null);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities capabilities0 = filteredClassifier0.getCapabilities();
      OneR oneR0 = new OneR();
      Capabilities capabilities1 = oneR0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      OneR oneR1 = new OneR();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      Capabilities capabilities2 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances1);
      instances1.lastIndexOf(capabilities2);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_MissingClass = (double) (-1);
      evaluation1.toMatrixString("@+De918");
      double double0 = evaluation1.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.trueNegativeRate((-2));
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3992593442855883
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P|0]G_k&trQ\">S";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      instances0.lastIndexOf(naiveBayesMultinomialUpdateable0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setMinimizeAbsoluteError(true);
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.lastIndexOf((Object) null);
      SVMLightLoader sVMLightLoader1 = new SVMLightLoader();
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.toMatrixString("P|0]G_k&trQ\">S");
      double double1 = evaluation1.errorRate();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.areaUnderPRC(2);
      double double2 = evaluation1.SFMeanPriorEntropy();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation1.numTrueNegatives(486);
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4268903753039166
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String string0 = null;
      instances0.setRelationName((String) null);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      instances0.setRelationName("Headers match");
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances0.lastIndexOf(textDirectoryLoader0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "8034";
      stringArray0[3] = null;
      stringArray0[4] = "@relation";
      stringArray0[5] = "8034";
      stringArray0[6] = "@relation";
      FilteredClassifier.main(stringArray0);
      Version.MAJOR = (-1);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation.getGlobalInfo(filteredClassifier0);
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5984006637376376
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getCapabilities();
      OneR oneR0 = new OneR();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "KyU_TY7WvgkuUcJ;");
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      String string1 = evaluation0.toMatrixString("@+De918");
      assertEquals("@+De918\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string1);
      
      double[] doubleArray0 = new double[3];
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.trueNegativeRate(487);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.pctIncorrect();
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.560472880087216
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Enumeration enumeration0 = textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.lastIndexOf(enumeration0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.KBRelativeInformation();
      evaluation0.getDiscardPredictions();
      evaluation0.toMatrixString("8034");
      evaluation0.errorRate();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.198202074928949
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      textDirectoryLoader0.getRevision();
      Enumeration enumeration0 = textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 78;
      instances0.lastIndexOf(enumeration0);
      evaluation0.m_NumClasses = (-1);
      evaluation0.numFalseNegatives(78);
      evaluation0.toCumulativeMarginDistributionString();
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3204863871626777
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P|0]G_k&trQ\">S";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      instances0.lastIndexOf(naiveBayesMultinomialUpdateable0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[6] = (double) 1;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 2.0);
      evaluation0.getRevision();
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unweightedMicroFmeasure();
      double double2 = evaluation0.errorRate();
      assertEquals(double2, double1, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      textDirectoryLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = 26;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      MockRandom mockRandom0 = new MockRandom(26);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      instances0.resampleWithWeights((Random) mockRandom0, booleanArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".dat";
      Evaluation.main(stringArray0);
      SVMLightLoader sVMLightLoader1 = new SVMLightLoader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      linearNNSearch0.setDistanceFunction(minkowskiDistance0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 26;
      intArray0[1] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(1665.6, doubleArray0, intArray0, 1);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4033948079084486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      textDirectoryLoader0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[TargetMetaInfo] couldn't find value ";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      Evaluation.main(stringArray0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(textDirectoryLoader0);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      minkowskiDistance0.getAttributeIndices();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      linearNNSearch0.setDistanceFunction(minkowskiDistance0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 2;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9656973396456747
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Enumeration enumeration0 = textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.lastIndexOf(enumeration0);
      evaluation0.m_NumClasses = 26;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation0.m_SumPredicted = 4115.0;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5778108719059416
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      Capabilities capabilities0 = new Capabilities(makeDensityBasedClusterer0);
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("icide");
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      evaluation0.numFalseNegatives((-2));
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toClassDetailsString();
      evaluation0.getClassPriors();
      // Undeclared exception!
      try { 
        instances0.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.196302982564237
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Enumeration enumeration0 = textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.lastIndexOf(enumeration0);
      evaluation0.m_NumClasses = 26;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation0.m_SumPredicted = 4115.0;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".dat";
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.283439167697066
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName((String) null);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getCapabilities();
      OneR oneR0 = new OneR();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "KyU_TY7WvgkuUcJ;");
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances1);
      instances0.lastIndexOf(instances1);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.toSummaryString(false);
      evaluation0.toMatrixString("@+De918");
      evaluation0.areaUnderPRC(1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P|0]G_k&trQ\">S";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      instances0.lastIndexOf(naiveBayesMultinomialUpdateable0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[6] = (double) 1;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 2.0);
      double double0 = evaluation0.m_SumErr;
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5648591221259176
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P|0]G_k&trQ\">S";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      instances0.lastIndexOf(naiveBayesMultinomialUpdateable0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      textDirectoryLoader0.listOptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      instances0.lastIndexOf(classificationViaRegression0);
      SVMLightLoader sVMLightLoader1 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.toMatrixString("|lO");
      regressionByDiscretization1.setUseEqualFrequency(true);
      evaluation1.areaUnderPRC(1);
      double[] doubleArray0 = new double[0];
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 1);
      double double0 = evaluation1.meanAbsoluteError();
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.588723510403698
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      Capabilities capabilities0 = new Capabilities(makeDensityBasedClusterer0);
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("icide");
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      evaluation0.numFalseNegatives((-2));
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toClassDetailsString();
      evaluation0.makeDistribution(1.0E-4);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(3330.01341927);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3330
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      textDirectoryLoader0.reset();
      Enumeration enumeration0 = textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.lastIndexOf(enumeration0);
      evaluation0.m_NumClasses = 26;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      MockRandom mockRandom0 = new MockRandom(26);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      SVMLightLoader sVMLightLoader1 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.toMatrixString("Xa~~!N");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getCapabilities();
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, (-2));
      boolean boolean0 = false;
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) filteredClassifier0, (Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.298975914809383
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(486L);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) 486L;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) 486L;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (double) 486L;
      doubleArray0[7] = 2.0;
      textDirectoryLoader0.setRetrieval(1404);
      doubleArray0[8] = 2.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 399.157184675);
      evaluation0.getRevision();
      double double0 = evaluation0.totalCost();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertNotEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString("9101");
      assertEquals("9101\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.getClassPriors();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.397980361433392
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      textDirectoryLoader0.setCharSet("rcJbn.DD^V");
      evaluation0.toSummaryString("ances", false);
      evaluation0.meanAbsoluteError();
      String[] stringArray0 = new String[4];
      try { 
        Evaluation.handleCostOption(".arff", 687);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2065052252090784
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      Enumeration enumeration0 = textDirectoryLoader0.listOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 78;
      instances0.lastIndexOf(enumeration0);
      evaluation0.numFalseNegatives(78);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toSummaryString();
      // Undeclared exception!
      try { 
        instances0.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(486L);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "R=K'UHf9K@c%PBg{";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@relation";
      textDirectoryLoader0.setOptions(stringArray0);
      evaluation0.correct();
      String[] stringArray1 = new String[7];
      stringArray1[0] = ".arff";
      stringArray1[1] = ".arff";
      stringArray1[2] = "@data";
      stringArray1[3] = ".arff";
      stringArray1[4] = ".bsi";
      stringArray1[3] = "@data";
      stringArray1[3] = "@relation";
      try { 
        Evaluation.evaluateModel(".bsi", stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .bsi.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3054653596041117
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Enumeration enumeration0 = textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 78;
      instances0.lastIndexOf(enumeration0);
      evaluation0.m_NumClasses = 26;
      evaluation0.numFalseNegatives(78);
      evaluation0.toCumulativeMarginDistributionString();
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      filteredClusterer0.getCapabilities();
      Filter filter0 = filteredClusterer0.getFilter();
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("icide");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName((String) null);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getCapabilities();
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances1);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, (-2));
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, (-1));
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.89319182119523
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("ances", true);
      String[] stringArray0 = new String[12];
      Logistic logistic0 = new Logistic();
      instances0.lastIndexOf(logistic0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation.getGlobalInfo(regressionByDiscretization0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.meanAbsoluteError();
      evaluation0.weightedFalsePositiveRate();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(0L);
      mockRandom1.longs();
      evaluation1.trueNegativeRate(0);
      Instances instances1 = evaluation1.getHeader();
      try { 
        evaluation0.crossValidateModel(".arff", instances1, (-1), stringArray0, (Random) mockRandom1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.510766958610196
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P|0]G_k&trQ\">S";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      AbstractClassifier.makeCopy(naiveBayesMultinomialUpdateable0);
      instances0.lastIndexOf(naiveBayesMultinomialUpdateable0);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 2;
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1987926481569326
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(7);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      textDirectoryLoader0.setCharSet("rcJbn.DD^V");
      evaluation0.toSummaryString("ances", true);
      evaluation0.meanAbsoluteError();
      String string0 = "px(g_/`= Qy";
      int int0 = 0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      TextDirectoryLoader.main(stringArray0);
      stringArray0[1] = ".arff";
      try { 
        textDirectoryLoader0.setSource((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Setting InputStream as source not supported
         //
         verifyException("weka.core.converters.AbstractLoader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7659767920186922
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      Capabilities capabilities0 = new Capabilities(makeDensityBasedClusterer0);
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("icide");
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      ConverterUtils.DataSource converterUtils_DataSource2 = new ConverterUtils.DataSource(sVMLightLoader0);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      linearNNSearch0.setDistanceFunction(minkowskiDistance0);
      Instance instance0 = converterUtils_DataSource1.nextElement(instances0);
      linearNNSearch0.nearestNeighbour(instance0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      assertFalse(regressionByDiscretization0.getDeleteEmptyBins());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9362031544739398
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setRelationName(".arff");
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 78;
      evaluation0.numFalseNegatives(78);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toClassDetailsString("@data");
      // Undeclared exception!
      try { 
        instances0.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      String[] stringArray0 = new String[7];
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OneRAttributeEval oneRAttributeEval0 = new OneRAttributeEval();
      Capabilities capabilities0 = new Capabilities(oneRAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getRelationalClassFormat();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7659767920186922
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer();
      Capabilities capabilities0 = new Capabilities(makeDensityBasedClusterer0);
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("icide");
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      ConverterUtils.DataSource converterUtils_DataSource2 = new ConverterUtils.DataSource(sVMLightLoader0);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      linearNNSearch0.setDistanceFunction(minkowskiDistance0);
      converterUtils_DataSource1.nextElement(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      assertEquals("The density estimator to use.", regressionByDiscretization0.estimatorTypeTipText());
  }
}
