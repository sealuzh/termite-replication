/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:03:11 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0051905861242334
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('u');
      xPathLexer0.consume((-2204));
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer1.operatorName();
      xPathLexer1.and();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9445732289274391
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.setXPath(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.dots();
      assertEquals(">", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token1 = xPathLexer1.star();
      assertEquals(".", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('T');
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer1.div();
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('~');
      assertFalse(boolean1 == boolean0);
      
      xPathLexer1.or();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token6);
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer1.mod();
      Token token8 = xPathLexer1.literal();
      assertEquals(27, token8.getTokenType());
      assertEquals("}{Lrm@[m", token8.getTokenText());
      assertNotNull(token8);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.341330722060074
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zB8kT(v%");
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("o", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer1.isIdentifierChar('b');
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token7 = xPathLexer0.at();
      assertEquals("w", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.LA(11);
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer1.div();
      char char0 = xPathLexer1.LA(113);
      assertEquals('\uFFFF', char0);
      
      Token token10 = xPathLexer2.comma();
      assertEquals(32, token10.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1969163495812394
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.and();
      xPathLexer1.doubleColon();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("}_", token2.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer1.and();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("s", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      xPathLexer1.operatorName();
      Token token5 = xPathLexer0.minus();
      assertEquals("D", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer1.whitespace();
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals("OO", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      assertNotNull(token10);
      
      xPathLexer2.consume(1620);
      xPathLexer2.hasMoreChars();
      xPathLexer1.or();
      Token token11 = xPathLexer2.rightParen();
      assertEquals(2, token11.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8693793200478377
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.consume(92);
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.or();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.setXPath("%q)]EV:%li5UJg]h");
      xPathLexer0.mod();
      Token token4 = xPathLexer0.comma();
      assertEquals("%", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("q", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals(")", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(4, token8.getTokenType());
      assertEquals("]", token8.getTokenText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3021958581585924
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" /");
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.consume(318);
      xPathLexer0.minus();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.isIdentifierChar(';');
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierStartChar('=');
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3919118762455582
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.consume(92);
      xPathLexer0.div();
      xPathLexer0.setXPath("l+aZ5PU#U0+");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer("%");
      xPathLexer2.doubleColon();
      xPathLexer0.dots();
      xPathLexer1.setXPath("");
      xPathLexer2.equals();
      xPathLexer1.star();
      xPathLexer2.rightParen();
      xPathLexer2.relationalOperator();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.isIdentifierStartChar('(');
      xPathLexer2.or();
      xPathLexer0.doubleColon();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.mod();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0546246080615376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer1.pipe();
      xPathLexer1.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer1.and();
      xPathLexer0.at();
      xPathLexer1.operatorName();
      xPathLexer0.minus();
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer0.equals();
      xPathLexer2.leftParen();
      xPathLexer1.LA(105);
      xPathLexer0.dots();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.and();
      assertNull(token0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.040701302060951
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GX$3t'f]4SJPH27,<");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer1.not();
      xPathLexer1.consume(590);
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer2.or();
      xPathLexer1.literal();
      xPathLexer2.leftBracket();
      xPathLexer2.doubleColon();
      xPathLexer1.setXPath("z,KAHG");
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer1.div();
      xPathLexer1.nextToken();
      xPathLexer2.pipe();
      xPathLexer2.pipe();
      xPathLexer2.dots();
      xPathLexer0.equals();
      xPathLexer1.leftParen();
      xPathLexer2.LA(15);
      xPathLexer1.dots();
      xPathLexer1.whitespace();
      Token token0 = xPathLexer2.and();
      assertNull(token0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.consume((-2077));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8505945850597303
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.consume(92);
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.setXPath("%q)]EV:%li5UJg]h");
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.doubleColon();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1665239774580254
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.not();
      xPathLexer0.consume(92);
      xPathLexer0.div();
      xPathLexer0.setXPath("l+aZ5PU#U0+");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer("%");
      Token token1 = xPathLexer2.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      xPathLexer1.setXPath("");
      Token token3 = xPathLexer2.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer1.notEquals();
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer3.literal();
      assertNull(token9);
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.minus();
      Token token10 = xPathLexer4.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer2.minus();
      assertEquals(6, token11.getTokenType());
      
      xPathLexer2.div();
      xPathLexer1.relationalOperator();
      Token token12 = xPathLexer3.notEquals();
      assertEquals(22, token12.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1824731358030225
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zB8kT(v%");
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2672464733874371
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("#@NXs(m3FktIs\"\"J");
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("#", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("@", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      char char0 = xPathLexer1.LA(122);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.696054805991405
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("b", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.and();
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("g_", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("xsD3OO-", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("\"", token4.getTokenText());
      
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("/", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer2.or();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals("b", token6.getTokenText());
      
      xPathLexer1.colon();
      xPathLexer0.div();
      Token token7 = xPathLexer1.not();
      assertEquals("=", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      xPathLexer1.colon();
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8732454726987604
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.colon();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.consume();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.mod();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer4.doubleColon();
      xPathLexer3.plus();
      xPathLexer4.whitespace();
      XPathLexer xPathLexer5 = new XPathLexer("w/NdVPw]M+");
      xPathLexer5.slashes();
      xPathLexer5.dots();
      xPathLexer0.or();
      xPathLexer3.consume();
      xPathLexer2.getXPath();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.hasMoreChars();
      xPathLexer3.consume();
      xPathLexer6.div();
      int int0 = xPathLexer6.currentPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9561422809076
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.minus();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("1MTX$65Bi[?GSv}");
      xPathLexer1.nextToken();
      xPathLexer0.pipe();
      xPathLexer1.pipe();
      xPathLexer0.dots();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.not();
      xPathLexer2.leftParen();
      xPathLexer2.LA(1624);
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5427178875672962
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("q@y2*+{~S>K[>G 0n");
      xPathLexer1.number();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7560718789770107
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.mod();
      xPathLexer0.isIdentifierChar('u');
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8150430485384126
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.and();
      xPathLexer1.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer1.and();
      Token token0 = xPathLexer0.at();
      xPathLexer1.operatorName();
      xPathLexer0.minus();
      token0.toString();
      xPathLexer0.isIdentifierStartChar('h');
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.notEquals();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.consume((-1));
      xPathLexer2.hasMoreChars();
      // Undeclared exception!
      try { 
        xPathLexer2.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0086259026863624
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.colon();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      xPathLexer0.colon();
      xPathLexer0.at();
      xPathLexer0.consume(0);
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("z,KAHG");
      xPathLexer1.operatorName();
      xPathLexer0.minus();
      xPathLexer0.div();
      xPathLexer1.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.equals();
      xPathLexer1.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer2.LA(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9403125302102042
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.setXPath(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(">", token0.getTokenText());
      assertEquals(9, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("}", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      XPathLexer xPathLexer1 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      xPathLexer1.currentPosition();
      Token token4 = xPathLexer1.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
      
      Token token5 = xPathLexer1.star();
      assertEquals(">", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer1.plus();
      assertEquals("}", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0996758786923286
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("S#$jr#rXA(");
      xPathLexer0.consume(25);
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.isIdentifierStartChar('3');
      xPathLexer0.div();
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2180085820175355
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(2, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4536556525425497
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("1MTX$65Bi[?GSv}");
      xPathLexer1.notEquals();
      xPathLexer0.minus();
      xPathLexer0.star();
      xPathLexer1.identifier();
      xPathLexer1.leftParen();
      xPathLexer1.slashes();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer1.whitespace();
      xPathLexer0.rightParen();
      xPathLexer1.not();
      xPathLexer0.slashes();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.pipe();
      xPathLexer1.mod();
      xPathLexer1.rightParen();
      xPathLexer0.number();
      xPathLexer1.isIdentifierChar('a');
      xPathLexer0.and();
      xPathLexer0.at();
      xPathLexer1.hasMoreChars();
      xPathLexer0.number();
      xPathLexer0.plus();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0886639734204158
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LCX4TLDDDe|YQi@");
      xPathLexer0.div();
      Token token0 = xPathLexer0.dollar();
      assertEquals("L", token0.getTokenText());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer0.plus();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      char char0 = xPathLexer0.LA(122);
      assertEquals('\uFFFF', char0);
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.350818288995072
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.star();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.consume(827);
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.649842128305761
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.currentPosition();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.consume();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
      
      xPathLexer0.leftParen();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      xPathLexer0.getXPath();
      char char0 = xPathLexer0.LA(2307);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = null;
      try {
        xPathLexer0 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.243403554805849
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.minus();
      xPathLexer0.star();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1294));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2113698586408583
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      Token token0 = xPathLexer0.colon();
      assertEquals("z", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("KA", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.consume(0);
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.identifier();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.currentPosition();
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.not();
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer2.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer3.star();
      assertEquals(20, token12.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.908763536926576
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" /");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.consume(318);
      xPathLexer0.minus();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      char char0 = xPathLexer0.LA(318);
      assertEquals('\uFFFF', char0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token12 = xPathLexer1.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      Token token13 = xPathLexer1.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer1.plus();
      assertEquals(5, token14.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2214181644267623
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.mod();
      xPathLexer0.star();
      xPathLexer0.slashes();
      xPathLexer0.consume((-2949));
      xPathLexer0.consume();
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.at();
      xPathLexer0.consume((-959));
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9260164794332322
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" /");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.consume(318);
      xPathLexer0.minus();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.star();
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.minus();
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2533188117752387
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(A9-eZ.");
      Token token0 = xPathLexer0.identifier();
      assertEquals("Dnj", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("*", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals("(", token2.getTokenText());
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightParen();
      assertEquals("A", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("9", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("-", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      assertEquals("eZ.", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.colon();
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0086655301373963
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer0.getXPath();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.comma();
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.plus();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer0.LA(1);
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
      
      xPathLexer0.div();
      char char0 = xPathLexer0.LA(1);
      assertEquals('\uFFFF', char0);
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.484147019557894
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(",", token0.getTokenText());
      
      xPathLexer0.number();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("K", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("A", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals("H", token4.getTokenText());
      
      xPathLexer0.consume(0);
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('w');
      assertTrue(boolean0);
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.star();
      assertEquals("G", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer1.literal();
      xPathLexer1.minus();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("OrzG5d#>FL)z");
      Token token9 = xPathLexer2.dollar();
      assertEquals("O", token9.getTokenText());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer2.rightParen();
      assertEquals(2, token11.getTokenType());
      assertEquals("r", token11.getTokenText());
      
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      Token token13 = xPathLexer1.pipe();
      assertEquals(17, token13.getTokenType());
      
      Token token14 = xPathLexer0.literal();
      assertNull(token14);
      
      xPathLexer0.minus();
      Token token15 = xPathLexer0.dollar();
      assertEquals(26, token15.getTokenType());
      
      Token token16 = xPathLexer0.minus();
      assertEquals(6, token16.getTokenType());
      
      xPathLexer1.div();
      xPathLexer1.relationalOperator();
      Token token17 = xPathLexer1.notEquals();
      assertEquals(22, token17.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.237341826939087
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("q", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.and();
      xPathLexer1.doubleColon();
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("}_", token3.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer1.and();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer0.minus();
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("[bq}_xsD3OO-\"by:O");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("3", token5.getTokenText());
      
      xPathLexer1.literal();
      XPathLexer xPathLexer4 = new XPathLexer("g_/`= QyZIp.");
      Token token6 = xPathLexer2.minus();
      assertEquals("", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("g_/`= QyZIp.");
      Token token7 = xPathLexer4.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("g", token7.getTokenText());
      
      Token token8 = xPathLexer3.minus();
      assertEquals(6, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("[bq}_xsD3OO-\"by:O");
      Token token9 = xPathLexer6.rightBracket();
      assertEquals(4, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      xPathLexer6.div();
      xPathLexer1.relationalOperator();
      Token token10 = xPathLexer3.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer2.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals("[", token11.getTokenText());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.108784074647195
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      Token token0 = xPathLexer0.not();
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("b", token1.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.dots();
      assertEquals("_", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("g_/`= QyZIp.");
      xPathLexer1.mod();
      xPathLexer0.and();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals("g_", token3.getTokenText());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer1.and();
      Token token5 = xPathLexer0.at();
      assertEquals("y", token5.getTokenText());
      
      xPathLexer1.operatorName();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals(":", token6.getTokenText());
      
      xPathLexer1.div();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.pipe();
      Token token8 = xPathLexer1.pipe();
      assertEquals("/", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer2.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
      
      xPathLexer0.LA(0);
      Token token11 = xPathLexer2.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer2.plus();
      assertEquals(5, token12.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      char char0 = xPathLexer0.LA(103);
      assertEquals('\uFFFF', char0);
      
      Token token13 = xPathLexer3.comma();
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0624493806585686
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CVuB*X");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.plus();
      xPathLexer0.equals();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      xPathLexer0.doubleColon();
      token2.toString();
      token0.toString();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer("[ (15) (CVuB)");
      xPathLexer2.identifier();
      xPathLexer2.slashes();
      xPathLexer0.endPosition();
      xPathLexer0.setPreviousToken((Token) null);
      assertNotSame(xPathLexer0, xPathLexer2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.968346177400289
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zB8kT(v%");
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals("zB8kT", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.setXPath("[bq}_xsD3OO-\"by:O");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer1.setXPath("[bq}_xsD3OO-\"by:O");
      Token token5 = xPathLexer1.equals();
      assertEquals("", token5.getTokenText());
      
      xPathLexer1.star();
      Token token6 = xPathLexer1.rightParen();
      assertEquals("b", token6.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("q", token7.getTokenText());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.minus();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      Token token9 = xPathLexer1.star();
      assertEquals("}", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer2.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer2.comma();
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
      
      xPathLexer1.literal();
      xPathLexer1.minus();
      Token token13 = xPathLexer2.dollar();
      assertEquals(26, token13.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[bq}_xsD3OO-\"by:O");
      Token token14 = xPathLexer3.minus();
      assertEquals("", token14.getTokenText());
      assertEquals(6, token14.getTokenType());
      
      xPathLexer3.div();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      Token token15 = xPathLexer4.notEquals();
      assertEquals(22, token15.getTokenType());
      
      Token token16 = xPathLexer4.equals();
      assertEquals(21, token16.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.374534856857127
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals(" ", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("(", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.not();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      xPathLexer0.not();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token10 = xPathLexer1.not();
      assertEquals("c", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token11 = xPathLexer2.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer2.colon();
      assertEquals(")", token12.getTokenText());
      
      Token token13 = xPathLexer0.colon();
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer1.slashes();
      assertEquals("o", token14.getTokenText());
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.221861967959179
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("*", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("(", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("v", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("-eZ.", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.colon();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5159020273662815
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3635833615806687
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("1MTX$65Bi[?GSv}");
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("1M", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.star();
      xPathLexer1.identifier();
      xPathLexer1.leftParen();
      Token token2 = xPathLexer1.slashes();
      assertEquals("6", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.not();
      Token token5 = xPathLexer1.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.rightParen();
      Token token6 = xPathLexer1.not();
      assertEquals("B", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token8);
      assertEquals("i", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer1.pipe();
      assertEquals("[", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      xPathLexer1.mod();
      Token token10 = xPathLexer1.rightParen();
      assertEquals(2, token10.getTokenType());
      assertEquals("?", token10.getTokenText());
      
      xPathLexer0.number();
      xPathLexer1.isIdentifierChar('a');
      xPathLexer0.and();
      xPathLexer0.at();
      Token token11 = xPathLexer1.number();
      assertEquals("", token11.getTokenText());
      assertEquals(30, token11.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.1663420188155196
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Dnj*(Av-eZ.");
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("A", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("v-eZ.", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.colon();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(16, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3864644529630925
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("1MTX$65Bi[?GSv}");
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("1M", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer1.identifier();
      Token token3 = xPathLexer1.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      Token token4 = xPathLexer1.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("6", token4.getTokenText());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("5", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("HokhY5/A!Oi[0ET4");
      Token token7 = xPathLexer3.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("H", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.mod();
      Token token8 = xPathLexer4.rightParen();
      assertEquals(2, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("1MTX$65Bi[?GSv}");
      Token token9 = xPathLexer5.number();
      assertEquals(30, token9.getTokenType());
      assertEquals("1", token9.getTokenText());
      
      xPathLexer4.isIdentifierChar('?');
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer7 = new XPathLexer("[ (");
      Token token10 = xPathLexer7.at();
      assertEquals("[", token10.getTokenText());
      
      xPathLexer0.LA(0);
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer7.plus();
      assertEquals(" ", token12.getTokenText());
      assertEquals(5, token12.getTokenType());
      
      xPathLexer1.div();
      char char0 = xPathLexer3.LA(0);
      assertEquals('H', char0);
      
      Token token13 = xPathLexer5.comma();
      assertEquals("M", token13.getTokenText());
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.9463765683018617
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" /");
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.consume(318);
      xPathLexer0.minus();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.consume(46);
      xPathLexer1.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer(" /");
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4287786389226547
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.identifier();
      Token token0 = xPathLexer1.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer1.colon();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.or();
      Token token4 = xPathLexer1.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer1.colon();
      xPathLexer0.div();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.colon();
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6825761869048301
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z,KAHG");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(",", token0.getTokenText());
      
      xPathLexer0.number();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("KA", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("H", token2.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      Token token3 = xPathLexer0.colon();
      assertEquals("G", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token8 = xPathLexer4.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer1.number();
      assertEquals(30, token9.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0272860307763825
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t[`#zVh@X(u,|W$");
      XPathLexer xPathLexer1 = new XPathLexer(".t[`#zVh@X(u,|W$");
      Token token0 = xPathLexer0.not();
      assertEquals(".", token0.getTokenText());
      
      Token token1 = xPathLexer1.identifier();
      assertEquals(".t", token1.getTokenText());
      
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("[", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer1.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.colon();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer1.or();
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("#", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.not();
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer1.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.minus();
      assertEquals("#", token10.getTokenText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1872267219742558
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.notEquals();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5404758968074297
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".t[`#zVh@X(u,|W$");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("`", token2.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.div();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("V", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("h", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6550653460500613
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>}{Lrm@[m>qgw6x(Ht");
      Token token0 = xPathLexer0.number();
      assertEquals(31, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }
}
