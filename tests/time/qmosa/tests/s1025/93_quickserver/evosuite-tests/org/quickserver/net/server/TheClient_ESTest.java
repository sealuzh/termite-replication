/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:58:06 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import java.nio.channels.UnresolvedAddressException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.QuickServerConfig;
import org.quickserver.util.xmlreader.Secure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-205));
      theClient0.getMaxAuthTry();
      theClient0.getClientObjectHandler();
      SocketChannel.open();
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress("me`UG<Jdjs", (-205));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-205
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4338006812941
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      TheClient theClient1 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getClientData();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.setClientData((ClientData) null);
      theClient1.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient1.getTrusted();
      theClient1.getMaxAuthTryMsg();
      theClient1.getMaxAuthTryMsg();
      theClient1.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getSocket();
      theClient0.getTimeoutMsg();
      theClient1.setTrusted(false);
      theClient1.getSocket();
      assertFalse(theClient1.getTrusted());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TheClient theClient2 = new TheClient();
      theClient2.getClientEvent();
      assertTrue(theClient2.getCommunicationLogging());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.setTrusted(true);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTimeout((-427));
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      theClient0.getSocket();
      theClient0.getServer();
      theClient0.getSocketChannel();
      theClient0.getClientEvent();
      assertEquals((-427), theClient0.getTimeout());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.380167676263512
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("x] [zpBMD?6H2H,QK");
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:84>", nonBlockingClientHandler0.getName());
      
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxConnectionMsg("74{NY8%Y");
      theClient0.setTimeout(0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientBinaryHandler();
      theClient0.setMaxConnectionMsg("74{NY8%Y");
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientEvent(clientEvent0);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getSocketChannel();
      theClient0.setCommunicationLogging(true);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientEvent();
      //  // Unstable assertion: assertEquals(0, theClient0.getTimeout());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      QuickServer quickServer0 = new QuickServer("Qm)'[2u", 1000);
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      theClient0.getClientObjectHandler();
      quickServerConfig0.setClientObjectHandler((ClientObjectHandler) null);
      quickServer0.initServer(quickServerConfig0);
      quickServer0.configQuickServer(quickServerConfig0);
      Secure secure0 = new Secure();
      quickServer0.setSecure(secure0);
      quickServer0.setMaxAuthTryMsg("Qm)'[2u");
      theClient0.setServer(quickServer0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeoutMsg("");
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getSocketChannel();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.getMaxAuthTry();
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      theClient0.getClientAuthenticationHandler();
      theClient0.getAuthenticator();
      theClient0.getMaxAuthTryMsg();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getServer();
      theClient0.getSocketChannel();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.closingConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:72>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      //  // Unstable assertion: assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.toString();
      int int0 = 4173;
      theClient0.setTimeout(4173);
      theClient0.getTimeout();
      MockInetSocketAddress.createUnresolved("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", 4173);
      theClient0.getSocketChannel();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      // Undeclared exception!
      try { 
        blockingClientHandler0.getSocketChannel();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("count: ");
      theClient0.getAuthenticator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getAuthenticator();
      theClient0.getSocketChannel();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientWriteHandler();
      theClient0.getMaxAuthTry();
      theClient0.getAuthenticator();
      theClient0.getMaxAuthTry();
      int int0 = theClient0.getMaxAuthTry();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1958550791509905
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("x] [zpBMD?6H2H,QK");
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.setTimeout(0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientBinaryHandler();
      theClient0.setMaxConnectionMsg("");
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getCommunicationLogging();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.toString();
      theClient0.setTimeout(0);
      theClient0.getClientWriteHandler();
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("", 0);
      // Undeclared exception!
      try { 
        SocketChannel.open((SocketAddress) inetSocketAddress0);
        fail("Expecting exception: UnresolvedAddressException");
      
      } catch(UnresolvedAddressException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.26315475997563
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.toString();
      CommandHandler commandHandler1 = (CommandHandler)theClient0.getClientCommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      commandHandler1.lostConnection(blockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:23>", blockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler1);
      CommandHandler commandHandler2 = (CommandHandler)theClient0.getClientCommandHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientBinaryHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientCommandHandler();
      theClient1.getMaxAuthTryMsg();
      theClient0.getTimeoutMsg();
      theClient1.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient1.setClientEventHandler(commandHandler2);
      theClient0.getClientCommandHandler();
      theClient0.getAuthenticator();
      theClient1.setAuthenticator((Authenticator) null);
      theClient1.getClientEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      //  // Unstable assertion: assertEquals(0, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)85;
      data0.setPassword(byteArray0);
      theClient0.setClientData(data0);
      theClient0.getClientData();
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1311208216787505
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setClientEvent(clientEvent0);
      theClient0.toString();
      theClient0.setMaxAuthTry(0);
      theClient0.getSocket();
      theClient0.setMaxAuthTry(9877);
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getSocket();
      theClient0.toString();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.toString();
      theClient0.getSocket();
      theClient0.toString();
      theClient0.getAuthenticator();
      theClient0.getAuthenticator();
      theClient0.getSocket();
      theClient0.getClientWriteHandler();
      theClient0.getClientEvent();
      theClient0.toString();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getAuthenticator();
      theClient0.getSocket();
      theClient0.getMaxAuthTry();
      theClient0.getAuthenticator();
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTry();
      theClient0.getClientExtendedEventHandler();
      assertEquals(9877, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3818971816249785
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.setCommunicationLogging(false);
      theClient0.setTrusted(true);
      theClient0.getTimeout();
      theClient0.getClientEventHandler();
      TheClient theClient1 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient1.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient1.setMaxAuthTry(0);
      theClient1.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient1.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      theClient0.getClientWriteHandler();
      theClient1.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.setClientEventHandler((ClientEventHandler) null);
      theClient1.getClientEventHandler();
      theClient0.setMaxAuthTryMsg("no socket");
      theClient0.setMaxAuthTryMsg(" 3R#]*e");
      theClient0.setMaxAuthTryMsg("");
      theClient1.getTimeoutMsg();
      theClient1.getClientEventHandler();
      theClient0.setClientEvent(clientEvent0);
      theClient1.getClientEventHandler();
      theClient0.getTimeout();
      assertTrue(theClient0.getTrusted());
      
      theClient1.getClientBinaryHandler();
      assertFalse(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0497978423100225
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeoutMsg("");
      theClient0.getClientBinaryHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientData();
      TheClient theClient2 = new TheClient();
      theClient1.setClientData((ClientData) null);
      theClient1.getClientWriteHandler();
      theClient1.getMaxAuthTryMsg();
      theClient1.getClientCommandHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getTimeoutMsg();
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient2.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      // Undeclared exception!
      try { 
        defaultClientEventHandler0.closingConnection(blockingClientHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.toString();
      theClient0.setTimeout((-2769));
      theClient0.getClientWriteHandler();
      theClient0.getTimeout();
      int int0 = 1095;
      // Undeclared exception!
      try { 
        MockInetSocketAddress.createUnresolved("", (-2769));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2769
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p;");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">+y-9t90Z'F|N]Vb");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-61);
      Integer integer0 = new Integer(0);
      TheClient theClient0 = new TheClient();
      theClient0.setSocketChannel((SocketChannel) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.322102232945105
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("x] [zpBMD?6H2H,QK");
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:16>", nonBlockingClientHandler0.getName());
      
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxConnectionMsg("74{NY8%Y");
      theClient0.setTimeout(0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientBinaryHandler();
      theClient0.setMaxConnectionMsg("74{NY8%Y");
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getCommunicationLogging();
      CommandHandler commandHandler1 = new CommandHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient1.getClientData();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setMaxAuthTryMsg("74{NY8%Y");
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      Data data1 = new Data();
      Data data2 = new Data();
      Data data3 = new Data();
      data1.setLastAsked("");
      Data data4 = new Data();
      data2.setLastAsked((String) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Data data5 = new Data();
      data0.setUsername(",PBa`#N/a??jNM\"");
      Data data6 = new Data();
      data3.setLastAsked("]NNi");
      Data data7 = new Data();
      data4.setUsername(",PBa`#N/a??jNM\"");
      Data data8 = new Data();
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3234094224875887
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setTimeoutMsg("3>@v]gt978>");
      theClient0.toString();
      CommandHandler commandHandler1 = (CommandHandler)theClient0.getClientCommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler1.lostConnection(blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-1-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler1);
      CommandHandler commandHandler2 = (CommandHandler)theClient0.getClientCommandHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientBinaryHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientCommandHandler();
      theClient1.getMaxAuthTryMsg();
      theClient0.getTimeoutMsg();
      theClient1.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient1.setClientEventHandler(commandHandler2);
      theClient0.getClientCommandHandler();
      theClient0.getAuthenticator();
      theClient1.setAuthenticator((Authenticator) null);
      theClient1.getClientEventHandler();
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.setTimeoutMsg("fhh~y)y\u0004\":\"m]l^VY");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getTrusted();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientBinaryHandler();
      TheClient theClient1 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getClientObjectHandler();
      theClient0.getClientData();
      assertTrue(theClient0.getTrusted());
      
      theClient1.getClientEventHandler();
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxConnectionMsg("{TheClient ");
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxConnectionMsg();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">+y-9t90Z'F|N]Vb");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-61);
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientAuthenticationHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      assertTrue(theClient1.getCommunicationLogging());
      
      theClient0.getClientEvent();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(0);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      Data data0 = new Data();
      Data data1 = new Data();
      Data data2 = new Data();
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
  }
}
