/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:47:49 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.158491982830073
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-744));
      advancedSettings0.setSocketLinger(340);
      advancedSettings0.setByteBufferSize((-542));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setByteBufferSize((-542));
      advancedSettings0.setClientIdentifier("7z");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setBacklog((-542));
      advancedSettings0.setByteBufferSize(2885);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog((-744));
      advancedSettings0.setClientIdentifier("7z");
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("7z");
      advancedSettings0.setMaxThreadsForNioWrite((-542));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketSendBufferSize(0);
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals("7z", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-10));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-10), advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0871068051485753
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-10));
      advancedSettings0.setClientSocketReceiveBufferSize((-10));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setMaxThreadsForNioWrite(0);
      advancedSettings0.setByteBufferSize(403);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setClientSocketReceiveBufferSize(403);
      advancedSettings2.setCharset("");
      advancedSettings2.setPerformancePreferencesLatency(1);
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setPerformancePreferencesBandwidth((-1175));
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketReceiveBufferSize();
      advancedSettings3.setUseDirectByteBuffer(true);
      advancedSettings1.setClientSocketReceiveBufferSize((-3065));
      advancedSettings3.setClientSocketTrafficClass("");
      advancedSettings1.getClientIdentifier();
      int int0 = advancedSettings1.getPerformancePreferencesBandwidth();
      assertEquals((-3065), advancedSettings1.getClientSocketReceiveBufferSize());
      assertEquals((-1175), int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6168962559170494
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime(917);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(3483);
      advancedSettings0.toXML("-J-2Tqx7q4 3z");
      advancedSettings0.setSocketLinger(3417);
      advancedSettings0.setCharset("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.setByteBufferSize(65536);
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals(3417, advancedSettings0.getSocketLinger());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize((-2055));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      assertEquals((-2055), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setBacklog(322);
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings1.getBacklog();
      assertEquals(322, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6421265278028705
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-3374));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass(">DVs:e<\"HdBA~z");
      advancedSettings0.setPerformancePreferencesBandwidth((-3374));
      advancedSettings0.getClientSocketTrafficClass();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.toXML("/>@338^bv8k.{`");
      advancedSettings1.setClientIdentifier("</client-socket-receive-buffer-size>\n");
      advancedSettings1.getClientIdentifier();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      int int0 = advancedSettings1.getByteBufferSize();
      assertEquals("</client-socket-receive-buffer-size>\n", advancedSettings1.getClientIdentifier());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.924886245768638
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1267));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      assertEquals((-1267), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.051435843948024
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(659);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketTrafficClass(">");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(270);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(270, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4744904529465837
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setBacklog(65536);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth(1476);
      advancedSettings0.setClientIdentifier("</use-direct-byte-buffer>\n");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(65536, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4885941508178306
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1441);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesBandwidth(1441);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketReceiveBufferSize((-34));
      advancedSettings0.toXML((String) null);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketReceiveBufferSize((-2138));
      advancedSettings0.setMaxThreadsForNioWrite((-362));
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals((-2138), advancedSettings0.getClientSocketReceiveBufferSize());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.266952855425168
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Ld7Hjs");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Ld7Hjs
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1040026700508068
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setMaxThreadsForNioWrite(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-2313));
      advancedSettings1.setClientSocketReceiveBufferSize(36);
      advancedSettings1.setPerformancePreferencesLatency(36);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      advancedSettings2.getClientSocketReceiveBufferSize();
      advancedSettings1.setClientSocketReceiveBufferSize((-1789));
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketTrafficClass("");
      advancedSettings3.setMaxThreadsForNioWrite((-2313));
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings3.setClientSocketSendBufferSize((-530));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.getMaxThreadsForNioWrite();
      assertEquals(36, advancedSettings1.getPerformancePreferencesLatency());
      
      int int0 = advancedSettings2.getByteBufferSize();
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setCharset("");
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4309786547718817
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("~y>T6");
      advancedSettings0.setClientSocketSendBufferSize((-695));
      advancedSettings0.toXML("gK");
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize((-4005));
      int int0 = 234;
      advancedSettings0.setClientSocketReceiveBufferSize(234);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<use-direct-byte-buffer>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<use-direct-byte-buffer>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketReceiveBufferSize(70);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("\t<client-socket-receive-buffer-size>");
      advancedSettings1.setMaxThreadsForNioWrite((-1081));
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-1081));
      assertEquals((-1081), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5353865202004253
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-3374));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.toXML("O");
      assertEquals((-3374), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setDebugNonBlockingMode(false);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketReceiveBufferSize(3417);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketReceiveBufferSize(1482);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings2.getClientSocketReceiveBufferSize();
      advancedSettings1.setClientSocketSendBufferSize((-553));
      int int0 = advancedSettings1.getClientSocketSendBufferSize();
      assertEquals((-553), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2890792946791425
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketReceiveBufferSize(956);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesLatency(2561);
      advancedSettings0.getMaxThreadsForNioWrite();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(0, advancedSettings0.getSocketLinger());
      assertEquals(956, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.26147761112867
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getCharset();
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesBandwidth((-2073));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesBandwidth((-487));
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-487));
      advancedSettings0.setBacklog(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTrafficClass("");
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setClientIdentifier("T/<6~eB5Fr;");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.setClientSocketTrafficClass("T/<6~eB5Fr;");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketReceiveBufferSize();
      advancedSettings2.setClientSocketSendBufferSize((-457));
      assertEquals((-457), advancedSettings2.getClientSocketSendBufferSize());
      
      int int0 = advancedSettings3.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesBandwidth(2401);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(0);
      assertEquals(2401, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize((-1561));
      advancedSettings0.setClientSocketSendBufferSize((-1022));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setByteBufferSize(0);
      assertEquals((-1022), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency(3483);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass("8]");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setBacklog(0);
      advancedSettings0.setBacklog((-2429));
      assertEquals(3483, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9431598145315694
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-3374));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass(">DVs:e<\"HdBA~z");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-530));
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals((-530), int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-652));
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings1.setClientSocketSendBufferSize(360);
      assertEquals(360, advancedSettings1.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("vxHsA6vlUi,v8z}J+H");
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketReceiveBufferSize(441);
      advancedSettings0.setMaxThreadsForNioWrite(3417);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(0);
      assertEquals("vxHsA6vlUi,v8z}J+H", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("*X=]vHpM#{`]MF");
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setPerformancePreferencesBandwidth((-1481));
      advancedSettings0.setBacklog(70);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals("*X=]vHpM#{`]MF", advancedSettings0.getClientIdentifier());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0881908159886837
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-744));
      advancedSettings0.setByteBufferSize((-542));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setByteBufferSize((-542));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setBacklog((-542));
      advancedSettings0.setByteBufferSize(2885);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog((-744));
      advancedSettings0.setClientSocketTrafficClass("\t<client-socket-traffic-class>");
      advancedSettings0.setSocketLinger((-542));
      advancedSettings0.setPerformancePreferencesLatency((-172));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth((-744));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1050);
      advancedSettings0.setClientSocketTrafficClass("Y(Y8)~(Xs");
      advancedSettings0.setMaxThreadsForNioWrite((-1393));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-194));
      assertEquals((-542), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(1713);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("L-uP*^DKE)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // L-uP*^DKE)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-2828));
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      int int0 = advancedSettings0.getBacklog();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }
}
