/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:33:10 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.Attributes;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributeListImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setErrorHandler(handlerBase0);
      // Undeclared exception!
      try { 
        sAXReader1.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler((String) null);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      MockFile mockFile0 = new MockFile("");
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/string-interning");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setErrorHandler(defaultHandler2_0);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, dispatchHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4889946355560557
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.getXMLReader();
      sAXReader0.getDispatchHandler();
      sAXReader0.getEntityResolver();
      sAXReader0.getXMLFilter();
      sAXReader0.getDocumentFactory();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.getXMLReader();
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip((-1936L));
      stringReader0.read();
      DOMDocument dOMDocument0 = new DOMDocument("");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.457852577098445
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "org.dom4j.QName";
      pruningDispatchHandler0.setDefaultHandler((ElementHandler) null);
      stringArray0[2] = null;
      stringArray0[3] = null;
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, (ElementHandler) null);
      pruningElementStack1.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXModifyElementHandler0.getModifiedElement();
      pruningElementStack0.pushElement((Element) null);
      ElementModifier elementModifier1 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler1 = new SAXModifyElementHandler(elementModifier1);
      sAXReader0.addHandler("//tmp/0/*00/*", (ElementHandler) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      try { 
        sAXReader0.read((InputStream) null, "gh;;^h*Iv%15BU)ZE<+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: gh;;^h*Iv%15BU)ZE<+ Nested exception: no protocol: gh;;^h*Iv%15BU)ZE<+
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte)9;
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '4';
      charArray0[2] = '8';
      charArray0[3] = 'o';
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@4a95617c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.getXMLFilter();
      sAXReader0.setValidation(false);
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      Object object0 = new Object();
      try { 
        sAXReader1.setProperty("0KQ", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '0KQ' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.218655583840207
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "org.dom4j.QName";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(stringArray0[0]);
      stringArray0[2] = "dprT kZT{ZM`aK44y";
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.QName", "");
      sAXReader_SAXEntityResolver0.resolveEntity("", "org.dom4j.QName");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.setDocumentLocator((Locator) null);
      xMLFilterImpl0.endElement("+", "dprT kZT{ZM`aK44y", (String) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      xMLFilterImpl0.ignorableWhitespace(charArray0, (-1406), 1105);
      try { 
        sAXReader0.setFeature("//tmp/97_hUC^n097_hUC^n", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '//tmp/97_hUC^n097_hUC^n' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      pruningDispatchHandler1.removeHandler((String) null);
      PruningDispatchHandler pruningDispatchHandler2 = new PruningDispatchHandler();
      pruningDispatchHandler2.setDefaultHandler(pruningDispatchHandler1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.dom4j.QName";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, (ElementHandler) null);
      pruningElementStack0.getDispatchHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setDispatchHandler(pruningDispatchHandler1);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.addHandler("", (ElementHandler) null);
      sAXReader0.getErrorHandler();
      sAXReader1.getDispatchHandler();
      pruningElementStack0.clear();
      boolean boolean0 = sAXReader1.isStripWhitespaceText();
      assertFalse(boolean0);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader2 = new SAXReader(stringArray0[2]);
      sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      SAXReader sAXReader3 = new SAXReader(stringArray0[2]);
      sAXReader2.setDispatchHandler((DispatchHandler) null);
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader2.isIgnoreComments());
      assertFalse(sAXReader2.isMergeAdjacentText());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader2.isStripWhitespaceText());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.373788232391138
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "org.dom4j.QName";
      stringArray0[2] = null;
      stringArray0[3] = null;
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, (ElementHandler) null);
      pruningElementStack1.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(stringArray0[0]);
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.QName", "");
      sAXReader_SAXEntityResolver0.resolveEntity("", "org.dom4j.QName");
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.addHandler("//tmp/0/*00/*", (ElementHandler) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.getDispatchHandler();
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader2 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader2.setDispatchHandler(pruningDispatchHandler0);
      sAXReader2.getEncoding();
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader2.isStripWhitespaceText());
      assertFalse(sAXReader2.isMergeAdjacentText());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader2.isValidating());
      assertFalse(sAXReader2.isIgnoreComments());
      assertTrue(sAXReader2.isStringInternEnabled());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = null;
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      DefaultDocument defaultDocument0 = new DefaultDocument((String) null);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader_SAXEntityResolver0.resolveEntity(stringArray0[0], stringArray0[2]);
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.getDocumentFactory();
      ElementStack elementStack0 = new ElementStack(1128);
      elementStack0.getDispatchHandler();
      sAXReader0.getErrorHandler();
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      String string0 = "org.dom4j.QName.singleton.strategy";
      namespaceStack0.getAttributeQName("processing-instruction", "org.dom4j.QName.singleton.strategy", " : ");
      defaultDocumentFactory0.createQName("3", "No such attribute", "org.dom4j.NodeType");
      namespaceStack0.getDefaultNamespace();
      QName qName0 = QName.get("", (Namespace) null);
      qName0.getDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.startElement("processing-instruction", "3", "org.dom4j.QName.singleton.strategy", (Attributes) null);
      qName0.equals(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.isIgnoreComments();
      sAXReader0.getXMLFilter();
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.createXMLReader();
      StringReader stringReader0 = new StringReader("3");
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/string-interning", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // False state for feature 'http://xml.org/sax/features/string-interning' is not supported.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5709195237181253
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("O0F[c9p>s", "O0F[c9p>s");
      sAXReader0.getEntityResolver();
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.removeHandler("M");
      sAXReader0.getErrorHandler();
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      DOMDocument dOMDocument0 = new DOMDocument("4Ti~ZR&xU:+F|rNBW");
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0569426699467925
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.QName");
      sAXReader_SAXEntityResolver0.resolveEntity("file://", "g~]/");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("::");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.QName", "http://xml.org/sax/handlers/LexicalHandler");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler("This Entity is read-only. It cannot be modified", dispatchHandler0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.unparsedEntityDecl("WTxB *t)N)5", "g~]/", (String) null, "WTxB *t)N)5");
      defaultHandler2_0.getExternalSubset("yB`VWPmDhf", "7xH?mlu/Ji$/M");
      sAXReader0.getDispatchHandler();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("D{Zc\":W,#]V");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class D{Zc\":W,#]V not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.138047572162907
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      sAXReader0.installXMLFilter(parserAdapter0);
      sAXReader0.getXMLReader();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader1.createDefaultEntityResolver((String) null);
      sAXReader0.removeHandler((String) null);
      sAXContentHandler0.resolveEntity((String) null, "RJ*h%JsyGFsuL;q5");
      SAXReader sAXReader2 = new SAXReader(parserAdapter0);
      try { 
        sAXReader2.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      String string0 = "org.jaxen.function.NamespaceUriFunction";
      MockURL.getFtpExample();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      parserAdapter0.setDocumentLocator(locatorImpl0);
      parserAdapter0.getErrorHandler();
      sAXReader0.setErrorHandler(xMLFilterImpl1);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.endDocument();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.resetHandlers();
      ElementHandler elementHandler0 = null;
      pruningDispatchHandler0.addHandler("org.jaxen.function.NamespaceUriFunction", (ElementHandler) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4687400132753323
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "O0F[c9p>s");
      sAXReader_SAXEntityResolver0.resolveEntity("O0F[c9p>s", "O0F[c9p>s");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, false);
      SAXReader sAXReader2 = new SAXReader();
      try { 
        sAXReader2.read("4Ti~ZR&xU:+F|rNBW");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: 4Ti~ZR&xU:+F|rNBW Nested exception: no protocol: 4Ti~ZR&xU:+F|rNBW
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("O0F[c9p>s", (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("O0F[c9p>s", "O0F[c9p>s");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler("O0F[c9p>s");
      sAXReader0.addHandler("", (ElementHandler) null);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8207751622034678
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("v3<>>.adPniFmFom");
      String string0 = "org.jaxen.dom4j.Dom4jXPath";
      sAXReader_SAXEntityResolver0.resolveEntity("org.jaxen.dom4j.Dom4jXPath", "org.jaxen.dom4j.Dom4jXPath");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/97_hUC^n097_hUC^n", "");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader1 = new SAXReader();
      SAXReader sAXReader2 = null;
      try {
        sAXReader2 = new SAXReader("cVmG)&NXstd)*");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class cVmG)&NXstd)* not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4440977644767417
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      pruningDispatchHandler0.removeHandler((String) null);
      pruningDispatchHandler0.removeHandler((String) null);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.getHandler((String) null);
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      dispatchHandler0.setDefaultHandler(pruningDispatchHandler0);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      MockFile mockFile0 = new MockFile("");
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/string-interning");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      xMLFilterImpl0.skippedEntity("http://xml.org/sax/features/namespaces");
      StringReader stringReader0 = new StringReader("Rmc|");
      stringReader0.reset();
      xMLFilterImpl1.unparsedEntityDecl("Rmc|", "Rmc|", "Rmc|", "http://xml.org/sax/features/namespaces");
      xMLFilterImpl1.startDocument();
      MockFile mockFile0 = new MockFile("");
      mockFile0.getAbsolutePath();
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.429410524861562
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "X;q'XVEx[%J}");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      xMLFilterImpl0.notationDecl("X;q'XVEx[%J}", "X;q'XVEx[%J}", "XiGA+esA!C|p\"");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.unparsedEntityDecl("EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap", "X;q'XVEx[%J}", "Unhandled operator in createEqualityExpr(): ", (String) null);
      xMLFilterImpl0.setDTDHandler(xMLFilterImpl1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      xMLFilterImpl0.characters(charArray0, (-1221), (-1221));
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.isValidating();
      sAXReader0.getEntityResolver();
      sAXReader0.isValidating();
      String string0 = "//tmp/3gk.a>wj>K4rJp)0.tmp";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/3gk.a>wj>K4rJp)0.tmp");
      sAXReader_SAXEntityResolver0.uriPrefix = ";";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.getDispatchHandler();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3324d696 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@3324d696 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2610316958599697
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      xMLFilterImpl0.skippedEntity("http://xml.org/sax/features/namespaces");
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/namespaces");
      stringReader0.reset();
      xMLFilterImpl1.unparsedEntityDecl("http://xml.org/sax/features/namespaces", "http://xml.org/sax/features/namespaces", "http://xml.org/sax/features/namespaces", "http://xml.org/sax/features/namespaces");
      xMLFilterImpl1.startDocument();
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3476975050674342
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("O0F[c9p>s", "O0F[c9p>s");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("Cp} ");
      sAXReader_SAXEntityResolver1.resolveEntity((String) null, "Cp} ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver2.resolveEntity((String) null, "Cp} ");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler("?x/}S%Q0YQhK@G", dispatchHandler0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.unparsedEntityDecl("O0F[c9p>s", "namespace::", "/R++<KC=", "");
      defaultHandler2_0.getExternalSubset("?x/}S%Q0YQhK@G", "@w?[+#I!84,_j");
      sAXReader0.getDispatchHandler();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("@w?[+#I!84,_j");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class @w?[+#I!84,_j not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setStringInternEnabled(true);
      try { 
        sAXReader0.read("4Ti~ZR&xU:+F|rNBW");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: 4Ti~ZR&xU:+F|rNBW Nested exception: no protocol: 4Ti~ZR&xU:+F|rNBW
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      dispatchHandler0.setDefaultHandler(dispatchHandler1);
      dispatchHandler0.setDefaultHandler(dispatchHandler1);
      dispatchHandler1.addHandler("", dispatchHandler0);
      String string0 = "$OsoO%Tw`Rbu5z";
      dispatchHandler1.getHandler("$OsoO%Tw`Rbu5z");
      String string1 = "";
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2383497075834473
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "Y_w%CF0";
      DefaultDocumentFactory.getInstance();
      sAXReader0.getXMLReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("e($<");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/0/*00/*", "Y_w%CF0");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y_w%CF0");
      try { 
        sAXReader0.setFeature("Y_w%CF0", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'Y_w%CF0' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      InputSource inputSource0 = new InputSource("");
      inputSource0.getSystemId();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4889946355560557
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler("");
      sAXReader0.addHandler("xmlns:", (ElementHandler) null);
      sAXReader0.isStringInternEnabled();
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      InputSource inputSource0 = new InputSource(stringReader0);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      inputSource0.getEncoding();
      inputSource0.setEncoding(" !u7?|?");
      stringReader0.read();
      inputSource0.setSystemId("");
      defaultDocumentFactory0.createText("");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2610316958599697
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      StringReader stringReader0 = new StringReader("Rmc|");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@53ed011c Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@53ed011c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          sAXReader0.isStripWhitespaceText();
          QName qName0 = QName.get("#m(|H, Lp^'hI7hDQ@", "sPy.&5`\"^IGZA0w.J", "#m(|H, Lp^'hI7hDQ@");
          DOMElement dOMElement0 = new DOMElement(qName0, 3296);
          DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
          DOMDocument dOMDocument0 = new DOMDocument("sPy.&5`\"^IGZA0w.J", dOMElement0, dOMDocumentType0);
          dOMDocument0.getEntityResolver();
          sAXReader0.setEntityResolver((EntityResolver) null);
          try { 
            sAXReader0.read((InputStream) null, "http://xml.org/sax/properties/declaration-handler");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:371)
             // sun.reflect.GeneratedMethodAccessor259.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:371)
             // sun.reflect.GeneratedMethodAccessor259.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "org.dom4j.QName";
      stringArray0[2] = null;
      stringArray0[3] = null;
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, (ElementHandler) null);
      pruningElementStack1.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(stringArray0[0]);
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.QName", "");
      sAXReader_SAXEntityResolver0.resolveEntity("", "org.dom4j.QName");
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.addHandler("//tmp/0/*00/*", (ElementHandler) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter((XMLFilter) null);
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isIgnoreComments();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getDispatchHandler();
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.getXMLReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String string0 = "0/*";
      defaultDocumentFactory0.createQName("", "0/*");
      MockFile.createTempFile("0/*", "0/*");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0/*";
      stringArray0[1] = "0/*";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, dispatchHandler0);
      Element[] elementArray0 = new Element[8];
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      String string1 = "~@kh9";
      namespaceStack0.pop("~@kh9");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BeanElement beanElement0 = new BeanElement("Q", (Namespace) null, dataInputStream0);
      Element element0 = beanElement0.createCopy();
      elementArray0[0] = element0;
      DefaultElement defaultElement0 = beanElement0.clone();
      elementArray0[1] = (Element) defaultElement0;
      beanElement0.element("", (Namespace) null);
      elementArray0[2] = null;
      String string2 = "//tmp/3gk.a>wj>K4rJp)0.tmp";
      UserDataElement userDataElement0 = new UserDataElement("//tmp/3gk.a>wj>K4rJp)0.tmp");
      elementArray0[3] = (Element) userDataElement0;
      String string3 = null;
      // Undeclared exception!
      try { 
        beanElement0.addElement("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "org.dom4j.QName";
      pruningDispatchHandler0.setDefaultHandler((ElementHandler) null);
      stringArray0[2] = null;
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, (byte)47);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.418994471909286
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "FqExWV";
      Namespace namespace0 = Namespace.get("FqExWV");
      QName qName0 = QName.get("FqExWV", namespace0);
      QName.get((String) null);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      XMLFilter xMLFilter0 = null;
      namespace0.valueOf("FqExWV");
      sAXReader0.setXMLFilter((XMLFilter) null);
      String string1 = "Namespace";
      namespace0.selectSingleNode("Namespace");
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.getXMLFilter();
      String string2 = "";
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "w'lQt<TljO");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.320573333787351
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      DOMNamespace dOMNamespace0 = new DOMNamespace("http://xml.org/sax/features/use-locator2", "http://xml.org/sax/features/use-locator2");
      namespaceStack0.push((Namespace) dOMNamespace0);
      namespaceStack0.getDefaultNamespace();
      QName qName0 = namespaceStack0.getAttributeQName(" cannot be greater than ", "tE)f0_n`3v<Q", "tE)f0_n`3v<Q");
      QName.get("=6sAwFfWeA#az", (Namespace) dOMNamespace0);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setDocumentFactory(documentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("E");
      sAXReader_SAXEntityResolver0.resolveEntity("E", "tE)f0_n`3v<Q");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      try { 
        sAXReader0.setXMLReaderClassName("E");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class E not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "org.dom4j.QName";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(stringArray0[0]);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      char[] charArray0 = new char[0];
      xMLFilterImpl0.ignorableWhitespace(charArray0, 944, 24);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("//tmp/3gk.a>wj>K4rJp)0.tmp", xMLFilterImpl1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '//tmp/3gk.a>wj>K4rJp)0.tmp' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      StringReader stringReader0 = new StringReader("Rmc|");
      stringReader0.skip((-2524L));
      sAXReader0.createDefaultEntityResolver("Rmc|");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@75a0ec7b Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@75a0ec7b Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[4] = '^';
      charArray0[2] = '}';
      charArray0[3] = 't';
      charArray0[4] = 'x';
      charArray0[5] = 'b';
      xMLFilterImpl1.ignorableWhitespace(charArray0, 944, 944);
      try { 
        sAXReader0.setProperty("G1tr+(y", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: G1tr+(y
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "org.dom4j.QName";
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      String string0 = "";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      pruningDispatchHandler0.setDefaultHandler(dispatchHandler0);
      dispatchHandler0.setDefaultHandler(pruningDispatchHandler0);
      dispatchHandler0.addHandler("", pruningDispatchHandler0);
      pruningDispatchHandler0.getHandler("");
      try { 
        sAXReader0.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String[] stringArray0 = new String[3];
      stringArray0[1] = null;
      sAXReader0.createContentHandler((XMLReader) null);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler("Y{j_%>S`P#]U&");
      sAXReader0.setDispatchHandler(dispatchHandler0);
      MockFile mockFile0 = new MockFile("http://xml.org/sax/features/string-interning");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      String string0 = "";
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.endDocument();
      pruningDispatchHandler0.resetHandlers();
      ElementHandler elementHandler0 = null;
      pruningDispatchHandler0.addHandler("http://xml.org/sax/features/string-interning", (ElementHandler) null);
      sAXReader0.getXMLFilter();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      defaultDocumentFactory0.createQName("3", "No such attribute", "org.dom4j.NodeType");
      namespaceStack0.getDefaultNamespace();
      QName qName0 = QName.get("t", (Namespace) null);
      qName0.getDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      qName0.equals(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(boolean0);
      
      sAXReader0.getXMLFilter();
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.createDefaultEntityResolver("3");
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.5055129179154427
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      defaultDocumentFactory0.createQName("3", "No such attribute", "org.dom4j.NodeType");
      namespaceStack0.getDefaultNamespace();
      QName qName0 = QName.get("", (Namespace) null);
      qName0.getDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      qName0.equals(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.isIgnoreComments();
      sAXReader0.getXMLFilter();
      sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4401405002515815
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
          DispatchHandler dispatchHandler0 = new DispatchHandler();
          pruningDispatchHandler0.addHandler("7&", dispatchHandler0);
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
          URL uRL0 = MockURL.getFtpExample();
          XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
          ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
          LocatorImpl locatorImpl0 = new LocatorImpl();
          Locator2Impl locator2Impl0 = new Locator2Impl();
          Locator2Impl locator2Impl1 = new Locator2Impl();
          AttributeListImpl attributeListImpl0 = new AttributeListImpl();
          AttributeListImpl attributeListImpl1 = new AttributeListImpl(attributeListImpl0);
          parserAdapter0.startElement("//tmp/_wLt8l^,#0{,O#.+Z0org.jaxen.function.FalseFunction", attributeListImpl1);
          FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
          LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
          parserAdapter0.setDocumentLocator(locator2Impl1);
          parserAdapter0.getErrorHandler();
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
          sAXReader1.setErrorHandler(xMLFilterImpl1);
          try { 
            sAXReader1.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor193.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor193.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("GTL#_Z%P", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class GTL#_Z%P not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y w%CF0");
      try { 
        sAXReader0.setFeature("Y w%CF0", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'Y w%CF0' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4889946355560557
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler("");
      sAXReader0.addHandler("xmlns:", (ElementHandler) null);
      sAXReader0.isStringInternEnabled();
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      String string0 = "Cannot lookup prefixes in DOM 2";
      StringReader stringReader0 = new StringReader("Cannot lookup prefixes in DOM 2");
      InputSource inputSource0 = new InputSource(stringReader0);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      inputSource0.getEncoding();
      inputSource0.setEncoding(" !u7?|?");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringReader0.read();
      inputSource0.setSystemId("");
      defaultDocumentFactory0.createText("");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("O0F[c9p>s", "O0F[c9p>s");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      ElementStack elementStack0 = new ElementStack(2730);
      elementStack0.getDispatchHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      sAXReader1.setDispatchHandler(pruningDispatchHandler1);
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader1.isStringInternEnabled());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      sAXReader0.setEncoding("M3J//wB:zwvR2fhh");
      sAXReader0.setEncoding("");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.3872839993213795
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "org.dom4j.QName";
      stringArray0[2] = null;
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      parserAdapter0.setDocumentLocator(locatorImpl0);
      parserAdapter0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.endDocument();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler2 = new PruningDispatchHandler();
      pruningDispatchHandler2.resetHandlers();
      pruningDispatchHandler2.addHandler((String) null, pruningDispatchHandler0);
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      
      pruningDispatchHandler0.setDefaultHandler((ElementHandler) null);
      SAXReader sAXReader1 = new SAXReader(stringArray0[0]);
      DispatchHandler dispatchHandler0 = sAXReader1.getDispatchHandler();
      dispatchHandler0.removeHandler((String) null);
      DispatchHandler dispatchHandler1 = sAXReader1.getDispatchHandler();
      SAXReader sAXReader2 = new SAXReader(stringArray0[2]);
      sAXReader1.getDispatchHandler();
      sAXReader1.setDispatchHandler(dispatchHandler1);
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      pruningDispatchHandler1.removeHandler((String) null);
      PruningDispatchHandler pruningDispatchHandler2 = new PruningDispatchHandler();
      pruningDispatchHandler2.setDefaultHandler(pruningDispatchHandler1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.dom4j.QName";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, (ElementHandler) null);
      pruningElementStack0.getDispatchHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.addHandler("", (ElementHandler) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset(stringArray0[1], "org.dom4j.QName");
      try { 
        sAXReader1.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '4';
      charArray0[2] = '|';
      charArray0[3] = 'k';
      charArray0[4] = 'S';
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.getDispatchHandler();
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertTrue(sAXReader1.isStringInternEnabled());
      
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createNamespace("j", "//tmp/0/*00/*");
      SAXReader sAXReader2 = new SAXReader(defaultDocumentFactory0, false);
      assertFalse(sAXReader2.isMergeAdjacentText());
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader2.isIgnoreComments());
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader2.isValidating());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader2.isStripWhitespaceText());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.3834744755118558
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[4];
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
      pruningElementStack1.getDispatchHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("o:!");
      sAXReader_SAXEntityResolver0.resolveEntity("", "2m'F ");
      sAXReader_SAXEntityResolver0.resolveEntity("H{cvg P", "R");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.addHandler("dprT kZT{ZM`aK44y", pruningDispatchHandler0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader1 = new SAXReader();
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader2 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader2.setDispatchHandler(dispatchHandler0);
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader2.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader2.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader2.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader2.isMergeAdjacentText());
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      byte[] byteArray0 = new byte[8];
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '4';
      charArray0[2] = '8';
      charArray0[3] = 'o';
      charArray0[4] = 'S';
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      xMLFilterImpl1.setDocumentLocator(locatorImpl0);
      charArray0[5] = '3';
      xMLFilterImpl1.ignorableWhitespace(charArray0, (byte)9, (-1407));
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)3;
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: null
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "org.dom4j.QName";
      SAXReader sAXReader0 = new SAXReader();
      File file0 = MockFile.createTempFile("3gk.a>wj>K4rJp)", (String) null);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
