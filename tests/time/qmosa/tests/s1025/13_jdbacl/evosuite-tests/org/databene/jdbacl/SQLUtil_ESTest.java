/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:03:46 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.683421809195472
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("seecttx\"2}'>");
      char[] charArray0 = new char[0];
      int int0 = (-993);
      SQLUtil.parseColumnTypeAndSize("s=QeFq,`Y.|pq=?>vUD");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "seecttx\"2}'>";
      stringArray0[1] = "";
      stringArray0[2] = "s=QeFq,`Y.|pq=?>vUD";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "seecttx\"2}'>", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4187591973137939
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.isQuery("selectt\"2}'>");
      VersionNumber versionNumber0 = VersionNumber.valueOf("alter session");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("alter session", "delete", versionNumber0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "tUde_^%9 ");
      VersionNumber versionNumber1 = new VersionNumber(genericDescriptorList0);
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      VersionNumber versionNumber2 = new VersionNumber(arrayList0, genericDescriptorList0);
      VersionNumber.valueOf("alter session");
      versionNumber2.compareTo(versionNumber0);
      versionNumber2.compareTo(versionNumber1);
      versionNumber1.compareTo(versionNumber0);
      VersionNumber.valueOf("selectt\"2}'>");
      defaultDatabase0.setDoc("tUde_^%9 ");
      SQLUtil.isDML("tUde_^%9 ");
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1145684130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.getComponents();
      Character.valueOf('w');
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("7G|q>c_w<bu+V7C0", stringBuilder0);
      DBDataType.getInstance(508, "7G|q>c_w<bu+V7C0");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      BTreeController bTreeController0 = new BTreeController();
      FromVTI fromVTI0 = new FromVTI();
      bTreeController0.getXactMgr();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      stringBuilder0.deleteCharAt(2);
      stringBuilder1.insert(2, (CharSequence) "7G|q>c_w<bu+V7C0");
      assertEquals("7G7G|q>c_w<bu+V7C0q>c_w<bu+V7C0", stringBuilder1.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ":zWs$";
      TableContainer tableContainer0 = new TableContainer(":zWs$");
      tableContainer0.getSequences(false);
      tableContainer0.getTable(":zWs$");
      StringBuilder stringBuilder0 = new StringBuilder(":zWs$");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(":zWs$", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.append(0.0F);
      StringBuilder stringBuilder4 = stringBuilder3.appendCodePoint(2561);
      SQLUtil.isDDL("create table7g|q>c_w<bu+v7c0");
      // Undeclared exception!
      try { 
        stringBuilder4.insert(2561, 239.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2561
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5315896352299894
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cXWKf";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      stringArray0[2] = "[^JD`Wfr*,x,k";
      stringArray0[3] = "[^JD`Wfr*,x,k";
      stringArray0[4] = "[^JD`Wfr*,x,k";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "[^JD`Wfr*,x,k";
      stringArray1[1] = null;
      stringArray1[2] = "[^JD`Wfr*,x,k";
      stringArray1[3] = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("04 07dUIkU#Wo", (String) null, stringArray0, "[^JD`Wfr*,x,k", "cXWKf = 'cXWKf' AND [^JD`Wfr*,x,k = '[^JD`Wfr*,x,k' AND [^JD`Wfr*,x,k = '[^JD`Wfr*,x,k' AND [^JD`Wfr*,x,k = '[^JD`Wfr*,x,k' AND [^JD`Wfr*,x,k = '[^JD`Wfr*,x,k' AND null = null AND null = null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2002856251318685
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kAj{pVfS~?");
      StringReader stringReader1 = new StringReader("kAj{pVfS~?");
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.parseNumbers();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      SQLUtil.parseColumnTypeAndSize("CASEWHEN");
      Character character0 = Character.valueOf('t');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'t'", string1);
      
      String string2 = SQLUtil.normalize("kAj{pVfS~?", true);
      assertEquals("kAj { pVfS ~ ?", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.normalize("l}8/wldG/i", true);
      String[] stringArray0 = new String[7];
      stringArray0[2] = "l } 8 / wldG / i";
      String string0 = "select into";
      stringArray0[3] = "select into";
      char char0 = 'k';
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = '+';
      charArray0[2] = '+';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(39, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.046604204023061
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncateseecttx\"2}'>");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[18];
      Character character0 = new Character('\u0000');
      Boolean.valueOf("kj<7yxdZ2@tgC(u");
      String string0 = SQLUtil.normalize("truncateseecttx\"2}'>", true);
      assertEquals("truncateseecttx \"2}'>\"", string0);
      
      SQLUtil.removeComments("drop indexcreate materialized viewseecttx\"2}'>");
      boolean boolean1 = SQLUtil.isProcedureCall("truncateseecttx \"2}'>\"");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "T</]`x W(2i<";
      SQLUtil.isDDL("T</]`x W(2i<");
      String string1 = "select intoi!})7l";
      StringReader stringReader0 = new StringReader("select intoi!})7l");
      stringReader0.reset();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = VersionNumber.valueOf("T</]`x W(2i<");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("select intoi!})7l", "select intoi!})7l", versionNumber0);
      String string2 = " y%wm\\LeJI<Q09QT";
      defaultDatabase0.getTable(" y%wmLeJI<Q09QT", false);
      SQLUtil.typeAndName((DBObject) null);
      String string3 = "L#7&@9b$";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance(" y%wmLeJI<Q09QT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";Pb";
      stringArray0[1] = ";Pb";
      stringArray0[2] = ";Pb";
      SQLUtil.renderColumnListWithTableName(";Pb", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Fs,kpfkf!QgJ>XN.", defaultDBTable0, 44, ";Pb");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("80000014-00d0-fd77-3ed8-000a0a0b1900");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      Locale locale0 = Locale.JAPAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Fs,kpfkf!QgJ>XN.";
      objectArray0[1] = (Object) defaultDBTable0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Fs,kpfkf!QgJ>XN.", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.371831614835129
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";Pb";
      stringArray0[1] = ";Pb";
      stringArray0[2] = ";Pb";
      SQLUtil.renderColumnListWithTableName(";Pb", stringArray0);
      SQLUtil.normalize(";Pb.;Pb, ;Pb.;Pb, ;Pb.;Pb", false);
      String string0 = "%nL(C|7:IY";
      SQLUtil.isDML("%nL(C|7:IY");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "; Pb.; Pb, ; Pb.; Pb, ; Pb.; Pb";
      stringArray1[1] = "; Pb.; Pb, ; Pb.; Pb, ; Pb.; Pb";
      SQLUtil.renderColumnNames(stringArray1);
      DBCatalog dBCatalog0 = new DBCatalog("select into");
      // Undeclared exception!
      try { 
        dBCatalog0.getTable(" join ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ' join '
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      stringBuilder1.appendCodePoint(1879);
      stringBuilder1.appendCodePoint(1879);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 57, "chi&ny9");
      SQLUtil.isDML("create u");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("#=0ek;VT+G{{y3xt{", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cXWKf";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      stringArray0[2] = "[^JD`Wfr*,x,k";
      stringArray0[3] = "[^JD`Wfr*,x,k";
      stringArray0[3] = "[^JD`Wfr*,x,k";
      stringArray0[5] = "[^JD`Wfr*,x,k";
      stringArray0[6] = "cXWKf";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "cXWKf", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT cXWKf ", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.isDDL("T</]`x W(2i<");
      String string0 = "select intoi!})7l";
      StringReader stringReader0 = new StringReader("select intoi!})7l");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9314830515574797
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.isProcedureCall("tUde_^%9 ");
      String string0 = "alter session";
      VersionNumber versionNumber0 = VersionNumber.valueOf("alter session");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(";?IQ?t!v", "alter session", versionNumber0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "tUde_^%9 ");
      VersionNumber versionNumber1 = new VersionNumber(genericDescriptorList0);
      versionNumber0.compareTo(versionNumber1);
      versionNumber0.compareTo(versionNumber1);
      VersionNumber.valueOf("g7w%1W5/9s&Q");
      String string1 = "}~Soqp!PZj!6*#";
      defaultDatabase0.setDoc("}~Soqp!PZj!6*#");
      SQLUtil.isDML("g7w%1W5/9s&Q");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("g7w%1W5/9s&Q", stringArray0);
      SQLUtil.isQuery("");
      GDSType.getType("select into42x64");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7741057932992024
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" AND ", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      dBSchema0.setCatalog((DBCatalog) null);
      dBPackage0.setObjectType(" AND ");
      String string0 = SQLUtil.renderValue(dBPackage0);
      assertEquals("", string0);
      
      Object object0 = new Object();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("index not found ", false, " AND ", "execfilename");
      defaultDBTable0.equals(dBCheckConstraint0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execfilename", defaultDBTable0, 9999999, "");
      defaultDBColumn0.setDefaultValue(" *w");
      defaultDBColumn0.getNotNullConstraint();
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("execfilename  DEFAULT  *w NULL", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(5);
      charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("?Y1L;2w@JI!j(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ?Y1L;2w@JI!j(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9809787598716668
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.mutatesStructure("create materialized viewfilename");
      SQLUtil.mutatesDataOrStructure("create materialized viewfilename");
      StringReader stringReader0 = new StringReader("4xQ3*|X");
      VersionNumber versionNumber0 = VersionNumber.valueOf("4xQ3*|X");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create materialized viewfilename", "4xQ3*|X", versionNumber0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber1 = new VersionNumber(arrayList0);
      versionNumber0.compareTo(versionNumber1);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator(dataDictionaryImpl0);
      BasicUUID basicUUID0 = new BasicUUID("P6gSYKQZ<x");
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "SdHv4<`;Rm9+{CKG", "4xQ3*|X", basicUUID0, true);
      TableDescriptor tableDescriptor0 = dataDescriptorGenerator0.newTableDescriptor("create materialized viewfilename", schemaDescriptor0, 10, 'P');
      ColumnDescriptorList columnDescriptorList0 = tableDescriptor0.getGeneratedColumns();
      VersionNumber versionNumber2 = new VersionNumber(columnDescriptorList0);
      versionNumber0.compareTo(versionNumber2);
      defaultDatabase0.setImportedIndexes(true);
      VersionNumber.valueOf("k");
      defaultDatabase0.setDoc("U!e$f$Q+^");
      SQLUtil.isDML("J.:9p1");
      BasicDatabase basicDatabase0 = new BasicDatabase();
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl1.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kAj{gVfS~?");
      StringReader stringReader1 = new StringReader("kAj{gVfS~?");
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "selecttx\"2}'>";
      SQLUtil.mutatesDataOrStructure("selecttx\"2}'>");
      String string1 = "mBx$=KF_R";
      boolean boolean0 = false;
      List<Object> list0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      stringReader0.reset();
      charArray0[0] = 'L';
      charArray0[1] = '~';
      charArray0[2] = 'D';
      charArray0[3] = 'n';
      charArray0[4] = '#';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.sval = "N6NfOCCJMQp|OBw*u";
      streamTokenizer0.parseNumbers();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      SQLUtil.parseColumnTypeAndSize("");
      String string1 = SQLUtil.renderValue("");
      assertEquals("''", string1);
      
      String string2 = SQLUtil.normalize("", false);
      assertFalse(string2.equals((Object)string1));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0971445320329771
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      stringReader0.reset();
      charArray0[0] = 'Y';
      charArray0[1] = '~';
      charArray0[2] = 'D';
      charArray0[3] = 'n';
      charArray0[4] = '#';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.sval = "N6NfOCCJMQp|OBw*u";
      streamTokenizer0.parseNumbers();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.parseColumnTypeAndSize("");
      String string1 = SQLUtil.renderValue("");
      assertEquals("''", string1);
      
      String string2 = SQLUtil.normalize("- 0", true);
      assertTrue(string2.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[25];
      stringArray0[0] = "z7e'>iJ#`U,lwRN0";
      SQLUtil.normalize("z7e'>iJ#`U,lwRN0", false);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      BasicUUID basicUUID0 = new BasicUUID();
      BTreeController bTreeController0 = new BTreeController();
      try { 
        bTreeController0.lockRow(0L, (-990), (-990), false, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unimplemented feature.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&J");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "&J", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("%", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, " ADD ", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4(7baO0";
      stringArray0[1] = ":zWs$";
      stringArray0[2] = "4(7baO0";
      stringArray0[3] = ":zWs$";
      stringArray0[4] = ":zWs$";
      stringArray0[5] = ":zWs$";
      SQLUtil.join((String) null, ":zWs$", stringArray0, (String) null, (String) null, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`&Y`dWNl5e");
      defaultDBTable0.getIndex(":zWs$");
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      assertFalse(slaveDatabase0.isInSlaveMode());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[5];
      stringReader0.reset();
      charArray0[0] = 'L';
      charArray0[1] = '~';
      charArray0[2] = 'D';
      charArray0[3] = 'n';
      charArray0[4] = '#';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-1390.48516068034);
      stringReader0.skip((-4));
      stringReader0.ready();
      streamTokenizer0.quoteChar(1732);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.sval = "N6NfOCCJMQp|OBw*u";
      streamTokenizer0.parseNumbers();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1390.48516068034", string0);
      
      SQLUtil.parseColumnTypeAndSize("");
      String string1 = SQLUtil.renderValue("");
      assertEquals("''", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.removeComments("");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join(" beRS2+", "CURSOR STABILITY", (String[]) null, " }", "filename", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6647839837251803
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.mutatesStructure(" arg2=[");
      SQLUtil.mutatesDataOrStructure("NW}KJcdC9\"77");
      StringReader stringReader0 = new StringReader("create materialized viewt</]`x w(2i<");
      stringReader0.skip(0L);
      StringReader stringReader1 = new StringReader(" arg2=[");
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      boolean boolean0 = true;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.parseNumbers();
      SQLUtil.renderNumber(streamTokenizer0);
      DBSchema dBSchema0 = new DBSchema("P;r>zF`)aIM/");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("P;r>zF`)aIM/", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "FOREIGN KEY ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "tDc?x&]^WG3iF%;pvg";
      StringBuilder stringBuilder0 = new StringBuilder("tDc?x&]^WG3iF%;pvg");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("tDc?x&]^WG3iF%;pvg", stringBuilder0);
      int int0 = (-1996803433);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1996803433), "tDc?x&]^WG3iF%;pvg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1996803433
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5673293588108934
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("E}){p7!_! KEy~XEE");
      SQLUtil.isDML("E}){p7!_! KEy~XEE");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "E}){p7!_! KEy~XEE";
      stringArray0[1] = "E}){p7!_! KEy~XEE";
      stringArray0[2] = "E}){p7!_! KEy~XEE";
      stringArray0[3] = "E}){p7!_! KEy~XEE";
      stringArray0[4] = "E}){p7!_! KEy~XEE";
      stringArray0[5] = "E}){p7!_! KEy~XEE";
      stringArray0[6] = "";
      stringArray0[7] = "E}){p7!_! KEy~XEE";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "E}){p7!_! KEy~XEE", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.725164133662189
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.isProcedureCall("delete");
      VersionNumber.valueOf("alter session");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "tUde_^%9 ";
      stringArray0[1] = "tUde_^%9 ";
      stringArray0[2] = "~EgS#af=gn\"";
      stringArray0[3] = "drop index";
      String string0 = SQLUtil.leftJoin(" and ", stringArray0, "delete", "org.hsqldb.HsqlNameManager$1", stringArray0);
      String string1 = SQLUtil.innerJoin("left join delete as org.hsqldb.HsqlNameManager$1 on  and .tUde_^%9  = org.hsqldb.HsqlNameManager$1.tUde_^%9  and  and .tUde_^%9  = org.hsqldb.HsqlNameManager$1.tUde_^%9  and  and .~EgS#af=gn\" = org.hsqldb.HsqlNameManager$1.~EgS#af=gn\" and  and .drop index = org.hsqldb.HsqlNameManager$1.drop index", stringArray0, "create table", "~EgS#af=gn\"", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^JD`Wfr*,x,k";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[^JD`Wfr*,x,k", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray1, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7638558576407304
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure((String) null, dBPackage0);
      dBPackage0.setObjectType((String) null);
      dBProcedure0.setSubProgramId("");
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
      
      Object object0 = new Object();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+@Nxa+K7", defaultDBTable1, (-1970259799), "execfilename");
      defaultDBColumn0.getNotNullConstraint();
      Character character0 = Character.valueOf('w');
      String string2 = SQLUtil.substituteMarkers("create tableclhk", "e}){p7!_", character0);
      assertEquals("create tableclhk", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "create tableclhk";
      stringArray0[3] = "'pw";
      stringArray0[4] = "";
      stringArray0[5] = "execfilename";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("'pw", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 'pw FOREIGN KEY (, , create tableclhk, 'pw, , execfilename) REFERENCES null(, , create tableclhk, 'pw, , execfilename)", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kAj{gVfS~?");
      stringReader0.reset();
      SQLUtil.parseColumnTypeAndSize("UW[t");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("V/?{%Fy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V/?{%Fy";
      stringArray0[1] = "kAj{gVfS~?";
      stringArray0[2] = "kAj{gVfS~?";
      stringArray0[3] = "wcOE.I-T)%7";
      stringArray0[4] = ".,g+B7~BBLT4";
      stringArray0[5] = "UW[t";
      stringArray0[6] = "kAj{gVfS~?";
      stringArray0[7] = "UW[t";
      stringArray0[8] = "kAj{gVfS~?";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("b%D", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (V/?{%Fy, kAj{gVfS~?, kAj{gVfS~?, wcOE.I-T)%7, .,g+B7~BBLT4, UW[t, kAj{gVfS~?, UW[t, kAj{gVfS~?) REFERENCES V/?{%Fy(V/?{%Fy, kAj{gVfS~?, kAj{gVfS~?, wcOE.I-T)%7, .,g+B7~BBLT4, UW[t, kAj{gVfS~?, UW[t, kAj{gVfS~?)", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "[^JD`Wfr*,x,k";
      stringArray0[2] = "[^JD`Wfr*,x,k";
      stringArray0[3] = "[^JD`Wfr*,x,k";
      stringArray0[3] = "[^JD`Wfr*,x,k";
      stringArray0[5] = "[^JD`Wfr*,x,k";
      stringArray0[6] = "cXWKf";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "cXWKf", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * FROM ", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint2.setTable(defaultDBTable0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint2);
      assertEquals("CONSTRAINT \"SELECT * FROM \" ", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("UNIQUE (, [^JD`Wfr*,x,k, [^JD`Wfr*,x,k, [^JD`Wfr*,x,k, , [^JD`Wfr*,x,k, cXWKf)", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4042911566325946
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^JD`Wfr*,x,k";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[^JD`Wfr*,x,k", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("[^JD`Wfr*,x,k", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[^JD`Wfr*,x,k", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)", string0);
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)";
      stringArray1[1] = "C'^m";
      stringArray1[2] = "CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)";
      stringArray1[3] = "CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)";
      stringArray1[4] = "CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)";
      stringArray1[5] = "[^JD`Wfr*,x,k";
      stringArray1[6] = "CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)";
      stringArray1[7] = "CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)";
      String string1 = SQLUtil.leftJoin("[^JD`Wfr*,x,k", stringArray0, "", "CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)", stringArray1);
      assertEquals("left join  as CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) on [^JD`Wfr*,x,k.[^JD`Wfr*,x,k = CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k).CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) and [^JD`Wfr*,x,k.[^JD`Wfr*,x,k = CONSTRAINT [^JD`Wfr*,x,k FOREIGN KEY ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k) REFERENCES null([^JD`Wfr*,x,k, [^JD`Wfr*,x,k).C'^m", string1);
      
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "CLhk";
      SQLUtil.mutatesDataOrStructure("CLhk");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "kuIOh/.X3NhS7Xw";
      BasicUUID basicUUID0 = new BasicUUID();
      basicUUID0.toHexString();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.getConstraintDescriptorById(basicUUID0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "zjH#DF4Qd\"3]4@1";
      stringArray1[1] = "%dnrjNQgC2eCb";
      String string0 = "\\(\\u@";
      stringArray1[2] = string0;
      stringArray1[3] = "zjH#DF4Qd\"3]4@1";
      stringArray1[4] = "zjH#DF4Qd\"3]4@1";
      stringArray1[5] = "%dnrjNQgC2eCb";
      stringArray1[6] = "org.h2.command.Prepared";
      stringArray1[7] = "zjH#DF4Qd\"3]4@1";
      stringArray1[8] = "%dnrjNQgC2eCb";
      SQLUtil.innerJoin("%dnrjNQgC2eCb", stringArray0, "%dnrjNQgC2eCb", "zjH#DF4Qd\"3]4@1", stringArray1);
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      System.setCurrentTimeMillis(787L);
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7741057932992024
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "cXWKf";
      String[] stringArray0 = new String[7];
      stringArray0[1] = "[^JD`Wfr*,x,k";
      stringArray0[2] = "[^JD`Wfr*,x,k";
      stringArray0[3] = "[^JD`Wfr*,x,k";
      stringArray0[3] = "[^JD`Wfr*,x,k";
      stringArray0[5] = "[^JD`Wfr*,x,k";
      stringArray0[6] = "cXWKf";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "cXWKf", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      int int0 = 1869;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5729899170928663
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      stringBuilder1.appendCodePoint(1879);
      assertEquals("\u0757", stringBuilder1.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 1879, "");
      SQLUtil.isDML("create unique index");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, 1879, "");
      SQLUtil.renderColumn(defaultDBColumn1);
      String string0 = SQLUtil.substituteMarkers("co0#/S8VD2)B", "create unique index", "  NULL");
      assertEquals("co0#/S8VD2)B", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(":zWs$");
      tableContainer0.getTable(":zWs$");
      StringBuilder stringBuilder0 = new StringBuilder(":zWs$");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(":zWs$", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.append(0.0F);
      stringBuilder3.appendCodePoint(2561);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":zWs$";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.addOptionalCondition("create materialized vie", stringBuilder1);
      assertEquals("$sWz: dna $sWz:0.0\u0A01 or create materialized vie", stringBuilder1.toString());
      
      Character character0 = new Character('f');
      String string0 = SQLUtil.substituteMarkers(":zWs$ = ':zWs$'", ":zWs$ = ':zWs$'", character0);
      assertEquals("'f'", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.220487637994439
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[2] = 'L';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = 's';
      SQLUtil.normalize("N6NfOCCJMQp|OBw*u", false);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      BasicUUID basicUUID0 = new BasicUUID();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N6NfOCCJMQp|OBw*u";
      stringArray0[1] = "g|drH";
      stringArray0[2] = "g|drH";
      stringArray0[3] = "N6NfOCCJMQ  p | OBw * u";
      stringArray0[4] = "N6NfOCCJMQ  p | OBw * u";
      stringArray0[5] = "N6NfOCCJMQ  p | OBw * u";
      stringArray0[6] = "g|drH";
      stringArray0[7] = "g|drH";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) '~';
      objectArray0[1] = (Object) "g|drH";
      objectArray0[2] = (Object) constraintDescriptorList0;
      objectArray0[3] = (Object) '~';
      objectArray0[4] = (Object) basicUUID0;
      objectArray0[5] = (Object) "g|drH";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "[^JD`Wfr*,x,k";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cXWKf";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      SQLUtil.isQuery("[^JD`Wfr*,x,k");
      GDSType.getType("");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = " arg2=[";
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3458240980466787
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "setParameterMode";
      stringArray0[1] = "80000000-00d1-15f7-ab70-000a0a0b1500";
      stringArray0[2] = ".@`4Zw*a";
      stringArray0[3] = "shYJfl1";
      stringArray0[4] = "smw,#uPb.KGrq+!T'fT";
      stringArray0[5] = "procedure";
      stringArray0[6] = " DEFAULT ";
      stringArray0[7] = "5B@4%$";
      stringArray0[8] = "CACHED ";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z7e'>iJ#`U,lwRN0";
      stringArray0[1] = "selecttx\"2";
      stringArray0[2] = "z7e'>iJ#`U,lwRN0";
      stringArray0[3] = "z7e'>iJ#`U,lwRN0";
      stringArray0[4] = "z7e'>iJ#`U,lwRN0";
      stringArray0[5] = "- ";
      stringArray0[6] = "z7e'>iJ#`U,lwRN0";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "selecttx\"2", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "GwV";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("9`\"_/lj:rwNydRv1__R", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DBUniqueConstraint dBUniqueConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cXDWKf";
      stringArray0[1] = "t=";
      stringArray0[2] = "t=";
      stringArray0[6] = "cXDWKf";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "cXDWKf", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("yfX");
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (cXDWKf, t=, t=, , , , cXDWKf)", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("S'mo@=9#+n0bu|?e>#", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("7G|q>c_w<bu+V7C0", dBPackage0);
      dBPackage0.setObjectType("S'mo@=9#+n0bu|?e>#");
      dBProcedure0.setSubProgramId("");
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("S'mo@=9#+n0bu|?e>#.", string0);
      
      SQLUtil.renderValue(dBPackage0);
      Object object0 = new Object();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execfilename");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execfilename", defaultDBTable0, 9999999, "");
      defaultDBColumn0.getNotNullConstraint();
      String string1 = SQLUtil.substituteMarkers("", "", (Object) null);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "TY6,@";
      DBCatalog dBCatalog0 = new DBCatalog("TY6,@");
      dBCatalog0.setDoc("TY6,@");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCatalog0.setName("w");
      dBCatalog0.setOwner(compositeDBObject0);
      dBCatalog0.getComponents();
      Database database0 = null;
      dBCatalog0.setDatabase((Database) null);
      SQLUtil.typeAndName(dBCatalog0);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("tX\"2}'>");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("tX\"2}'>", "tX\"2}'>", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("tX\"2}'>", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("tX\"2}'>", dBCatalog0);
      dBSchema0.getTable("Gb[wiu2");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Gb[wiu2";
      stringArray0[1] = "tX\"2}'>";
      stringArray0[2] = "tX\"2}'>";
      stringArray0[3] = "tX\"2}'>";
      stringArray0[4] = "Gb[wiu2";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("delete");
      VersionNumber versionNumber0 = VersionNumber.valueOf("alter session");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("alter session", "delete", versionNumber0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "tUde_^%9 ");
      VersionNumber versionNumber1 = new VersionNumber(genericDescriptorList0);
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      VersionNumber versionNumber2 = new VersionNumber(arrayList0, genericDescriptorList0);
      VersionNumber versionNumber3 = VersionNumber.valueOf("xEY>U");
      versionNumber0.compareTo(versionNumber3);
      VersionNumber.valueOf(" DEFAULT ");
      versionNumber2.compareTo(versionNumber0);
      versionNumber2.compareTo(versionNumber1);
      Character character0 = new Character('9');
      Boolean boolean1 = SQLUtil.mutatesStructure("jdbc:default:connection");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.3456585482626247
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[^JD`Wfr*,x,k";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[^JD`Wfr*,x,k", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      String string0 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT [^JD`Wfr*,x,k UNIQUE ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)", string0);
      
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("[^JD`Wfr*,x,k", false, dBUniqueConstraint0);
      String string1 = SQLUtil.normalize("CONSTRAINT [^JD`Wfr*,x,k UNIQUE ([^JD`Wfr*,x,k, [^JD`Wfr*,x,k)", false);
      assertEquals("CONSTRAINT [ ^ JD ` Wfr *, x, k UNIQUE ([ ^ JD ` Wfr *, x, k, [ ^ JD ` Wfr *, x, k)", string1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("7G|q>c_w<bu+V7C0");
      stringReader0.skip(2116L);
      char[] charArray0 = new char[7];
      stringReader0.ready();
      charArray0[0] = '[';
      charArray0[1] = 'u';
      charArray0[2] = '2';
      charArray0[3] = 'D';
      charArray0[4] = '8';
      charArray0[5] = '^';
      charArray0[6] = ']';
      stringReader0.read(charArray0);
      stringReader0.reset();
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      dBUniqueConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, "7G|q>c_w<bu+V7C0", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "T</]`x W(2i<";
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "Z*um\"s]}@W`(";
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp0, isc_db_handle_impl0, gDSHelper_GDSHelperErrorListener0);
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      FBCallableStatement fBCallableStatement0 = new FBCallableStatement(gDSHelper0, "4", 16384, 16384, 16384, (FBObjectListener.StatementListener) null, internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      // Undeclared exception!
      try { 
        fBCallableStatement0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractStatement", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6gUg";
      stringArray0[1] = "6gUg";
      stringArray0[2] = "4(7baO0";
      stringArray0[3] = "4(7baO0";
      stringArray0[4] = "6gUg";
      SQLUtil.join("6gUg", "4(7baO0", stringArray0, "6gUg", "6gUg", stringArray0);
      int int0 = (-493);
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = '|';
      charArray0[2] = '*';
      charArray0[3] = 'x';
      charArray0[4] = 't';
      charArray0[5] = '*';
      charArray0[6] = 'l';
      charArray0[7] = '(';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-493), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -493
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BasicUUID basicUUID0 = new BasicUUID();
      basicUUID0.toHexString();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create i", "create i", (VersionNumber) null);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "00000000000000000000000000000000");
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0);
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      VersionNumber versionNumber1 = new VersionNumber(arrayList0, constraintDescriptorList0);
      versionNumber0.compareTo(versionNumber1);
      versionNumber1.compareTo(versionNumber0);
      Character character0 = new Character('B');
      Boolean boolean0 = SQLUtil.mutatesStructure("create i");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "GwV";
      stringArray0[1] = "g|drH";
      SQLUtil.isDML("truncate");
      BasicDatabase basicDatabase0 = new BasicDatabase();
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }
}
