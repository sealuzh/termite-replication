/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:25:53 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3128868859883
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "b,~{d?k=xGL{;\"";
      stringArray0[1] = "iM2SP4]E";
      stringArray0[2] = "b,~{d?k=xGL{;\"";
      stringArray0[3] = " ^prh_a$Y z:,t*~=E";
      stringArray0[4] = "wheel.json.JSONObject$1";
      jSONObject0.putOpt("]K&v XD)7~", (Object) null);
      stringArray0[5] = "aeEw!ao[@zC[G";
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("y[ .Oo2o#/", true);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.974612617693861
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getcompareTo";
      stringArray0[1] = "getcompareTo";
      JSONObject jSONObject0 = new JSONObject("getcompareTo", stringArray0);
      Integer integer0 = new Integer(1794);
      jSONObject0.optLong("%/9V6x,U6p&");
      JSONObject jSONObject1 = jSONObject0.put("X]t?Xqm,:D'D`8c", 1.0);
      jSONObject1.accumulate("JSONArray initial value should be a string or collection or array.", "getcompareTo");
      jSONObject1.toString((int) integer0, (-2640));
      jSONObject1.put("\n", false);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      jSONArray0.write(stringWriter0);
      jSONObject1.write(stringWriter0);
      jSONObject0.has("\n");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.957187034527046
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject2.has("");
      jSONObject0.optLong("CIw~,VL`g:OOw", 0L);
      jSONObject1.accumulate("N]{$X", ",:]}/\"[{;=#");
      jSONObject2.toString(13, 13);
      jSONObject0.put("\n", false);
      Object object0 = JSONObject.NULL;
      JSONObject.doubleToString(0.0);
      Object object1 = jSONObject0.get(",:]}/\"[{;=#");
      assertEquals(0.0, object1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.570684859500231
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "] is not a Boolean.";
      stringArray0[4] = "wheel.json.JSONObject$1";
      stringArray0[5] = "] is not a Boolean.";
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Object) "wheel.json.JSONObject$1");
      jSONObject1.optLong("getcompare");
      jSONObject1.optBoolean("] is not a Boolean.", false);
      stringArray0[6] = ";~\"K!";
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      Boolean boolean0 = Boolean.FALSE;
      Integer.getInteger((String) null, 5275);
      Short short0 = new Short((short)8448);
      String string0 = JSONObject.valueToString(short0, (short)8448, 5275);
      assertNotNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "] is not a Boolean.";
      String string0 = "wheel.json.JSONObject$1";
      stringArray0[4] = "wheel.json.JSONObject$1";
      try { 
        jSONObject0.put(stringArray0[5], (Object) "wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.161742478688366
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject.quote("Y\"mo6hvH-;V'&[xL");
      String string0 = "K0!5'dbZz!A\"jeK53$";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject.valueToString((Object) null);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0, (-1535), (-1535));
      Integer.getInteger((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('!');
      stringWriter1.append((CharSequence) "te");
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      // Undeclared exception!
      try { 
        stringWriter1.write(charArray0, (-1535), (-1535));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5486475191665465
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(340.046422);
      Double.min(340.046422, 340.046422);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.doubleToString(340.046422);
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      Double.min(0.0, 0.0);
      jSONObject0.write(stringWriter0);
      jSONObject0.write(stringWriter1);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>(hashMap1);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{UTPz?:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 6 of {UTPz?:
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5434454298906783
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Byte byte0 = new Byte((byte)5);
      Byte.toUnsignedLong((byte) (-69));
      Byte.compare((byte) (-69), (byte)114);
      Byte.compare((byte) (-69), (byte)59);
      Byte.toUnsignedInt((byte)5);
      JSONObject.valueToString(byte0);
      JSONObject.numberToString(byte0);
      String string0 = "\\u";
      Boolean.valueOf("java.lang.Byte@0000000001");
      Long long0 = new Long((byte) (-69));
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = "java.lang.Byte@0000000001";
      stringArray0[3] = "[]";
      stringArray0[4] = "java.lang.Byte@0000000001";
      stringArray0[5] = "java.lang.Byte@0000000001";
      stringArray0[6] = "nUV.2%e\u0001[Y4";
      stringArray0[7] = string0;
      stringArray0[8] = "java.lang.Byte@0000000001";
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((byte) (-69));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1829235631042345
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Map<Double, String> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = ";-";
      jSONObject0.optInt(";-", 748);
      Object object0 = new Object();
      Object object1 = new Object();
      JSONObject.getNames(object1);
      JSONObject.valueToString(jSONObject0, 748, 76);
      Integer.getInteger(";-");
      try { 
        jSONObject0.getDouble("te");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"te\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.688877562492145
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject2.has("");
      jSONObject2.keys();
      JSONObject jSONObject3 = jSONObject1.accumulate("N]{$X", ",:]}/\"[{;=#");
      jSONObject2.toString(13, 13);
      jSONObject3.opt((String) null);
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4135010030338315
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(";-", 748);
      Object object0 = new Object();
      Object object1 = new Object();
      JSONObject.getNames(object1);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>(748);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.accumulate("54TY4,", jSONArray0);
      jSONObject0.put(";-", false);
      Boolean.valueOf("(.H}y@g");
      int int1 = new Integer(2528);
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1837296503255472
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(0.0F);
      String[] stringArray0 = new String[6];
      stringArray0[3] = "\f";
      JSONObject jSONObject1 = new JSONObject(float1, stringArray0);
      Float.max(0.0F, 2776.005F);
      Float.isFinite(2776.005F);
      jSONObject1.has("kEfWZIP");
      Float.isFinite(0.0F);
      JSONObject.doubleToString(2776.005F);
      jSONObject0.optString("lo", "");
      jSONObject0.toString();
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.632165669012648
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean.valueOf(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getcompareTo";
      stringArray0[1] = "getcompareTo";
      JSONObject jSONObject0 = new JSONObject("getcompareTo", stringArray0);
      jSONObject0.names();
      jSONObject0.optInt("getcompareTo", 1794);
      jSONObject0.optLong("%/9V6x,U6p&");
      jSONObject0.put("X]t?Xqm,:D'D`8c", 1.0);
      jSONObject0.put("getcompareTo", false);
      String string0 = jSONObject0.getString("X]t?Xqm,:D'D`8c");
      assertNotNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.112313342831141
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Boolean.valueOf(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getcompareTo";
      stringArray0[1] = "getcompareTo";
      JSONObject jSONObject0 = new JSONObject("getcompareTo", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = jSONObject0.optString("7 z[fGp'=");
      assertEquals("", string0);
      
      long long0 = jSONObject0.optLong("%/9V6x,U6p&");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String string0 = "Nz32/%#s4LLeMfr Z\"-";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[1] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[2] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[3] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[5] = "Nz32/%#s4LLeMfr Z\"-";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0115053753997263
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.quote("\t");
      JSONTokener jSONTokener0 = new JSONTokener("\t");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2632326190352203
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(340.046422);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "java.lang.Float@0000000001.";
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001.", (-2403L));
      jSONObject1.optInt("java.lang.Float@0000000001.");
      JSONObject.quote("LcZ-HH:E^qm8i");
      String string1 = "";
      JSONTokener jSONTokener0 = new JSONTokener("\"LcZ-HH:E^qm8i\"");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"LcZ-HH:E^qm8i\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.809771075104958
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject1.getLong(",:]}/\"[{;=#");
      jSONObject2.getInt(",:]}/\"[{;=#");
      Boolean.logicalXor(false, true);
      JSONObject jSONObject3 = jSONObject0.put("49.0", true);
      jSONObject3.optDouble("getcompare");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject4 = jSONObject3.put("getcompareTo", 0.0);
      assertSame(jSONObject0, jSONObject4);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.064172878141553
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("F");
      JSONObject jSONObject1 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject1.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4782675783451467
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "k 'nG{Xv2yAy~";
      String[] stringArray0 = new String[2];
      stringArray0[1] = "k 'nG{Xv2yAy~";
      JSONObject jSONObject0 = new JSONObject("k 'nG{Xv2yAy~", stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("k 'nG{Xv2yAy~");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("k 'nG{Xv2yAy~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"k 'nG{Xv2yAy~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6126331079222354
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "iM2SP4]E";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "] is not a Boolean.";
      stringArray0[4] = "wheel.json.JSONObject$1";
      stringArray0[5] = "aeEw!ao[@zC[G";
      JSONObject jSONObject1 = jSONObject0.put("aeEw!ao[@zC[G", (Object) "wheel.json.JSONObject$1");
      jSONObject1.optLong("getcompare");
      jSONObject1.optBoolean("] is not a Boolean.", false);
      stringArray0[6] = ";~\"K!";
      jSONObject0.optLong("wheel.json.JSONObject$1");
      Double double0 = new Double(0L);
      JSONObject jSONObject2 = new JSONObject(double0, stringArray0);
      jSONObject1.names();
      try { 
        jSONObject1.getJSONArray("aeEw!ao[@zC[G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"aeEw!ao[@zC[G\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8488268833248926
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getcompareTo";
      stringArray0[1] = "getcompareTo";
      JSONObject jSONObject0 = new JSONObject("getcompareTo", stringArray0);
      Integer integer0 = new Integer(1794);
      jSONObject0.optLong("%/9V6x,U6p&");
      JSONObject jSONObject1 = jSONObject0.put("X]t?Xqm,:D'D`8c", 1.0);
      jSONObject1.accumulate("JSONArray initial value should be a string or collection or array.", "getcompareTo");
      jSONObject1.toString((int) integer0, (-2640));
      jSONObject0.getInt("X]t?Xqm,:D'D`8c");
      JSONObject jSONObject2 = jSONObject1.put("X]t?Xqm,:D'D`8c", false);
      jSONObject2.optLong(" *", 1682L);
      Boolean boolean1 = Boolean.FALSE;
      int int0 = jSONObject0.optInt("{\n\"java.lang.String@0000000003\": java.lang.Double@0000000004,\n\"java.lang.String@0000000005\": \"java.lang.String@0000000006\"\n}", 1);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.853453377079092
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      Integer.getInteger(",:]}/\"[{;=#");
      try { 
        jSONObject0.getDouble(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5482985022557
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Missing value";
      jSONObject0.optDouble("Missing value", 1688.5);
      jSONObject0.optJSONArray("Missing value");
      try { 
        jSONObject0.getInt("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9441348595502939
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "F";
      JSONObject.valueToString("F");
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.String@0000000001\"");
      String string1 = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.555464850975627
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      Byte.toUnsignedLong((byte)49);
      JSONObject.valueToString("1");
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.write(stringWriter0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("gettoUnsignedString", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      Float.isFinite(2505.32F);
      String string0 = JSONObject.doubleToString((byte)49);
      jSONObject0.optString((String) null, (String) null);
      String string1 = jSONObject1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6872593473350865
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-3023), (-3632));
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("wa", (Collection) linkedList0);
      boolean boolean1 = jSONObject1.has("^M'[ vkbr(w%P%");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.464329800625263
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "rujQ`hR";
      stringArray0[1] = "Nz32/%#s4LLeMfr Z\"-";
      JSONObject jSONObject1 = new JSONObject("Nz32/%#s4LLeMfr Z\"-", stringArray0);
      Float.max((-1.0F), 0.0F);
      Float.isFinite(1401.0F);
      jSONObject0.has("Nz32/%#s4LLeMfr Z\"-");
      Float.isFinite((-445.8867F));
      String string0 = JSONObject.doubleToString((-1.0F));
      assertEquals("-1", string0);
      
      jSONObject0.optString("rujQ`hR", "rujQ`hR");
      jSONObject1.keys();
      boolean boolean1 = jSONObject0.isNull("'G*|mnGW)%$0aD*M5QM");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.251470746182024
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("*-LM-", "k 'nG{Xv2yAy~");
      jSONObject0.toString(9);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "k 'nG{Xv2yAy~";
      stringArray0[1] = "k 'nG{Xv2yAy~";
      Float.max((-3248.3F), 1.0F);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*-LM-");
      StringWriter stringWriter2 = stringWriter1.append('~');
      // Undeclared exception!
      try { 
        stringWriter2.write((char[]) null, 115, (-1960));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5584720640564163
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Double double0 = new Double(340.046422);
      JSONObject jSONObject0 = new JSONObject(double0);
      Short short0 = new Short((short) (-11581));
      JSONObject jSONObject1 = new JSONObject(short0);
      int int0 = 594;
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject2.append("isparseDouble", jSONObject1);
      jSONObject1.toString((int) (short) (-11581), 594);
      jSONObject0.optLong("`>}kU:S;EjqQV^#,", (long) 594);
      String string0 = "@{vw()cwD}(wA9bfY~D";
      String string1 = "Missing value";
      jSONObject3.optDouble("java.lang.Float@0000000001.", (double) (-1L));
      try { 
        jSONObject1.getLong("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3126328398468408
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.toString(594, 594);
      JSONObject jSONObject1 = new JSONObject();
      int int0 = 25;
      String string1 = "N(n,%1[?6";
      jSONObject1.append("N(n,%1[?6", "{}");
      jSONObject0.toString(101, 594);
      String string2 = "`>}kU:S;EjqQV^#,";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "PSKfzoO$fG:'73");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8041037290392672
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Boolean.valueOf(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getcompareTo";
      stringArray0[1] = "getcompareTo";
      JSONObject jSONObject0 = new JSONObject("getcompareTo", stringArray0);
      jSONObject0.names();
      try { 
        jSONObject0.getJSONArray("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7168389764651781
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "Y\"mo6hvH-;V'&[xL";
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 594;
      jSONObject0.toString(594, 594);
      String string1 = "PKfoO$fG:'73";
      jSONObject0.optLong((String) null, 0L);
      try { 
        jSONObject0.getLong("PKfoO$fG:'73");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"PKfoO$fG:'73\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.951687266478526
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      Float float0 = new Float(0.0F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.max(2635.6375F, 2635.6375F);
      Float.isFinite(0.0F);
      jSONObject0.has("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "] is not a number.");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Collection) linkedList0);
      jSONObject0.keys();
      JSONObject.getNames(jSONObject1);
      jSONObject0.optLong((String) null, 0L);
      try { 
        jSONObject1.put("[", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3207998513909374
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject.getNames(jSONObject0);
      String string0 = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8885050468889104
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      jSONObject0.optLong("");
      jSONObject1.optLong("", 0L);
      jSONObject0.toString();
      Double double0 = new Double(1825.71733075508);
      Double.sum(0.0, 32L);
      Double.sum(0.0, 0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2020551576361127
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Boolean.valueOf(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getcompareTo";
      stringArray0[1] = "getcompareTo";
      JSONObject jSONObject0 = new JSONObject("getcompareTo", stringArray0);
      jSONObject0.names();
      int int0 = 1796;
      jSONObject0.optInt("getcompareTo", 1796);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optLong("%/9V6x,U6p&");
      StringWriter stringWriter0 = new StringWriter();
      int int1 = 6;
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-50462705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      short short0 = (short) (-1138);
      Short short1 = new Short((short) (-1138));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      try { 
        jSONObject0.put(stringArray0[0], (-511));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1159074789245156
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Double double0 = new Double(340.046422);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "java.lang.Float@0000000001.";
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001.", (-2403L));
      jSONObject1.optInt("`#@lGX>zc)<rj%ps/$");
      try { 
        Short.decode("java.lang.Float@0000000001.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Float@0000000001.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3140060007259877
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.put("z", true);
      Boolean.valueOf("LF&~uYxXfTFGv(");
      int int0 = new Integer((-409));
      String string0 = jSONObject0.toString((-409), 108);
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.003335191932323
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "k 'nG{Xv2yAy~";
      stringArray0[1] = "k 'nG{Xv2yAy~";
      stringArray0[2] = "k 'nG{Xv2yAy~";
      stringArray0[3] = "?T@DX{=]";
      stringArray0[4] = "k 'nG{Xv2yAy~";
      stringArray0[5] = "k 'nG{Xv2yAy~";
      stringArray0[6] = "k 'nG{Xv2yAy~";
      JSONObject jSONObject0 = new JSONObject("k 'nG{Xv2yAy~", stringArray0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.append("k 'nG{Xv2yAy~", boolean0);
      JSONObject jSONObject2 = jSONObject1.put("sig", 0.0);
      jSONObject1.has("@Dj[-9g_dmj;:[&f");
      jSONObject2.keys();
      String string0 = ",\n";
      Long long0 = new Long((-326L));
      JSONObject jSONObject3 = jSONObject0.accumulate(",\n", long0);
      jSONObject0.toString(1, 79);
      jSONObject3.put(",\n", false);
      JSONObject jSONObject4 = jSONObject2.put("", (long) 1);
      Object object0 = JSONObject.NULL;
      jSONObject4.optInt("Pj=?gf|Z}}3Zm]?");
      JSONObject jSONObject5 = null;
      try {
        jSONObject5 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.595471398100327
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) null);
      boolean boolean0 = new Boolean((String) null);
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedLong((byte)0);
      JSONObject.valueToString(byte0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4254782688525736
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject1.getLong(",:]}/\"[{;=#");
      jSONObject2.getInt(",:]}/\"[{;=#");
      boolean boolean1 = jSONObject0.optBoolean("0", true);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.32856746510509
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = ",:]}/\\\"[{;=#";
      Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('t');
      Double.min(0.0, (-982.742));
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Writer writer0 = jSONObject0.write(stringWriter1);
      jSONObject0.write(writer0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,:]}/\"[{;=#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Double double0 = new Double(340.046422);
      Double.min(340.046422, 340.046422);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a Boolean.";
      stringArray0[1] = "b,~{d?k=xGL{;\"";
      stringArray0[2] = "<cF-";
      stringArray0[3] = " ^prh_a$Y z:,t*~=E";
      stringArray0[4] = "aeEw!ao[@zC[G";
      stringArray0[5] = "aeEw!ao[@zC[G";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.247347318198131
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = ";-";
      jSONObject0.optInt(";-", 748);
      Object object0 = new Object();
      Object object1 = new Object();
      JSONObject.getNames(object1);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>(748);
      String string1 = "";
      jSONObject0.put("", (Map) null);
      Object object2 = new Object();
      jSONObject0.accumulate("", object2);
      int int0 = 39;
      StringWriter stringWriter0 = new StringWriter(39);
      int int1 = 1625;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 10, 7805);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7591915493322454
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject2.has("");
      JSONObject jSONObject3 = jSONObject1.accumulate("N]{$X", ",:]}/\"[{;=#");
      Boolean.logicalXor(false, false);
      jSONObject2.toString(13, 13);
      jSONObject0.put("\n", false);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = jSONObject3.optJSONObject("%I[N*=f");
      assertNull(jSONObject4);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      String string0 = "";
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.042632211710285
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      short short0 = (short) (-6);
      Short short1 = new Short((short) (-6));
      Short short2 = new Short((short) (-6));
      HashMap<Short, Object> hashMap1 = new HashMap<Short, Object>();
      hashMap1.put(short1, jSONObject0);
      JSONObject.getNames((Object) short1);
      Short short3 = new Short((short)2218);
      hashMap1.put(short3, short1);
      Short short4 = new Short((short)44);
      hashMap1.put(short1, short2);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.69007173101727
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(5596.2);
      Double.max(339.895729404, 0.0);
      JSONObject.valueToString(double0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject();
      Writer writer0 = jSONObject0.write(stringWriter0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>(hashMap1);
      stringWriter0.append((CharSequence) "java.lang.Double@0000000002");
      jSONObject1.put("?vUyKzD[JG[K%u:I ", (Map) hashMap1);
      jSONObject1.write(writer0);
      Float.isFinite(0.0F);
      JSONObject.doubleToString(970.3448672400986);
      jSONObject0.optString("lr~PuP 7O", "?vUyKzD[JG[K%u:I ");
      JSONObject jSONObject2 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8331546489195154
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.opt("istoUnsignedString");
      jSONObject1.optString("istoUnsignedString", "istoUnsignedString");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2178850776525776
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[1] = "k 'nG{Xv2yAy~";
      stringArray0[2] = "k 'nG{Xv2yAy~";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      Float.max(1401.0F, (-1.0F));
      Float.sum((-1.0F), 1401.0F);
      Float.isFinite(0.0F);
      jSONObject1.has(",w#;$_");
      Float.isFinite(0.0F);
      JSONObject jSONObject2 = new JSONObject("Nz32/%#s4LLeMfr Z\"-", stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      assertFalse(jSONObject3.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.248404413622087
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject1.has("");
      jSONObject0.optDouble(",:]}/\"[{;=#", (-1215.628114287));
      try { 
        jSONObject1.getLong("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "k 'nG{Xv2yAy~";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("k 'nG{Xv2yAy~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of k 'nG{Xv2yAy~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.273132603606697
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Double double0 = new Double(3754.28129928738);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A JSONArray text must start with '['";
      stringArray0[1] = "`4,Vq:Fw,S}T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      jSONObject1.put("k+wy<wh1`)k.#'", (Map) hashMap0);
      jSONObject0.put("`4,Vq:Fw,S}T", 59);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6070332705497354
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[1] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[2] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[3] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[5] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[6] = "Nz32/%#s4LLeMfr Z\"-";
      JSONObject jSONObject0 = new JSONObject("Nz32/%#s4LLeMfr Z\"-", stringArray0);
      Float.max((-1645.0F), 1401.0F);
      Float.isFinite((-1.0F));
      jSONObject0.has("Nz32/%#s4LLeMfr Z\"-");
      Float.isFinite(0.0F);
      JSONObject.doubleToString(1.0);
      jSONObject0.optInt("?[>AcaT_3b", 47);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = jSONObject0.put(".!z^^EgHs/Gf4NPt9", (Map) null);
      JSONObject jSONObject2 = jSONObject1.put("true", (double) (-1645.0F));
      double double0 = jSONObject2.getDouble("true");
      assertEquals((-1645.0), double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.3299317674052595
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Double double0 = new Double(340.046422);
      Double.min(340.046422, 340.046422);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.doubleToString(340.046422);
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{UTPz?:";
      stringArray0[1] = "340.046422";
      stringArray0[2] = "{UTPz?:";
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.append("{UTPz?:", jSONObject1);
      Integer.getInteger("wa");
      try { 
        jSONObject2.getDouble("340.046422");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"340.046422\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6061920506332319
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "Y\"mo6hvH-;V'&[xL";
      JSONObject.quote("Y\"mo6hvH-;V'&[xL");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        Integer.parseUnsignedInt("K0!5'dbZz!A\"jeK53$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"K0!5'dbZz!A\"jeK53$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6000532885185716
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject2.has("");
      JSONObject jSONObject3 = jSONObject1.accumulate("N]{$X", ",:]}/\"[{;=#");
      jSONObject0.getInt(",:]}/\"[{;=#");
      jSONObject3.put(",:]}/\"[{;=#", false);
      Boolean.valueOf("] not found.");
      int int0 = jSONObject3.optInt("N]{$X", 34);
      assertEquals(2, jSONObject1.length());
      assertEquals(34, int0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.300697110667459
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Float float0 = new Float((-1.0F));
      Boolean.getBoolean("$N{8Hqc-N$");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "rujQ`hR";
      JSONObject jSONObject1 = new JSONObject("Nz32/%#s4LLeMfr Z\"-", stringArray0);
      jSONObject0.optInt("3a-2%rD>#x~EO]::", 88);
      Float.max((-1.0F), 0.0F);
      Float.isFinite(1401.0F);
      jSONObject0.has("Nz32/%#s4LLeMfr Z\"-");
      Boolean.valueOf("LMIZ.A:");
      int int0 = jSONObject0.optInt("Nz32/%#s4LLeMfr Z\"-", (-148));
      assertEquals((-148), int0);
      
      boolean boolean1 = jSONObject0.optBoolean("rujQ`hR", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Byte byte0 = new Byte((byte)59);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4269020941966644
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getLong(",:]}/\"[{;=#");
      jSONObject2.getInt(",:]}/\"[{;=#");
      Boolean.logicalXor(false, true);
      jSONObject0.put("49.0", true);
      int int0 = jSONObject1.optInt("Bad value from toJSONString: ", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~C<+A1\"I");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~C<+A1\"I
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7899012034626436
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      String string0 = "";
      jSONObject2.has("");
      jSONObject2.keys();
      jSONObject1.accumulate("N]{$X", ",:]}/\"[{;=#");
      JSONObject.valueToString(jSONObject0, 13, 13);
      JSONObject jSONObject3 = jSONObject0.put("\n", false);
      JSONObject jSONObject4 = jSONObject3.put("", (long) 13);
      try { 
        jSONObject4.append(",:]}/\"[{;=#", jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,:]}/\"[{;=#] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.5877179301372113
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Short short0 = new Short((short) (-1138));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.put("wheel.json.JSONArray", (-511));
      jSONObject0.optInt("$g+W+e9]kaZmYkGL*", 32);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(0.0F);
      hashMap0.put("null", float0);
      JSONObject jSONObject1 = jSONObject0.put("$g+W+e9]kaZmYkGL*", (Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject1.accumulate((String) null, "$g+W+e9]kaZmYkGL*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.718286284100117
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "b,~{d?k=xGL{;\"";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = " ^prh_a$Y z:,t*~=E";
      stringArray0[4] = "wheel.json.JSONObject$1";
      stringArray0[5] = "aeEw!ao[@zC[G";
      stringArray0[6] = ";~\"K!";
      stringArray0[7] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getDouble(";~\"K!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";~\\\"K!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.060172393177803
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject1.accumulate("N]{$X", ",:]}/\"[{;=#");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject2.getLong("4Gny=/L^.Mo#{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4Gny=/L^.Mo#{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.957707150216923
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      jSONObject1.optLong("", 0L);
      jSONObject0.toString();
      jSONObject1.put("j*N]'t68Gz<a|A0M3J", (Object) null);
      Short short0 = new Short((short) (-1907));
      JSONObject.valueToString(short0, (short) (-1907), 795);
      jSONObject1.toString(32);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.1698388937335378
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      jSONObject0.optLong("0=", 1L);
      jSONObject0.optDouble(",:]}/\"[{;=#", (-4379.1920369));
      try { 
        jSONObject1.getLong(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.10447245914544
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      JSONObject.valueToString((Object) null, (-4158), (-4158));
      JSONObject.valueToString("rujQ`hR", (-1450), (-1449));
      Integer integer0 = new Integer(62);
      int int0 = 0;
      try { 
        Integer.parseUnsignedInt("_t");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_t\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.298680491731806
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("*-LM-", "k 'nG{Xv2yAy~");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("k 'nG{Xv2yAy~", (Collection) linkedList0);
      JSONObject.valueToString("*-LM-");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "k 'nG{Xv2yAy~";
      stringArray0[1] = "k 'nG{Xv2yAy~";
      Float.max((-3248.3F), 1.0F);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(2, jSONObject0.length());
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.36989264827617
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "*-LM-";
      jSONObject0.append("*-LM-", "k 'nG{Xv2yAy~");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("k 'nG{Xv2yAy~", (Collection) linkedList0);
      jSONObject0.toString(9);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "k 'nG{Xv2yAy~";
      stringArray0[1] = "k 'nG{Xv2yAy~";
      Float.max((-3248.3F), 1.0F);
      int int0 = (-1960);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1960));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.4202863594449227
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject1, (-563), 0);
      String string0 = null;
      try { 
        jSONObject1.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.7223734874656413
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.accumulate("", jSONObject2);
      jSONObject1.optLong("", 0L);
      jSONObject0.toString();
      double double0 = jSONObject0.optDouble("Substring bounds error");
      assertEquals(2, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Substring bounds error";
      stringArray0[1] = "Substring bounds error";
      stringArray0[2] = "Substring bounds error";
      stringArray0[3] = "Substring bounds error";
      stringArray0[4] = "Substring bounds error";
      stringArray0[5] = "?F7:ok`&gUn&h]S";
      stringArray0[6] = "Substring bounds error";
      stringArray0[7] = "Substring bounds error";
      stringArray0[8] = "o2h1!";
      JSONObject jSONObject0 = new JSONObject("Substring bounds error", stringArray0);
      Object object0 = jSONObject0.remove("Substring bounds error");
      assertNull(object0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Boolean.logicalOr(false, false);
      String string0 = JSONObject.quote("rujQ`hR");
      assertEquals("\"rujQ`hR\"", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.357285019952196
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "k 'nG{Xv2yAy~";
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Nz32/%#s4LLeMfr Z\"-";
      stringArray0[1] = "k 'nG{Xv2yAy~";
      stringArray0[2] = "k 'nG{Xv2yAy~";
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      float float1 = 1401.0F;
      Object object0 = new Object();
      jSONObject0.accumulate("*", (Object) null);
      Byte byte0 = new Byte((byte) (-11));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6545520080186051
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 32;
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("", (double) 32);
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Byte byte0 = new Byte((byte)24);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "h>OQGjA/FFzQR},/e";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      byte byte1 = (byte)0;
      try { 
        jSONObject0.put(stringArray0[4], 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(float0, 4, 4);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "k 'nG{Xv2yAy~";
      stringArray0[1] = "k 'nG{Xv2yAy~";
      stringArray0[3] = "k 'nG{Xv2yAy~";
      stringArray0[4] = "k 'nG{Xv2yAy~";
      stringArray0[5] = "k 'nG{Xv2yAy~";
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3597473990481395
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Integer integer0 = new Integer((-2265));
      String[] stringArray0 = new String[7];
      String string0 = "/nBCKU0puG,";
      stringArray0[0] = "/nBCKU0puG,";
      stringArray0[1] = ":#mqz:[bq}_xsD";
      Integer.compareUnsigned(0, 0);
      stringArray0[2] = "is";
      Integer.compare((-2265), (-2265));
      stringArray0[3] = "";
      stringArray0[4] = "l'T/28";
      Integer.min(1209, (-2265));
      int int0 = 788;
      Integer.remainderUnsigned(0, 788);
      Integer.compare(9, 0);
      stringArray0[5] = "K=";
      String string1 = ")xyP&;aT 4@%e.E";
      Long long0 = Long.valueOf((long) (-2265));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.optDouble(",\n", (double) 9);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.426467877956977
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(",:]}/\"[{;=#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = ",:]}/\"[{;=#";
      stringArray0[4] = ",:]}/\"[{;=#";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject1.getLong(",:]}/\"[{;=#");
      jSONObject2.getInt(",:]}/\"[{;=#");
      Boolean.logicalXor(false, true);
      jSONObject0.put("49.0", true);
      try { 
        jSONObject1.getDouble("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONString: \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Float float0 = new Float(1020.864);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Expected a ',' or ']'";
      stringArray1[1] = "java.lang.Long@0000000005.";
      stringArray1[2] = "\"k";
      stringArray1[3] = "is";
      stringArray1[4] = "getvalueOf";
      stringArray1[5] = "has";
      stringArray1[6] = "`YG";
      stringArray1[7] = "";
      stringArray1[8] = ": ";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray1);
      boolean boolean0 = jSONObject0.optBoolean("`YG");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.583141748207673
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.valueToString((Object) null, (-4158), (-4158));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7305017813188235
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Double double0 = new Double(5596.2);
      JSONObject.valueToString(double0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      assertEquals(0, hashMap1.size());
  }
}
