/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:05:34 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.modes.Mode;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.Choice;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.time.Instant;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.text.AsyncBoxView;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.DocumentFilter;
import javax.swing.text.Element;
import javax.swing.text.PlainDocument;
import org.apache.batik.apps.svgbrowser.JSVGViewerFrame;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import plugins.collaboration.socket.SocketConnectionHook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.205435033889684
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.contains(18, (-4038));
      jDayChooser0.getSundayForeground();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getDay();
      Choice choice0 = null;
      try {
        choice0 = new Choice();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.379487800859483
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      Color color0 = Color.BLACK;
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 210, 0, 210, '%');
      keyEvent0.setKeyCode(0);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      jDayChooser0.setFocus();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDayBordersVisible(false);
      JPanel jPanel0 = new JPanel();
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 1);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3944236876667166
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.day = (-2882);
      float[] floatArray0 = new float[7];
      jDayChooser0.setMinSelectableDate(date0);
      Color.getColor("day");
      floatArray0[0] = (-2168.652F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2565.0F;
      floatArray0[3] = (-1161.2F);
      floatArray0[4] = 1696.2F;
      color0.getColorSpace();
      color0.getColorSpace();
      jDayChooser0.resetKeyboardActions();
      floatArray0[5] = 1374.6792F;
      floatArray0[6] = 0.0F;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setForeground(color0);
      color0.getColorSpace();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3248761514472367
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.day = (-2882);
      float[] floatArray0 = new float[7];
      Color.getColor("day");
      floatArray0[0] = (-2168.652F);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      KeyEvent keyEvent0 = new KeyEvent(jPopupMenu0, 2109, 2109, (-1666), (-2882), 'x');
      keyEvent0.setKeyCode((-2882));
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getDay();
      jDayChooser0.setFocus();
      assertEquals((-2882), jDayChooser0.getDay());
      
      boolean boolean0 = jDayChooser1.isWeekOfYearVisible();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.170852679829979
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Cursor cursor0 = JSVGViewerFrame.WAIT_CURSOR;
      jDayChooser0.setCursor(cursor0);
      jDayChooser0.getDaysInMonth();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L.B&GE._:0nK?{vl,L";
      JiBX_bindingFactory.getInstance();
      Color color0 = new Color(42, 28, 38);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-458);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-458);
      color0.getColorComponents(floatArray0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setSundayForeground((Color) null);
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0542581760681724
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 103;
      jDayChooser0.setInheritsPopupMenu(true);
      int int1 = 0;
      jDayChooser0.addListeners(24);
      jDayChooser0.setDay(103);
      jDayChooser0.updateUI();
      int int2 = 4045;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(4045);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.332108894444946
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.day = (-2882);
      float[] floatArray0 = new float[7];
      Color.getColor("day");
      floatArray0[0] = (-2168.652F);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 550, (-2882), 210, (-2882), 'A');
      keyEvent0.setKeyCode((-2882));
      JTextField jTextField0 = new JTextField();
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      jDayChooser0.setFocus();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.drawDays();
      assertEquals((-2882), jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getContainerListeners();
      jDayChooser0.setYear(2);
      jDayChooser0.getMinSelectableDate();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      try { 
        jDayChooser0.getMousePosition(false);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.459274083854038
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setEnabled(true);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1765, (long) 1765);
      Date date0 = Date.from(instant0);
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser0.getGraphics();
      jDayChooser0.setSelectableDateRange(date1, date1);
      jDayChooser0.getAccessibleContext();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.addListeners(0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1978114387430616
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setEnabled(true);
      Instant instant0 = MockInstant.ofEpochSecond((long) 0, (long) 0);
      Date.from(instant0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.205447973345968
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setVerifyInputWhenFocusTarget(true);
      jDayChooser0.getSundayForeground();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "";
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(true);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "day";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "day";
      stringArray1[4] = "";
      stringArray1[5] = "day";
      stringArray1[6] = "";
      jDayChooser0.drawWeeks();
      stringArray1[7] = "day";
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext((-708), stringArray0, stringArray1, stringArray0, stringArray0, iBindingFactory0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(164, color0.getRed());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 44, 44, 806, 10, 'K');
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.297856834966921
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isFocusOwner();
      jDayChooser0.setMaxDayCharacters(2885);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.302642525191672
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      float[] floatArray0 = new float[9];
      floatArray0[1] = (-260.97772F);
      floatArray0[7] = 2720.4685F;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-10), 1L, 210, 210, 'A');
      keyEvent0.setKeyCode(210);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setFocus();
      jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.351287861221804
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      Color color0 = Color.BLACK;
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 210, 0, 210, '%');
      keyEvent0.setKeyCode(0);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.drawDays();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3421313503394465
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setEnabled(true);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1765, (long) 1765);
      Date date0 = Date.from(instant0);
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser0.getGraphics();
      jDayChooser0.setSelectableDateRange(date1, date1);
      jDayChooser0.getAccessibleContext();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getSundayForeground();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getWeekdayForeground();
      int int0 = 2651;
      jDayChooser0.getMaximumSize();
      PlainDocument plainDocument0 = new PlainDocument();
      Element element0 = plainDocument0.getDefaultRootElement();
      AsyncBoxView asyncBoxView0 = new AsyncBoxView(element0, 2651);
      // Undeclared exception!
      try { 
        asyncBoxView0.getGraphics();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.View", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2553423446902627
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setEnabled(true);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      Color color0 = Color.BLACK;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      int int0 = (-3665);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3665), (-3665), 1880, 1880, '%');
      keyEvent0.setKeyCode(49);
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent(jDayChooser0, 0, (-1326L), 39, 0, 'g', (-713));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2560170897050815
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      jDayChooser0.setMaxDayCharacters((-4727));
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.232043943382553
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getActionForKeyStroke((KeyStroke) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(0);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("1");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(true);
      Object object0 = jDayChooser1.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 0, "year", 0, 0);
      Object object1 = new Object();
      actionEvent0.paramString();
      SocketConnectionHook socketConnectionHook0 = new SocketConnectionHook();
      Integer integer0 = socketConnectionHook0.getRole();
      actionEvent0.setSource(integer0);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.223399792638835
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(6);
      jDayChooser0.setMaxDayCharacters(8928);
      jDayChooser0.setEnabled(false);
      Instant instant0 = MockInstant.ofEpochSecond((long) 6, (long) 0);
      Date.from(instant0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1609349675619263
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setInheritsPopupMenu(true);
      jDayChooser0.getLocation((Point) null);
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.getMinimumSize();
      jDayChooser0.contains(103, 0);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(103);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      Instant instant0 = MockInstant.ofEpochSecond((long) 140, 2669L);
      Date.from(instant0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "day";
      stringArray0[2] = "";
      stringArray0[3] = "day";
      stringArray0[4] = "";
      stringArray0[5] = "accessories.plugins.time.JDayChooser$1";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2560591009320103
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxDayCharacters(1765);
      jDayChooser0.setEnabled(true);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = new ActionEvent(jpegImage0, 3, (String) null, 500L, 1765);
      Object object0 = new Object();
      actionEvent0.paramString();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      actionEvent0.setSource(jDayChooser_DecoratorButton0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      jDayChooser0.getDayPanel();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 63720, true);
      basicComboBoxEditor0.selectAll();
      basicComboBoxEditor0.focusLost(focusEvent0);
      jDayChooser0.addFocusListener(basicComboBoxEditor0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getComponentPopupMenu();
      jDayChooser0.validate();
      jDayChooser0.firePropertyChange((String) null, 63720, 21);
      jDayChooser0.setDecorationBordersVisible(true);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      DocumentFilter documentFilter0 = defaultStyledDocument0.getDocumentFilter();
      assertNull(documentFilter0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1867762766523793
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 63720, true);
      focusEvent0.getOppositeComponent();
      basicComboBoxEditor0.focusLost(focusEvent0);
      jDayChooser0.addFocusListener(basicComboBoxEditor0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Mode mode0 = null;
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1326571690284117
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Color color0 = jTextPane0.getSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getAction();
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      FileMode fileMode0 = new FileMode();
      fileMode0.getController();
      // Undeclared exception!
      try { 
        fileMode0.init((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }
}
