/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:25:11 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannelGroup;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      phdBuilder0.build();
      List<PhdWholeReadItem> list0 = null;
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9323469378605727
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("positionsZctn not be nll", nucleotideSequence0, qualitySequence0);
      phdBuilder0.build();
      phdBuilder0.fakePeaks();
      phdBuilder0.build();
      PhdBuilder phdBuilder1 = null;
      try {
        phdBuilder1 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, nucleotideSequence0, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("", nucleotideSequence0, qualitySequence0, (Map<String, String>) null);
      artificialPhd0.getComments();
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("", nucleotideSequence1, qualitySequence1, (PositionSequence) null);
      List<PhdWholeReadItem> list0 = defaultPhd0.getWholeReadItems();
      List<PhdReadTag> list1 = artificialPhd0.getReadTags();
      DefaultPhd defaultPhd1 = new DefaultPhd("", nucleotideSequence0, qualitySequence0, (PositionSequence) null, (Map<String, String>) null, list0, list1);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("p2P{/?d`>}kU:S", nucleotideSequence0, qualitySequence1);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence2 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      artificialPhd0.getComments();
      artificialPhd0.getWholeReadItems();
      NucleotideSequence nucleotideSequence2 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence2).getLength();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      DefaultPhd defaultPhd0 = new DefaultPhd("org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange", nucleotideSequence2, (QualitySequence) null, (PositionSequence) null);
      List<PhdWholeReadItem> list0 = defaultPhd0.getWholeReadItems();
      ArtificialPhd.createNewbler454Phd("org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange", nucleotideSequence2, (QualitySequence) null, (Map<String, String>) hashMap1, list0);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      NucleotideSequence nucleotideSequence3 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence3).getLength();
      phdBuilder0.build();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      ArtificialPhd artificialPhd1 = ArtificialPhd.createNewbler454Phd("", nucleotideSequence3, (QualitySequence) null, map1);
      // Undeclared exception!
      try { 
        artificialPhd1.getPositionSequence();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("p2P{/?d`>}kU:S", nucleotideSequence0, qualitySequence1);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence2 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      artificialPhd0.getWholeReadItems();
      NucleotideSequence nucleotideSequence2 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence2).getLength();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      DefaultPhd defaultPhd0 = new DefaultPhd("org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange", nucleotideSequence2, (QualitySequence) null, (PositionSequence) null);
      List<PhdWholeReadItem> list0 = defaultPhd0.getWholeReadItems();
      ArtificialPhd.createNewbler454Phd("org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange", nucleotideSequence2, (QualitySequence) null, (Map<String, String>) hashMap1, list0);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      NucleotideSequence nucleotideSequence3 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence3).getLength();
      phdBuilder0.build();
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      ArtificialPhd artificialPhd1 = ArtificialPhd.createNewbler454Phd("", nucleotideSequence3, (QualitySequence) null, map1);
      // Undeclared exception!
      try { 
        artificialPhd1.getPositionSequence();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("O", nucleotideSequence0, qualitySequence0);
      phdBuilder0.peaks((PositionSequence) null);
      byte[] byteArray0 = new byte[3];
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel1.equals((Object) null);
      Object object1 = new Object();
      defaultChannel2.equals(object0);
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel6 = new DefaultChannel(byteArray0, shortArray0);
      Object object2 = new Object();
      defaultChannel2.equals(object2);
      defaultChannel6.equals(defaultChannel5);
      DefaultChannel defaultChannel7 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel0.equals(defaultChannel4);
      defaultChannel0.equals((Object) null);
      DefaultChannel defaultChannel8 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel9 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(object0);
      defaultChannel5.equals(defaultChannel7);
      DefaultChannel defaultChannel10 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel5);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel4, defaultChannel6, defaultChannel9, defaultChannel0);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup(defaultChannel0, defaultChannel4, defaultChannel1, defaultChannel10);
      assertTrue(defaultChannelGroup1.equals((Object)defaultChannelGroup0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange", nucleotideSequence0, qualitySequence0);
      phdBuilder0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)68;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4260);
      shortArray0[1] = (short) (byte) (-110);
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // qualityScore of our range -110
         //
         verifyException("org.jcvi.jillion.core.qual.PhredQuality", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QualitySequence qualitySequence0 = null;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      String string0 = "}{T6@+P2jP.w#b?,LO";
      int int0 = 15;
      NucleotideSequence nucleotideSequence0 = null;
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", (NucleotideSequence) null, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("positions can not be null", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      phdBuilder0.readTags(linkedList0);
      phdBuilder0.readTags(linkedList0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("O", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4260);
      shortArray0[1] = (short) (byte)32;
      shortArray0[2] = (short) (byte)32;
      shortArray0[3] = (short) (-4260);
      shortArray0[4] = (short) (byte)32;
      shortArray0[5] = (short) (byte)32;
      shortArray0[6] = (short) (-4260);
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel3);
      defaultChannel1.equals((Object) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)32;
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray1, shortArray0);
      defaultChannel1.equals(phdBuilder0);
      short[] shortArray1 = new short[0];
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel6 = new DefaultChannel(byteArray1, shortArray0);
      defaultChannel0.equals(defaultChannel6);
      DefaultChannel defaultChannel7 = new DefaultChannel(byteArray1, shortArray0);
      DefaultChannel defaultChannel8 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel9 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel8.equals(defaultChannel6);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel1, defaultChannel9, defaultChannel2);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "O";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("O", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("null parameter", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(1932, (-738));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("O", nucleotideSequence0, qualitySequence0);
      short[] shortArray0 = new short[5];
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      phdBuilder0.fakePeaks(65536, 2927);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks();
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("O", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4260);
      shortArray0[1] = (short) (byte)32;
      shortArray0[2] = (short) (byte)32;
      shortArray0[3] = (short) (-4260);
      shortArray0[4] = (short) (byte)32;
      shortArray0[5] = (short) (byte)32;
      shortArray0[6] = (short) (-4260);
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)32;
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray1, shortArray0);
      short[] shortArray1 = new short[0];
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel6 = new DefaultChannel(byteArray1, shortArray0);
      defaultChannel0.equals(defaultChannel6);
      DefaultChannel defaultChannel7 = new DefaultChannel(byteArray1, shortArray0);
      DefaultChannel defaultChannel8 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel9 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel1, defaultChannel9, defaultChannel2);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("O", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4260);
      shortArray0[1] = (short) (byte)32;
      shortArray0[2] = (short) (byte)32;
      shortArray0[3] = (short) (-4260);
      shortArray0[4] = (short) (byte)32;
      shortArray0[5] = (short) (byte)32;
      shortArray0[6] = (short) (-4260);
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel3);
      defaultChannel1.equals((Object) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)32;
      shortArray0[6] = (short) (byte)32;
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray1, shortArray0);
      short[] shortArray1 = new short[0];
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel6 = new DefaultChannel(byteArray1, shortArray0);
      defaultChannel0.equals(defaultChannel6);
      DefaultChannel defaultChannel7 = new DefaultChannel(byteArray1, shortArray0);
      DefaultChannel defaultChannel8 = new DefaultChannel(byteArray0, shortArray1);
      DefaultChannel defaultChannel9 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel0, defaultChannel1, defaultChannel9, defaultChannel2);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("O", nucleotideSequence0, qualitySequence0);
      byte[] byteArray0 = new byte[3];
      short[] shortArray0 = new short[5];
      DefaultChannel defaultChannel0 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel1 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel2 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel3 = new DefaultChannel(byteArray0, shortArray0);
      Object object0 = new Object();
      DefaultChannel defaultChannel4 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel1.equals((Object) null);
      Object object1 = new Object();
      defaultChannel2.equals(object0);
      DefaultChannel defaultChannel5 = new DefaultChannel(byteArray0, shortArray0);
      DefaultChannel defaultChannel6 = new DefaultChannel(byteArray0, shortArray0);
      Object object2 = new Object();
      defaultChannel2.equals(object2);
      defaultChannel6.equals(defaultChannel5);
      defaultChannel6.equals(object0);
      DefaultChannel defaultChannel7 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel0.equals(defaultChannel4);
      defaultChannel0.equals((Object) null);
      DefaultChannel defaultChannel8 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel7.equals(object1);
      DefaultChannel defaultChannel9 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel3.equals(object0);
      defaultChannel5.equals(defaultChannel7);
      DefaultChannel defaultChannel10 = new DefaultChannel(byteArray0, shortArray0);
      defaultChannel2.equals(defaultChannel5);
      DefaultChannelGroup defaultChannelGroup0 = new DefaultChannelGroup(defaultChannel4, defaultChannel6, defaultChannel9, defaultChannel0);
      DefaultChannelGroup defaultChannelGroup1 = new DefaultChannelGroup(defaultChannel0, defaultChannel4, defaultChannel1, defaultChannel10);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("O", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-599), (-599));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("qb=~Kh+FFHUO}>", nucleotideSequence0, (QualitySequence) null, (Map<String, String>) hashMap0);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
