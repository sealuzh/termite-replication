/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 08:59:07 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.942550657586791
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.isEmpty();
      Range range1 = Range.of((-1372L), (-1L));
      boolean boolean1 = range0.startsBefore(range1);
      assertFalse(boolean1);
      
      Range range2 = Range.of((-1L));
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandEnd(966L);
      Range range3 = Range.of((-1L), 0L);
      long long0 = range2.getBegin();
      assertEquals((-1L), long0);
      
      Range range4 = Range.ofLength(9223372036854775204L);
      assertFalse(range4.isEmpty());
      
      Object object0 = new Object();
      boolean boolean2 = range2.equals(range3);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.9487307004603114
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of((-1369L), 1737L);
      range0.getLength();
      Range range1 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      range2.complement(range0);
      Object object0 = new Object();
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5475141861407358
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.ofLength(1866L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Range range1 = Range.of((-3093L));
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.466343267148752
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of((-1369L), 1737L);
      range0.getLength();
      range0.toString();
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 1052L);
      Long long1 = new Long(1052L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("6fA ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.6fA 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6531340013070164
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      //  // Unstable assertion: assertEquals("[ 4294967296 .. 4294967296 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem3, 4294967295L, 4294967295L);
      Range range3 = Range.of(4294967295L, 4294967295L);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range2));
      //  // Unstable assertion: assertNotSame(range3, range2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.669679792565072
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1866L, 32767L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2038L), 32767L);
      range0.getEnd(range_CoordinateSystem0);
      long long1 = 0L;
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1866L, (-2038L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.007868708468594
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      range0.spliterator();
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(89L);
      range1.complement(range1);
      range0.iterator();
      range0.isSubRangeOf(range1);
      Range.ofLength(9223372036854775807L);
      Range range2 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.spliterator();
      range0.split(9223372036854775807L);
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2402880620543772
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4731L, 32767L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long((-2748L));
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("6fA ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.6fA 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.111465046972067
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      Range range1 = Range.of((-1L));
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(966L);
      Range range2 = Range.of((-1L), 191L);
      range1.getBegin();
      Range range3 = Range.ofLength(9223372036854775204L);
      range1.startsBefore(range3);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.build();
      range2.iterator();
      range1.isSubRangeOf(range2);
      Range.ofLength(9223372036854775807L);
      Range range4 = range2.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range4.complementFrom(linkedList0);
      range3.equals("cs");
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 0 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 0 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.99120959655995
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of((-1369L), 1737L);
      long long0 = range0.getLength();
      assertEquals(3107L, long0);
      
      Range range1 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      List<Range> list0 = range2.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      Range range3 = range1.asRange();
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(0, list1.size());
      assertFalse(list0.isEmpty());
      
      long long1 = range2.getEnd(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long1);
      
      boolean boolean0 = range3.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.976188574024974
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1866L, 32767L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(32767L);
      Range range0 = range_Builder1.build();
      Range range1 = Range.of(32767L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range2 = range_Builder1.build();
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range3 = range1.asRange();
      boolean boolean0 = range3.endsBefore(range1);
      assertFalse(boolean0);
      
      List<Range> list1 = range3.complementFrom(list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(2, list1.size());
      assertSame(range0, range2);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem2);
      assertEquals(32768L, long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2656171034843586
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of(23L);
      Range.of(23L);
      Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of(23L);
      long long0 = (-199L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-199L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.905187401227664
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.ofLength(2882L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2881L, long0);
      
      Range range1 = Range.of((-7L));
      Range range2 = Range.ofLength(2882L);
      Range range3 = Range.of((-1369L), 2881L);
      boolean boolean0 = range3.endsBefore(range0);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = range2.isSubRangeOf(range0);
      boolean boolean3 = range1.equals("");
      assertFalse(range1.isEmpty());
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = range0.endsBefore(range3);
      assertSame(range0, range2);
      assertFalse(boolean4);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.9920389038767
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.ofLength(604L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(604L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(4294967295L);
      Range.of(604L, 2374L);
      Range.ofLength(9223372036854775204L);
      range0.startsBefore(range2);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.build();
      Range range3 = Range.of(191L, 9223372036854775807L);
      Range range4 = null;
      // Undeclared exception!
      try { 
        range3.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.9810859657011903
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = 9223372036854775807L;
      Range.of(229L, 229L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range.of((-117L));
      Range.of(range_CoordinateSystem0, 2918L, 9223372036854775807L);
      range1.complement(range0);
      Range.of((-2147483648L), 229L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of((-1L), (-133L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.09872418750713
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.ofLength(0L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      range2.getBegin();
      Range range3 = Range.of(range_CoordinateSystem0, 32767L, (-9223372036854775808L));
      range3.complement(range0);
      Range.of((-4508L), (-4379L));
      Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("inputstream can not be null", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse inputstream can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.796341575571118
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.parseRange("[ 0 .. 32767 ]/SB", range_CoordinateSystem1);
      Range range1 = Range.of((-3332L));
      range1.getEnd();
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 32767 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 32767 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.137753671050767
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.endsBefore(range0);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.shift(128L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7591275369532062
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(89L, long0);
      
      Range range1 = Range.of(89L);
      range0.startsBefore(range1);
      List<Range> list0 = range1.complement(range1);
      assertEquals(0, list0.size());
      
      Range range2 = Range.of(range_CoordinateSystem0, 89L, 89L);
      range0.complement(range1);
      range1.complement(range2);
      Range range3 = range1.intersection(range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.880046145397518
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(1154L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range1 = Range.parseRange("[ 0 .. 0 ]/0B");
      range0.intersection(range1);
      range0.toString();
      long long0 = (-4620L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(1154L, (-4620L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.0708215300723065
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.isSubRangeOf(range0);
      Object object0 = new Object();
      Range range1 = Range.ofLength(0L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandBegin(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      Range range2 = range0.intersection(range1);
      range0.toString();
      Range.Builder range_Builder1 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      long long0 = 2147483658L;
      Range.of(0L, 2147483658L);
      range1.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("(+ACs.<u/R7L&/#')");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (+ACs.<u/R7L&/#') into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.864998181980007
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder((-1698L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range_Builder0.contractBegin((-2155L));
      range_Builder0.copy();
      range0.equals((Object) null);
      range0.endsBefore(range1);
      range0.getEnd();
      range0.asRange();
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.ofLength((-1333L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.022899706419634
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-3757L), (-3757L));
      range1.complement(range0);
      Range.of((-128L), 0L);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.842539827317107
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(681L, 681L);
      Range.of(681L);
      long long0 = (-3683L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range2 = Range.of(0L, 681L);
      range0.isEmpty();
      long long1 = 4294967295L;
      Range range3 = Range.of(4294967295L);
      range2.endsBefore(range0);
      long long2 = 17L;
      range3.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3727315416254964
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 681L;
      Range range0 = Range.of(681L, 681L);
      Range.of(681L, 681L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-3766L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-3766L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3767 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.7975154450978974
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-1369L), 1737L);
      long long0 = range0.getLength();
      assertEquals(3107L, long0);
      
      Range range1 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      Object object0 = new Object();
      range2.equals(range0);
      assertFalse(range1.isEmpty());
      assertSame(range2, range1);
      
      Range.Comparators.values();
      List<Range> list0 = range0.split(1737L);
      assertEquals(2, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.9203111908471224
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1900L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-1900L), 4294967295L);
      range_Builder0.expandEnd(30287L);
      range_Builder0.build();
      range0.complement(range0);
      // Undeclared exception!
      try { 
        Range.of((-1L), (-1900L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.414564466298768
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.53070573738948
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      Range.of(2147483647L);
      range1.endsBefore(range0);
      long long0 = (-1236L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3270L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.652219188024615
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 681L;
      Range.of(681L, 681L);
      Range.of(681L);
      long long1 = (-3683L);
      long long2 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-44L), 681L);
      long long3 = 1832L;
      // Undeclared exception!
      try { 
        Range.of(1832L, 681L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.6759319586067463
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-2336L), 0L);
      Range.of(range_CoordinateSystem0, 2109L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.ofLength((-553L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.760900029190119
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(0L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      Range range1 = Range.of(4225L);
      Range range2 = Range.of(0L);
      Range range3 = Range.ofLength(1022L);
      boolean boolean1 = range1.endsBefore(range3);
      assertFalse(boolean1);
      
      Range range4 = Range.ofLength(0L);
      boolean boolean2 = range1.intersects(range2);
      boolean boolean3 = range0.isSubRangeOf(range4);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = range2.isSubRangeOf(range1);
      assertNotSame(range2, range3);
      assertFalse(boolean4 == boolean0);
      
      Range range5 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 4294967295L);
      range_Builder0.expandEnd(0L);
      boolean boolean5 = range1.isEmpty();
      boolean boolean6 = range5.startsBefore(range1);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = 604L;
      Range.ofLength(604L);
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.702492264925755
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-32768L), 357L);
      Range range1 = Range.ofLength(4251L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32768L), long0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.706308611430738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.of((-7L));
      Range.ofLength(0L);
      long long0 = (-1369L);
      long long1 = 602L;
      long long2 = (-1293L);
      // Undeclared exception!
      try { 
        Range.of(602L, (-1293L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.819583404329626
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-2482L));
      Range range1 = Range.of((-32768L), (-32768L));
      range1.isEmpty();
      long long0 = (-1L);
      Range.of(556L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.6159893867090664
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.ofLength(604L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(604L);
      Range range1 = range_Builder0.build();
      List<Range> list0 = range1.split(604L);
      assertEquals(2, list0.size());
      assertTrue(list0.contains(range0));
      
      Range range2 = Range.of(604L, 604L);
      boolean boolean0 = range2.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2433546687129593
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = 1176L;
      Range range0 = Range.ofLength(1176L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.803568863373275
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 0L;
      Range range0 = Range.of(0L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(4225L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.getEnd(range_CoordinateSystem0);
      range1.startsBefore(range1);
      range0.endsBefore(range1);
      range1.isEmpty();
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.50884523239064
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      long long0 = (-1630L);
      Range range1 = Range.of((-1630L));
      range0.endsBefore(range1);
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2380188789437025
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.76983555402435
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.5531599953180635
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.of((-7L));
      Range.ofLength(2882L);
      long long0 = (-1369L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2882L, 1481L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.4030551994985423
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = (-1369L);
      Range range0 = Range.of((-1369L), 1737L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1223L), 1737L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 1673L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1737L, 1673L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.6970335046920546
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1703L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1703L);
      Range range0 = range_Builder0.build();
      Range.of(0L, 0L);
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder1.build();
      range2.toString();
      Range range3 = range0.intersection(range2);
      range3.iterator();
      range_CoordinateSystem0.getAbbreviatedName();
      range_Builder0.build();
      range_CoordinateSystem0.toString();
      range0.getBegin();
      range0.isEmpty();
      range_CoordinateSystem0.toString();
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.641549723189488
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      range0.getBegin();
      Range.of((-284L));
      long long0 = 9223372034707292161L;
      range0.split(88L);
      long long1 = 255L;
      Range.of(255L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372034707292161L, 2508L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.457663386901383
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-32768L));
      Range range0 = Range.of((-4928L));
      // Undeclared exception!
      try { 
        range0.split((-4928L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.of((-2294L), (-2294L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.7522985869762766
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      Range range1 = Range.of((-1L));
      range1.endsBefore(range0);
      range1.endsBefore(range0);
      range0.isSubRangeOf(range1);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      // Undeclared exception!
      try { 
        Range.parseRange("]@>|Ze9V+#E&2=\"Zu", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ]@>|Ze9V+#E&2=\"Zu into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3632837442926053
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long long0 = (-1369L);
      Range range0 = Range.of((-1369L), 1737L);
      range0.toString();
      long long1 = 0L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, (-1369L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.7427345485171637
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder((-1698L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range_Builder0.contractBegin((-2155L));
      range_Builder0.copy();
      range0.equals(range_Builder0);
      range1.endsBefore(range0);
      range0.getEnd();
      range0.asRange();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(65535L, (-487L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.8988908030866245
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      Range range1 = Range.of((-1L));
      range1.endsBefore(range0);
      range0.complement(range1);
      range0.intersects(range1);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("SNu;ysE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.SNu;ysE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.6628624870373105
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      long long0 = (-128L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.530996748593901
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2050L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2050L, 2741L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder1.expandBegin((-2092L));
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.9519569650389803
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.isSubRangeOf(range0);
      Object object0 = new Object();
      Range range1 = Range.of(0L, 0L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      Range range2 = range0.intersection(range1);
      range0.endsBefore(range2);
      range1.intersects(range0);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 0 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 0 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.4616220735373076
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.getEnd();
      Range range1 = Range.of(2881L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("OdPGp@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.OdPGp@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.757853635514136
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.of(2882L, 2882L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      Range.of(2882L);
      Range.of((-1L));
      Range.ofLength(1252L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1954L, (-6308L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6590868059615484
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of((-3683L));
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      range2.isSubRangeOf(range1);
      long long0 = 9223372036854775719L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-3683L), 9223372036854775719L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.8172324558314044
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of((-1369L), 1737L);
      Range.of(1737L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2556L), 1737L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1913L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1913 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.033943266088581
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      Range range1 = Range.of((-1L));
      range1.endsBefore(range0);
      range0.intersects(range1);
      range0.isSubRangeOf(range1);
      Range range2 = Range.ofLength(1702L);
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range2.complementFrom(list0);
      List<Range> list2 = range2.complementFrom(list1);
      range1.complementFrom(list2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=4.024934038744082
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = new Long(0L);
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, (-1L));
      long long1 = 9223372034707292161L;
      range1.split(1L);
      Range.of((-1793L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-2634L), 0L);
      range0.complement(range2);
      // Undeclared exception!
      try { 
        Range.of(0L, (-804L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.4255202600807886
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372032559808512L), 2339L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      Range range0 = range_Builder1.build();
      Long long0 = new Long((-1L));
      Object object0 = new Object();
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("6fA ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.6fA 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=4.163300370355409
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.ofLength(604L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(604L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(4294967295L);
      Range.of(604L, 2374L);
      Range.ofLength(9223372036854775204L);
      boolean boolean0 = range0.startsBefore(range2);
      assertFalse(boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder();
      Range range3 = range_Builder1.build();
      assertTrue(range3.isEmpty());
      
      Range.of(191L, 9223372036854775807L);
      Range range4 = Range.ofLength(127L);
      Range range5 = range0.asRange();
      assertNotSame(range5, range4);
      
      Range.of(191L);
      Range range6 = Range.of((-2488L), 2374L);
      assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.8969701200295126
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals((-1L), long0);
      
      Range range2 = Range.of((-117L));
      Range.of((-1L));
      Range range3 = Range.ofLength(0L);
      assertTrue(range3.isEmpty());
      
      Object object0 = new Object();
      Range.of(range_CoordinateSystem1, (-117L), 1447L);
      Range range4 = range1.intersection(range2);
      assertSame(range4, range3);
      
      long long1 = new Long((-1L));
      assertTrue(long1 == long0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.7557906771786778
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.isEmpty();
      Range range1 = Range.of(2297L);
      range1.startsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      range2.iterator();
      range1.isSubRangeOf(range0);
      Range.ofLength(1560L);
      range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      range1.equals("");
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.2219025172133575
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(17L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.968332514870094
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range range0 = Range.of(681L, 681L);
      Range range1 = Range.of(681L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range2.intersects(range0);
      range2.iterator();
      Range range3 = Range.ofLength(681L);
      long long0 = range3.getLength();
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1);
      
      long long1 = range0.getEnd();
      assertTrue(long1 == long0);
      
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range4 = range_Builder0.build();
      range4.split(1849L);
      assertTrue(range4.isEmpty());
      
      boolean boolean2 = range1.isSubRangeOf(range0);
      assertTrue(boolean2 == boolean0);
      
      Range range5 = Range.of(0L);
      range_Builder0.expandEnd(681L);
      range1.isEmpty();
      assertSame(range1, range2);
      
      boolean boolean3 = range3.startsBefore(range5);
      assertFalse(boolean3 == boolean1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.5912492843257873
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(0L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.ofLength(4225L);
      boolean boolean0 = range0.endsBefore(range1);
      boolean boolean1 = range0.intersects(range0);
      boolean boolean2 = range0.isSubRangeOf(range1);
      assertTrue(boolean2 == boolean1);
      
      range0.isSubRangeOf(range0);
      Range.of(255L);
      Range range2 = Range.of((-1372L));
      boolean boolean3 = range1.intersects(range2);
      assertTrue(boolean3 == boolean0);
      
      Object object0 = new Object();
      boolean boolean4 = range0.startsBefore(range0);
      assertFalse(boolean4);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.84443251254707
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range range0 = Range.ofLength(604L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(604L);
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(4294967295L);
      range0.intersects(range2);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 2374L, 2374L);
      range0.isSubRangeOf(range3);
      Range.of(2346L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 2346L, 2346L);
      range_Builder1.expandEnd(604L);
      range2.isEmpty();
      // Undeclared exception!
      try { 
        Range.ofLength((-828L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.6491967972398265
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.of((-1369L), 1737L);
      Range range0 = Range.of(9223372036854775807L);
      range0.split(9223372036854775807L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.445049519655863
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range range0 = Range.ofLength(1176L);
      List<Range> list0 = range0.split(1176L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2594674723366475
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      range0.spliterator();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.9233110894588643
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.isSubRangeOf(range0);
      Object object0 = new Object();
      Range range1 = Range.ofLength(0L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range1.isEmpty();
      Range range2 = Range.of(3100L);
      boolean boolean0 = range1.endsBefore(range0);
      Range range3 = Range.ofLength(0L);
      range3.intersects(range1);
      boolean boolean1 = range2.isSubRangeOf(range0);
      assertFalse(boolean1);
      
      boolean boolean2 = range1.isSubRangeOf(range2);
      Range.of((-2483L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-1097L), 2346L);
      range_Builder1.expandEnd((-1L));
      boolean boolean3 = range3.isEmpty();
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = range3.isSubRangeOf(range1);
      assertTrue(range1.isEmpty());
      assertTrue(boolean4 == boolean0);
      assertSame(range3, range0);
      assertTrue(boolean4);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.515673804184758
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range range0 = Range.of((-2483L));
      Range range1 = Range.of((-2483L));
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-2483L), 0L);
      boolean boolean0 = range0.intersects(range3);
      assertSame(range0, range2);
      assertTrue(boolean0);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.6424309454858688
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.of((-1369L), 1737L);
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("^>mNNd<31", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ^>mNNd<31 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.isEmpty();
      Object object0 = new Object();
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.716528028271679
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      long long0 = (-1L);
      Range range1 = Range.of((-1L));
      range1.endsBefore(range0);
      range0.intersects(range1);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("]@>|Ze9V+#E&2=\"Zu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.]@>|Ze9V+#E&2=\"Zu
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.7801626849992234
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(0L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(4225L);
      Range range2 = Range.of(0L);
      Range range3 = Range.ofLength(1022L);
      boolean boolean0 = range1.endsBefore(range3);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range4 = Range.ofLength(0L);
      range1.intersects(range2);
      boolean boolean1 = range0.isSubRangeOf(range4);
      boolean boolean2 = range2.isSubRangeOf(range1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      
      Range.of(255L);
      Range range5 = Range.of((-1372L));
      boolean boolean3 = range3.intersects(range5);
      //  // Unstable assertion: assertNotSame(range3, range0);
      
      Object object0 = new Object();
      boolean boolean4 = range1.startsBefore(range4);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      //  // Unstable assertion: assertTrue(boolean4 == boolean3);
      //  // Unstable assertion: assertFalse(boolean4);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.8032814341103407
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range range0 = Range.of((-1369L), 1737L);
      Range range1 = Range.of(1737L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range.of(1L);
      range0.isEmpty();
      boolean boolean1 = range1.startsBefore(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.1925863485716692
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.of((-32754L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-32754L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.7971377304062592
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      long long0 = 255L;
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2187L);
      range_Builder0.contractEnd(0L);
      range_Builder0.expandEnd(255L);
      range_Builder0.copy();
      range_Builder1.expandBegin(924L);
      range_Builder0.contractEnd((-26L));
      long long1 = 276L;
      range_Builder1.contractEnd(276L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("/E", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse /E into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2177140722199202
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      long long0 = 978L;
      Range range0 = Range.ofLength(978L);
      Long long1 = new Long(978L);
      range0.equals(long1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("v|O/bm&$f>UMr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.v|O/bm&$f>UMr
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.339030945056547
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1866L, 32767L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1L));
      Range range0 = range_Builder1.build();
      range_Builder1.contractBegin(1866L);
      Long long0 = new Long(65535L);
      Long.getLong("?Z[eogu{kD|X $Z.6");
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("6fA ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.6fA 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.72087126390495
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(0L);
      Range.ofLength(0L);
      Range.of((-2862L));
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-2862L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.7476287279138663
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isEmpty();
      Range range1 = Range.of((-1L));
      boolean boolean0 = range1.endsBefore(range0);
      boolean boolean1 = range0.intersects(range1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean3 = range0.equals("]@>|Ze9V+#E&2=\"Zu");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.5261121582968897
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1328L), (-1328L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.338596728816859
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1866L, 32767L);
      range_Builder0.expandEnd((-1L));
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.parseRange("?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
