/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:18:53 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketOption;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5347185161547943
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTrusted(true);
      theClient0.getClientData();
      theClient0.setMaxAuthTry(317);
      theClient0.toString();
      theClient0.getClientEventHandler();
      theClient0.getMaxAuthTry();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getSocket();
      theClient0.setSocket((Socket) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.toString();
      theClient0.setClientData((ClientData) null);
      theClient0.setSocket((Socket) null);
      theClient0.setTimeout(1330);
      theClient0.toString();
      int int0 = theClient0.getTimeout();
      assertEquals(1330, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#.fNnDi\n(,0");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Error invoking ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".h-!*n]&Nt{2k$");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getSocketChannel();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTimeoutMsg("");
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getTimeoutMsg();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.setMaxAuthTryMsg("(or#u]cP#;");
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5347185161547943
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setCommunicationLogging(false);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setTimeoutMsg((String) null);
      theClient0.getTimeoutMsg();
      theClient0.getSocket();
      theClient0.getClientEvent();
      theClient0.getTimeoutMsg();
      TheClient theClient1 = new TheClient();
      theClient1.getClientAuthenticationHandler();
      theClient0.setMaxConnectionMsg("");
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient1.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient1.getMaxConnectionMsg();
      theClient1.getClientWriteHandler();
      theClient1.toString();
      theClient1.setSocket((Socket) null);
      theClient0.setTimeout(1330);
      theClient0.getClientExtendedEventHandler();
      theClient1.getTrusted();
      theClient1.getServer();
      theClient0.getMaxConnectionMsg();
      assertEquals(1330, theClient0.getTimeout());
      
      theClient1.getClientObjectHandler();
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3797334600238247
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.toString();
      theClient0.setClientData(data0);
      QuickServer quickServer0 = new QuickServer();
      theClient0.getSocket();
      theClient0.setSocket((Socket) null);
      theClient0.setTimeout((-1877));
      theClient0.getClientWriteHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.setSocket((Socket) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getTimeout();
      theClient0.getMaxAuthTryMsg();
      assertEquals((-1877), theClient0.getTimeout());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3805678363275375
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      Data data0 = new Data();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      blockingClientHandler0.getClientData();
      assertEquals("<ClientHandler-Pool#0-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientData((ClientData) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.toString();
      theClient0.getClientEvent();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getTrusted();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getSocket();
      theClient0.setMaxConnectionMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.toString();
      Data data1 = new Data();
      theClient0.setClientData(data1);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.toString();
      theClient0.getMaxConnectionMsg();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.193764486816496
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setTimeoutMsg((String) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientData();
      theClient0.getSocket();
      theClient0.getClientEvent();
      theClient0.getTimeoutMsg();
      Data data0 = new Data();
      theClient0.setClientData((ClientData) null);
      theClient0.getTimeoutMsg();
      theClient0.getCommunicationLogging();
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-3910));
      commandHandler0.closingConnection(blockingClientHandler0);
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTrusted(true);
      int int0 = 317;
      theClient0.setMaxAuthTry(317);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEventHandler();
      BlockingClientHandler blockingClientHandler1 = new BlockingClientHandler();
      blockingClientHandler1.getSocket();
      theClient0.setSocket((Socket) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      int int1 = (-4469);
      QuickServer quickServer0 = null;
      try {
        quickServer0 = new QuickServer("", (-4469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port number can not be less than 0!
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTrusted(true);
      theClient0.getClientData();
      theClient0.setMaxAuthTry(317);
      theClient0.toString();
      MockInetAddress.getByName("");
      theClient0.getClientAuthenticationHandler();
      assertEquals(317, theClient0.getMaxAuthTry());
      
      TheClient theClient1 = new TheClient();
      theClient1.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#.fNnDi\n(,0");
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxAuthTryMsg("#.fNnDi\n(,0");
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTrusted(true);
      theClient0.getClientData();
      theClient0.setMaxAuthTry((-142));
      theClient0.toString();
      theClient0.getClientEventHandler();
      theClient0.getMaxAuthTry();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getSocket();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:4>", blockingClientHandler0.getName());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^JOHCy=g q^e-%$U");
      TheClient theClient0 = new TheClient();
      theClient0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      String string0 = theClient0.toString();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      theClient0.getClientWriteHandler();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.toString();
      ClientData clientData0 = theClient0.getClientData();
      theClient0.setClientData(clientData0);
      QuickServer quickServer0 = new QuickServer();
      MockInetAddress.getLocalHost();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, (-1661));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1661
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      QuickServer quickServer0 = new QuickServer("org.quickserver.net.server.TheClient", 1000);
      theClient0.setServer(quickServer0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setTimeoutMsg("]v{X");
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getTimeoutMsg();
      theClient0.getClientObjectHandler();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("{TheClient ", 0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@466fe18f
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.getTimeout();
      theClient0.getClientExtendedEventHandler();
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      theClient0.setTrusted(false);
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      ByteBuffer[] byteBufferArray0 = new ByteBuffer[9];
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byte byte2 = (byte)110;
      byteArray0[2] = (byte)110;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBufferArray0[0] = byteBuffer0;
      // Undeclared exception!
      try { 
        ByteBuffer.allocateDirect((byte) (-117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -117
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getReceiveBufferSize();
      theClient0.getClientObjectHandler();
      boolean boolean0 = false;
      mockSocket0.setSoLinger(false, (-2290));
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setSocket(mockSocket0);
      int int0 = new Integer(131072);
      theClient0.getSocket();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientWriteHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getTimeoutMsg();
      TheClient theClient1 = new TheClient();
      theClient1.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      SocketChannel socketChannel0 = SocketChannel.open();
      SocketOption<Object> socketOption0 = (SocketOption<Object>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(socketOption0).toString();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        socketChannel0.setOption(socketOption0, object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.setMaxConnectionMsg("Closed pools for {0}");
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientEvent();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      MockInetAddress.getByName("");
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxAuthTry((-2537));
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      assertEquals((-2537), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.toString();
      theClient1.setTimeout((-2222));
      theClient1.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.setCommunicationLogging(true);
      theClient0.getTrusted();
      theClient1.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      theClient0.toString();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getAuthenticator();
      theClient1.setAuthenticator((Authenticator) null);
      assertEquals((-2222), theClient1.getTimeout());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      MockInetAddress.getByName((String) null);
      theClient0.getClientEventHandler();
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      assertFalse(inetAddress0.isAnyLocalAddress());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^JOHCy=g q^e-%$U");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TheClient theClient0 = new TheClient();
      theClient0.getServer();
      theClient0.setServer((QuickServer) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }
}
