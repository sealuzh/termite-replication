/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:43:28 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.net.InetAddress;
import java.sql.SQLDataException;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import messages.global.GlobalChatMsg;
import messages.global.ScoreMsg;
import messages.global.SessionListMsg;
import messages.round.BombMoveMsg;
import messages.round.CountdownMsg;
import org.apache.log4j.LogManager;
import org.apache.log4j.spi.RepositorySelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int[] intArray0 = new int[3];
      int int0 = 3931;
      intArray0[0] = int0;
      String string0 = "[)cM9oZvht|7h3QUa";
      GlobalChatMsg globalChatMsg0 = null;
      try {
        globalChatMsg0 = new GlobalChatMsg(string0);
       //  fail("Expecting exception: NoClassDefFoundError");
       // Unstable assertion
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      mockInetSocketAddress0.getHostName();
      mockInetSocketAddress0.getHostName();
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(3453);
      mockInetSocketAddress0.getHostName();
      InetAddress inetAddress0 = MockInetAddress.getByName("o/2-VR!dUi");
      MockInetSocketAddress mockInetSocketAddress2 = new MockInetSocketAddress(inetAddress0, 3453);
      mockInetSocketAddress2.getHostName();
      MockSocket mockSocket0 = new MockSocket();
      InetAddress inetAddress1 = mockSocket0.getLocalAddress();
      mockSocket0.getLocalSocketAddress();
      mockInetSocketAddress0.getHostName();
      mockInetSocketAddress0.getHostName();
      SQLDataException sQLDataException0 = new SQLDataException("#&", "o/2-VR!dUi", 0);
      MockInetSocketAddress mockInetSocketAddress3 = new MockInetSocketAddress(inetAddress1, 3287);
      mockInetSocketAddress2.getHostName();
      mockInetSocketAddress0.getHostName();
      mockInetSocketAddress3.getHostName();
      mockInetSocketAddress3.getHostName();
      mockInetSocketAddress3.getHostName();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      Object object0 = new Object();
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      LogManager.setRepositorySelector(repositorySelector0, sQLDataException0);
      ClientMsgReceiver clientMsgReceiver1 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      GlobalChatMsg globalChatMsg0 = null;
      try {
        globalChatMsg0 = new GlobalChatMsg("192.168.1.42", "192.168.1.42");
       //  fail("Expecting exception: NoClassDefFoundError");
       // Unstable assertion
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 106;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "5");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5");
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.close();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setTcpNoDelay(true);
      mockSocket0.setTcpNoDelay(true);
      mockSocket0.getSendBufferSize();
      StartFrame startFrame0 = StartFrame.startFrame;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLTransactionRollbackException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = 0;
      int[] intArray0 = new int[3];
      int int1 = 3931;
      intArray0[0] = int1;
      intArray0[1] = int0;
      intArray0[2] = int0;
      boolean boolean0 = true;
      BombMoveMsg bombMoveMsg0 = new BombMoveMsg(int0, intArray0, intArray0, boolean0);
      clientMsgReceiver0.processMsg(bombMoveMsg0);
      assertFalse(clientMsgReceiver0.isInterrupted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = null;
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      ArrayList<CountdownMsg> arrayList0 = new ArrayList<CountdownMsg>();
      CountdownMsg countdownMsg0 = new CountdownMsg(3931);
      ArrayList<CountdownMsg> arrayList1 = new ArrayList<CountdownMsg>();
      arrayList0.clear();
      arrayList0.add(countdownMsg0);
      ArrayList<SessionListMsg> arrayList2 = new ArrayList<SessionListMsg>();
      ScoreMsg scoreMsg0 = new ScoreMsg(arrayList2);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(countdownMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = null;
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      ArrayList<CountdownMsg> arrayList0 = new ArrayList<CountdownMsg>();
      CountdownMsg countdownMsg0 = new CountdownMsg(3931);
      ArrayList<CountdownMsg> arrayList1 = new ArrayList<CountdownMsg>();
      arrayList0.clear();
      arrayList0.add(countdownMsg0);
      ArrayList<SessionListMsg> arrayList2 = new ArrayList<SessionListMsg>();
      ScoreMsg scoreMsg0 = new ScoreMsg(arrayList2);
      ClientMsgReceiver clientMsgReceiver1 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver1.processMsg(countdownMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      mockSocket0.getLocalSocketAddress();
      BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver(bomberClient0.server, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
          mockInetSocketAddress0.getHostName();
          mockInetSocketAddress0.getHostName();
          MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(3453);
          mockInetSocketAddress0.getHostName();
          InetAddress inetAddress0 = MockInetAddress.getByName("o/2-VR!dUi");
          MockInetSocketAddress mockInetSocketAddress2 = new MockInetSocketAddress(inetAddress0, 3453);
          mockInetSocketAddress2.getHostName();
          MockSocket mockSocket0 = new MockSocket();
          InetAddress inetAddress1 = mockSocket0.getLocalAddress();
          mockSocket0.getLocalSocketAddress();
          mockInetSocketAddress0.getHostName();
          mockInetSocketAddress0.getHostName();
          SQLDataException sQLDataException0 = new SQLDataException("#&", "o/2-VR!dUi", 0);
          EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Couldn't close input stream", 12345);
          NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
          MockInetAddress.getLoopbackAddress();
          MockInetSocketAddress mockInetSocketAddress3 = new MockInetSocketAddress(inetAddress1, 3287);
          mockInetSocketAddress2.getHostName();
          mockInetSocketAddress0.getHostName();
          MockInetSocketAddress mockInetSocketAddress4 = new MockInetSocketAddress("o_!74pIS=", 3287);
          mockInetSocketAddress4.getHostName();
          mockInetSocketAddress4.getHostName();
          mockInetSocketAddress3.getHostName();
          ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
          Object object0 = new Object();
          StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
          StackTraceElement stackTraceElement0 = new StackTraceElement("", "o/2-VR!dUi", "192.168.1.42", 0);
          stackTraceElementArray0[0] = stackTraceElement0;
          StackTraceElement stackTraceElement1 = new StackTraceElement(" +`zIEp'L6#)q#,", "#&", "200.42.42.1", 0);
          stackTraceElementArray0[1] = stackTraceElement1;
          StackTraceElement stackTraceElement2 = new StackTraceElement("200.42.42.1", "", "o/2-VR!dUi", 1243);
          stackTraceElementArray0[2] = stackTraceElement2;
          StackTraceElement stackTraceElement3 = new StackTraceElement("o/2-VR!dUi", "", "+", 3453);
          stackTraceElementArray0[3] = stackTraceElement3;
          StackTraceElement stackTraceElement4 = new StackTraceElement("", "", "192.168.1.42", 0);
          stackTraceElementArray0[4] = stackTraceElement4;
          StackTraceElement stackTraceElement5 = new StackTraceElement("", "A1gZsSX><%z,q", " +`zIEp'L6#)q#,", 500);
          stackTraceElementArray0[5] = stackTraceElement5;
          StackTraceElement stackTraceElement6 = new StackTraceElement("", ".png", "", 500);
          stackTraceElementArray0[6] = stackTraceElement6;
          StackTraceElement stackTraceElement7 = new StackTraceElement("192.168.1.42", "192.168.1.42", ".png", 0);
          stackTraceElementArray0[7] = stackTraceElement7;
          StackTraceElement stackTraceElement8 = new StackTraceElement("200.42.42.1", "o/2-VR!dUi", "192.168.1.42", (-2606));
          stackTraceElementArray0[8] = stackTraceElement8;
          sQLDataException0.setStackTrace(stackTraceElementArray0);
          RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
          LogManager.setRepositorySelector(repositorySelector0, sQLDataException0);
          // Undeclared exception!
          try { 
            clientMsgReceiver0.closeConnection();
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("client.network.ClientMsgReceiver", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
