/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:55:38 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.LogitBoost;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.649626871120269
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[2] = "stoplist";
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      naiveBayesMultinomialText0.setOptions(stringArray1);
      int[] intArray0 = new int[5];
      naiveBayesMultinomialText0.m_leplace = 0.0;
      intArray0[0] = 100000;
      intArray0[1] = 676;
      intArray0[2] = 6669;
      intArray0[3] = (-625);
      intArray0[4] = 111;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 90);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      try { 
        naiveBayesMultinomialText0.classifyInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(8);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 8;
      SGDText sGDText1 = new SGDText();
      sGDText1.toString();
      double double0 = (-468.9293920198712);
      sGDText1.setLNorm((-468.9293920198712));
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      sGDText1.getRevision();
      File file0 = sGDText1.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 8;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[7] = (double) 8;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.228621687035912
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getRevision();
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      SGDText sGDText0 = new SGDText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      sGDText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_stemmer = stemmer0;
      sGDText0.setUseStopList(true);
      File file0 = sGDText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("weka.classifiers.bayes.NaiveBayesMultinomialText", "");
      File file0 = MockFile.createTempFile("weka.classifiers.bayes.NaiveBayesMultinomialText", "weka.classifiers.bayes.NaiveBayesMultinomialText", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      naiveBayesMultinomialText0.setStopwords(mockFile1);
      naiveBayesMultinomialText0.m_leplace = 1232.3;
      naiveBayesMultinomialText0.getStemmer();
      System.setCurrentTimeMillis(447L);
      naiveBayesMultinomialText0.useStopListTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3564105626344753
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CUAS38#3b'h)?p5u/1s");
      naiveBayesMultinomialText0.getRevision();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      precomputedKernelMatrixKernel0.toString();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.toString();
      SGDText sGDText0 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      String[] stringArray0 = naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom(1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.setPeriodicPruning(10000);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.stemmerTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5350813079469845
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.setMinWordFrequency(1638.460770135);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CUAS38#3b'h)?p5u/1s");
      naiveBayesMultinomialText0.getRevision();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      SparseInstance sparseInstance0 = new SparseInstance(204.821, naiveBayesMultinomialText0.m_wordsPerClass);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.tokenizeInstance(sparseInstance0, false);
      naiveBayesMultinomialText1.tokenizeInstance(sparseInstance0, false);
      assertEquals(1638.460770135, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5183268684018767
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText0.m_stemmer;
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      naiveBayesMultinomialText0.setLNorm((-1.0));
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.LNormTipText();
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      KDTree kDTree0 = new KDTree();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.getCapabilities();
      assertEquals((-1.0), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4817936207732374
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText0.m_stemmer;
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.LNormTipText();
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      
      NullStemmer nullStemmer1 = new NullStemmer();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      KDTree kDTree0 = new KDTree();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.listOptions();
      naiveBayesMultinomialText1.setUseStopList(false);
      assertEquals("The LNorm to use for document length normalization.", naiveBayesMultinomialText1.LNormTipText());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.6017133816818907
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-120);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      naiveBayesMultinomialText0.m_periodicP = (-196);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "Use word frequencies rather than binary bag of words representation";
      naiveBayesMultinomialText0.setOptions(stringArray1);
      naiveBayesMultinomialText0.setOptions(stringArray1);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normTipText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("Use word frequencies rather than binary bag of words representation");
      naiveBayesMultinomialText0.m_normalize = true;
      snowballStemmer0.getStemmer();
      snowballStemmer0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0018442867649786
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-W");
      naiveBayesMultinomialText0.getRevision();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      precomputedKernelMatrixKernel0.toString();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.toString();
      SGDText sGDText0 = new SGDText();
      AbstractClassifier.makeCopy(sGDText0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("kernelMatrix.matrix");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "weka.classifiers.bayes.NaiveBayesMultinomialText$Count");
      sGDText0.getTokenizer();
      SparseInstance sparseInstance0 = new SparseInstance((byte)110, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.890126897101436
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.setNorm((-1308.64355009632));
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.pruneDictionary();
      boolean boolean0 = false;
      naiveBayesMultinomialText0.m_useStopList = false;
      naiveBayesMultinomialText0.getTokenizer();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getRevision();
      naiveBayesMultinomialText1.setDebug(false);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText2.getCapabilities();
      naiveBayesMultinomialText2.pruneDictionary();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.getStemmer();
      naiveBayesMultinomialText1.getTokenizer();
      naiveBayesMultinomialText0.listOptions();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7f$e";
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2921.338139150698, (int[]) null, (-2158));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.classifyInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2725.15);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 638.59235;
      doubleArray0[4] = 3041.913995585;
      doubleArray0[5] = 0.75;
      doubleArray0[6] = 4237.35;
      doubleArray0[7] = 0.3;
      doubleArray0[8] = 1592.28629693;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      try { 
        naiveBayesMultinomialText0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.400422389517661
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.setPeriodicPruning(0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.755399432874636
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7f$e";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      LogitBoost logitBoost0 = new LogitBoost();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.getOptions();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "weka.classifiers.bayes.NaiveBayesMultinomialText$Count";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "b?E286w]*Il";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, double0, 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4320083555225613
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random.setNextRandom(8);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">Z";
      tokenizer0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 8;
      doubleArray0[6] = (double) 8;
      doubleArray0[2] = (double) 8;
      sGDText0.setLNorm((-468.929392));
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setOptions((String[]) null);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText1.getLowercaseTokens());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7fHY";
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[2] = "stoplist";
      stringArray0[3] = "<&";
      stringArray0[4] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[5] = "(leave one out) ";
      stringArray0[6] = "--------------------------------------\n";
      stringArray0[7] = "1BHqpzGbQu&Dpe|l~l,";
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9721987111105235
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertEquals("9122", string0);
      
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      precomputedKernelMatrixKernel0.toString();
      precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords((File) null);
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      String string1 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string1);
      
      SGDText sGDText0 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText2.m_stemmer;
      naiveBayesMultinomialText2.setStemmer(nullStemmer0);
      NullStemmer nullStemmer1 = (NullStemmer)naiveBayesMultinomialText2.getStemmer();
      assertSame(nullStemmer1, nullStemmer0);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      String string2 = naiveBayesMultinomialText1.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string2);
      
      String string3 = naiveBayesMultinomialText2.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string3);
      
      String string4 = naiveBayesMultinomialText1.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string4);
      
      String string5 = naiveBayesMultinomialText1.stemmerTipText();
      assertFalse(naiveBayesMultinomialText1.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
      assertEquals("The stemming algorithm to use on the words.", string5);
      
      String string6 = naiveBayesMultinomialText3.tokenizerTipText();
      assertFalse(naiveBayesMultinomialText3.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText3.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText3.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText3.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText3.getLNorm(), 0.01);
      assertEquals("The tokenizing algorithm to use on the strings.", string6);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1756582904878283
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray0.length);
      
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "gj";
      stringArray1[2] = "9#`;w>8+`s8!";
      stringArray1[3] = "84W`DY:1p";
      stringArray1[4] = "^[Umm";
      naiveBayesMultinomialText0.setOptions(stringArray1);
      MockFile mockFile0 = new MockFile((String) null, "/numPackages.txt");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.649626871120269
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[2] = "stoplist";
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      naiveBayesMultinomialText0.setOptions(stringArray1);
      int[] intArray0 = new int[5];
      naiveBayesMultinomialText0.m_leplace = 0.0;
      intArray0[0] = 100000;
      intArray0[1] = 676;
      intArray0[2] = 6669;
      intArray0[3] = (-625);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4016.4712800455604, intArray0, (-1553));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setUseStopList(true);
      try { 
        naiveBayesMultinomialText1.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 88;
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 88);
      double double0 = 1.0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) sparseInstance1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.getRevision();
      boolean boolean0 = true;
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      precomputedKernelMatrixKernel0.toString();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.toString();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "9122";
      tokenizer0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      BallNode ballNode0 = new BallNode(31);
      String string0 = "OR8j~<@DR";
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(linkedList0);
      int int0 = (-1293);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 3979);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.attribute(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      stringArray0[0] = "ft?VcAp:";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Xh(Zs(|<kSclT<M~(";
      stringArray0[6] = "ws?F;um";
      stringArray0[7] = "--------------------------------------\n";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.setMinWordFrequency((-271.9494813202));
      assertEquals((-271.9494813202), naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "CQt7fHY";
      stringArray0[4] = "OL&+~+]_Zq1<vszC@";
      stringArray0[3] = "<&";
      stringArray0[4] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[5] = "(leave one out) ";
      stringArray0[6] = "-------------------------------------\n";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, stringArray0[2]);
      SGDText sGDText0 = new SGDText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 1.0;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.setNorm(302.9);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_lnorm = 949.94401;
      naiveBayesMultinomialText0.m_minWordP = 949.94401;
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 515);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The LNorm to use for document length normalization.";
      stringArray0[1] = "The LNorm to use for document length normalization.";
      stringArray0[2] = "The LNorm to use for document length normalization.";
      stringArray0[3] = "The LNorm to use for document length normalization.";
      stringArray0[4] = "The LNorm to use for document length normalization.";
      stringArray0[5] = "`K2";
      stringArray0[6] = "V2b66";
      stringArray0[7] = "The LNorm to use for document length normalization.";
      NaiveBayesMultinomialText.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.51939659513532
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      naiveBayesMultinomialText0.m_norm = 2655.4;
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[2] = "stoplist";
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.useStopListTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.periodicPruningTipText();
      naiveBayesMultinomialText1.stemmerTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals(2655.4, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CUAS38#3b'h)?p5u/1s");
      naiveBayesMultinomialText0.getRevision();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      precomputedKernelMatrixKernel0.toString();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.toString();
      SGDText sGDText0 = new SGDText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("kernelMatrix.matrix");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      sGDText0.getTokenizer();
      naiveBayesMultinomialText0.getTokenizer();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-W");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "stoplist";
      stringArray0[1] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[2] = "stoplist";
      stringArray0[3] = "-W";
      stringArray0[4] = "-W";
      stringArray0[5] = "--------------------------------------\n";
      stringArray0[6] = "OL&+~+]_Zq1<vszC@";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      System.setCurrentTimeMillis((-287L));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.stemmerTipText();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The stemming algorithm to use on the words.";
      try { 
        AbstractClassifier.forName("-binary-class", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: -binary-class
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9737955386768893
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7f$e";
      int[] intArray0 = new int[6];
      intArray0[0] = 398;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setPeriodicPruning(622);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.normTipText();
      Stopwords stopwords0 = new Stopwords();
      try { 
        stopwords0.write("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7f$e";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.listOptions();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      TopDownConstructor topDownConstructor1 = new TopDownConstructor();
      try { 
        topDownConstructor1.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The norm of the instances after normalization.";
      stringArray0[1] = "5+e";
      stringArray0[2] = "-M <num>";
      stringArray0[3] = "";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      String[] stringArray1 = new String[10];
      stringArray1[0] = "CQt7fHY";
      stringArray1[1] = "OL&+~+]_Zq1<vszC@";
      stringArray1[2] = "stoplist";
      stringArray1[3] = "<&";
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(3.0, double0, 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CUAS38#3b'h)?p5u/1s");
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      precomputedKernelMatrixKernel0.toString();
      precomputedKernelMatrixKernel0.getKernelMatrixFile();
      SGDText sGDText0 = new SGDText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("kernelMatrix.matrix");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      sGDText0.getTokenizer();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "CQt7fHY";
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[2] = "stoplist";
      stringArray0[3] = "<&";
      stringArray0[4] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2230804093275522
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CUAS38#3b'h)?p5u/1s");
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertEquals("9122", string0);
      
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      precomputedKernelMatrixKernel0.toString();
      MockFile mockFile0 = new MockFile("Using kernel matrix from file with name: kernelMatrix.matrix", "Using kernel matrix from file with name: kernelMatrix.matrix");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(14, stringArray0.length);
      
      String[] stringArray1 = new String[0];
      naiveBayesMultinomialText0.setOptions(stringArray1);
      System.setCurrentTimeMillis(42L);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals("/home/ubuntu/termite/projects/107_weka", file0.toString());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[6];
      intArray0[0] = 10000;
      intArray0[1] = 6;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10000, intArray0, 248);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("$EVNOE(");
      binarySparseInstance1.value(attribute0);
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }
}
