/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:26:54 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.097030667864938
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.removeFilterName("L{x");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getRowHidden((-1964));
      resultMatrixCSV0.removeFilterName("-summary data not set-");
      int[] intArray0 = new int[2];
      intArray0[0] = 1004;
      intArray0[1] = (-1964);
      resultMatrixCSV0.setColOrder(intArray0);
      int int0 = resultMatrixCSV0.getVisibleRowCount();
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, int0);
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      
      ResultMatrixSignificance.main((String[]) null);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setShowStdDev(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.addHeader("L{x", "-summary data not set-");
      resultMatrixSignificance0.setRemoveFilterName(true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      ResultMatrixPlainText.main((String[]) null);
      resultMatrixPlainText0.getStdDev(2, 0);
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(407, 0);
      resultMatrixHTML0.toStringKey();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.getSignificanceWidth();
      ResultMatrixPlainText.main((String[]) null);
      resultMatrixHTML1.getDefaultMeanWidth();
      resultMatrixHTML1.printRowNamesTipText();
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5724404620164134
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.getRowName(0);
      resultMatrixSignificance0.showAverageTipText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.setColHidden(11, false);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getDefaultEnumerateColNames();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.getColSize((String[][]) null, 0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.306109597815063
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixHTML0.m_RankingWins = intArray0;
      resultMatrixHTML0.m_PrintColNames = true;
      resultMatrixHTML0.setMeanPrec(0);
      resultMatrixHTML0.getColOrder();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1462557799044175
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.padString("v", 1, true);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.doubleToString(0.0, (-1096));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4426992933330034
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixCSV0.m_RankingWins = intArray0;
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getRowName((-55));
      resultMatrixCSV0.m_CountWidth = (-55);
      resultMatrixCSV0.getColName((-2516));
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringRanking();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1243658097838045
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setEnumerateRowNames(false);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.setStdDevWidth(63);
      int int0 = resultMatrixSignificance0.getSignificanceWidth();
      assertEquals(63, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4409139280923693
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(264, 2);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.getSummaryTitle(114);
      resultMatrixGnuPlot0.setSignificanceWidth((-1911));
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot1.removeFilterName("v");
      resultMatrixGnuPlot1.setShowStdDev(true);
      assertTrue(resultMatrixGnuPlot1.getShowStdDev());
      
      resultMatrixGnuPlot0.getRowOrder();
      resultMatrixGnuPlot0.getRowOrder();
      resultMatrixGnuPlot0.countWidthTipText();
      resultMatrixGnuPlot0.globalInfo();
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5290467260829956
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 1);
      resultMatrixGnuPlot0.getSummaryTitle(90);
      resultMatrixGnuPlot0.setSignificanceWidth(254);
      resultMatrixGnuPlot0.removeFilterName("v");
      resultMatrixGnuPlot0.setShowStdDev(false);
      resultMatrixGnuPlot0.getRowOrder();
      resultMatrixGnuPlot0.getRowOrder();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2);
      resultMatrixLatex0.toStringRanking();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultPrintColNames();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.926998656773296
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColNameWidth(4665);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.clearSummary();
      resultMatrixPlainText0.m_EnumerateRowNames = true;
      resultMatrixPlainText0.clearRanking();
      resultMatrixPlainText0.getDisplayName();
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.meanWidthTipText();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixCSV0.setColNameWidth(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 1);
      resultMatrixGnuPlot0.getDisplayName();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringMatrix();
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.setShowStdDev(true);
      int[][] intArray0 = new int[5][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray2[2] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 2;
      intArray3[2] = 4665;
      intArray3[3] = 4665;
      intArray3[4] = 0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.setRanking(intArray0);
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.546612155841839
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getRowName(40);
      resultMatrixSignificance0.showAverageTipText();
      resultMatrixSignificance0.setSize(50, 2);
      resultMatrixSignificance0.meanWidthTipText();
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.getAverage(0);
      resultMatrixSignificance0.setRowNameWidth(1);
      assertEquals(1, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3836911241419934
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setSize(1, 1);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance1.meanWidthTipText();
      resultMatrixSignificance1.toStringKey();
      resultMatrixSignificance0.getAverage(50);
      resultMatrixSignificance1.setRowNameWidth(5);
      assertEquals(5, resultMatrixSignificance1.getRowNameWidth());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.9047474468967063
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3, 3);
      resultMatrixSignificance0.m_ColNameWidth = 3;
      resultMatrixSignificance0.getRevision();
      resultMatrixSignificance0.removeFilterName("value2");
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = ")";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = ")";
      stringArray0[5] = "*";
      stringArray0[6] = "8034";
      stringArray0[7] = "*";
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.getAverage(49);
      resultMatrixSignificance0.setRowNameWidth((-24));
      assertEquals(3, resultMatrixSignificance0.getColNameWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.LOSS_STRING = "v";
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                      [1] \n---------------------------------\nrow0                     (0)    |\n---------------------------------\n[v/ /v]                         |\n", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.224703836330589
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.clearHeader();
      resultMatrixHTML0.setPrintRowNames(false);
      resultMatrixHTML0.m_CountWidth = (-1);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.getDefaultCountWidth();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int int0 = 30;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = " ";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = "$Revision:";
      stringArray0[5] = "";
      stringArray0[6] = "(";
      stringArray0[7] = "";
      resultMatrixHTML0.m_RowNames = stringArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSize((-1), 30);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.447123627169102
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixHTML0.m_RankingWins = intArray0;
      resultMatrixHTML0.m_PrintColNames = true;
      resultMatrixHTML0.setMeanPrec(0);
      resultMatrixHTML0.getColOrder();
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName(1);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringSummary();
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.268169380688708
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_ColNameWidth = 1;
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.removeFilterName((String) null);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "v";
      stringArray0[1] = "*";
      stringArray0[2] = "*";
      stringArray0[3] = " ";
      stringArray0[4] = "v";
      stringArray0[5] = "*";
      stringArray0[6] = "*";
      stringArray0[7] = "(";
      stringArray0[8] = "vF";
      resultMatrixPlainText0.setPrintRowNames(false);
      int int0 = 29;
      int int1 = (-137);
      ResultMatrixPlainText resultMatrixPlainText1 = null;
      try {
        resultMatrixPlainText1 = new ResultMatrixPlainText(29, (-137));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.926956751113413
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColNameWidth(4665);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.clearSummary();
      resultMatrixPlainText0.m_EnumerateRowNames = true;
      resultMatrixPlainText0.clearRanking();
      resultMatrixPlainText0.getDisplayName();
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.meanWidthTipText();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixCSV0.setColNameWidth(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 1);
      resultMatrixGnuPlot0.getDisplayName();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringMatrix();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.setShowStdDev(true);
      int[][] intArray0 = new int[5][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray2[2] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 2;
      intArray3[2] = 4665;
      intArray3[3] = 4665;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray3[7] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 4665;
      intArray4[3] = 4665;
      intArray4[4] = (-1006);
      intArray4[5] = 0;
      intArray4[6] = 4665;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 0;
      intArray5[1] = 1;
      intArray5[2] = 0;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.372056571470397
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_EnumerateRowNames = true;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.clearSummary();
      resultMatrixHTML0.getDefaultEnumerateColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.getRowName(1);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.showAverageTipText();
      resultMatrixSignificance1.setSize(53, 51);
      resultMatrixSignificance0.meanWidthTipText();
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance1.getAverage((-336));
      resultMatrixSignificance1.setRowNameWidth(0);
      assertEquals(51, resultMatrixSignificance1.getVisibleRowCount());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.9704870432706767
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      
      resultMatrixPlainText0.m_CountWidth = 2;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.m_RemoveFilterName = false;
      resultMatrixGnuPlot0.toStringRanking();
      resultMatrixGnuPlot0.getDefaultPrintRowNames();
      resultMatrixGnuPlot0.listOptions();
      resultMatrixPlainText0.getDisplayName();
      resultMatrixGnuPlot0.getDefaultMeanWidth();
      resultMatrixSignificance0.getRevision();
      resultMatrixPlainText0.TIE_STRING = "(";
      resultMatrixPlainText0.trimString("dCvz~|Xcvo=G~lB=", 2);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.getDefaultSignificanceWidth();
      resultMatrixPlainText0.toStringRanking();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "v";
      stringArray0[1] = ")";
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixPlainText0.getPrintColNames();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      resultMatrixPlainText1.toStringRanking();
      resultMatrixCSV0.getColHidden(2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clear();
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0738709578206986
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.getDefaultPrintColNames();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 1;
      doubleArray3[4] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 4439;
      doubleArray0[3] = doubleArray4;
      resultMatrixLatex0.m_StdDev = doubleArray0;
      resultMatrixLatex0.setSize(4439, 0);
      resultMatrixHTML0.toStringSummary();
      assertEquals(4439, resultMatrixLatex0.getColCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.500523129845163
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_StdDevPrec = (-1284);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixLatex0);
      resultMatrixLatex1.isAverage(3);
      resultMatrixLatex1.clearHeader();
      resultMatrixLatex0.getMeanWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = ")";
      resultMatrixHTML0.m_ColNames = stringArray0;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2395716747532304
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.TIE_STRING = "";
      resultMatrixSignificance0.getSignificanceWidth();
      resultMatrixSignificance0.getEnumerateRowNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDisplayName();
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 0;
      intArray2[1] = 1;
      intArray2[2] = 0;
      intArray2[3] = (-1087);
      intArray2[4] = 2;
      intArray2[5] = 0;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.535851571395866
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.headerKeys();
      resultMatrixPlainText0.setStdDevPrec(1721);
      resultMatrixPlainText0.isSignificance((-3206));
      assertEquals(1721, resultMatrixPlainText0.getStdDevPrec());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getRevision();
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.150596138999674
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_ColNameWidth = 1;
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.removeFilterName((String) null);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "v";
      stringArray0[1] = "*";
      stringArray0[2] = "*";
      stringArray0[3] = " ";
      stringArray0[4] = "v";
      stringArray0[5] = "*";
      stringArray0[6] = "*";
      stringArray0[7] = "(";
      stringArray0[8] = "vF";
      resultMatrixHTML0.setOptions(stringArray0);
      resultMatrixHTML0.globalInfo();
      resultMatrixHTML0.showAverageTipText();
      resultMatrixPlainText0.getRowOrder();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML1.getDefaultEnumerateColNames();
      resultMatrixHTML1.getSignificanceWidth();
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.getStdDevWidth();
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixHTML0.isSignificance(42);
      resultMatrixHTML1.setStdDevWidth(0);
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.042424189064591
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringSummary();
      resultMatrixSignificance0.headerKeys();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultPrintColNames();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[";
      stringArray0[1] = "[";
      stringArray0[2] = "(";
      stringArray0[3] = "*";
      stringArray0[4] = "[";
      resultMatrixSignificance0.m_ShowAverage = false;
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      
      stringArray0[5] = "-summary data not set-";
      ResultMatrixCSV.main(stringArray0);
      ResultMatrixPlainText.main(stringArray0);
      int int0 = resultMatrixCSV0.getStdDevPrec();
      assertEquals(2, int0);
      
      resultMatrixCSV0.showAverageTipText();
      String[][] stringArray1 = new String[4][0];
      String[] stringArray2 = new String[6];
      stringArray2[0] = " ";
      stringArray2[1] = "(";
      stringArray2[2] = "*";
      stringArray2[3] = "(";
      stringArray2[4] = "-summary data not set-";
      stringArray2[5] = "";
      stringArray1[0] = stringArray2;
      stringArray1[1] = stringArray0;
      stringArray1[2] = stringArray0;
      stringArray1[3] = stringArray0;
      int int1 = resultMatrixSignificance0.getColSize(stringArray1, 1, true, true);
      assertEquals(1, int1);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4408250123292614
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setMeanWidth(961);
      resultMatrixCSV0.clearRanking();
      resultMatrixCSV0.m_PrintColNames = true;
      resultMatrixCSV0.m_EnumerateColNames = true;
      resultMatrixCSV0.removeFilterName("CSV");
      resultMatrixCSV0.clear();
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((ResultMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6993511035830555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.m_RowNameWidth = (-3897);
      resultMatrixGnuPlot0.toStringKey();
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixGnuPlot0.m_HeaderValues = vector0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringKey();
      resultMatrixGnuPlot0.getColName(0);
      assertEquals((-3897), resultMatrixGnuPlot0.getRowNameWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringSummary();
      assertFalse(resultMatrixLatex0.getShowStdDev());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.700708260100896
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.m_RowNameWidth = (-3904);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.stdDevWidthTipText();
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixGnuPlot0.m_HeaderValues = vector0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringKey();
      resultMatrixGnuPlot0.getColName(7);
      assertEquals((-3904), resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.476336395573506
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.clearHeader();
      resultMatrixHTML0.setPrintRowNames(false);
      resultMatrixHTML0.m_CountWidth = (-1);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.getDefaultCountWidth();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      resultMatrixHTML0.removeFilterName("");
      resultMatrixHTML0.m_StdDevWidth = 2;
      intArray0[4] = 1;
      resultMatrixPlainText0.m_RankingDiff = intArray0;
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.getStdDev(0, (-2554));
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getColCount();
      String[][] stringArray0 = new String[1][1];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      resultMatrixGnuPlot0.getColSize(stringArray0, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.clear();
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5561426645979473
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.getRowName(0);
      resultMatrixSignificance0.showAverageTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(11, 7);
      resultMatrixHTML0.removeFilterName("/#LA#Ayd#;k@5");
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(11, 11);
      resultMatrixPlainText0.setPrintRowNames(true);
      resultMatrixPlainText0.getStdDev(2, 30);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getColCount();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      String[][] stringArray0 = new String[0][3];
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.getColSize(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.489822350277422
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(50, 0);
      resultMatrixSignificance0.getDefaultEnumerateRowNames();
      resultMatrixSignificance0.listOptions();
      resultMatrixSignificance0.setStdDevWidth(10);
      assertEquals(10, resultMatrixSignificance0.getStdDevWidth());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.042353135789437
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.removeFilterName("L{x");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.removeFilterName("-summary data not set-");
      int[] intArray0 = new int[2];
      intArray0[0] = 1004;
      intArray0[1] = (-1964);
      resultMatrixCSV0.setColOrder(intArray0);
      int int0 = resultMatrixCSV0.getVisibleRowCount();
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, int0);
      
      ResultMatrixSignificance.main((String[]) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.addHeader("L{x", "-summary data not set-");
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.setColNameWidth(114);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(114, resultMatrixGnuPlot0.getColNameWidth());
      
      ResultMatrixCSV.main((String[]) null);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getDefaultMeanWidth();
      resultMatrixHTML0.printRowNamesTipText();
      assertTrue(resultMatrixHTML0.getPrintRowNames());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.9390503906179215
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText0.LEFT_PARENTHESES = "$circ$";
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.getDefaultRowNameWidth();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = (-601);
      intArray1[3] = 2;
      intArray0[0] = intArray1;
      resultMatrixCSV0.m_NonSigWins = intArray0;
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.getDefaultSignificanceWidth();
      resultMatrixPlainText0.toStringRanking();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(";
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixPlainText0.getPrintColNames();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixCSV0.getColHidden(0);
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.040037908631607
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      resultMatrixCSV0.m_RowHidden = booleanArray0;
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "[";
      stringArray0[2] = "*";
      stringArray0[3] = "*";
      stringArray0[4] = "]";
      stringArray0[5] = "]";
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setShowStdDev(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.addHeader("Average", " ");
      resultMatrixSignificance0.setRemoveFilterName(true);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.setColNameWidth(238);
      resultMatrixSignificance0.setShowStdDev(true);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(238, resultMatrixGnuPlot0.getColNameWidth());
      
      ResultMatrixCSV.main(stringArray0);
      resultMatrixCSV0.getColHidden(92);
      resultMatrixCSV0.colNameWidthTipText();
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.077256200568925
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.removeFilterName("L{x");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getRowHidden((-391));
      resultMatrixCSV0.removeFilterName("-summary data not set-");
      resultMatrixCSV0.TIE_STRING = "L{x";
      int[] intArray0 = new int[4];
      intArray0[0] = (-690);
      intArray0[1] = 1004;
      intArray0[2] = 0;
      intArray0[3] = 1;
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.getVisibleRowCount();
      resultMatrixCSV0.getDefaultRowNameWidth();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.setMeanWidth(2);
      resultMatrixHTML0.getDisplayName();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRemoveFilterName(true);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixCSV0.getDefaultEnumerateColNames();
      ResultMatrixHTML.main((String[]) null);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.044219884808454
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.clearHeader();
      resultMatrixHTML0.setPrintRowNames(false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.getDefaultCountWidth();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      resultMatrixHTML0.removeFilterName("");
      resultMatrixHTML0.m_StdDevWidth = 2;
      intArray0[4] = 1;
      resultMatrixPlainText0.m_RankingDiff = intArray0;
      resultMatrixPlainText0.setPrintRowNames(false);
      resultMatrixPlainText0.getStdDev(0, (-2554));
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getSignificanceWidth();
      String[] stringArray0 = new String[0];
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixHTML0.getDefaultMeanWidth();
      resultMatrixHTML0.printRowNamesTipText();
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getRemoveFilterName());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.142878419675047
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      boolean[] booleanArray0 = new boolean[4];
      resultMatrixGnuPlot0.setPrintColNames(true);
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      resultMatrixGnuPlot0.setColOrder(intArray0);
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      resultMatrixGnuPlot0.m_RowHidden = booleanArray0;
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      
      resultMatrixGnuPlot0.assign(resultMatrixHTML0);
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3965897255179343
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.removeFilterName("L{x");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getRowHidden((-391));
      resultMatrixCSV0.removeFilterName("-summary data not set-");
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.TIE_STRING = "L{x";
      int[] intArray0 = new int[4];
      intArray0[0] = (-690);
      intArray0[1] = 1004;
      intArray0[2] = 0;
      intArray0[3] = 1;
      resultMatrixCSV0.setColOrder(intArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int0);
      
      boolean boolean0 = resultMatrixHTML0.getEnumerateColNames();
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertTrue(boolean0);
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.968837669049842
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.removeFilterName("]");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getRowHidden((-391));
      resultMatrixCSV0.removeFilterName("-summary data not set-");
      int[] intArray0 = new int[4];
      intArray0[0] = (-690);
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      resultMatrixCSV0.setColOrder(intArray0);
      resultMatrixCSV0.getVisibleRowCount();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]";
      stringArray0[1] = "v";
      stringArray0[2] = "[";
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.getDefaultEnumerateColNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultSignificanceWidth();
      resultMatrixPlainText0.toStringRanking();
      ResultMatrixGnuPlot.main(stringArray0);
      int[][] intArray1 = new int[8][7];
      resultMatrixCSV1.WIN_STRING = "";
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      resultMatrixCSV1.m_NonSigWins = intArray1;
      resultMatrixPlainText0.getPrintColNames();
      resultMatrixPlainText0.toStringRanking();
      resultMatrixCSV0.getColHidden(1);
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4472068876495148
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixHTML0.m_RankingWins = intArray0;
      resultMatrixHTML0.m_PrintColNames = true;
      resultMatrixHTML0.setMeanPrec(0);
      resultMatrixHTML0.getColOrder();
      resultMatrixHTML0.getSignificance(48, 1026);
      assertEquals(0, resultMatrixHTML0.getMeanPrec());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(0, 40);
      resultMatrixHTML1.setShowAverage(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultEnumerateColNames();
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.5810131665481633
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.meanPrecTipText();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = 1;
      resultMatrixHTML0.setRowOrder(intArray0);
      resultMatrixHTML0.setRemoveFilterName(true);
      resultMatrixHTML0.getCount((-1));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixCSV0.colNameWidthTipText();
      int[] intArray1 = new int[1];
      intArray1[0] = 25;
      resultMatrixCSV0.m_RankingDiff = intArray1;
      String string0 = resultMatrixHTML0.padString("*", 25, true);
      assertEquals("                        *", string0);
      
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixHTML0.getSignificance(1639, (-1654));
      resultMatrixHTML0.setShowAverage(false);
      assertFalse(resultMatrixHTML0.getShowAverage());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultEnumerateColNames();
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.529387854175658
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setEnumerateRowNames(false);
      resultMatrixGnuPlot0.getSummaryTitle(0);
      resultMatrixGnuPlot0.setSignificanceWidth(0);
      resultMatrixGnuPlot0.RIGHT_PARENTHESES = "A}roDNWxdl%`yQzclF";
      String[] stringArray0 = new String[0];
      resultMatrixGnuPlot0.removeFilterName("{centering\n");
      resultMatrixGnuPlot0.setShowStdDev(true);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      
      resultMatrixGnuPlot0.m_RowNames = stringArray0;
      resultMatrixGnuPlot0.m_MeanWidth = 2;
      resultMatrixGnuPlot0.getRowOrder();
      resultMatrixGnuPlot0.getRowOrder();
      resultMatrixGnuPlot0.countWidthTipText();
      resultMatrixGnuPlot0.globalInfo();
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.328610594503038
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.WIN_STRING = "BHbpc2vx 9nA}iK6[L";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(26, 1);
      resultMatrixCSV0.assign(resultMatrixLatex0);
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixCSV0.m_PrintRowNames = true;
      resultMatrixCSV0.clearHeader();
      resultMatrixLatex0.setShowStdDev(true);
      assertTrue(resultMatrixLatex0.getShowStdDev());
      
      resultMatrixCSV0.setStdDevPrec((-575));
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getCountWidth();
      resultMatrixCSV0.getDefaultStdDevPrec();
      assertEquals(1, resultMatrixCSV0.getColCount());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.6107070052721193
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.getRowName(0);
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 2;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (double) 1;
      doubleArray5[4] = (double) 0;
      doubleArray5[5] = (double) 2;
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = (-2914.722589);
      doubleArray5[8] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (double) 1;
      doubleArray7[4] = (double) 1;
      doubleArray7[5] = (double) 2;
      doubleArray7[6] = (double) 0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = (double) 1;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (double) 2;
      doubleArray8[5] = (double) 0;
      doubleArray8[6] = (double) 1;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      doubleArray9[0] = (double) 0;
      doubleArray9[1] = (double) 0;
      doubleArray9[2] = (double) 0;
      doubleArray9[3] = (-2914.722589);
      doubleArray0[8] = doubleArray9;
      resultMatrixSignificance0.m_StdDev = doubleArray0;
      resultMatrixSignificance0.showAverageTipText();
      resultMatrixSignificance0.TIE_STRING = "@',V^4iw";
      resultMatrixSignificance0.setSize(0, 0);
      resultMatrixSignificance0.meanWidthTipText();
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.getAverage(0);
      resultMatrixSignificance0.setRowNameWidth(274);
      assertEquals(274, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.893582080297689
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 3470);
      resultMatrixCSV0.getRowName(3470);
      resultMatrixCSV0.meanWidthTipText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getRevision();
      resultMatrixLatex0.m_HeaderValues = null;
      resultMatrixLatex0.padString("[", (-869));
      resultMatrixLatex0.toStringMatrix();
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixCSV0.getVisibleRowCount();
      resultMatrixLatex0.setPrintRowNames(false);
      resultMatrixCSV0.getDisplayName();
      resultMatrixLatex0.setMean(3470, (-1231), 0);
      resultMatrixCSV0.getStdDevWidth();
      resultMatrixCSV0.getRowCount();
      resultMatrixLatex0.printRowNamesTipText();
      resultMatrixCSV0.setRowNameWidth(3470);
      resultMatrixCSV0.setRowHidden(1095, false);
      resultMatrixCSV0.setRemoveFilterName(false);
      assertEquals(3470, resultMatrixCSV0.getRowNameWidth());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.169526810436975
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(97, 1);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      int int0 = resultMatrixHTML1.getVisibleColCount();
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertEquals(97, int0);
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertFalse(resultMatrixHTML1.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML1.getRowCount());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.5962935738352484
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_PrintRowNames = true;
      int int0 = resultMatrixGnuPlot0.getSignificanceWidth();
      assertEquals(0, int0);
      
      int[][] intArray0 = new int[6][6];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 0;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 1;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = 1;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 2;
      intArray3[2] = 1;
      intArray3[3] = 0;
      intArray3[4] = 1;
      intArray3[5] = 2905;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 89;
      intArray4[1] = 1;
      intArray4[2] = 2905;
      intArray4[3] = (-3864);
      intArray4[4] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      int[] intArray6 = new int[0];
      intArray0[5] = intArray6;
      resultMatrixGnuPlot0.m_Significance = intArray0;
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      String string0 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"col0\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string0);
      
      resultMatrixGnuPlot0.globalInfo();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.340545928202022
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.getDefaultStdDevPrec();
      resultMatrixLatex0.getPrintRowNames();
      int[][] intArray0 = new int[8][1];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 0;
      intArray1[6] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray2[4] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 1;
      intArray0[2] = intArray1;
      int[] intArray4 = new int[8];
      intArray4[0] = 2;
      intArray4[1] = 2;
      intArray4[2] = 1;
      intArray4[3] = 2;
      intArray4[4] = 2;
      intArray4[5] = 2;
      intArray4[6] = 1;
      intArray4[7] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      intArray5[0] = 1;
      intArray5[1] = 2;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray5[4] = 2;
      intArray5[5] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[0];
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      intArray7[0] = 1;
      intArray7[1] = 0;
      intArray7[2] = 2;
      intArray7[3] = 1;
      intArray7[4] = 2;
      intArray7[5] = 0;
      intArray7[6] = 0;
      intArray7[7] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[9];
      intArray8[0] = 2;
      intArray8[1] = 0;
      intArray8[2] = 2;
      intArray8[3] = 40;
      intArray8[4] = 2;
      intArray8[5] = 2;
      intArray8[6] = (-267);
      intArray8[7] = 2;
      intArray8[8] = 2;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2370421723431546
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_EnumerateRowNames = true;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.clearSummary();
      resultMatrixHTML0.getDefaultEnumerateColNames();
      resultMatrixHTML0.RIGHT_PARENTHESES = "c";
      int int0 = resultMatrixLatex0.getColNameWidth();
      resultMatrixLatex0.globalInfo();
      resultMatrixHTML0.getRevision();
      resultMatrixLatex0.setColHidden(2, true);
      resultMatrixHTML0.getDefaultEnumerateColNames();
      String[][] stringArray0 = new String[3][0];
      String[] stringArray1 = new String[6];
      stringArray1[0] = " ";
      stringArray1[1] = "$circ$";
      stringArray1[2] = "c";
      stringArray1[3] = "$circ$";
      stringArray1[4] = "(";
      stringArray1[5] = "c";
      stringArray0[0] = stringArray1;
      stringArray0[1] = stringArray1;
      String[] stringArray2 = new String[1];
      stringArray2[0] = ")";
      stringArray0[2] = stringArray2;
      int int1 = resultMatrixHTML0.getColSize(stringArray0, (-2096), false, true);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(int1 == int0);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, int1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3435470471826703
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[][] stringArray0 = new String[4][1];
      String[] stringArray1 = new String[3];
      stringArray1[0] = " ";
      stringArray1[1] = ")";
      stringArray1[2] = "*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[7];
      stringArray2[0] = "*";
      stringArray2[1] = ")";
      stringArray2[2] = " ";
      stringArray2[3] = ")";
      stringArray2[4] = " ";
      stringArray2[5] = "Only outputs the significance indicators. Can be used for spotting patterns.";
      stringArray2[6] = "v";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[0];
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[0];
      stringArray0[3] = stringArray4;
      int int0 = resultMatrixPlainText0.getColSize(stringArray0, 997);
      assertEquals(0, int0);
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.225006179490075
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setStdDevWidth(1);
      assertEquals(1, resultMatrixSignificance0.getStdDevWidth());
      
      resultMatrixSignificance0.assign(resultMatrixCSV0);
      resultMatrixSignificance0.getSignificanceWidth();
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getRevision();
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.340545928202022
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.getDefaultStdDevPrec();
      resultMatrixLatex0.getPrintRowNames();
      int[][] intArray0 = new int[8][1];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 0;
      intArray1[6] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[1] = 0;
      intArray2[3] = 2;
      intArray2[4] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 2;
      intArray4[1] = 2;
      intArray4[2] = 1;
      intArray4[3] = 2;
      intArray4[4] = 2;
      intArray4[5] = 2;
      intArray4[6] = 1;
      intArray4[7] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      intArray5[0] = 1;
      intArray5[1] = 2;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray5[4] = 2;
      intArray5[5] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[0];
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      intArray7[0] = 1;
      intArray7[1] = (-267);
      intArray7[2] = 2;
      intArray7[3] = 1;
      intArray7[4] = 2;
      intArray7[5] = 0;
      intArray7[6] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[9];
      intArray8[0] = 2;
      intArray8[1] = 0;
      intArray8[3] = 40;
      intArray8[4] = 2;
      intArray8[5] = 2;
      intArray8[6] = (-267);
      intArray8[7] = 2;
      intArray8[8] = 2;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1367817148578547
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.padString("", 1, true);
      int[][] intArray0 = new int[3][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 1;
      intArray2[1] = 0;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = 1;
      intArray2[6] = 2;
      intArray0[1] = intArray2;
      intArray0[2] = intArray1;
      resultMatrixGnuPlot0.m_Significance = intArray0;
      resultMatrixGnuPlot0.setRowNameWidth(25);
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      
      resultMatrixGnuPlot0.m_RowNameWidth = (-932);
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixGnuPlot0.getDefaultPrintColNames();
      String string0 = resultMatrixGnuPlot0.enumerateRowNamesTipText();
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.343858499173687
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(97, 1);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.getStdDev(12, 0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getColCount();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      String[][] stringArray0 = new String[2][8];
      String[] stringArray1 = new String[6];
      stringArray1[0] = " ";
      stringArray1[1] = "";
      stringArray1[2] = ")";
      stringArray1[3] = "=F%e{0G,Gk";
      stringArray1[4] = "v";
      stringArray1[5] = " ";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      stringArray2[0] = " ";
      stringArray2[1] = "(";
      stringArray2[2] = " ";
      stringArray2[3] = " ";
      stringArray2[4] = ")";
      stringArray2[5] = "*";
      stringArray2[6] = "v";
      stringArray2[7] = ")";
      stringArray2[8] = "(";
      stringArray0[1] = stringArray2;
      int int0 = resultMatrixGnuPlot0.getColSize(stringArray0, (-1522));
      assertEquals(0, int0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.clear();
      assertEquals(97, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(97, resultMatrixHTML0.getVisibleColCount());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      resultMatrixCSV0.m_Counts = doubleArray0;
      resultMatrixCSV0.m_StdDevPrec = 0;
      int int0 = resultMatrixCSV0.getStdDevPrec();
      assertEquals(0, int0);
  }
}
