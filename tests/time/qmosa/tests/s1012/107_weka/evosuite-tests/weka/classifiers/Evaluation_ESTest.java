/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:16:17 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.Clusterer;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.MakeDensityBasedClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.006901010005091
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O1dNSe";
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      simpleLogistic0.getRevision();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 3;
      intArray0[2] = 4;
      intArray0[3] = 7;
      intArray0[4] = 117;
      intArray0[5] = 117;
      intArray0[6] = 6;
      intArray0[7] = 5;
      intArray0[8] = 6;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5, intArray0, 117);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(7);
      String string0 = "cpd4\"S^zE`+YRXNjzH";
      evaluation1.toMatrixString("graph");
      binarySparseInstance0.dataset();
      try { 
        evaluation0.evaluateModel((Classifier) simpleLogistic0, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.281024633059305
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.matthewsCorrelationCoefficient(15000);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-219.47);
      doubleArray0[1] = Double.NaN;
      evaluation0.pctCorrect();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedRecall();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("\tUse '-p 0' if no attributes are desired.\n", protectedProperties0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Clusterer clusterer0 = filteredClusterer0.getClusterer();
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer(clusterer0);
      Capabilities capabilities0 = makeDensityBasedClusterer0.getCapabilities();
      capabilities0.testWithFail(attribute0);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.getRevision();
      evaluation0.toSummaryString("8034", true);
      Random.setNextRandom(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.incorrect();
      evaluation1.numFalsePositives(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[3] = (-3525);
      intArray0[4] = 15000;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      intArray0[8] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1000.0, intArray0, 1);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) zeroR0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3618277174040476
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "O1dNSe";
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      simpleLogistic0.setHeuristicStop(84);
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      RandomTree randomTree1 = new RandomTree();
      Capabilities capabilities1 = randomTree0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      randomTree0.setMinNum((-744.0317579078));
      testInstances0.generate("setWeightTrimBeta");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.areaUnderPRC(4);
      double double1 = Evaluation.MIN_SF_PROB;
      double double2 = evaluation0.m_SumPriorSqrErr;
      double double3 = evaluation0.sizeOfPredictedRegions();
      double double4 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.000846770930588
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      simpleLogistic0.setUseCrossValidation(false);
      simpleLogistic0.getRevision();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedRecall();
      double[] doubleArray0 = evaluation1.getClassPriors();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.pctUnclassified();
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, 2485, Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2485
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.001144124483963
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      SimpleLogistic.main(stringArray0);
      simpleLogistic0.setUseCrossValidation(false);
      simpleLogistic0.getRevision();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedRecall();
      double[] doubleArray0 = evaluation1.getClassPriors();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.pctUnclassified();
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, 2485, Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2485
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0615098824653293
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      simpleLogistic0.setHeuristicStop((-3298));
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      RandomTree randomTree1 = new RandomTree();
      Capabilities capabilities0 = randomTree1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      randomTree1.setMinNum((-3298));
      Instances instances0 = testInstances0.generate("   * @return the capabilities\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.areaUnderPRC(1963);
      double double1 = evaluation0.falseNegativeRate((-649));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.m_SumPriorSqrErr;
      double double3 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6231616003651532
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "O1dNSe";
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, (-2));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SparseInstance sparseInstance1 = new SparseInstance(1);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedRecall();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      protectedProperties0.stringPropertyNames();
      Attribute attribute0 = new Attribute(".bsi", protectedProperties0);
      ZeroR zeroR1 = new ZeroR();
      evaluation0.toClassDetailsString();
      evaluation0.toSummaryString("@data", true);
      Random.setNextRandom((-2128));
      evaluation0.incorrect();
      evaluation0.numFalsePositives(4);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(1275);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1275
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2883461450007734
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2040);
      intArray0[2] = (-2);
      intArray0[4] = (-4047);
      intArray0[6] = (-2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SparseInstance sparseInstance0 = new SparseInstance(12);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedRecall();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      protectedProperties0.stringPropertyNames();
      Attribute attribute0 = new Attribute("<J3fH@$AP7", protectedProperties0);
      ZeroR zeroR0 = new ZeroR();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      String string1 = evaluation0.toSummaryString("toGraph", true);
      assertEquals("toGraph\nTotal Number of Instances                0     \n", string1);
      
      Random.setNextRandom(2806);
      evaluation0.incorrect();
      evaluation0.numFalsePositives(111);
      double double1 = evaluation0.truePositiveRate(2806);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2040);
      intArray0[2] = (-2);
      intArray0[4] = (-4047);
      intArray0[6] = (-2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctCorrect();
      double double1 = evaluation0.m_SumPriorEntropy;
      evaluation0.areaUnderPRC(10);
      double double2 = evaluation0.falseNegativeRate((-2277));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.m_SumPriorSqrErr;
      double double4 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.areaUnderROC((-2));
      assertEquals(double5, double0, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0099922935754155
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      simpleLogistic0.setHeuristicStop((-3298));
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "%O'2&");
      RandomTree randomTree1 = new RandomTree();
      Capabilities capabilities0 = randomTree1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      randomTree1.setMinNum((-3298));
      Instances instances0 = testInstances0.generate("   * @return the capabilities\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.areaUnderPRC(1963);
      double double1 = evaluation0.falseNegativeRate((-649));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.m_SumPriorSqrErr;
      double double3 = evaluation0.totalCost();
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double3, double1, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0610539192100603
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O1dNSe";
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, (-2));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SparseInstance sparseInstance1 = new SparseInstance(1);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate("getMeasure");
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.falseNegativeRate(4);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.toMatrixString("getMeasure");
      String string0 = evaluation0.toMatrixString("Implementation of a String Kernel for WEKA");
      assertEquals("Implementation of a String Kernel for WEKA\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string0);
      
      double[] doubleArray0 = evaluation1.makeDistribution(0.95);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0892497891955446
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O1dNSe";
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, (-2));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SparseInstance sparseInstance1 = new SparseInstance(1);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate("getMeasure");
      Evaluation evaluation1 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double double0 = evaluation1.m_SumPriorEntropy;
      evaluation0.falseNegativeRate(2);
      evaluation0.toMatrixString("cpd4\"S^zE`+YRXNjzH");
      try { 
        evaluation1.evaluateModel((Classifier) costSensitiveClassifier1, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.210639832268923
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1, true, false);
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      RandomTree randomTree1 = new RandomTree();
      randomTree1.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      randomTree1.setMinNum(0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.falseNegativeRate(4);
      evaluation0.numTruePositives(9);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4094073674518721
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[2];
      SparseInstance sparseInstance0 = new SparseInstance(360);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      instances0.add((Instance) sparseInstance0);
      Instances instances1 = new Instances(instances0, 37);
      Evaluation evaluation0 = new Evaluation(instances1);
      testInstances0.generate("-x <number of folds>\n");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances2 = new Instances("2[8Gx?", arrayList0, 0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.913737189449991
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1, true, false);
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      RandomTree randomTree1 = new RandomTree();
      randomTree1.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      randomTree1.setMinNum(0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      // Undeclared exception!
      try { 
        evaluation0.falseNegativeRate(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7937624878743774
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(250007, false, true);
      simpleLogistic0.getRevision();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2121.2487717, (int[]) null, (-2));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString(false);
      evaluation1.pctCorrect();
      evaluation1.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.69420484659984
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7);
      binarySparseInstance0.dataset();
      TestInstances testInstances0 = new TestInstances();
      wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor(2337.830855053685, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9135378761646815
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(5, false, false);
      simpleLogistic0.getRevision();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 5;
      intArray0[2] = (-2040);
      intArray0[3] = 3;
      intArray0[4] = (-1);
      intArray0[5] = (-2040);
      intArray0[6] = 1;
      intArray0[7] = 117;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5, intArray0, 7);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      evaluation0.weightedMatthewsCorrelation();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.weightedFalsePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.recall((-945));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -945
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.975703369244117
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-3557), true, true);
      simpleLogistic0.getRevision();
      simpleLogistic0.getRevision();
      TestInstances testInstances0 = new TestInstances();
      simpleLogistic0.getRevision();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances2.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedRecall();
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      
      Random.setNextRandom((-1));
      evaluation0.falsePositiveRate(9);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2209360769426625
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "Total Number of Instances          ";
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      RandomTree randomTree1 = new RandomTree();
      Capabilities capabilities0 = randomTree1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      randomTree1.setMinNum(0.0);
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.falseNegativeRate(4);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.meanPriorAbsoluteError();
      double double3 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O1dNSe";
      stringArray0[2] = "-v\n";
      stringArray0[2] = "q";
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0615098824653293
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "Total Number of Instances          ";
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      RandomTree randomTree1 = new RandomTree();
      Capabilities capabilities0 = randomTree1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      randomTree1.setMinNum(0.0);
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.falseNegativeRate(4);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.SFEntropyGain();
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9457994740963103
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.weightedTrueNegativeRate();
      int[] intArray0 = new int[4];
      intArray0[0] = (-4047);
      intArray0[1] = (-1969517198);
      intArray0[2] = (-4047);
      intArray0[3] = (-4047);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, (-7));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      SparseInstance sparseInstance1 = new SparseInstance(6);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-0.25));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.makeDistribution(Double.NaN);
      LogitBoost logitBoost0 = new LogitBoost();
      assertEquals("Threshold on improvement in likelihood.", logitBoost0.likelihoodThresholdTipText());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.135535068634212
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      simpleLogistic0.setUseCrossValidation(false);
      simpleLogistic0.getRevision();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedRecall();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.pctUnclassified();
      assertEquals(double1, double0, 0.01);
      
      evaluation1.weightedFMeasure();
      evaluation2.pctCorrect();
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation2.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7780980041399044
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      RandomTree randomTree0 = new RandomTree();
      Capabilities capabilities0 = randomTree0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("package weka.classifiers;\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.m_SumPriorEntropy;
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.690359696181818
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "Total Number of Instances          ";
      stringArray0[3] = "Total Number of Instances          ";
      stringArray0[4] = "<326y$k";
      stringArray0[5] = "";
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.7976931348623157E308), intArray0, (-2040));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      
      evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9069748374063016
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      RandomTree randomTree0 = new RandomTree();
      RandomTree randomTree1 = new RandomTree();
      randomTree1.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      randomTree0.setMinNum((-230.72));
      Instances instances0 = testInstances0.generate("toSoi@urce");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.falseNegativeRate(1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.361145246685684
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String string0 = Evaluation.getGlobalInfo(classifier0);
      assertEquals("\nSynopsis for weka.classifiers.rules.ZeroR:\n\nClass for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", string0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7);
      binarySparseInstance0.dataset();
      TestInstances testInstances0 = new TestInstances();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2040);
      intArray0[1] = 3;
      intArray0[2] = (-2);
      intArray0[3] = 5;
      intArray0[4] = (-4047);
      intArray0[5] = 6;
      intArray0[6] = (-2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.1, intArray0, 3);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SparseInstance sparseInstance1 = new SparseInstance(4);
      instances0.add((Instance) sparseInstance1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctCorrect();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      
      Random.setNextRandom(6);
      double double2 = evaluation0.incorrect();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numFalsePositives((-3353));
      assertEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "<326y$k";
      stringArray0[5] = "";
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(1473);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1473
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5996159198567415
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O1dNSe";
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, (-2));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SparseInstance sparseInstance1 = new SparseInstance(1);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate("getMeasure");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.weightedRecall();
      ZeroR zeroR0 = new ZeroR();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.toSummaryString("", false);
      Random.setNextRandom(1);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numFalsePositives(400);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6411973863445413
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1, true, false);
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      wrapperSubsetEval0.getRevision();
      RandomTree randomTree1 = new RandomTree();
      Capabilities capabilities0 = randomTree1.getCapabilities();
      RandomTree randomTree2 = new RandomTree();
      Capabilities capabilities1 = randomTree2.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      randomTree1.setMinNum(5);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      randomTree2.setMinNum(1.7976931348623157E308);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.falseNegativeRate(102);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.kappa();
      evaluation0.toSummaryString();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 102;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) (-1);
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = (ZeroR)wrapperSubsetEval0.getClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "setCostMatrix");
      assertNotNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate("distributionForInstance");
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.978585105350746
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "Total Number of Instances          ";
      simpleLogistic0.setUseCrossValidation(true);
      stringArray0[3] = "Total Number of Instances          ";
      stringArray0[4] = "<326y$k";
      simpleLogistic0.getRevision();
      stringArray0[5] = "";
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedRecall();
      evaluation0.getClassPriors();
      evaluation0.pctUnclassified();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "k8V^:2Iomb^`vFhue");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.210639832268923
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "Total Number of Instances          ";
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      randomTree0.setMinNum((-1));
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.falseNegativeRate((-2379));
      double double2 = evaluation0.numTruePositives((-2));
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.getDiscardPredictions();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9785851053507466
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "Total Number of Instances          ";
      simpleLogistic0.setUseCrossValidation(true);
      stringArray0[3] = "Total Number of Instances          ";
      stringArray0[4] = "<326y$k";
      simpleLogistic0.getRevision();
      stringArray0[5] = "";
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedRecall();
      evaluation0.getClassPriors();
      evaluation0.pctUnclassified();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 1473;
      doubleArray0[2] = (double) (-2040);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 1473;
      doubleArray0[5] = (double) 1473;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-2040), (-2040));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2040
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1069977938468947
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "Total Number of Instances          ";
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      RandomTree randomTree1 = new RandomTree();
      randomTree0.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      randomTree0.setMinNum(1.1000000014901161);
      Instances instances0 = testInstances0.generate("Total Number of Instances          ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.falseNegativeRate((-1287));
      double double2 = evaluation0.numTruePositives(16);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1069977938468947
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(0, false, false);
      simpleLogistic0.setUseCrossValidation(true);
      RandomTree randomTree0 = new RandomTree();
      RandomTree randomTree1 = new RandomTree();
      randomTree1.getCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      randomTree0.setMinNum((-230.72));
      Instances instances0 = testInstances0.generate("toSource");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.falseNegativeRate(4);
      // Undeclared exception!
      try { 
        evaluation0.numTruePositives(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.5974519185670517
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.matthewsCorrelationCoefficient(15000);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-219.47);
      doubleArray0[1] = Double.NaN;
      evaluation0.pctCorrect();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedRecall();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("\tUse '-p 0' if no attributes are desired.\n", protectedProperties0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Clusterer clusterer0 = filteredClusterer0.getClusterer();
      MakeDensityBasedClusterer makeDensityBasedClusterer0 = new MakeDensityBasedClusterer(clusterer0);
      Capabilities capabilities0 = makeDensityBasedClusterer0.getCapabilities();
      capabilities0.testWithFail(attribute0);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.toClassDetailsString();
      evaluation0.toSummaryString("8034", true);
      Random.setNextRandom(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.incorrect();
      evaluation1.numFalsePositives(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[3] = (-3525);
      intArray0[4] = 15000;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      intArray0[8] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1000.0, intArray0, 1);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) zeroR0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8375937467988783
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(10.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      evaluation0.pctCorrect();
      assertTrue(evaluation0.getDiscardPredictions());
      
      evaluation0.setDiscardPredictions(false);
      assertEquals(Double.NaN, evaluation0.pctCorrect(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-1791915827);
      try { 
        Evaluation.handleCostOption("q", (-1791915827));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":8PETdM&+b+n7D)";
      stringArray0[1] = ":8PETdM&+b+n7D)";
      try { 
        Evaluation.evaluateModel(":8PETdM&+b+n7D)", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name :8PETdM&+b+n7D).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      Instances instances0 = null;
      CostMatrix costMatrix0 = new CostMatrix(26);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3426497841485943
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(60);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      ConverterUtils.DataSource.read((Loader) serializedInstancesLoader0);
      int int0 = 0;
      Evaluation.handleCostOption((String) null, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      KDTree kDTree0 = new KDTree((Instances) null);
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-427.47101), intArray0, 0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        coverTree0.nearestNeighbour(binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-1791915827);
      Evaluation.handleCostOption("", (-1791915827));
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((-1791915827));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1791915827
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-1791915793);
      Evaluation.handleCostOption("", (-1791915793));
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((-1791915793));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1791915793
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor(1524.29, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "O1dNSe";
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getCapabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      SparseInstance sparseInstance0 = new SparseInstance(5);
      RandomTree randomTree0 = new RandomTree();
      randomTree0.getCapabilities();
      RandomTree randomTree1 = new RandomTree();
      randomTree0.setMinNum(1.0E-10);
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      wrapperSubsetEval1.getEvaluationMeasure();
      CostMatrix costMatrix0 = new CostMatrix(5);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(0.02500000037252903, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      MultiFilter multiFilter0 = new MultiFilter();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int int0 = 30;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(20, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleLogistic0.setUseCrossValidation(true);
      simpleLogistic0.setNumBoostingIterations(2926);
      simpleLogistic0.getRevision();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8034";
      stringArray0[1] = "YQ&w!TsQy=x_N/";
      stringArray0[2] = "YQ&w!TsQy=x_N/";
      stringArray0[3] = "";
      stringArray0[4] = "8034";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = ".xml";
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Instances instances0 = null;
      String[] stringArray0 = new String[4];
      stringArray0[1] = "jn]u3#9}2(-%g";
      Instances.main(stringArray0);
      int int0 = (-396);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      try { 
        Evaluation.evaluateModel((Classifier) randomCommittee0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7081678314421915
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "      }\n";
      Evaluation.main(stringArray0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      RandomTree randomTree0 = new RandomTree();
      AbstractClassifier.runClassifier(randomTree0, stringArray0);
      Evaluation.getGlobalInfo(randomTree0);
      CSVLoader cSVLoader0 = new CSVLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(77);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4031416180176828
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O1dNSe";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "-v\n";
      stringArray0[2] = "-z <class name>\n";
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      Evaluation.getGlobalInfo(classifier0);
      CSVLoader cSVLoader0 = new CSVLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(7);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }
}
