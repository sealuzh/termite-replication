/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:08:36 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)3;
      JRip jRip1 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      JRip jRip2 = new JRip();
      Attribute attribute0 = new Attribute("9kyyX1Zui[HPBKP", (List<String>) null, 10);
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(18);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      jRip_NumericAntd0.covers(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 24.4213;
      jRip0.setOptimizations((-244));
      CoverTree coverTree0 = new CoverTree();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.setConsequent(24.4213);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = null;
      try { 
        jRip_RipperRule1.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("r\"zQ##,[@r=,U", arrayList0, 2);
      jRip_NumericAntd0.splitData(instances0, 4, (-1.0));
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      attribute1.toString();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      binarySparseInstance0.dataset();
      jRip_NominalAntd0.splitData(instances0, 1, (-1069.8189922278182));
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("c:S}[OTN%[Q", (List<String>) null, protectedProperties1);
      jRip0.getFolds();
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2727.851919424177), doubleArray0);
      binarySparseInstance0.dataset();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-1.0), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 24.4213;
      doubleArray0[1] = 24.4213;
      doubleArray0[2] = 24.4213;
      doubleArray0[3] = 24.4213;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(24.4213, doubleArray0);
      binarySparseInstance0.dataset();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = new Locale("[L");
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      arrayList0.replaceAll(unaryOperator0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Bc&d|h@");
      Attribute attribute0 = new Attribute("@data", list0);
      attribute0.copy("(X<'y(!cL*lG!:rYR");
      jRip0.setOptions((String[]) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2240585736572336
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.optimizationsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 4;
      intArray0[6] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, (-1190));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd1 = jRip1.new NumericAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1968.0);
      doubleArray0[4] = 1657.403115;
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.dataset();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 0.0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6241026221599717
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.optimizationsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 4;
      intArray0[6] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, (-1190));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList1, 9);
      Attribute attribute2 = new Attribute("string", instances0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      Instances instances1 = new Instances("real", arrayList1, 9);
      instances1.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "): ";
      JRip jRip0 = new JRip();
      String string0 = jRip0.seedTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("The seed used for randomizing the data.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.921533775932955
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "No selected attributes\n";
      String[] stringArray1 = jRip0.getOptions();
      stringArray0[1] = "o]?IjcVh_<]c_2H";
      stringArray0[2] = "1#E;LoXfczl";
      jRip0.setDebug(false);
      stringArray0[3] = "";
      jRip0.setOptions(stringArray1);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s;.e");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2136);
      jRip_RipperRule0.prune(instances0, false);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-1368.5398207176);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      binarySparseInstance0.dataset();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      int[] intArray0 = new int[8];
      intArray0[0] = 66;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = 6;
      intArray0[6] = 6;
      intArray0[7] = 6;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-99.0), intArray0, 682);
      binarySparseInstance1.setDataset((Instances) null);
      Attribute attribute0 = new Attribute("t,");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip0.debugTipText();
      jRip_RipperRule1.getRevision();
      // Undeclared exception!
      try { 
        jRip_NumericAntd1.splitData((Instances) null, 2210.37534959253, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6629959770341314
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.toString();
      AbstractClassifier.makeCopy(jRip0);
      jRip0.setOptimizations(0);
      jRip0.getOptions();
      jRip0.setUsePruning(true);
      jRip0.getTechnicalInformation();
      jRip0.getOptimizations();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      Utils.SMALL = (-1368.5398207176);
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.copy((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      Object object0 = jRip_NominalAntd0.copy();
      attribute1.equals(object0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 2);
      double double0 = (-1.0);
      RuleStats.partition(instances0, 1);
      // Undeclared exception!
      try { 
        attribute1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = arrayList0.subList(0, 0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("ISBN-13", list2, protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      
      String string1 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals("8118", string1);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "No selected attributes\n";
      stringArray0[1] = "CQGL\tp]vB([S6vnR|";
      stringArray0[2] = "1#E;LoXfczl";
      stringArray0[3] = "";
      stringArray0[4] = " +\n";
      stringArray0[5] = "sTS$RCOM./";
      stringArray0[6] = "CQGL\tp]vB([S6vnR|";
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("CQGL\tp]vB([S6vnR|");
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => CQGL\tp]vB([S6vnR|=", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      jRip0.getDebug();
      jRip0.debugTipText();
      jRip0.usePruningTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip0.setSeed((-2L));
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip1.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 24.4213;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(24.4213, doubleArray0);
      binarySparseInstance0.dataset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass(3934.33, (Instances) null, (-1964.0), (-1964.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1987.358877;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 1987.358877;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      binarySparseInstance0.dataset();
      byte byte0 = (byte)2;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)3;
      byteArray0[7] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass((-1.0), (Instances) null, (byte)11, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-1368.5398207176);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      jRip_RipperRule0.size();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("", list0);
      Attribute attribute1 = attribute0.copy("");
      Attribute attribute2 = attribute1.copy("@attribute");
      attribute1.addStringValue(attribute2, 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "No selected attributes\n";
      stringArray0[1] = "o]?IjcVh_<]c_2H";
      jRip0.setOptimizations((-1946));
      CoverTree coverTree0 = new CoverTree();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1946));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.878666739983584
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals(1L, jRip0.getSeed());
      
      DecisionTable decisionTable0 = new DecisionTable();
      jRip0.setSeed(0L);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("W>S", arrayList0, 2);
      Attribute attribute0 = new Attribute("", instances0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = (-15);
      intArray0[2] = 1;
      intArray0[3] = 3;
      intArray0[4] = 4;
      intArray0[5] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-508.178542812), intArray0, 1);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip0.getFolds();
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.getAccu();
      binarySparseInstance0.setDataset(instances0);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "No selected attributes\n";
      stringArray0[2] = "1#E;LoXfczl";
      stringArray0[3] = "";
      stringArray0[4] = " +\n";
      stringArray0[5] = "sTS$RCOM./";
      stringArray0[6] = "%. ~%;2z";
      stringArray0[7] = "namely";
      stringArray0[8] = "";
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = jRip_RipperRule0.getConsequent();
      assertEquals((-1.0), double0, 0.01);
      
      Attribute attribute0 = new Attribute("", "", 1860);
      String string0 = jRip0.debugTipText();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Whether debug information is output to the console.", string0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6241026221599713
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[22];
      intArray0[0] = 1;
      intArray0[11] = 3;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 4;
      intArray0[6] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, (-1190));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList1, 9);
      Attribute attribute2 = new Attribute("string", instances0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      Instances instances1 = new Instances("real", arrayList1, 9);
      instances1.add((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "No selected attributes\n";
      stringArray0[1] = "o]?IjcVh_<]c_2H";
      stringArray0[2] = "1#E;LoXfczl";
      stringArray0[3] = "o]?IjcVh_<]c_2H";
      stringArray0[4] = " +\n";
      stringArray0[5] = "1#E;LoXfczl";
      stringArray0[6] = "%. ~%;2z";
      stringArray0[7] = "namely";
      stringArray0[8] = "";
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      double double0 = jRip_RipperRule0.getConsequent();
      assertEquals((-1.0), double0, 0.01);
      
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals(3, jRip0.getFolds());
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      assertFalse(boolean0);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      boolean boolean1 = jRip0.getUsePruning();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean1 == boolean0);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      jRip0.setOptimizations(0);
      Utils.SMALL = (-1368.5398207176);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "N7IVKWa";
      stringArray0[1] = "FNl@-/#$6]6W;3$";
      stringArray0[2] = "Whether to generate a regression tree/rule instead of a model tree/rule.";
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      jRip1.setOptimizations(101);
      AbstractClassifier.runClassifier(jRip1, stringArray0);
      jRip0.setOptimizations(101);
      jRip0.setUsePruning(true);
      jRip0.getTechnicalInformation();
      jRip0.getOptimizations();
      DecisionTable decisionTable0 = new DecisionTable();
      assertEquals("Sets whether IBk should be used instead of the majority class.", decisionTable0.useIBkTipText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-1368.54);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("", list0);
      Attribute attribute1 = attribute0.copy("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 24.4213;
      doubleArray0[1] = 24.4213;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4584.8865, doubleArray0);
      binarySparseInstance0.dataset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(24.4213, doubleArray0);
      binarySparseInstance1.dataset();
      jRip0.getCapabilities();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.524673352026602
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attribute attribute0 = new Attribute("Alpha is used for estimating the probability tables and can be interpreted as the initial count on each value.", linkedList0, 85);
      attribute0.indexOfValue("c:S}[OTN%[Q");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1379.584313;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 3;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("@end", linkedList0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip_RipperRule1.hasAntds();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.511759218569271
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("r\"zQ##,[@r=,U", arrayList0, 2);
      jRip_NumericAntd0.splitData(instances0, 4, (-1.0));
      attribute1.toString();
      JRip jRip1 = new JRip();
      Attribute attribute2 = new Attribute("@attribute '' numeric", 4);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.getAccu();
      JRip jRip2 = new JRip();
      try { 
        jRip0.rulesetForOneClass((-146.44043385), instances0, 2, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7091199915606667
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)3;
      JRip jRip1 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      JRip jRip2 = new JRip();
      Attribute attribute0 = new Attribute("9kyyX1Zui[HPBKP", (List<String>) null, (byte)3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      jRip_NumericAntd0.covers(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip_RipperRule0.covers((Instance) null);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "CQGL\tp]vB([S6vnR|";
      stringArray0[3] = "";
      stringArray0[4] = " +\n";
      stringArray0[5] = "sTS$RCOM./";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[6] = "CQGL\tp]vB([S6vnR|";
      jRip0.setSeed(0L);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute2 = new Attribute("relational", (List<String>) null, protectedProperties0);
      attribute0.indexOfValue("integer");
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(0.0, double0, 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      attribute0.copy("C!");
      JRip.NumericAntd jRip_NumericAntd1 = jRip1.new NumericAntd(attribute1);
      String string0 = jRip_NumericAntd0.toString();
      assertTrue(jRip2.getCheckErrorRate());
      assertEquals(1L, jRip2.getSeed());
      assertTrue(jRip2.getUsePruning());
      assertEquals(2.0, jRip2.getMinNo(), 0.01);
      assertEquals(2, jRip2.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip2.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(" <= NaN", string0);
      assertFalse(jRip2.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      attribute0.indexOfValue("integer");
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, double0, 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      Attribute attribute2 = new Attribute("integer", (List<String>) null);
      attribute1.copy("");
      JRip.NumericAntd jRip_NumericAntd1 = jRip1.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd1.toString();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(1L, jRip1.getSeed());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(" <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "No selected attributes\n";
      stringArray0[1] = "o]?IjcVh_<]c_2H";
      stringArray0[2] = "1#E;LoXfczl";
      JRip.main(stringArray0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("No selected attributes\n", list0);
      Attribute.typeToString(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttrValue();
      jRip0.setMinNo(0);
      jRip_NumericAntd0.getAccuRate();
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      
      Attribute attribute0 = new Attribute("vn0q6%8@/AA`7a", 6);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttr();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      StringReader stringReader0 = new StringReader("K*nA2loyVVF?\"F;G3");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 4);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[K*nA2loyVVF?], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      String[] stringArray0 = new String[22];
      stringArray0[0] = "$1M8[DSuC[Bp/.R";
      stringArray0[2] = "   +  ";
      stringArray0[3] = "";
      stringArray0[4] = " Consequent noU set yet.";
      stringArray0[5] = "\tDon't replace missing values";
      stringArray0[6] = "ZBMNvC";
      stringArray0[7] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(8);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "No selected attributes\n";
      stringArray0[1] = "o]?IjcVh_<]c_2H";
      stringArray0[2] = "1#E;LoXfczl";
      stringArray0[4] = " +\n";
      stringArray0[5] = "sTS$RCOM./";
      stringArray0[6] = "%. ~%;2z";
      stringArray0[7] = "namely";
      stringArray0[8] = "";
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom((-2732L));
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      MockRandom mockRandom1 = new MockRandom();
      try { 
        costMatrix0.applyCostMatrix((Instances) null, mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "JI9a_&PoB";
      stringArray0[1] = "+o`o";
      stringArray0[2] = "";
      JRip.main(stringArray0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1282));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("The minimum total weight of the instances in a rule.", "", 92);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.value = (double) 1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(92, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.setValueSparse((-155), 1);
      jRip_NominalAntd0.covers(sparseInstance0);
      JRip jRip2 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip2.new NumericAntd(attribute0);
      binarySparseInstance0.value(attribute0);
      binarySparseInstance0.toString(attribute0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.equalHeadersMsg((Instance) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.524673352026602
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      Attribute attribute1 = attribute0.copy("");
      attribute1.equals("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip0.optimizationsTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 4;
      intArray0[6] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, (-1190));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList1, 9);
      Attribute attribute2 = new Attribute("string", instances0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip1.getFolds();
      JRip jRip2 = new JRip();
      Attribute attribute3 = new Attribute("5cy$A*m(\"B^M`@fN'=", 4);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute3);
      jRip1.foldsTipText();
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-1368.5398207176);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 0;
      AbstractClassifier.makeCopies(jRip0, 0);
      String string0 = "p6vqeekvI8(";
      // Undeclared exception!
      try { 
        jRip0.getMeasure("p6vqeekvI8(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p6vqeekvI8( not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 24.4213;
      doubleArray0[1] = 24.4213;
      doubleArray0[2] = 24.4213;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(24.4213, doubleArray0);
      binarySparseInstance0.dataset();
      jRip0.setUsePruning(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      boolean boolean0 = jRip0.getCheckErrorRate();
      Attribute attribute0 = new Attribute("s,pj2W", "", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 4;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 1);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      boolean boolean1 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-1368.5398207176);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      binarySparseInstance0.dataset();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[8];
      intArray0[0] = 66;
      intArray0[1] = 6;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AbstractClassifier.makeCopies(jRip0, 8);
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = 6;
      intArray0[6] = 6;
      intArray0[7] = 6;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-99.0), intArray0, 682);
      binarySparseInstance1.setDataset((Instances) null);
      jRip0.getMinNo();
      Attribute attribute0 = new Attribute("EDITION", (List<String>) null);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip_RipperRule0.covers((Instance) null);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      String string0 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1130.7710076983;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance0.dataset();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      double double0 = jRip_RipperRule0.getConsequent();
      assertEquals((-1.0), double0, 0.01);
      
      JRip.RipperRule jRip_RipperRule2 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertNotSame(jRip_RipperRule0, jRip_RipperRule2);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule2.getConsequent(), 0.01);
  }
}
