/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:48:01 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.text.ChoiceFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1247, (-5009));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OHp>R|7O5m\"", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 12);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5.70001 == 5.7 ? ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.JAPANESE;
      locale1.getDisplayVariant(locale0);
      locale0.getExtensionKeys();
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "@X_EK87", objectArray0);
      mockPrintWriter0.print(false);
      mockPrintWriter0.println();
      matrix0.write(printWriter0);
      matrix0.toMatlab();
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.001953125;
      doubleArray1[1] = (double) 1247;
      doubleArray1[3] = 1.001953125;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-5003), (-5003));
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-5003);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(22);
      pipedInputStream1.skip((-5003));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.PRC;
      mockPrintWriter0.format("Increasing derivatives (beta condition): ", (Object[]) doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      mockPrintWriter0.println((double) 22);
      mockPrintWriter0.print('j');
      char[] charArray0 = new char[0];
      mockPrintWriter0.print(charArray0);
      Locale locale1 = Locale.FRENCH;
      pipedOutputStream0.close();
      pipedOutputStream0.flush();
      NumberFormat numberFormat1 = NumberFormat.getPercentInstance(locale0);
      matrix0.print((PrintWriter) mockPrintWriter0, numberFormat1, 22);
      Locale locale2 = Locale.FRENCH;
      pipedOutputStream0.flush();
      NumberFormat.getPercentInstance(locale1);
      matrix0.print((PrintWriter) mockPrintWriter0, numberFormat0, 26);
      double[] doubleArray2 = new double[0];
      Optimization.solveTriangle(matrix0, doubleArray2, false, (boolean[]) null);
      Random.setNextRandom((-467));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-5003), (-5003));
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-5003);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(22);
      pipedInputStream1.skip((-5003));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.PRC;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Increasing derivatives (beta condition): ");
      NumberFormat.getIntegerInstance(locale0);
      mockPrintWriter0.println((double) 22);
      mockPrintWriter0.print('j');
      char[] charArray0 = new char[0];
      mockPrintWriter0.print(charArray0);
      Locale locale1 = Locale.FRENCH;
      mockPrintWriter0.format(locale1, "", (Object[]) doubleArray0);
      pipedOutputStream0.close();
      pipedOutputStream0.flush();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      matrix0.print((PrintWriter) mockPrintWriter0, numberFormat0, 22);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      Optimization.solveTriangle(matrix0, doubleArray2, false, booleanArray0);
      assertArrayEquals(new double[] {(-5003.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      int int0 = (-5003);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1247, (-5003));
      double[] doubleArray1 = new double[17];
      doubleArray1[0] = (double) 1247;
      boolean[] booleanArray0 = new boolean[7];
      String[] stringArray0 = new String[4];
      stringArray0[1] = "The name(s) of the author(s), in the format described in the LaTeX book.";
      stringArray0[2] = " -O1@?)9";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@X_EK87");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", (Object[]) doubleArray0);
      char[] charArray0 = new char[2];
      charArray0[1] = 'V';
      printWriter0.println(charArray0);
      matrix0.write(printWriter0);
      stringArray0[3] = "obj. funcion: ";
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = (-2563);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 939.47870069;
      doubleArray0[0] = doubleArray1;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-2563), (-2563));
      boolean[] booleanArray0 = new boolean[2];
      matrix0.normF();
      boolean boolean0 = true;
      Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      Locale locale0 = Locale.ITALY;
      NumberFormat.getIntegerInstance(locale0);
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1248.036734748171;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 1.000030517578125;
      doubleArray3[1] = 960.0;
      doubleArray3[2] = (double) (-5009);
      doubleArray3[3] = (double) (-5009);
      doubleArray3[4] = 6.0;
      doubleArray3[5] = 2493.8952949;
      doubleArray3[6] = 1.000030517578125;
      doubleArray3[7] = 960.0;
      doubleArray1[7] = doubleArray3;
      doubleArray1[8] = doubleArray0;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray1, 2072, (-777));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8121790402101223
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      int int0 = 0;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.addElement(42);
      optimization_DynamicIntArray0.addElement(0);
      int int1 = 30;
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(30);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.addElement((-1036));
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt((-1036));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-5003), (-5003));
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-5003);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(22);
      pipedInputStream1.skip((-5003));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.PRC;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Increasing derivatives (beta condition): ");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      mockPrintWriter0.println((double) 22);
      mockPrintWriter0.print('j');
      char[] charArray0 = new char[0];
      mockPrintWriter0.print(charArray0);
      Locale locale1 = Locale.FRENCH;
      pipedOutputStream0.close();
      pipedOutputStream0.flush();
      NumberFormat numberFormat1 = NumberFormat.getPercentInstance(locale0);
      matrix0.print((PrintWriter) mockPrintWriter0, numberFormat1, 22);
      matrix0.print((PrintWriter) mockPrintWriter0, numberFormat0, (-5003));
      Optimization.solveTriangle(matrix0, doubleArray1, true, (boolean[]) null);
      Random.setNextRandom(200);
      Random.setNextRandom(200);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 0;
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      int int0 = optimization_DynamicIntArray0.size();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 1247, (-5009));
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.001953125;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "URL";
      stringArray0[1] = "";
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray0, 1519, 156);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 156;
      doubleArray2[1] = (-5980.062960792);
      doubleArray2[2] = (double) 156;
      doubleArray2[3] = 6.7;
      double[] doubleArray3 = Optimization.solveTriangle(matrix0, doubleArray2, false, (boolean[]) null);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.POSITIVE_INFINITY}, doubleArray3, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-5009), (-5009));
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.001953125;
      boolean[] booleanArray0 = new boolean[7];
      matrix0.toMatlab();
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.close();
      pipedInputStream0.skip((-5009));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = Locale.PRC;
      mockPrintWriter0.format("Cannot find feasible lambda", (Object[]) doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      Locale.forLanguageTag("hs[E");
      pipedOutputStream0.flush();
      NumberFormat.getPercentInstance(locale0);
      matrix0.print((PrintWriter) mockPrintWriter0, numberFormat0, 1411);
      booleanArray0[6] = false;
      Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      Random.setNextRandom((-2814));
      Random.setNextRandom((-5009));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-94);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-33);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-126);
      doubleArray0[1] = (double) (byte) (-126);
      doubleArray0[2] = (double) (byte) (-126);
      doubleArray0[3] = (double) (byte) (-94);
      doubleArray0[4] = (double) (byte) (-126);
      doubleArray0[5] = (double) (byte) (-33);
      doubleArray0[6] = (double) (byte)112;
      doubleArray0[7] = (double) (byte) (-126);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, true, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2350475846462445
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.getRevision();
      int int0 = 0;
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(472);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.removeAllElements();
      int int1 = (-823);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4337150271040935
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(1519);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement((-1001));
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement(1519);
      optimization_DynamicIntArray0.elementAt(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement(0);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt((-1167));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
