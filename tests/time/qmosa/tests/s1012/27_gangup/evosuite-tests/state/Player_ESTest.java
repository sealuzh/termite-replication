/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:58:47 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.362042155790716
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(1066, "module.ModuleBrowserDialog$ModuleFilter", (-20));
      player0.setY(2126.02F);
      player0.setDead();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-1);
      player0.unpack(byteArray0);
      Player player1 = new Player();
      player0.add(player1);
      player0.pack();
      player1.remove(player0);
      player1.setX((-875.0F));
      player1.setDead();
      player0.isConnected();
      player1.getMoney();
      player1.isConnected();
      player0.gangStrength();
      player0.setDead((long) (-20));
      player1.reset(true);
      player0.isDead();
      player1.getMoney();
      int int0 = player0.getPictureId();
      assertEquals(2126.02F, player0.getY(), 0.01F);
      assertEquals((-20), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(3866, "module.ModuleBrowserDialog$ModuleFilter", (-1));
      Party party0 = player0.prev;
      player0.add((Party) null);
      player0.setZ((-1));
      player0.getName();
      player0.pack();
      player0.isJoinOK(player0, false);
      player0.setY(2126.02F);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream2.skip(1066);
      mockFileInputStream2.mark((short)4919);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream2, mockFileInputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SJ,Bmm");
      Player player1 = new Player((-1), "0.0.0.0", "module.ModuleBrowserDialog$ModuleFilter", (-4928), (-8267));
      player0.setConnected(false);
      assertEquals((-1.0F), player0.getZ(), 0.01F);
      
      int int0 = player1.getStrength();
      assertEquals((-8267), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sUm");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sUm");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Player player0 = new Player(1570, "", "", (-188));
      byte[] byteArray0 = new byte[0];
      player0.unpack(byteArray0);
      player0.setDead((long) (-188), false);
      player0.setDead();
      player0.reset(false);
      player0.getIP();
      player0.getMoney();
      player0.getIP();
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.023907271562916
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      player0.add(party0);
      player0.setZ(0);
      player0.getName();
      player0.getX();
      player0.pack();
      player0.isJoinOK(player0, true);
      player0.setY((-1));
      player0.setX(0.0F);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream1.mark((-1501));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream1, pushbackInputStream0);
      player0.setX((-29));
      player0.isConnected();
      player0.getMoney();
      player0.isConnected();
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.520782696495816
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(66, "0.0.0.0", "0.0.0.0", 298);
      Player player1 = new Player((short)4919, "0.0.0.0", "H", (-1), (short)4919);
      player1.getSubparty();
      player1.setZ((-1054.3213F));
      player0.getTimeOfDeath();
      Player player2 = new Player(3866, "H", 4519);
      player1.setJoinOK(player2, false);
      Player player3 = new Player();
      player0.setDead();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      player3.unpack(byteArray0);
      player3.add(player0);
      Player player4 = new Player(298, "0.0.0.0", "0.0.0.0", 298, (-21673));
      player4.pack();
      player1.setX((short)4919);
      player3.isConnected();
      player2.getMoney();
      player4.gangStrength();
      player0.setDead((long) (short)4919);
      assertEquals(4919L, player0.getTimeOfDeath());
      
      player2.reset(true);
      boolean boolean0 = player3.isJoinOK(player2, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.566745971783185
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(3866, "]kAuDGF@", "", 3866);
      player0.getSubparty();
      player0.setZ(682.237F);
      player0.getTimeOfDeath();
      player0.id = 3866;
      player0.setConnected(false);
      Player player1 = new Player(3866, "state.Player$JoinInfo", 699);
      player1.setConnected(false);
      player0.setJoinOK(player1, false);
      Player player2 = new Player();
      player2.setDead();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-1);
      player2.unpack(byteArray0);
      player2.add(player0);
      player0.pack();
      player2.setX(0.1F);
      player2.isConnected();
      player0.getMoney();
      player0.isConnected();
      player0.gangStrength();
      player2.setDead(0L);
      player2.reset(true);
      player0.isJoinOK(player2, false);
      assertFalse(player2.isDead());
      assertEquals(0, player2.getPictureId());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "module.ModuleBrowserDialog$ModuleFilter");
      Player player0 = new Player();
      player0.pack();
      player0.setX(0.0F);
      player0.getX();
      MockPrintStream mockPrintStream0 = new MockPrintStream("module.ModuleBrowserDialog$ModuleFilter");
      PrintStream printStream0 = mockPrintStream0.append('N');
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      player0.pack(dataOutputStream0);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.323009262423563
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.prev;
      player0.add((Party) null);
      player0.setZ((-3733));
      player0.getName();
      Player player1 = new Player(4919, "Player-1", "Player-1", (-3733));
      player1.getX();
      player1.pack();
      player0.setDead((-3250L));
      player1.pack();
      player0.setMoney(0.2F);
      player0.setDead();
      player0.getTimeOfDeath();
      Player player2 = new Player(1288);
      player1.setDead(1L, true);
      player0.isDead();
      player1.isJoinOK(player2, false);
      float float0 = player0.getZ();
      assertTrue(player0.isDead());
      assertEquals((-3733.0F), float0, 0.01F);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(0, "Player", "Player", (-3121));
      Player player1 = new Player((-1391), "@(nCKet5YIgV4l.*Lo+", (short)4919);
      player1.boss = (Party) player0;
      player0.add(player1);
      player0.getName();
      player0.getX();
      player0.setDead((long) (-3121));
      player1.pack();
      player1.setDead((long) (-1391), true);
      player1.setDead();
      player0.getTimeOfDeath();
      Player player2 = new Player(0);
      player1.setZ(214.0857F);
      player2.isJoinOK(player1, true);
      player2.isJoinOK(player1, false);
      assertTrue(player1.isDead());
      assertEquals(4919, player1.getPictureId());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3031513228679628
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(3866, "]kAuDGF@", "", 3866);
      player0.getSubparty();
      player0.setZ((short)4919);
      player0.getTimeOfDeath();
      player0.id = 3866;
      Player player1 = new Player(3866, "state.Player$JoinInfo", 3866);
      player0.setJoinOK(player1, false);
      Player player2 = new Player();
      player2.setDead();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-1);
      player0.gangStrength();
      player1.isJoinOK(player2, false);
      Player player3 = new Player(2, "", (String) null, (byte) (-1));
      player3.toString();
      player3.getX();
      player3.getZ();
      player2.gangStrength();
      player0.setY(1.0F);
      assertEquals(4919.0F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.301160282549396
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(50);
      Player player1 = new Player(0, "bpc2vx 9nA}iK6[", "Tb.1bh_ZOdxR#tu'!", 1456, 0);
      player1.setX(0);
      player1.gangStrength();
      player0.setDead((long) 1456, false);
      player0.boss = (Party) player1;
      player0.isJoinOK(player1, false);
      player0.setY((-3324.956F));
      player1.setX((short)4919);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      player1.getStrength();
      player0.setJoinOK(player1, false);
      player1.setDead();
      player0.pack();
      float float0 = player0.getY();
      assertEquals(1456L, player0.getTimeOfDeath());
      assertEquals((-3324.956F), float0, 0.01F);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((-2508), "oK%hkxRXEo", "oK%hkxRXEo", (-1727));
      player0.setY(479.0F);
      player0.pack();
      player0.setX(0.0F);
      player0.isDead();
      player0.getY();
      player0.getX();
      player0.setX((-2258.0232F));
      long long0 = player0.getTimeOfDeath();
      assertEquals((-2258.0232F), player0.getX(), 0.01F);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1737502027185687
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(50);
      Player player1 = new Player(0, "bpc2vx 9nA}iK6[", "Tb.1bh_ZOdxR#tu'!", 1456, 0);
      player1.setX(0);
      player1.gangStrength();
      Player player2 = new Player(1456, "Player", 1);
      player2.isJoinOK(player1, false);
      player0.setY((-1.0F));
      player1.setX(0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream1.mark(1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, mockFileInputStream1);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream1);
      player0.unpack(dataInputStream0);
      player2.getStrength();
      player1.setJoinOK(player0, false);
      player2.setDead();
      assertEquals(1392409281320L, player2.getTimeOfDeath());
      
      player1.getName();
      assertEquals(0.0F, player1.getX(), 0.01F);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((-3428), ".*[.]class$", (String) null, 66);
      player0.getSubparty();
      Player player1 = new Player(10, ".*[.]class$", ".*[.]class$", 0, 10);
      player1.add(player0);
      player1.setZ((short)4919);
      player0.getName();
      player1.pack();
      Player player2 = new Player((-613), "cLan@j2H#", (-3428));
      player1.isJoinOK(player0, true);
      player0.setY(480.0F);
      player1.setX((short)4919);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor0);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, "");
      MockFile mockFile0 = new MockFile(uRI1);
      MockFileInputStream mockFileInputStream3 = null;
      try {
        mockFileInputStream3 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((-3428), "", (-1));
      Party party0 = player0.prev;
      player0.add((Party) null);
      player0.setZ((-13.826612F));
      player0.getName();
      player0.pack();
      Player player1 = new Player(3, "", "", 0, 0);
      player0.isJoinOK(player1, false);
      player1.setY(0.0F);
      player0.setX((-2885.219F));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.94218229742502
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(3866, "]kAuDGF@", "", 3866);
      player0.getSubparty();
      player0.setZ(682.237F);
      player0.getTimeOfDeath();
      player0.id = 3866;
      Player player1 = new Player(3866, "state.Player$JoinInfo", 699);
      player1.setX(10.0F);
      player1.getSubparty();
      player1.getSubparty();
      player0.isJoinOK(player1, false);
      player0.toString();
      player1.getX();
      player0.getZ();
      player1.gangStrength();
      player0.setY(682.237F);
      assertEquals(682.237F, player0.getZ(), 0.01F);
      
      float float0 = player1.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.052754235510318
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((-3428), (String) null, 66);
      Party party0 = player0.prev;
      Player player1 = new Player(66, (String) null, ".*[.]class$", 4919, (-303));
      player1.add((Party) null);
      Player player2 = new Player(2, " ", ".*[.]class$", (short)4919);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)55;
      player2.unpack(byteArray0);
      player2.setZ(855.0F);
      player1.getName();
      byte[] byteArray1 = player2.pack();
      Player player3 = new Player(66, "state.Party", (-3428));
      player0.isJoinOK(player3, true);
      player3.setY((-303));
      player0.setX(855.0F);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor0);
      try { 
        mockFileInputStream2.read(byteArray1, 3403, 14335);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.046430838943019
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(5, "'H", "}tlG)odAf$edF>8,x", 10);
      player0.id = 10;
      player0.reset(false);
      player0.setZ(10);
      Party party0 = player0.boss;
      player0.add((Party) null);
      player0.setDead((long) 10);
      player0.getX();
      player0.getPictureId();
      player0.getTimeOfDeath();
      player0.type();
      player0.getName();
      player0.setX(10L);
      assertEquals(10.0F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.prev;
      player0.add((Party) null);
      player0.setZ(0);
      player0.getName();
      player0.getX();
      player0.pack();
      player0.isJoinOK(player0, false);
      player0.setY((-1));
      player0.setX(0.0F);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream1.mark((-1501));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream1, pushbackInputStream0);
      mockFileInputStream0.release();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.unpack(dataInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.getStrength();
      player0.setJoinOK(player0, true);
      player0.setDead();
      player0.getName();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0298322221883276
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(3866, "]kAuDGF@", "", 3866);
      Player player1 = new Player((short)4919, ".*[.]class$", "Mv}_~5", 4919);
      int int0 = player0.getPictureId();
      assertEquals(3866, int0);
      
      Player player2 = new Player();
      Player player3 = new Player(3866, "gfg\"IfHbZb8D~V", "Mv}_~5", 3866);
      player3.setZ(0.0F);
      player3.isJoinOK(player1, true);
      assertEquals(0.0F, player3.getZ(), 0.01F);
      
      player1.toString();
      float float0 = player1.getX();
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(".*[.]class$", player1.getIP());
      
      Player player4 = new Player((-8267));
      player4.getZ();
      Player player5 = new Player(4919, "gfg\"IfHbZb8D~V", "gfg\"IfHbZb8D~V", (short)4919, 4919);
      int int1 = player5.gangStrength();
      assertEquals(4919, int1);
      
      player4.setY(0.0F);
      assertTrue(player4.isConnected());
      assertEquals(1, player4.getStrength());
      assertFalse(player4.isDead());
      assertEquals(0.0F, player4.getY(), 0.01F);
      assertEquals(0L, player4.getTimeOfDeath());
      assertEquals(0, player4.getPictureId());
      assertEquals("Player-8267", player4.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = null;
      Player player0 = new Player();
      player0.reset(false);
      player0.getPictureId();
      player0.getIP();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.100479061876036
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(0, "", 0);
      Player player1 = new Player();
      player0.head = (Party) player1;
      player0.prev = (Party) player1;
      player0.setY(0);
      player0.pack();
      player0.setX(0.0F);
      player0.isDead();
      player0.getY();
      player0.getX();
      player0.setX(0.0F);
      player0.getTimeOfDeath();
      player0.getPictureId();
      player0.getZ();
      int int0 = player0.gangStrength();
      assertEquals(0.0F, player0.getX(), 0.01F);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player();
      player0.getSubparty();
      player0.setX(0.0F);
      player0.setZ(0.0F);
      player0.getY();
      player0.getPictureId();
      boolean boolean0 = true;
      player0.reset(true);
      player0.setY(0);
      player0.type();
      player0.getIP();
      MockPrintStream mockPrintStream0 = new MockPrintStream("0.0.0.0");
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "0.0.0.0", (-1849), 4919);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.262384640607128
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(0, "Player", "Player", (-3121));
      Player player1 = new Player((-1391), "@(nCKet5YIgV4l.*Lo+", (short)4919);
      player1.boss = (Party) player0;
      player0.add(player1);
      player1.setZ((-1391));
      player1.id = 2488;
      player0.getName();
      player1.setY(0.2F);
      player0.getX();
      player0.pack();
      player1.setDead(0L);
      player1.pack();
      player0.setDead(0L, true);
      player0.setMoney(1169.61F);
      player1.setDead();
      player1.getTimeOfDeath();
      player0.isBoss();
      player1.isJoinOK(player0, false);
      player0.getName();
      float float0 = player0.getMoney();
      assertEquals(1169.61F, float0, 0.01F);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.260960815263037
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(3866, "module.ModuleBrowserDialog$ModuleFilter", (-1));
      Party party0 = player0.prev;
      player0.add((Party) null);
      player0.setZ((-1));
      player0.getName();
      player0.getX();
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player(1066, "Player", (-20));
      player1.isJoinOK(player0, false);
      player1.setY(2126.02F);
      player0.setX(875.4829F);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream2.mark((short)4919);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream2, mockFileInputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SJ,Bmm");
      Player player2 = new Player((-1), "0.0.0.0", "module.ModuleBrowserDialog$ModuleFilter", (-4928), (-8267));
      player2.unpack(byteArray0);
      player0.setConnected(false);
      assertEquals((-1.0F), player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((-3428), ".*[.]class$", (String) null, (-3428));
      player0.getSubparty();
      player0.setZ((-3428));
      Player player1 = new Player(3, ".*[.]class$", 699);
      boolean boolean0 = false;
      player0.setJoinOK(player1, false);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7567169975450474
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(0, "", 0);
      Player player1 = new Player((short)4919, "", (-642));
      Player player2 = new Player(5, "", "", (short)4919, 5);
      Player player3 = new Player((short)4919, " P{]W", 24217);
      player3.setX(0);
      player2.getSubparty();
      player3.toString();
      player1.getX();
      player1.getZ();
      player0.gangStrength();
      player2.setY(0.2F);
      assertEquals(0.2F, player2.getY(), 0.01F);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6139624513772333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player((-3428), ".*[.]class$", (String) null, (-3428));
      player0.getSubparty();
      player0.setZ((-3428));
      player0.getTimeOfDeath();
      Player player1 = new Player(3, ".*[.]class$", 699);
      player0.setJoinOK(player1, false);
      byte[] byteArray0 = player1.pack();
      player1.setDead();
      Player player2 = new Player();
      player2.unpack(byteArray0);
      player1.add(player0);
      Player player3 = new Player();
      player3.pack();
      player3.setX(3);
      player0.setDead();
      player1.isConnected();
      player0.getMoney();
      player0.isConnected();
      player2.gangStrength();
      player2.setY((-3254.3118F));
      player1.setDead(1L);
      player2.reset(true);
      player3.isJoinOK(player0, true);
      player1.getMoney();
      player1.getIP();
      assertEquals(1L, player1.getTimeOfDeath());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player();
      player0.getMoney();
      player0.remove((Party) null);
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      
      player0.setMoney(0.2F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IJOjYR11rE'5-");
      Player player1 = new Player((short)4919, "IJOjYR11rE'5-", "", (short)4919, (short)4919);
      player1.setConnected(true);
      assertEquals(10.0F, player1.getX(), 0.01F);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(0, "", 0);
      Player player1 = new Player();
      player0.head = (Party) player1;
      player0.prev = (Party) player1;
      player0.setY(0);
      player0.pack();
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      player0.getX();
      player0.isJoinOK(player1, false);
      boolean boolean0 = player1.isConnected();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(1, "\u0000j97", "\u0000j97", 1);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.473874120126861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(66, ".*[.]class$", ".*[.]class$", 66, (-3419));
      player0.getSubparty();
      player0.setZ(66);
      player0.getTimeOfDeath();
      Player player1 = new Player(3, ".*[.]class$", 699);
      player0.setJoinOK(player1, true);
      Player player2 = new Player();
      player0.setDead();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)55;
      player0.unpack(byteArray0);
      player2.add(player1);
      player1.pack();
      player1.setX(1902.16F);
      player0.boss = (Party) player1;
      player2.isBoss();
      player1.getMoney();
      player1.gangStrength();
      player0.setDead((long) 3);
      player2.reset(true);
      player0.isJoinOK(player1, true);
      int int0 = player0.gangStrength();
      assertTrue(player0.isDead());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(0, "Player", "Player", (-3121));
      player0.setX(821.816F);
      player0.add(player0);
      player0.setZ((-1391));
      player0.getName();
      player0.getX();
      player0.pack();
      player0.setDead(0L);
      player0.pack();
      player0.setDead(0L, true);
      player0.setMoney(1169.61F);
      player0.setDead(0L, true);
      player0.setDead();
      player0.isJoinOK(player0, false);
      player0.setX((-3121));
      player0.isJoinOK(player0, true);
      int int0 = Packable.GAME_EVENT;
      assertEquals(3, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(1066, "module.ModuleBrowserDialog$ModuleFilter", (-20));
      player0.setY(2126.02F);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream2.release();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream2, mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(2126.02F, player0.getY(), 0.01F);
      
      DataInputStream dataInputStream1 = new DataInputStream(mockFileInputStream0);
      Player player1 = new Player((short)4919, (String) null, "SJ,Bmm", (-660), 255);
      boolean boolean0 = player1.unpack(dataInputStream1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1737502027185687
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player(50);
      Player player1 = new Player(0, "bpc2vx 9nA}iK6[", "Tb.1bh_ZOdxR#tu'!", 1456, 0);
      player1.setX(0);
      int int0 = Packable.UNDEFINED;
      player0.setDead((long) 1456, false);
      player0.boss = (Party) player1;
      player0.isJoinOK(player1, false);
      player0.setY((-3324.956F));
      player1.setX((short)4919);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      player1.getStrength();
      player0.setJoinOK(player1, false);
      player1.setDead();
      player1.gangStrength();
      player0.setDead((long) 0);
      player1.reset(false);
      assertEquals(0L, player1.getTimeOfDeath());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(1, "", 1);
      player0.setDead((-3044L));
      Player player1 = new Player((-4278), "oK%hkxRXEo", 10);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player1.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player((-3421), ".*[.]class$", (String) null, 66);
      player0.getSubparty();
      player0.setZ(66);
      player0.getTimeOfDeath();
      Player player1 = new Player(2377, (String) null, 2377);
      player0.setY((-3421));
      assertEquals((-3421.0F), player0.getY(), 0.01F);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor1);
      mockFileInputStream0.release();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, mockFileInputStream2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      int int0 = player1.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player();
      player0.getSubparty();
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.023907271562916
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(2501, "o,c\"kW)![9\u0004],", "n", 0, 0);
      Player player1 = new Player(2501, "n", 0);
      player0.setX(0.2F);
      player1.getSubparty();
      player1.prev = (Party) player0;
      player1.isJoinOK(player0, false);
      player0.toString();
      player1.getX();
      player1.setJoinOK(player0, true);
      player0.getZ();
      player0.gangStrength();
      player1.setY(10.0F);
      assertEquals(10.0F, player1.getY(), 0.01F);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.795294412433909
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player((-3428), ".*[.]class$", (String) null, (-3428));
      player0.getSubparty();
      player0.setZ((-3428));
      Player player1 = new Player(3, ".*[.]class$", 699);
      player0.setJoinOK(player1, false);
      player1.pack();
      Player player2 = new Player(1, "", 699);
      player0.isJoinOK(player1, true);
      player1.setY(0.0F);
      player2.setX(0.0F);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      MockFileInputStream mockFileInputStream2 = new MockFileInputStream(fileDescriptor0);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.aFileURI;
      // Undeclared exception!
      try { 
        MockURI.resolve(uRI1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "module.ModuleBrowserDialog$ModuleFilter");
      Player player0 = new Player(0, "P|B}4 ", "JhhD+NDsj -*_u{E\"", 3199, 3305);
      Player player1 = new Player(4919, "_M_?1(5t`BmOCr", (String) null, 0, 14335);
      player0.head = (Party) player1;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }
}
