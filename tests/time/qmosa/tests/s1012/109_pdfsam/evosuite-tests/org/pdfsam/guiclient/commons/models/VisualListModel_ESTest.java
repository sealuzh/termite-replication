/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 23:19:53 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Frame;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.color.ICC_Profile;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.IndexColorModel;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.media.jai.operator.FPXDescriptor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.JTree;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.TreePath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      int[] intArray0 = new int[1];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements((int[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(intArray0, true);
      Stack<String> stack0 = new Stack<String>();
      Stack<String> stack1 = new Stack<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(stack1);
      JComboBox<String> jComboBox0 = new JComboBox<String>(defaultComboBoxModel0);
      jComboBox0.getGraphicsConfiguration();
      int int0 = 92;
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      Frame frame0 = null;
      try {
        frame0 = new Frame((GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3526517037151287
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, false);
      visualListModel0.prependAllElements(collection0);
      visualListModel0.removeElements(2691, 2691, false);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedList0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2691;
      intArray0[1] = 0;
      intArray0[2] = 2691;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.removeElements((-318), 2691, true);
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-318);
      intArray1[3] = (-318);
      visualListModel0.rotateClockwiseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements(0, collection0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7824268046877834
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      ChronoField[] chronoFieldArray0 = new ChronoField[5];
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[1] = chronoField0;
      ChronoField chronoField1 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[2] = chronoField1;
      ChronoField chronoField2 = ChronoField.HOUR_OF_DAY;
      chronoFieldArray0[3] = chronoField2;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, chronoField0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.595461447091443
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      ChronoField[] chronoFieldArray0 = new ChronoField[5];
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      chronoFieldArray0[0] = chronoField0;
      ChronoField chronoField1 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[1] = chronoField1;
      ChronoField chronoField2 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[2] = chronoField2;
      ChronoField chronoField3 = ChronoField.HOUR_OF_DAY;
      chronoFieldArray0[3] = chronoField3;
      ChronoField chronoField4 = ChronoField.NANO_OF_SECOND;
      chronoFieldArray0[4] = chronoField4;
      visualListModel0.reverseElements(intArray0);
      vector0.toArray(chronoFieldArray0);
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>(vector0);
      visualListModel0.moveUpIndexes(intArray0);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.prependAllElements(vector0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-649));
      visualListModel0.reverseElements(intArray0);
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.moveDownIndex((-735));
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.25739657527869
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>(vector0);
      jComboBox0.getMaximumRowCount();
      visualListModel0.moveUpIndexes(intArray0);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.prependAllElements(vector0);
      visualListModel0.moveDownIndex((-663));
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6300602244842355
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 936;
      intArray0[1] = 2881;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(5517, 2881);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.moveDownIndex(300);
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel1.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(4, visualListModel0.getSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      int int0 = (-4695);
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-4695);
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4695
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-838);
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>(comparator0);
      treeSet0.descendingSet();
      visualListModel0.prependAllElements(treeSet0);
      visualListModel0.subList((-838), (-838));
      int int1 = 0;
      visualListModel0.data = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[8];
      Object[][] objectArray0 = new Object[2][9];
      objectArray0[0] = (Object[]) defaultTableModelArray0;
      Object[] objectArray1 = new Object[4];
      objectArray1[1] = (Object) 0;
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4812405179641535
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.addAllElements((-3651), (Collection<VisualPageListItem>) linkedList0);
      int[] intArray0 = new int[5];
      intArray0[0] = 874;
      intArray0[1] = (-1392);
      intArray0[2] = 874;
      intArray0[3] = 874;
      intArray0[4] = (-457);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-457));
      visualListModel0.prependAllElements(linkedList0);
      int[] intArray1 = new int[4];
      intArray1[0] = 874;
      intArray1[1] = 960;
      intArray1[2] = (-3651);
      intArray1[3] = (-1392);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.addElement((VisualPageListItem) null);
      int[] intArray2 = new int[7];
      intArray2[0] = (-1392);
      intArray2[1] = (-457);
      intArray2[2] = (-3651);
      intArray2[3] = (-457);
      intArray2[4] = 960;
      intArray2[5] = (-457);
      intArray2[6] = (-1392);
      visualListModel0.reverseElements(intArray2);
      visualListModel0.removeElements(874, (-457), false);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0277013333517635
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      visualListModel0.moveDownIndex(0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.moveDownIndex(300);
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[0];
      Point point0 = new Point(6, 114);
      Point point1 = new Point(point0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(6);
      visualListModel0.rotateClockwiseElements(intArray1);
      assertFalse(visualListModel0.equals((Object)visualListModel1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      Integer integer0 = new Integer((-3815));
      visualListModel0.reverseElements(intArray0);
      visualListModel0.clearData();
      visualListModel0.moveDownIndex(1029);
      visualListModel0.undeleteElements(intArray0);
      Vector<Integer> vector0 = new Vector<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      DefaultTableModel defaultTableModel1 = new DefaultTableModel(vector0, vector0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, defaultTableModel1);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Object object0 = new Object();
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      BasicTreeUI.TreeExpansionHandler basicTreeUI_TreeExpansionHandler0 = metalTreeUI0.new TreeExpansionHandler();
      Hashtable<Integer, Integer> hashtable0 = new Hashtable<Integer, Integer>();
      JTree jTree0 = new JTree(hashtable0);
      metalTreeUI0.getClosestPathForLocation(jTree0, 65535, 5000);
      TreeExpansionEvent treeExpansionEvent0 = new TreeExpansionEvent(objectArray0[0], (TreePath) null);
      basicTreeUI_TreeExpansionHandler0.treeExpanded(treeExpansionEvent0);
      RenderingHints renderingHints1 = new RenderingHints(sunHints_LCDContrastKey0, basicTreeUI_TreeExpansionHandler0);
      Object object1 = visualListModel0.getElementAt(5);
      assertNull(object1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0651156603776215
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndex(Integer.MAX_VALUE);
      intArray0[0] = (-434);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.elementsChanged();
      visualListModel0.updateElementAt((-434), (VisualPageListItem) null);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedList0);
      linkedList0.add((VisualPageListItem) null);
      Object object0 = new Object();
      visualListModel0.elementsChanged();
      visualListModel0.appendAllElements(linkedList0);
      visualListModel0.moveDownIndex((-434));
      visualListModel0.addElementAt((VisualPageListItem) null, 30000);
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel1.subList(579, (-457), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(579) > toIndex(-457)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.92967840055467
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      ChronoField[] chronoFieldArray0 = new ChronoField[5];
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[1] = chronoField0;
      ChronoField chronoField1 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[2] = chronoField1;
      ChronoField chronoField2 = ChronoField.HOUR_OF_DAY;
      chronoFieldArray0[3] = chronoField2;
      ChronoField chronoField3 = ChronoField.NANO_OF_SECOND;
      chronoFieldArray0[4] = chronoField3;
      vector0.toArray(chronoFieldArray0);
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>(vector0);
      visualListModel0.moveUpIndexes(intArray0);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0447969209589383
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[4];
      visualListModel0.elementsChanged();
      intArray0[0] = 0;
      visualListModel0.clearData();
      intArray0[1] = 0;
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, true);
      int int0 = (-4713);
      intArray0[2] = (-4713);
      int int1 = 256;
      intArray0[3] = 256;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.addAllElements(collection0);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex((-702));
      visualListModel0.elementChanged((VisualPageListItem) null);
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      Stack<Integer> stack1 = new Stack<Integer>();
      UnaryOperator.identity();
      int int0 = (-3651);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      ByteLookupTable byteLookupTable0 = null;
      try {
        byteLookupTable0 = new ByteLookupTable((-3651), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.357285019952196
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-843);
      doubleArray0[3] = (double) 287;
      doubleArray0[4] = (double) 5000;
      doubleArray0[6] = (double) (-2011);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, pdfGraphics2D_HyperLinkKey0);
      int[] intArray1 = new int[7];
      intArray1[0] = (-2011);
      intArray1[1] = (-2011);
      intArray1[2] = (-843);
      intArray1[3] = (-843);
      intArray1[4] = (-2011);
      intArray1[5] = 287;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      Object object0 = new Object();
      RenderingHints renderingHints1 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, object0);
      visualListModel0.moveDownIndexes(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.502347453863389
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 936;
      intArray0[1] = 936;
      intArray0[2] = (-534);
      intArray0[3] = 936;
      intArray0[4] = 1768;
      intArray0[0] = (-566);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      intArray0[7] = 1768;
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[2];
      intArray0[1] = 180;
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.moveDownIndex(180);
      visualListModel0.reverseElements(intArray1);
      visualListModel0.moveUpIndex((-686));
      int[] intArray2 = new int[0];
      visualListModel0.moveDownIndexes(intArray2);
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(180, 180, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 3005;
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(3032, Integer.MAX_VALUE);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.getValidElements();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 309;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, (Object) null);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      int int0 = (-306);
      int int1 = 575;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-306), Integer.MAX_VALUE, 575);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 575
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-3815), 0, true);
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.getSize();
      int int0 = (-727);
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-727), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-727)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.clearData();
      visualListModel0.moveDownIndex(1029);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.updateElementAt((-3815), (VisualPageListItem) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      DefaultTableModel defaultTableModel1 = new DefaultTableModel(vector0, vector0);
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[1];
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) defaultTableModel1;
      Object object0 = new Object();
      objectArray0[0] = object0;
      DefaultTableModel defaultTableModel2 = new DefaultTableModel(objectArray0, 2110);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(defaultTableModelArray0);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.moveUpIndex((-2439));
      visualListModel0.clearData();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2439);
      floatArray0[1] = (float) (-1071);
      floatArray0[3] = (float) 1029;
      floatArray0[4] = (float) (-872);
      floatArray0[5] = (float) (-3815);
      floatArray0[6] = (float) (-872);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-872), (-1071), floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 7 and should be 933912
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ICC Profile Data
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5923334575962667
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 936;
      intArray0[1] = 2909;
      intArray0[2] = (-534);
      intArray0[3] = (-3744);
      intArray0[4] = 1768;
      intArray0[5] = 0;
      intArray0[6] = (-566);
      intArray0[7] = 180;
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = (-2802);
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[8];
      Object[][] objectArray0 = new Object[2][9];
      objectArray0[0] = (Object[]) defaultTableModelArray0;
      Object[] objectArray1 = new Object[4];
      objectArray1[1] = (Object) visualListModel0;
      objectArray1[1] = (Object) (-2802);
      objectArray1[2] = (Object) (-2802);
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.moveDownIndex((-2802));
      visualListModel0.removeElements(0, (-16), false);
      visualListModel0.reverseElements(intArray1);
      int[] intArray2 = new int[0];
      visualListModel0.removeElements(intArray2, false);
      visualListModel0.moveUpIndex(360);
      visualListModel0.moveDownIndexes(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2296369387291572
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      visualListModel0.moveDownIndex(0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(5517, 2881);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      DefaultTableModel defaultTableModel1 = new DefaultTableModel(2881, 5517);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel1.reverseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.moveDownIndex(5517);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.moveDownIndex((-1913));
      int[] intArray1 = new int[8];
      intArray1[0] = 2881;
      intArray1[1] = (-4565);
      intArray1[2] = (-1913);
      intArray1[3] = (-4565);
      intArray1[4] = 5517;
      intArray1[5] = 1368;
      intArray1[6] = 2881;
      intArray1[7] = (-18);
      visualListModel0.rotateClockwiseElements(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex((-702));
      visualListModel0.subList((-10), 4);
      visualListModel0.addAllElements(4, (Collection<VisualPageListItem>) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      // Undeclared exception!
      try { 
        stack0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2802);
      visualListModel0.moveDownIndexes(intArray0);
      int int0 = 5000;
      // Undeclared exception!
      try { 
        visualListModel0.subList(5000, (-661));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(5000) > toIndex(-661)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.92967840055467
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      ChronoField[] chronoFieldArray0 = new ChronoField[5];
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[1] = chronoField0;
      ChronoField chronoField1 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[2] = chronoField1;
      ChronoField chronoField2 = ChronoField.CLOCK_HOUR_OF_DAY;
      chronoFieldArray0[3] = chronoField2;
      chronoFieldArray0[4] = chronoField0;
      vector0.toArray(chronoFieldArray0);
      JComboBox<VisualPageListItem> jComboBox0 = new JComboBox<VisualPageListItem>(vector0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-4695);
      VisualPageListItem[] visualPageListItemArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      visualListModel0.getElementAt(0);
      visualListModel0.clearData();
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0, "DEGREES_90");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(874, (-229), true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.660839527058621
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2802);
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[8];
      Object[][] objectArray0 = new Object[2][9];
      objectArray0[0] = (Object[]) defaultTableModelArray0;
      Object[] objectArray1 = new Object[4];
      objectArray1[1] = (Object) visualListModel0;
      visualListModel0.subList(377, 377, true);
      visualListModel0.addAllElements((-2802), (Collection<VisualPageListItem>) null);
      objectArray1[1] = (Object) (-2802);
      objectArray1[2] = (Object) (-2802);
      objectArray1[3] = (Object) (-2802);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.moveDownIndex((-2802));
      visualListModel0.removeElements(0, 0, false);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndex(1);
      int[] intArray1 = new int[0];
      visualListModel0.removeElements(intArray1, false);
      visualListModel0.moveUpIndex(360);
      visualListModel0.moveDownIndexes(intArray1);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, false);
      assertNotNull(collection0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4013116669812944
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      int int0 = new Integer(0);
      int int1 = (-727);
      visualListModel0.subList((-1), (-727), true);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      visualListModel0.addAllElements((-727), collection0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.clearData();
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(collection0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.502347453863389
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      intArray0[0] = 936;
      intArray0[1] = 2909;
      intArray0[2] = (-534);
      intArray0[3] = (-3744);
      intArray0[4] = 1768;
      intArray0[5] = 0;
      intArray0[6] = (-566);
      intArray0[7] = (-3744);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.moveDownIndex(1);
      int[] intArray1 = new int[0];
      visualListModel0.reverseElements(intArray1);
      visualListModel0.moveUpIndex((-534));
      visualListModel0.moveDownIndexes(intArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-2439), 2684, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5079496947597475
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.appendAllElements(vector0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.moveDownIndex(300);
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      visualListModel1.moveDownIndex(300);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8063294488351005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.addAllElements((-3651), (Collection<VisualPageListItem>) linkedList0);
      int[] intArray0 = new int[5];
      intArray0[0] = 874;
      intArray0[1] = (-1392);
      intArray0[2] = 874;
      intArray0[3] = 874;
      intArray0[4] = (-457);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(linkedList0);
      visualListModel1.addAllElements((Collection<VisualPageListItem>) linkedList0);
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(3005, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3005
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5267385326945515
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      ChronoField[] chronoFieldArray0 = new ChronoField[5];
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      chronoFieldArray0[0] = chronoField0;
      ChronoField chronoField1 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[1] = chronoField1;
      ChronoField chronoField2 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      chronoFieldArray0[2] = chronoField2;
      ChronoField chronoField3 = ChronoField.CLOCK_HOUR_OF_DAY;
      chronoFieldArray0[3] = chronoField3;
      ChronoField chronoField4 = ChronoField.NANO_OF_SECOND;
      chronoFieldArray0[4] = chronoField4;
      visualListModel0.moveUpIndexes(intArray0);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addElementAt((VisualPageListItem) null, (-649));
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.moveDownIndex((-735));
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[8];
      Object[][] objectArray0 = new Object[2][9];
      objectArray0[0] = (Object[]) defaultTableModelArray0;
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) visualListModel0;
      objectArray1[1] = (Object) 0;
      objectArray1[2] = (Object) 0;
      objectArray1[3] = (Object) 0;
      objectArray0[1] = objectArray1;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 0);
      defaultTableModelArray0[1] = defaultTableModel0;
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndex(5000);
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.moveUpIndexes(intArray0);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      int[] intArray0 = new int[1];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      Stack<String> stack0 = new Stack<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(stack0);
      int int0 = 92;
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-158));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-1), 360);
      assertNull(collection0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements((-229), 1301, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1984543287850427
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[8];
      visualListModel0.moveDownIndex(0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(5517, 2881);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.moveDownIndex(300);
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      visualListModel1.moveDownIndex(300);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel1.moveUpIndexes(intArray1);
      assertEquals(0, intArray1.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-2802);
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[14];
      Object[][] objectArray0 = new Object[2][9];
      objectArray0[0] = (Object[]) defaultTableModelArray0;
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) visualListModel0;
      objectArray1[1] = (Object) (-2802);
      objectArray1[2] = (Object) (-2802);
      objectArray1[3] = (Object) (-2802);
      objectArray0[1] = objectArray1;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, defaultTableModelArray0);
      defaultTableModelArray0[0] = defaultTableModel0;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeElements(981, 4528, true);
      assertFalse(visualListModel1.equals((Object)visualListModel0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      int[] intArray0 = new int[1];
      visualListModel0.clearData();
      int int0 = (-434);
      intArray0[0] = (-434);
      int int1 = (-1387);
      Stack<String> stack0 = new Stack<String>();
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>(stack0);
      JComboBox<String> jComboBox0 = new JComboBox<String>(defaultComboBoxModel0);
      jComboBox0.getGraphicsConfiguration();
      int int2 = 92;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-434), (-1387), intArray0, 27, true, 27, (-1387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[3];
      intArray0[0] = 1718;
      intArray0[1] = 50;
      intArray0[2] = 2583;
      visualListModel0.removeElements(intArray0, false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 116;
      visualListModel0.subList(116, 2183);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(2183, "org.pdfsam.guiclient.commons.models.VisualListModel", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0941693886928134
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      visualListModel0.moveUpIndex(0);
      visualListModel0.subList(0, 0);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) hashSet0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int int1 = (-1150);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)87;
      byteArray0[0] = (byte)87;
      byte byte1 = (byte) (-5);
      short[][] shortArray0 = new short[4][5];
      short[] shortArray1 = new short[9];
      shortArray1[0] = (short) (byte) (-5);
      shortArray1[1] = (short) (byte)87;
      shortArray1[2] = (short) (byte)87;
      shortArray1[3] = (short) (byte)87;
      shortArray1[4] = (short) (byte)87;
      shortArray1[5] = (short) (byte)87;
      shortArray1[6] = (short) (byte)87;
      shortArray1[7] = (short) (byte) (-5);
      shortArray1[8] = (short)1;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[1];
      shortArray2[0] = (short) (byte)87;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[1];
      shortArray3[0] = (short) (byte)87;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[8];
      shortArray4[0] = (short) (byte)87;
      shortArray4[1] = (short)1;
      shortArray4[2] = (short) (-3815);
      shortArray4[3] = (short) (byte)87;
      shortArray4[4] = (short) (byte)87;
      shortArray4[5] = (short)116;
      shortArray4[6] = (short) (byte)87;
      shortArray4[7] = (short) (byte) (-5);
      shortArray0[3] = shortArray4;
      ShortLookupTable shortLookupTable0 = null;
      try {
        shortLookupTable0 = new ShortLookupTable((-1185), shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset must be greater than 0
         //
         verifyException("java.awt.image.LookupTable", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.addAllElements(941, (Collection<VisualPageListItem>) treeSet0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      int int0 = 699;
      int int1 = 287;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(287, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 287
         //
         verifyException("java.util.Vector", e);
      }
  }
}
