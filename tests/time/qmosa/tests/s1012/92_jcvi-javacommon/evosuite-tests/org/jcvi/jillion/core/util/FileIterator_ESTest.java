/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:43:12 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5458184489146842
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList0.addAll(0, (Collection<? extends FileFilter>) linkedList1);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      multipleFileFilter0.accept(mockFile0);
      fileIterator_FileIteratorBuilder2.fileFilter(multipleFileFilter0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.updateFileIterator(mockFile0);
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      fileIterator0.hasNext();
      fileIterator0.updateFileIterator(mockFile0);
      File file0 = fileIterator0.getNextFile();
      assertTrue(file0.isDirectory());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.739823527518256
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", "");
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator0");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter1);
      fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter1);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator0.hasNext();
      fileIterator1.next();
      fileIterator1.hasNext();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder2.build();
      fileIterator2.updateFileIterator(file0);
      fileIterator2.iterator();
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder2.build();
      fileIterator3.next();
      FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      fileIterator1.getNextFile();
      fileIterator_FileIteratorBuilder1.build();
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.305330407990827
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("H,H2{");
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      mockFile0.toURL();
      fileIterator_FileIteratorBuilder0.build();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      multipleFileFilter0.accept(mockFile0);
      multipleFileFilter0.accept(mockFile0);
      multipleFileFilter0.accept(mockFile0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5799073774055077
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.hasNext();
      fileIterator0.setUpInitialState(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      fileIterator0.getNextFile();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      multipleFileFilter0.accept((File) null);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList2);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.next();
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5386971522450956
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.hasNext();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator0.getNextFile();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      multipleFileFilter0.accept((File) null);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList2);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      fileIterator1.next();
      File file0 = fileIterator1.getNextFile();
      assertFalse(file0.isHidden());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.566585763818047
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      File file0 = MockFile.createTempFile("no elements in empty iterator", "");
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      linkedList2.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      multipleFileFilter0.accept(file0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList5);
      FileFilter[] fileFilterArray0 = new FileFilter[3];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray1 = new FileFilter[9];
      fileFilterArray1[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray1[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray1[2] = (FileFilter) multipleFileFilter3;
      fileFilterArray1[3] = (FileFilter) multipleFileFilter4;
      fileFilterArray1[4] = (FileFilter) multipleFileFilter4;
      fileFilterArray1[5] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray1[6] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray1[7] = (FileFilter) multipleFileFilter6;
      fileFilterArray1[8] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray1);
      File file1 = fileIterator0.getNextFile();
      FileIterator.createDepthFirstFileIteratorBuilder(file1);
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.equals((Object)file0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5496616405504353
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.hasNext();
      MockFile mockFile2 = new MockFile("org.jcvi.jillion.core.util.iter.IteratorUtil");
      fileIterator0.setUpInitialState(mockFile2);
      fileIterator0.getNextFile();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList4);
      multipleFileFilter3.accept(mockFile1);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList4);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList5);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList1);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      // Undeclared exception!
      try { 
        fileIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.636221991460034
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      assertFalse(fileIterator0.hasNext());
      
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", "");
      MockFile mockFile1 = new MockFile("", "");
      fileIterator0.setUpInitialState(mockFile1);
      File file1 = fileIterator0.getNextFile();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      fileIterator0.spliterator();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList3);
      multipleFileFilter4.accept(file1);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter1);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      File file2 = fileIterator1.next();
      assertFalse(file2.equals((Object)file0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.6498902963309505
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MockFile.createTempFile("no elements in empty iterator", "");
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
      
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      linkedList4.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList4);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      linkedList4.add((FileFilter) multipleFileFilter1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      multipleFileFilter0.accept(mockFile0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList3);
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[6] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[7] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[8] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList7);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      File file0 = fileIterator0.next();
      assertEquals("/tmp/no elements in empty iterator0", file0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0823572675934168
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder2.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileFilter[] fileFilterArray0 = new FileFilter[6];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      linkedList1.add(fileFilterArray0[0]);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList1);
      multipleFileFilter11.accept(mockFile0);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter14 = new MultipleFileFilter(fileFilterArray0);
      assertFalse(multipleFileFilter14.equals((Object)multipleFileFilter13));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3835897335366067
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4447239721429455
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileFilter[] fileFilterArray0 = new FileFilter[7];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      fileIterator0.setUpInitialState(mockFile0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList4);
      multipleFileFilter6.accept(mockFile0);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator1.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.597552369992854
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file0 = MockFile.createTempFile("5Bf+tAJdu//&z3V.", "");
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator0.iterator();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5707968055629813
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder0.build();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList2);
      multipleFileFilter1.accept((File) null);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      multipleFileFilter2.accept((File) null);
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter3;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter2;
      linkedList2.add((FileFilter) multipleFileFilter3);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter4;
      fileFilterArray0[6] = (FileFilter) multipleFileFilter3;
      multipleFileFilter3.accept((File) null);
      fileFilterArray0[7] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[8] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0839952692314183
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "no elements in empty iterator");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.setLastModified(1443L);
      mockFile0.setLastModified(0L);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      mockFile0.mkdir();
      fileIterator0.getNextFile();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5979662733840394
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", "");
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      fileIterator_FileIteratorBuilder0.build();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList2);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      multipleFileFilter0.accept(file0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter4 = null;
      try {
        multipleFileFilter4 = new MultipleFileFilter((FileFilter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.784264457477115
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", "");
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder0.build();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter1);
      fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList5);
      multipleFileFilter3.accept(mockFile0);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      linkedList6.offerLast(multipleFileFilter4);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList6);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      fileIterator1.getNextFile();
      fileIterator0.updateFileIterator(mockFile0);
      assertFalse(fileIterator0.hasNext());
      
      fileIterator1.iterator();
      assertTrue(fileIterator1.hasNext());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2140666558065463
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileFilter[] fileFilterArray0 = new FileFilter[7];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList1);
      FileFilter[] fileFilterArray1 = new FileFilter[9];
      fileFilterArray1[0] = (FileFilter) multipleFileFilter7;
      fileFilterArray1[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray1[2] = (FileFilter) multipleFileFilter6;
      fileFilterArray1[0] = (FileFilter) multipleFileFilter1;
      fileFilterArray1[4] = (FileFilter) multipleFileFilter5;
      fileFilterArray1[5] = (FileFilter) multipleFileFilter5;
      fileFilterArray1[6] = (FileFilter) multipleFileFilter7;
      fileFilterArray1[7] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray1);
      linkedList0.add((FileFilter) multipleFileFilter9);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(fileFilterArray0);
      // Undeclared exception!
      try { 
        multipleFileFilter10.accept(mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.MultipleFileFilter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5673032959558295
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      File file0 = MockFile.createTempFile("no elements in empty iterator", "");
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(file0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      linkedList2.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      multipleFileFilter0.accept(file0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList5);
      FileFilter[] fileFilterArray0 = new FileFilter[3];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray1 = new FileFilter[9];
      fileFilterArray1[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray1[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray1[2] = (FileFilter) multipleFileFilter3;
      fileFilterArray1[3] = (FileFilter) multipleFileFilter4;
      fileFilterArray1[4] = (FileFilter) multipleFileFilter4;
      fileFilterArray1[5] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray1[6] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray1[7] = (FileFilter) multipleFileFilter6;
      fileFilterArray1[8] = (FileFilter) multipleFileFilter2;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder1.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.279679506776119
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.hasNext();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator0.getNextFile();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter4 = null;
      try {
        multipleFileFilter4 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.518110438902386
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      File file0 = MockFile.createTempFile("no elements in empty iterator", "");
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      linkedList2.add((FileFilter) multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      multipleFileFilter0.accept(file0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList5);
      FileFilter[] fileFilterArray0 = new FileFilter[3];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray1 = new FileFilter[9];
      fileFilterArray1[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray1[1] = (FileFilter) multipleFileFilter2;
      fileFilterArray1[2] = (FileFilter) multipleFileFilter3;
      fileFilterArray1[3] = (FileFilter) multipleFileFilter4;
      fileFilterArray1[4] = (FileFilter) multipleFileFilter4;
      fileFilterArray1[5] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray1[6] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray1[7] = (FileFilter) multipleFileFilter6;
      fileFilterArray1[8] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray1);
      assertFalse(multipleFileFilter7.equals((Object)multipleFileFilter5));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.internal.core.util.AbstractFOQueue", "org.jcvi.jillion.internal.core.util.AbstractFOQueue");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "org.jcvi.jillion.core.util.MultipleFileFilter";
      MockFile mockFile0 = new MockFile("", "org.jcvi.jillion.core.util.MultipleFileFilter");
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      File file0 = null;
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      File file0 = MockFile.createTempFile("7Fv+BH", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      File file0 = MockFile.createTempFile("no elements in empty iterator", "");
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList2);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter3);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }
}
