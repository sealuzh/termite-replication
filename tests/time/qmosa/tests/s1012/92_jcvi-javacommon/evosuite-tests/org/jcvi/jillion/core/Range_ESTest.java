/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:44:21 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8860047396799997
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 4294967295L);
      range1.complement(range0);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1996L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.7700123627650766
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of((-4373L), 1749L);
      Long long0 = new Long(529L);
      range0.equals(long0);
      range0.getBegin();
      Range range1 = Range.of(529L);
      range0.intersects(range1);
      Object object0 = new Object();
      Range range2 = Range.of((-4373L));
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-4373L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.8945637102107318
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of(9223372036854775681L, 9223372036854775681L);
      Range range1 = Range.of((-128L), 4294967295L);
      range1.getBegin();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(9223372036854775681L, 9223372036854775681L);
      range2.equals(range0);
      range0.getBegin();
      Range.of(9223372036854775681L);
      range0.intersects(range1);
      Object object0 = new Object();
      Range range3 = Range.of(9223372036854775681L);
      range3.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854773688L);
      Object object1 = new Object();
      Object object2 = new Object();
      range4.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(">qU(hzw!3", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse >qU(hzw!3 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.644770372033201
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-196L), 2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ -196 .. 2147483646 ]/0B", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2263476488290417
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854775806L;
      long long1 = (-2205L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775806L, (-2205L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2205 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.9154799410755183
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.toString();
      long long0 = 0L;
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      range1.startsBefore(range1);
      range0.complementFrom(linkedList0);
      Range.Comparators.values();
      long long1 = 529L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range_CoordinateSystem0.toString();
      range1.isEmpty();
      range0.getEnd();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange("(d+)s*,s*(d+)", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (d+)s*,s*(d+) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.8927543319894777
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Long long0 = new Long(1049L);
      range0.equals(long0);
      range0.isEmpty();
      long long1 = (-2010L);
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      range0.isEmpty();
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("__H2hJ7kimB`>}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.__H2hJ7kimB`>}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.876032133238961
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem1);
      Long long0 = new Long((-768L));
      range0.equals(long0);
      Range range1 = Range.ofLength(2173L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.parseRange("[ 0 .. 2172 ]/0B", range_CoordinateSystem3);
      range0.getBegin();
      range2.equals((Object) null);
      range2.iterator();
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem4.getAbbreviatedName();
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("5W{kSTN8??3#,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 5W{kSTN8??3#, into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.269909010978847
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1732L), 2147483647L);
      range0.toString();
      Range range1 = Range.of((-1732L));
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.of(127L, 127L);
      Range range3 = Range.parseRange("[ -1733 .. 2147483646 ]/0B");
      range0.equals(range3);
      range3.getBegin();
      Range range4 = Range.of(2147483647L);
      Object object0 = new Object();
      Range range5 = Range.of((-334L));
      range4.getEnd();
      Range range6 = Range.of(2147483647L);
      range5.intersects(range6);
      range6.complementFrom(list0);
      range4.getBegin();
      range6.toString();
      range2.getEnd();
      range3.equals(range0);
      range6.complement(range1);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.of(8384L, (-930L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.9689593180494276
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Long long0 = new Long(1049L);
      range0.equals(long0);
      range0.isEmpty();
      long long1 = (-2010L);
      List<Range> list0 = range0.split(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.complementFrom(list0);
      range0.isEmpty();
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2147483648L, 2147485380L);
      Range range3 = range1.intersection(range2);
      range2.intersects(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("__H2hJ7kimB`>}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.__H2hJ7kimB`>}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.505602704300179
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem1);
      Long long0 = new Long((-768L));
      range0.equals(long0);
      range0.getBegin(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.isEmpty();
      linkedList0.push((Range) null);
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.9056271619978506
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of(9223372036854775681L, 9223372036854775681L);
      Range range1 = Range.of((-128L), 4294967295L);
      long long0 = range1.getBegin();
      //  // Unstable assertion: assertEquals((-128L), long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.of(9223372036854775681L, 9223372036854775681L);
      range2.equals(range0);
      range0.getBegin();
      Range range3 = Range.of(9223372036854775681L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object0 = new Object();
      Range range4 = Range.of(9223372036854775681L);
      range4.equals(range0);
      range0.equals(object0);
      range0.getEnd();
      range0.intersects(range2);
      range2.getBegin();
      range0.toString();
      range0.getLength();
      long long1 = range0.getEnd();
      //  // Unstable assertion: assertEquals(9223372036854775681L, long1);
      
      range4.equals(range0);
      List<Range> list0 = range0.complement(range2);
      range2.isEmpty();
      Range range5 = Range.ofLength(9223372036854775681L);
      range5.equals(range0);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>(list0);
      //  // Unstable assertion: assertFalse(linkedList1.contains(range0));
      
      List<Range> list1 = range3.complementFrom(linkedList0);
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertSame(range3, range0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.510480754434972
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-196L), (-196L));
      Long long0 = new Long((-2147483648L));
      Range range1 = Range.of((-196L), 853L);
      range0.equals(range1);
      long long1 = (-1586L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 828L, 875L);
      range_Builder0.contractBegin((-1514L));
      range_Builder0.expandBegin((-1514L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("D^L|\"t5o/h5Q]/a!!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.D^L|\"t5o/h5Q]/a!!
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.9760480258530118
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(127L);
      range0.toString(range_CoordinateSystem0);
      range0.iterator();
      range0.iterator();
      Range range1 = Range.parseRange("[ 127 .. 128 ]/SB");
      range0.complement(range1);
      range1.complement(range0);
      range1.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-9223372036854775808L), 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2781549060425244
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.split(214L);
      Long long0 = new Long(1189L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775680L, 214L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4690505227754755
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = (-3748L);
      Range range0 = Range.of((-3748L), (-3748L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.intersects(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range range1 = null;
      long long1 = 0L;
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3916181972963133
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1732L), 2147483647L);
      Long long0 = new Long((-1732L));
      String string0 = "";
      Long long1 = new Long(214L);
      Long.getLong("", long1);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 2147483648L, 236L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.9488167450010496
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.toString();
      Range range1 = Range.of((-356L));
      range0.spliterator();
      range1.spliterator();
      range0.intersects(range1);
      range1.startsBefore(range0);
      Range range2 = range1.asRange();
      Range range3 = range1.intersection(range2);
      Range range4 = Range.parseRange("[ 0 .. 0 ]/0B");
      range4.iterator();
      range3.intersects(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$EmptyShortRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$EmptyShortRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.377175931836802
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372036854775712L;
      Range range0 = Range.of(9223372036854775712L);
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.isEmpty();
      Range range1 = null;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2120L, (-2047L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.267114301907333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 9223372036854775807L;
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 124L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3077736496255974
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of((-3748L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.7340794129477
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of((-13L));
      Range range1 = Range.of((-13L), (-13L));
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-13L), (-1L));
      range_Builder0.contractBegin(0L);
      range_Builder0.expandBegin((-1L));
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = (-1612L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1612L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3750595192282695
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-102L);
      Range range0 = Range.of(range_CoordinateSystem0, (-102L), (-102L));
      range0.split(1193L);
      long long1 = (-1678L);
      Long long2 = new Long((-1678L));
      // Undeclared exception!
      try { 
        Range.of((-2147483648L), 9223372036854775680L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8948284949303726
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-196L), (-196L));
      long long0 = 853L;
      Range range1 = Range.ofLength(1444L);
      range0.spliterator();
      range0.endsBefore(range1);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-196L), (-196L));
      range_Builder0.build();
      range0.getLength();
      long long1 = 498L;
      Range.of(498L, 1444L);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Null Range used in intersection operation.", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Null Range used in intersection operation. into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.916685512234224
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-1L), (-1L));
      range0.getEnd();
      range_Builder0.expandBegin((-1585L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.spliterator();
      range0.getEnd(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range1 = Range.ofLength(1L);
      range1.spliterator();
      range0.endsBefore(range1);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6149899633658493
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-196L), (-196L));
      range0.getEnd();
      Range.of((-196L), 853L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483648L), (-2147483648L));
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      range1.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("0B", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.462901963697835
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(42L);
      range_Builder0.shift(42L);
      Range range0 = Range.ofLength(42L);
      range0.getBegin();
      range_Builder0.contractEnd(42L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.57608009354896
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.of(9223372036854775681L, 9223372036854775681L);
      Range range0 = Range.of((-128L), 4294967295L);
      range0.getBegin();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4094L, 1640L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4337841523710577
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1732L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, (-1732L), (-1732L));
      range_Builder0.expandBegin(2120L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("r", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse r into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.8941710430534044
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2120L);
      range0.toString(range_CoordinateSystem1);
      Range range1 = Range.parseRange("[ 1 .. 2120 ]/RB", range_CoordinateSystem0);
      range0.getBegin();
      range0.getEnd();
      Object object0 = new Object();
      range0.equals(object0);
      range0.complement(range1);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.ofLength((-1873L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.999383747088761
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.toString();
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range_CoordinateSystem0.toString();
      range1.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      range0.isEmpty();
      range1.getBegin(range_CoordinateSystem0);
      Range range2 = Range.ofLength(0L);
      range0.complement(range2);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("max cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.max cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.981414464028885
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-264L), (-264L));
      Range range1 = Range.of(2076L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      range1.complementFrom(list2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("<2i,MN", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse <2i,MN into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.08588201940023
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.toString();
      long long0 = 0L;
      range0.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complement(range0);
      Range.Comparators.values();
      long long1 = 529L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_CoordinateSystem0.toString();
      range0.isEmpty();
      Range.Comparators.values();
      Range.parseRange("[ 0 .. 0 ]/0B", range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(529L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.7999480909910406
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-196L), (-196L));
      long long0 = (-2147483648L);
      Long long1 = new Long((-2147483648L));
      Range range1 = Range.of((-196L), 853L);
      range1.complement(range0);
      range0.equals(range1);
      long long2 = (-1586L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 828L, 875L);
      range_Builder0.contractBegin((-1514L));
      range_Builder0.expandBegin((-1514L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("D^L|\"t5o/h5Q]/a!!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.D^L|\"t5o/h5Q]/a!!
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2397208470799024
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = (-13L);
      Range range0 = Range.of((-13L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.324647836540123
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Long long0 = new Long(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-1586L));
      range_Builder0.expandBegin(1351L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("IbEkJ]|Z%9oOZ*`oP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.IbEkJ]|Z%9oOZ*`oP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2433546687129593
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1732L), (-1732L));
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.626586149186831
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.of((-196L));
      Long long0 = new Long(2699L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1049L, 2699L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(624L);
      range_Builder1.shift(1049L);
      range_Builder0.expandBegin(624L);
      range_Builder1.copy();
      range_Builder1.expandBegin((-1586L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-196L), 2699L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 1049L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4082059968285754
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 853L;
      Range.Builder range_Builder0 = new Range.Builder(853L, 2147483647L);
      Range range0 = range_Builder0.build();
      long long1 = 0L;
      range_Builder0.contractEnd(853L);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(0L, 2147483647L);
      range0.endsBefore(range1);
      long long2 = (-4150L);
      // Undeclared exception!
      try { 
        Range.of(2560L, (-2581L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1L);
      range_Builder0.expandEnd((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.55262584883411
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.of((-196L));
      Long long0 = new Long(2699L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1049L, 2699L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(624L);
      range_Builder1.shift(1049L);
      range_Builder0.expandBegin(624L);
      range_Builder1.expandBegin((-1586L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 1049L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=4.001759698712117
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      long long1 = 1445L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1445L);
      Range range1 = Range.of(1445L);
      range0.spliterator();
      range1.spliterator();
      Range.ofLength(0L);
      range1.intersects(range0);
      range0.startsBefore(range1);
      Range range2 = range0.asRange();
      Range range3 = range0.intersection(range1);
      range2.spliterator();
      range1.iterator();
      range1.complement(range3);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("__H2hJ7kimB`>}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.__H2hJ7kimB`>}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.4108748164387572
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(42L);
      range_Builder0.shift(42L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(42L, 42L);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.46341174940797
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Long long1 = new Long(1049L);
      Long.getLong("RESIDUE_BASED", long1);
      range0.equals(long1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = 65535L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1049L, 65535L);
      Range range1 = null;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3710441945692784
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Long long1 = new Long(1049L);
      long long2 = (-768L);
      Long long3 = new Long(1049L);
      range0.equals("RESIDUE_BASED");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.isEmpty();
      Range range1 = null;
      linkedList0.push((Range) null);
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.5825092772535942
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem1);
      Long long0 = new Long((-768L));
      range0.equals(long0);
      range0.getBegin(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.isEmpty();
      linkedList0.push((Range) null);
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3385967288168596
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long long0 = 2222L;
      Range.of(2222L, 2222L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.5494115770968824
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1L, (-1314L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.9032406998766818
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-1L), (-1L));
      range0.getEnd();
      range_Builder0.expandBegin((-1585L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.spliterator();
      range0.getEnd(range_CoordinateSystem0);
      Range.Comparators.values();
      Range range1 = Range.ofLength(0L);
      assertTrue(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(0L, long0);
      
      Range range2 = Range.of(range_CoordinateSystem0, (-472L), 0L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(1L, 334L);
      long long1 = range3.getLength();
      assertEquals(334L, long1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3559665823660065
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-196L), (-196L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      range0.getLength();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-195L), long1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4979355276182758
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-196L), (-196L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      long long0 = 3436L;
      Range range1 = Range.of(range_CoordinateSystem0, (-857L), 3436L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-7L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.014008958137836
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.Comparators.values();
      long long1 = 529L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range_CoordinateSystem1.toString();
      range1.isEmpty();
      // Undeclared exception!
      try { 
        Range.parseRange("(d+)s*,s*(d+)", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (d+)s*,s*(d+) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=4.017126768159957
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long long0 = 1209L;
      Range range0 = Range.ofLength(1209L);
      Range range1 = Range.ofLength(127L);
      range0.endsBefore(range1);
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(1209L);
      Range range2 = range_Builder0.build();
      range2.complement(range0);
      Range.Builder range_Builder1 = range_Builder0.shift(1209L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.parallelStream();
      linkedList0.containsAll(linkedList1);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range_Builder0.expandEnd((-5797L));
      range0.isEmpty();
      range_Builder1.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("IbEk]|Z%9oOZ*`oP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.IbEk]|Z%9oOZ*`oP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.945229060935676
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = 1L;
      long long1 = 0L;
      Range range0 = Range.of(1L, 0L);
      range0.spliterator();
      range0.spliterator();
      long long2 = 9223372036854774759L;
      Range range1 = Range.ofLength(9223372036854774759L);
      range0.intersects(range1);
      long long3 = (-1529L);
      Range range2 = Range.of((-1529L));
      range1.startsBefore(range2);
      Range range3 = range1.asRange();
      range3.intersection(range1);
      range0.iterator();
      range2.intersects(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("__H2hJ7kimB`>}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.__H2hJ7kimB`>}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.065556795042811
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1445L);
      Range range1 = Range.of(1445L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst(range0);
      range0.complementFrom(linkedList0);
      range1.complementFrom(linkedList0);
      long long0 = 1070L;
      Range.ofLength(1070L);
      Range range2 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.616574243530578
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-196L), (-196L));
      Long long0 = new Long((-2147483648L));
      Range range1 = Range.of((-196L), 853L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-2147483648L), (-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147483648L), (-196L));
      range_Builder0.expandBegin(214L);
      range0.isEmpty();
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2975883560528287
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = (-13L);
      Range.of((-13L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1020L), (-1029L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = 2222L;
      Range.of(2222L);
      // Undeclared exception!
      try { 
        Range.of(2282L, (-196L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1980L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.678365192046818
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 106L;
      Range.of(range_CoordinateSystem0, 106L, 2626L);
      range0.getBegin(range_CoordinateSystem0);
      long long1 = 96L;
      Range range1 = Range.of(96L);
      range1.intersects(range0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.7071285775537675
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = Range.of(1L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst(range0);
      range0.complementFrom(linkedList0);
      range0.complementFrom(linkedList0);
      Range range1 = null;
      long long0 = 32767L;
      Range range2 = Range.ofLength(32767L);
      // Undeclared exception!
      try { 
        range2.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.792699783261552
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = (-3748L);
      Range range0 = Range.of((-3748L), (-3748L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range range1 = null;
      long long1 = 0L;
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.958885910840472
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-196L), 1267L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.ofLength(255L);
      Range.of((-355L), 4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      range0.equals(object1);
      long long0 = range0.getLength();
      assertEquals(1464L, long0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.9132618690943968
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = (-3748L);
      Range range0 = Range.of((-3748L), (-3748L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range range1 = null;
      long long1 = 0L;
      Range range2 = Range.ofLength(0L);
      range2.endsBefore(range0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.9002418739137537
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(0L, 0L);
      range1.endsBefore(range0);
      long long0 = 2147483647L;
      Range.of((-4150L), 2147483647L);
      Range.of(0L);
      String string0 = "_iA(SXt4W4z{%zKh!I";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("_iA(SXt4W4z{%zKh!I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem._iA(SXt4W4z{%zKh!I
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.5369907546120283
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst(range0);
      range0.complementFrom(linkedList0);
      range0.complementFrom(linkedList0);
      Range range1 = null;
      long long0 = 32767L;
      Range range2 = Range.ofLength(32767L);
      // Undeclared exception!
      try { 
        range2.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-196L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 2012L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
