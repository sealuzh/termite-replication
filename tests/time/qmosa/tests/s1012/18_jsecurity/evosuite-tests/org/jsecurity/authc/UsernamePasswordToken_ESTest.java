/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:58:07 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("1LfCi", (String) null, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("{}(JcrFrrcoQ=Ip", (String) null);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, false);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("gs>u=", (String) null, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("HG}R", "HG}R", true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("37Pu\"Utz**H;~", "37Pu\"Utz**H;~", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", charArray0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8599481574305257
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, (InetAddress) null);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setInetAddress((InetAddress) null);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = '8';
      charArray0[2] = 'B';
      charArray0[3] = '&';
      charArray0[4] = '>';
      charArray0[5] = 'T';
      charArray0[6] = 'G';
      charArray0[7] = 'z';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2263282181113064
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "");
      usernamePasswordToken0.clear();
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      usernamePasswordToken0.clear();
      charArray0[1] = '';
      charArray0[2] = 'r';
      charArray0[3] = '%';
      charArray0[4] = '';
      usernamePasswordToken0.setPassword(charArray0);
      charArray0[5] = '5';
      charArray0[6] = '\'';
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setUsername("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
      usernamePasswordToken0.setUsername((String) null);
      usernamePasswordToken0.setPassword(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5831222243737346
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "");
      usernamePasswordToken0.toString();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.clear();
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setRememberMe(true);
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      usernamePasswordToken0.toString();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.getCredentials();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'U';
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("2\"*zVcCm$;CTnBvYO", charArray0, true, inetAddress0);
      MockInetAddress.getByName("*^v`1a[iY");
      MockInetAddress.getByName("\"p43@y;H^sO2'aaB8");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      MockInetAddress.getByAddress("mqEGoHu}I", byteArray0);
      MockInetAddress.getByName("<r\"6Q1K9wD");
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("\"(JC`j4InYoMSZe1Pj<`", "{}(JcrFrrcoQ=Ip");
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - \"(JC`j4InYoMSZe1Pj<`, rememberMe=false", string0);
      
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.clear();
      String string1 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = '8';
      charArray0[2] = 'B';
      charArray0[3] = '&';
      charArray0[4] = '>';
      charArray0[5] = 'T';
      charArray0[6] = 'G';
      charArray0[7] = 'z';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (char[]) null, true);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
      
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", (char[]) null);
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("2RP{+cE'M$Dx", "2RP{+cE'M$Dx", inetAddress0);
      usernamePasswordToken0.isRememberMe();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("y/EkfK$@TT$KC}Z");
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '}';
      charArray0[2] = 'd';
      charArray0[3] = 'C';
      charArray0[4] = '2';
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("y/EkfK$@TT$KC}Z", charArray0, true, inetAddress0);
      MockInetAddress.getByName("`7u+XQ^~^DQ");
      InetAddress inetAddress1 = MockInetAddress.getByName("K@86>0dxV{$o");
      assertFalse(inetAddress1.isAnyLocalAddress());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("rpuMxYke", "<*8x@cx", false);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Op6vqeekv", "", false, inetAddress0);
      usernamePasswordToken0.setUsername("Op6vqeekv");
      usernamePasswordToken0.getUsername();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[3] = '%';
      charArray0[2] = 'c';
      charArray0[3] = '%';
      charArray0[4] = '%';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.143652409619771
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("2RP{+cE'M$Dx", "2RP{+cE'M$Dx", inetAddress0);
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", "2RP{+cE'M$Dx", true, inetAddress0);
      usernamePasswordToken0.setUsername("2RP{+cE'M$Dx");
      usernamePasswordToken1.getUsername();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("", "0LEQLt0", true, inetAddress1);
      assertTrue(usernamePasswordToken2.isRememberMe());
      
      usernamePasswordToken2.clear();
      assertFalse(usernamePasswordToken2.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[1];
      MockInetAddress.getByName("y/EkfK$@TT$KC}Z");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false, inetAddress0);
      MockInetAddress.getByName("\"p43@y;H^sO2'aaB8");
      MockInetAddress.getByName("3{H[Qv)m-^;n4qgUh&");
      MockInetAddress.getByName("");
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("y/EkfK$@TT$KC}Z");
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'A';
      charArray0[2] = '0';
      charArray0[3] = '{';
      charArray0[4] = 'B';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("y/EkfK$@TT$KC}Z", charArray0, true, inetAddress0);
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName("SVs-JxyteF|l5h6");
      MockInetAddress.getByName("");
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'z';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("iuCTqz#:jZuMJ?hCJI", charArray0, false);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - iuCTqz#:jZuMJ?hCJI, rememberMe=false", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'U';
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("\"p43@y;H^sO2'aaB8");
      MockInetAddress.getByName("-CPegD_vN");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("*^v`1a[iY", "", inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - *^v`1a[iY, rememberMe=false (/192.168.1.42)", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '`';
      charArray0[5] = '6';
      charArray0[5] = '0';
      charArray0[6] = 'H';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("~Cx.4)jIr", charArray0, true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - ~Cx.4)jIr, rememberMe=true", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[1];
      MockInetAddress.getByName("y/EkfK$@TT$KC}Z");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("l`|L", charArray0, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName((String) null);
      MockInetAddress.getByName("5mDk|bR");
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("8\"nX!>pSyYM!wI", " - ", true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "2RP\\{+cE'M$Dx";
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'U';
      InetAddress inetAddress1 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("2RP{+cE'M$Dx", charArray0, true, inetAddress1);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      MockInetAddress.getByName(" ?),R&m.0{S\":POw-");
      MockInetAddress.getByName("2RP{+cE'M$Dx");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)60;
      try { 
        MockInetAddress.getByAddress("", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-1, -13, -13, -45, 60]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[3] = 'V';
      charArray0[2] = 'c';
      charArray0[3] = '%';
      charArray0[4] = '%';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("*-:KL%3gn", charArray0, true);
      usernamePasswordToken0.getPassword();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = '8';
      charArray0[2] = 'B';
      charArray0[3] = '&';
      charArray0[4] = 'B';
      charArray0[5] = 'T';
      charArray0[6] = 'G';
      charArray0[7] = 'z';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[15];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      char[] charArray1 = new char[8];
      charArray1[0] = 'O';
      charArray1[1] = 'U';
      charArray1[2] = 'U';
      charArray1[3] = 'O';
      charArray1[4] = 'U';
      charArray1[5] = 'U';
      charArray1[6] = 'O';
      charArray1[7] = 'U';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("zr;_J!5}", charArray1, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
