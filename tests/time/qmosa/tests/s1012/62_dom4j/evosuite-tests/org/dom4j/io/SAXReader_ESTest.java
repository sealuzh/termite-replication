/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:48:25 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.QName;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.495136662987768
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "a#xkhQJhL3r^e}");
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler("4Nk[T");
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      sAXReader0.setEncoding("a#xkhQJhL3r^e}");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      EvoSuiteFile evoSuiteFile0 = null;
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"A#XKHQJHL3R^E}\". Nested exception: Invalid encoding name \"A#XKHQJHL3R^E}\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2622243017037382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
          FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
          SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
          xMLFilterImpl0.getDTDHandler();
          xMLFilterImpl0.getEntityResolver();
          parserAdapter0.setEntityResolver((EntityResolver) null);
          SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
          sAXReader0.setEntityResolver(sAXContentHandler0);
          sAXReader0.setXMLReader(parserAdapter0);
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:249)
             // org.xml.sax.helpers.ParserAdapter.parse(ParserAdapter.java:430)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:249)
             // org.xml.sax.helpers.ParserAdapter.parse(ParserAdapter.java:430)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.421284995138365
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getErrorHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.isIgnoreComments();
      String string0 = "RECFXuLASJCj#";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("RECFXuLASJCj#");
      DataInputStream dataInputStream0 = null;
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.469384931184183
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader("2B!+$#7U%Vc=< |<6");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      sAXReader0.setIgnoreComments(true);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "DOCUMENT_NODE");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("ANY_NODE");
      sAXReader_SAXEntityResolver1.resolveEntity("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0.tmp", "//tmp/);f6n 5\"rx0);f6n 5\"rx");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("jhWrfh&YR<&uPN<`)", "ANY_NODE");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0.tmp", "");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.unparsedEntityDecl("Notation", "Notation", "", "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/);f6n 5\"rx0);f6n 5\"rx");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//tmp/);f6n 5\"rx0);f6n 5\"rx");
      InputSource inputSource0 = sAXReader_SAXEntityResolver1.resolveEntity("[zvn|f", ".3");
      SAXReader sAXReader1 = new SAXReader();
      inputSource0.getCharacterStream();
      sAXReader0.isStringInternEnabled();
      sAXReader1.isIncludeInternalDTDDeclarations();
      PipedInputStream pipedInputStream0 = new PipedInputStream(17);
      SAXReader sAXReader2 = new SAXReader((String) null, false);
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/);f6n 5\"rx0);f6n 5\"rx", "ENTITY_REFERENCE_NODE");
      try { 
        sAXReader1.setXMLReaderClassName("X2?E1%I");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class X2?E1%I not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.469384931184183
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(true);
      StringReader stringReader0 = new StringReader("2B!+$#7U%Vc=< |<6");
      sAXReader0.setIgnoreComments(true);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "2B!+$#7U%Vc=< |<6");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("EZ/");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("<Lj7vH0XEuKjR%o)z");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0.tmp", "+_]");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader_SAXEntityResolver0.resolveEntity("5U3^J8LH<fbr$Iir'", "http://xml.org/sax/features/string-interning");
      InputSource inputSource1 = sAXReader_SAXEntityResolver1.resolveEntity("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0.tmp", (String) null);
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx0org.dom4j.dom.DOMComment";
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx0org.dom4j.dom.DOMComment");
      SAXReader sAXReader0 = new SAXReader(true);
      qName0.getQualifiedName();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx0org.dom4j.dom.DOMComment");
      String string1 = null;
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2578501017122745
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("", "?ZNIt>Cj");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("//tmp/org.dom4j.factory07<JQX", "file://");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//tmp/);f6n 5\"rx0);f6n 5\"rx");
      InputSource inputSource1 = sAXReader_SAXEntityResolver1.resolveEntity("", "}");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      MockFile.createTempFile("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx0org.dom4j.dom.DOMComment", "//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx0org.dom4j.dom.DOMComment", (File) null);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = new QName("");
      SAXReader sAXReader0 = new SAXReader(false);
      Object object0 = new Object();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      MockException mockException0 = new MockException();
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl0, mockException0);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, sAXParseException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = new QName("");
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      Object object0 = new Object();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "}");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6183972463477247
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DefaultDocumentFactory.getInstance();
      String string0 = "C(~g,lC*3G?dK";
      documentFactory0.createEntity("C(~g,lC*3G?dK", "f{zTeo");
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.installXMLFilter((XMLReader) null);
      SAXReader sAXReader2 = new SAXReader();
      SAXContentHandler sAXContentHandler0 = sAXReader2.createContentHandler((XMLReader) null);
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@736eaa7 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6204086093677565
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      Object object0 = new Object();
      MockFile.createTempFile("xml", "xml", (File) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("xml");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("Q<", "xml");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("W");
      sAXReader_SAXEntityResolver1.resolveEntity("\"P_/#|xt", "java.version");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx", "//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx0org.dom4j.dom.DOMComment");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      Object object0 = new Object();
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setEncoding("c7SJN[MYq`U\"+OrN");
      dispatchHandler0.resetHandlers();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("c7SJN[MYq`U\"+OrN");
      StringReader stringReader1 = new StringReader("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx");
      try { 
        sAXReader0.read((Reader) stringReader1, "org.dom4j.tree.AbstractNode");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/org.dom4j.tree.AbstractNode : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4905526446902004
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          SAXReader sAXReader0 = new SAXReader(documentFactory0);
          documentFactory0.createNamespace((String) null, "X");
          DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
          defaultHandler2_0.getExternalSubset((String) null, "X");
          HandlerBase handlerBase0 = new HandlerBase();
          PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
          pruningDispatchHandler0.getHandler("~I6%#V%Ig>6=G+MD/");
          sAXReader0.setDefaultHandler((ElementHandler) null);
          sAXReader0.isStripWhitespaceText();
          sAXReader0.getXMLFilter();
          sAXReader0.setErrorHandler(defaultHandler2_0);
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor205.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("MMh5x", "//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx01LpH4;");
      MockFile mockFile1 = new MockFile(mockFile0, "//tmp/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx0org.dom4j.dom.DOMComment0:");
      try { 
        sAXReader0.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.addHandler("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx", (ElementHandler) null);
      assertFalse(sAXReader0.isIgnoreComments());
      
      sAXReader0.setIgnoreComments(true);
      sAXReader0.getDocumentFactory();
      sAXReader0.getXMLFilter();
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      String string0 = "c7SJN[MYq`U\"+OrN";
      sAXReader0.setEncoding("c7SJN[MYq`U\"+OrN");
      dispatchHandler0.resetHandlers();
      String string1 = "q}xmA@?qT0w";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        sAXReader0.read("q}xmA@?qT0w");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: q}xmA@?qT0w Nested exception: no protocol: q}xmA@?qT0w
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      sAXReader0.isStringInternEnabled();
      String string0 = "7T{p]kk<?%R\"<}Z";
      try { 
        sAXReader0.setFeature("7T{p]kk<?%R\"<}Z", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '7T{p]kk<?%R\"<}Z' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "e&[l2");
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      sAXReader0.isValidating();
      sAXReader0.setValidation(true);
      sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "e&[l2");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      sAXReader0.isValidating();
      ParserAdapter parserAdapter1 = null;
      try {
        parserAdapter1 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      XMLReader xMLReader0 = null;
      XMLReaderAdapter xMLReaderAdapter0 = null;
      try {
        xMLReaderAdapter0 = new XMLReaderAdapter((XMLReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // XMLReader must not be null
         //
         verifyException("org.xml.sax.helpers.XMLReaderAdapter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      documentFactory0.createNamespace((String) null, "X");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset((String) null, "X");
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("OA50Dd~<)p-e;qWGk*", "X");
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      sAXReader0.setStringInternEnabled(true);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.isValidating();
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      String string0 = "c7SJN[MYq`U\"+OrN";
      sAXReader0.setEncoding("c7SJN[MYq`U\"+OrN");
      dispatchHandler0.resetHandlers();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("!t{04~N_e;#5,", "c7SJN[MYq`U\"+OrN", 12, "!t{04~N_e;#5,", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      MockFile mockFile0 = new MockFile("http://xml.org/sax/properties/declaration-handler", "Validation not supported for XMLReader: ");
      MockFile mockFile1 = new MockFile(mockFile0, "pnn{");
      URL uRL0 = mockFile1.toURL();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6efb696d Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6efb696d Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      Object object0 = new Object();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx0org.dom4j.dom.DOMComment");
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/);f6n 5\"rx0);f6n 5\"rx");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/);f6n 5\"rx0);f6n 5\"rx not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          SAXReader sAXReader0 = new SAXReader(documentFactory0);
          sAXReader0.setMergeAdjacentText(true);
          documentFactory0.createElement("l0=.", "l0=.");
          try { 
            sAXReader0.read("http://xml.org/sax/features/validation");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:314)
             // sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:314)
             // sun.reflect.GeneratedMethodAccessor116.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      StringReader stringReader0 = new StringReader("org.dom4j.tree.AbstractNode");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.createDefaultEntityResolver("//tmp/);f6n 5\"rx0);f6n 5\"rx");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getErrorHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.isIgnoreComments();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("RECFXuLASJCj#");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "}");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("}", "");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("", "}");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      String string0 = ";]";
      sAXReader0.getXMLFilter();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, (DefaultHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(documentFactory0);
      StringReader stringReader0 = new StringReader("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      documentFactory0.createDocument();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = new QName("");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      Object object0 = new Object();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      MockException mockException0 = new MockException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("(Y\"Kh{S+RT1");
      sAXReader_SAXEntityResolver0.resolveEntity("LJ'<f|V8?Qolht{fe", "LJ'<f|V8?Qolht{fe");
      sAXReader_SAXEntityResolver0.resolveEntity("LJ'<f|V8?Qolht{fe", "(Y\"Kh{S+RT1");
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setDocumentFactory(documentFactory0);
      try { 
        sAXReader0.setFeature("{Wb/D5q:X", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '{Wb/D5q:X' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-61);
      try { 
        pushbackInputStream0.unread(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Object object0 = new Object();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx0org.dom4j.dom.DOMComment");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setStripWhitespaceText(false);
      Object object0 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(documentFactory0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      Document document0 = defaultDocumentFactory1.createDocument();
      assertFalse(document0.supportsParent());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "2Y!%jU?C2`86Xrz8OCu");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "P");
      SAXParseException sAXParseException0 = new SAXParseException("2Y!%jU?C2`86Xrz8OCu", (Locator) null);
      SAXParseException sAXParseException1 = new SAXParseException("2Y!%jU?C2`86Xrz8OCu", (Locator) null);
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("&+iJPCr[x", sAXParseException1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '&+iJPCr[x' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("}Jx;&$AQ(q r7M");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class }Jx;&$AQ(q r7M not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.setValidation(true);
      sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Object object0 = new Object();
      String string0 = "Expected one of '.', '..', '@', '*', <QName>";
      StringReader stringReader0 = new StringReader("Expected one of '.', '..', '@', '*', <QName>");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      assertFalse(sAXReader0.isIgnoreComments());
      
      sAXReader0.setIgnoreComments(true);
      sAXReader0.getDocumentFactory();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      sAXReader0.isStripWhitespaceText();
      sAXReader0.getXMLFilter();
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      assertTrue(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertNotNull(documentFactory0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/r^;#v");
      SAXReader sAXReader0 = new SAXReader(false);
      assertFalse(sAXReader0.isValidating());
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9007452539070404
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      StringReader stringReader0 = new StringReader("org.dom4j.tree.AbstractNode");
      xMLFilterImpl0.unparsedEntityDecl("org.dom4j.tree.AbstractNode", "org.dom4j.tree.AbstractNode", "org.dom4j.tree.AbstractNode", "org.dom4j.tree.AbstractNode");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.tree.AbstractNode");
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.AbstractNode", "org.dom4j.tree.AbstractNode");
      sAXReader0.createContentHandler(xMLFilterImpl0);
      inputSource0.getCharacterStream();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//tmp/xml0xml");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.AbstractNode", "//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.823242702131751
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl1);
      sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      DispatchHandler dispatchHandler1 = sAXReader0.getDispatchHandler();
      dispatchHandler0.addHandler("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx", dispatchHandler1);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      pruningDispatchHandler1.getHandler("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx");
      sAXReader0.setDefaultHandler(pruningDispatchHandler1);
      sAXReader0.isStripWhitespaceText();
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.getXMLFilter();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      MockURL.getFileExample();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      assertEquals("Document", defaultDocument0.getNodeTypeName());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6362910773439094
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLFilterImpl0.endElement("<WqJ\"l!3W(M.", "<WqJ\"l!3W(M.", "<WqJ\"l!3W(M.");
      sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.resetHandlers();
      sAXReader0.isIgnoreComments();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@24ddc30e Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      String string0 = "No modification allowed";
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 781);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0, "No modification allowed");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.4905526446902
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
          sAXReader0.getEntityResolver();
          sAXReader0.getXMLFilter();
          sAXReader0.isMergeAdjacentText();
          sAXReader0.removeHandler("");
          try { 
            sAXReader0.read((Reader) null, "http://xml.org/sax/features/string-interning");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:392)
             // sun.reflect.GeneratedMethodAccessor134.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:392)
             // sun.reflect.GeneratedMethodAccessor134.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      Object object0 = new Object();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      MockException mockException0 = new MockException("%uuoP-", mockThrowable0);
      mockException0.fillInStackTrace();
      SAXParseException sAXParseException0 = new SAXParseException("&X{n! (oVC#M$6d:", locatorImpl0, mockException0);
      SAXParseException sAXParseException1 = new SAXParseException("xml", "&X{n! (oVC#M$6d:", "@iA*=2IDxtD", 19, 29, sAXParseException0);
      SAXReader sAXReader1 = new SAXReader(true);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertTrue(sAXReader1.isValidating());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      
      sAXReader0.removeHandler("http://xml.org/sax/features/namespace-prefixes");
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      StringReader stringReader0 = new StringReader("org.dom4j.tree.AbstractNode");
      StringReader stringReader1 = new StringReader("org.dom4j.tree.AbstractNode");
      try { 
        sAXReader0.read((Reader) stringReader1, "org.dom4j.tree.AbstractNode");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getXMLReader();
      Object object0 = new Object();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      assertFalse(locator2Impl1.equals((Object)locator2Impl0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      try { 
        sAXReader0.read("]o&Nw%o}W");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "rVm";
      try { 
        sAXReader0.read("rVm");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/rVm (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/rVm (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      Object object0 = new Object();
      File file0 = MockFile.createTempFile("//tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx/tmp/tmp/);f6n 5\"rx0);f6n 5\"rx0/tmp/);f6n 5\"rx0);f6n 5\"rx0org.dom4j.dom.DOMComment", ":", (File) null);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      documentFactory0.createNamespace((String) null, "X");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.startDocument();
      defaultHandler2_0.getExternalSubset((String) null, "X");
      HandlerBase handlerBase0 = new HandlerBase();
      InputSource inputSource0 = new InputSource((String) null);
      DefaultDocument defaultDocument0 = new DefaultDocument("X");
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      Object object0 = new Object();
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      documentFactory0.createNamespace((String) null, "X");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset((String) null, "X");
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("OA50Dd~<)p-e;qWGk*", "X");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      documentFactory0.createNamespace("6FhgE408QVwfF5%>(C", "6FhgE408QVwfF5%>(C");
      StringReader stringReader0 = new StringReader("6FhgE408QVwfF5%>(C");
      DocumentFactory documentFactory1 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory1);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
