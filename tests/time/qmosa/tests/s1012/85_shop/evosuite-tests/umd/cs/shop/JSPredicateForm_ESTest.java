/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:59:07 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6105981585090818
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aRf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeElement(jSTerm0);
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.toStr();
      jSTerm0.add((Object) stringReader0);
      jSTerm0.toStr();
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1031808349614796
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("he tokenizeris SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      CharBuffer charBuffer0 = CharBuffer.allocate(1261);
      CharBuffer charBuffer1 = CharBuffer.allocate(1583);
      charBuffer0.codePoints();
      charBuffer0.append((CharSequence) "he tokenizeris SPACE!");
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      charBuffer2.codePoints();
      StringReader stringReader1 = new StringReader("call");
      stringReader1.read(charBuffer1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) null);
      System.setCurrentTimeMillis(1583);
      // Undeclared exception!
      try { 
        jSTerm2.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.684242054703787
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("he tokenizeris SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      CharBuffer charBuffer0 = CharBuffer.allocate(1261);
      CharBuffer.allocate(1583);
      charBuffer0.codePoints();
      StringReader stringReader1 = new StringReader("5aRf");
      stringReader1.read(charBuffer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Object object0 = jSTerm1.clone();
      jSTerm0.add(object0);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm1);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-1L));
      jSPredicateForm1.print();
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6893744712390798
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = object0;
      StringReader stringReader0 = new StringReader("(O 8=8aD!2psm r6 ~[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9086107009749056
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("he tokenizeris SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      CharBuffer charBuffer0 = CharBuffer.allocate(1261);
      CharBuffer charBuffer1 = CharBuffer.allocate(1583);
      charBuffer0.codePoints();
      StringReader stringReader1 = new StringReader("5aRf");
      stringReader1.read(charBuffer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm2.remove((Object) charBuffer1);
      jSTerm0.add((Object) jSTerm2);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-1L));
      jSTerm1.clonePF();
      jSTerm2.toStr();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(16, stringBuffer0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.790783678099714
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("he tokenizeris SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      CharBuffer charBuffer0 = CharBuffer.allocate(1261);
      CharBuffer.allocate(1583);
      charBuffer0.codePoints();
      StringReader stringReader1 = new StringReader("5aRf");
      stringReader1.read(charBuffer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Object object0 = jSTerm1.clone();
      jSTerm0.add(object0);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3447004957129813
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "O+@Rp'oWj&J5y";
      StringReader stringReader0 = new StringReader("O+@Rp'oWj&J5y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      int int0 = 0;
      jSPredicateForm0.add(0, (Object) "O+@Rp'oWj&J5y");
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.290264493682128
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aRf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm2.standarizerPredicateForm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm3 = jSTerm1.standarizerPredicateForm();
      jSPredicateForm0.matches(jSPredicateForm3, (JSSubstitution) null);
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      jSPredicateForm1.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm2);
      JSPredicateForm jSPredicateForm5 = null;
      try {
        jSPredicateForm5 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2001934592198253
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("he tokenizeris SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm1.add((Object) null);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm2.toStr();
      jSTerm2.add((Object) jSTerm0);
      jSTerm2.toStr();
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = jSTerm2.matches((JSPredicateForm) jSTerm1);
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm0 = jSTerm2.applySubstitutionPF(jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
      assertEquals(2, jSPredicateForm0.size());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9456778256324558
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("7?#y}Zxw,9rUi");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4748307083481942
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      Integer integer0 = new Integer((-1934229449));
      jSTerm0.add((Object) integer0);
      streamTokenizer0.ordinaryChar((-1934229449));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.061093750171824
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      CharBuffer.allocate(1261);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.clonePF();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator1.compose((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator1.compose((Function<? super String, ? extends String>) function7);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator.identity();
      Function<Object, String> function8 = unaryOperator1.compose((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function8);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function9);
      streamTokenizer0.resetSyntax();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      System.setCurrentTimeMillis(22L);
      jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.equals(jSPredicateForm2);
      System.setCurrentTimeMillis(32);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "O+@Rp'oWj&J5y";
      StringReader stringReader0 = new StringReader("O+@Rp'oWj&J5y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7824268046877836
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O+@Rp'oWj&J5y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      stringReader0.reset();
      jSPredicateForm0.add(0, (Object) "O+@Rp'oWj&J5y");
      jSTerm0.isGround();
      int int0 = 6;
      stringReader0.mark(6);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.forEach(consumer0);
      System.setCurrentTimeMillis((-1L));
      jSTerm0.makeFunction();
      jSPredicateForm0.isEmpty();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("O+@Rp'oWj&J5y");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function2);
      streamTokenizer0.resetSyntax();
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSTerm0.toStr();
      jSTerm0.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0398717187473006
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      CharBuffer.allocate(1261);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.clonePF();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator1.compose((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator1.compose((Function<? super String, ? extends String>) function7);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator.identity();
      Function<Object, String> function8 = unaryOperator1.compose((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function8);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function9);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSSubstitution1);
      System.setCurrentTimeMillis(1261);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm2.standarizerPredicateForm();
      jSTerm2.equals(jSPredicateForm0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.714368502479712
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("he tokenizeris SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      CharBuffer charBuffer0 = CharBuffer.allocate(1261);
      CharBuffer.allocate(1583);
      charBuffer0.codePoints();
      StringReader stringReader1 = new StringReader("5aRf");
      stringReader1.read(charBuffer0);
      JSJshopVars.rightPar = 32;
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm1);
      System.setCurrentTimeMillis((-1022L));
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSPredicateForm2);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aRf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("Predicateform.print(): 0 elements");
      stringReader1.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.216607938444404
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm1.forEach(consumer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSPredicateForm2.firstElement();
      jSPredicateForm0.remove((Object) stringReader0);
      jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSTerm0.matches(jSPredicateForm3);
      // Undeclared exception!
      try { 
        jSPredicateForm3.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2189974247048583
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm1.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = null;
      try {
        jSPredicateForm3 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) jSPredicateForm0;
      Object object1 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6796742326465708
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aRf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.removeElement(jSTerm1);
      jSTerm1.add((Object) jSTerm2);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.toStr();
      jSTerm0.add((Object) stringReader0);
      jSTerm1.toStr();
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      Integer integer0 = new Integer((-1934229449));
      jSTerm0.add((Object) integer0);
      streamTokenizer0.ordinaryChar((-1934229449));
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zE2}k7\u0000 hz}tV]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.add(0, (Object) "zE2}k7\u0000 hz}tV]");
      System.setCurrentTimeMillis((-1L));
      jSTerm0.makeFunction();
      Integer integer0 = new Integer(32);
      jSTerm0.equals(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.035373967622863
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.clonePF();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      JSTerm jSTerm1 = new JSTerm();
      function4.apply(jSTerm1);
      unaryOperator1.compose((Function<? super String, ? extends String>) function4);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function5 = unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function6);
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0277013333517635
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aRf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Object object0 = new Object();
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.clonePF();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<String, String> function3 = Function.identity();
      unaryOperator1.compose((Function<? super String, ? extends String>) function3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator.identity();
      Function<Object, String> function4 = null;
      // Undeclared exception!
      try { 
        unaryOperator1.compose((Function<? super Object, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.apply(jSSubstitution0);
      Function<Object, String> function1 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function0);
      Function<Integer, String> function2 = unaryOperator1.compose((Function<? super Integer, ? extends String>) function1);
      unaryOperator1.compose((Function<? super Integer, ? extends String>) function2);
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) unaryOperator0);
      jSPredicateForm0.toStr();
      Function.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Function<JSPredicateForm, JSPredicateForm> function3 = Function.identity();
      assertNotNull(function3);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8008883431493221
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aRf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.add((Object) jSTerm1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.add((Object) null);
      jSTerm2.standarizerPredicateForm();
      jSTerm2.equals((JSPredicateForm) jSTerm1);
      System.setCurrentTimeMillis((-1));
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8008883431493221
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm2.matches((JSPredicateForm) jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aRf");
      StringReader stringReader1 = new StringReader("Predicateform.prit(): 0 elements");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSSubstitution0.add((Object) jSTerm0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution2 = jSPredicateForm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aRf");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.216607938444404
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      streamTokenizer0.pushBack();
      jSPredicateForm1.forEach(consumer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSPredicateForm2.firstElement();
      jSPredicateForm0.remove((Object) stringReader0);
      jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSTerm0.matches(jSPredicateForm3);
      // Undeclared exception!
      try { 
        jSPredicateForm3.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.240490614204453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      JSTerm jSTerm1 = new JSTerm();
      function4.apply(jSTerm1);
      unaryOperator1.compose((Function<? super String, ? extends String>) function4);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      System.setCurrentTimeMillis((-707L));
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm1.equals(jSPredicateForm3);
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
      
      boolean boolean1 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean1 == boolean0);
      
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      assertNotSame(jSPredicateForm5, jSPredicateForm1);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSPredicateForm0);
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSPredicateForm0, jSPredicateForm4);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1619492248490166
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm1.matches(jSPredicateForm3, jSSubstitution0);
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm1.add((Object) jSPredicateForm4);
      JSPredicateForm jSPredicateForm5 = null;
      try {
        jSPredicateForm5 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      Integer integer0 = new Integer((-1934229449));
      jSTerm0.add((Object) integer0);
      int int0 = (-1934229449);
      streamTokenizer0.ordinaryChar((-1934229449));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aRf");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.backquote = 0;
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hJ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSPredicateForm0.parallelStream();
      JSJshopVars.minus = (-1);
      jSSubstitution0.addAll((Collection) jSTerm0);
      stringReader0.read();
      jSTerm0.equals(jSPredicateForm0);
      stringReader0.close();
      jSTerm0.add((Object) "hJ");
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      Integer integer0 = new Integer((-1934229449));
      StringReader stringReader1 = new StringReader("the tokenizer is SPACE!");
      stringReader0.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9459947988923698
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      CharBuffer.allocate(1261);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function4 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator1.compose((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator1.compose((Function<? super String, ? extends String>) function7);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator.identity();
      Function<Object, String> function8 = unaryOperator1.compose((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function8);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      unaryOperator1.andThen((Function<? super String, ? extends String>) function9);
      streamTokenizer0.resetSyntax();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm2.equals(jSPredicateForm0);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9439244055176288
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("the tokenizer is SPACE!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      CharBuffer.allocate(1261);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator1.compose((Function<? super String, ? extends String>) function5);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator2.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function7);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function7);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator2.andThen((Function<? super String, ? extends String>) function6);
      streamTokenizer0.resetSyntax();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSTerm0.standarizerPredicateForm();
      jSPredicateForm2.equals(jSPredicateForm1);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object object1 = new Object();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      stringReader0.close();
      System.setCurrentTimeMillis((-385L));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = (-3);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) jSTerm0;
      Object object1 = new Object();
      jSTerm0.equals((JSPredicateForm) null);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.interrogation = 1;
      JSJshopVars.backquote = 0;
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("he tokenizeris SPACE!");
      CharBuffer.allocate(1261);
      CharBuffer charBuffer0 = CharBuffer.allocate(1583);
      CharBuffer charBuffer1 = CharBuffer.allocate(4495);
      charBuffer1.codePoints();
      charBuffer0.append((CharSequence) "he tokenizeris SPACE!");
      CharBuffer charBuffer2 = CharBuffer.allocate(4495);
      charBuffer2.rewind();
      charBuffer2.codePoints();
      StringReader stringReader1 = new StringReader("o");
      stringReader0.read(charBuffer2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("he tokenizeris SPACE!");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5aRf");
      CharBuffer.allocate(1261);
      CharBuffer charBuffer0 = CharBuffer.allocate(1583);
      CharBuffer charBuffer1 = CharBuffer.allocate(1261);
      charBuffer1.codePoints();
      CharBuffer charBuffer2 = charBuffer0.append((CharSequence) charBuffer1);
      CharBuffer.allocate(304);
      charBuffer2.rewind();
      charBuffer2.codePoints();
      StringReader stringReader1 = new StringReader("5aRf");
      CharBuffer charBuffer3 = CharBuffer.allocate(4495);
      stringReader0.read(charBuffer3);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
