/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 00:29:57 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(700L);
      StringReader stringReader0 = new StringReader(" Term expected");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      stringReader0.read();
      stringReader0.skip(0L);
      streamTokenizer0.nval = (-1.0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      stringReader0.markSupported();
      jSTerm0.toStr();
      jSTerm0.standarizerPredicateForm();
      streamTokenizer0.nval = 88.112973;
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm1.lastElement();
      jSSubstitution0.add((Object) "%%%");
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      char[] charArray0 = new char[0];
      streamTokenizer0.nval = (-2097.102687565);
      JSJshopVars.verticalL = 2147483645;
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 45, 93);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280554
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?iP@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.addAll(0, (Collection) jSTerm0);
      String string0 = "`&:*:o?4W`?b";
      StringReader stringReader0 = new StringReader("call ");
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.get((-1081480510));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3077310467626386
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("wzVeN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.standardizerTerm();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm3, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3265432531941137
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uFC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.markSupported();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertEquals("[%%%]", jSTerm2.toString());
      
      JSJshopVars.percent = (-3);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertFalse(jSTerm3.isEval());
      
      JSJshopVars.equalT = (-1);
      JSTerm jSTerm4 = jSTerm1.call();
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isFunction());
      
      jSTerm0.isConstant();
      jSTerm0.print();
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.print();
      Function.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSSubstitution0.add((Object) unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("dn&ZqtRYC-IRUQ");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      Integer integer0 = new Integer(1);
      jSSubstitution0.add((Object) integer0);
      JSJshopVars.whiteSpace = 99;
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSJshopVars.whiteSpace = 0;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2230687847673978
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.isEmpty();
      jSTerm0.addAll((Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("wzVeN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0262296229952916
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.add((Object) null);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.matches(jSTerm0);
      jSTerm0.removeAll(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.33516092027695
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.matches(jSTerm0);
      jSTerm0.removeAll(jSSubstitution0);
      jSTerm1.print();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("wiw");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.makeFunction();
      jSSubstitution2.parallelStream();
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSSubstitution2.fail());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8288411561741995
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Integer> predicate4 = Predicate.isEqual((Object) "w*3$");
      Predicate<Integer> predicate5 = predicate4.or(predicate3);
      Predicate<Integer> predicate6 = predicate5.and(predicate4);
      Predicate<Integer> predicate7 = predicate6.negate();
      predicate7.and(predicate7);
      predicate5.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) null);
      jSSubstitution0.removeIf(predicate3);
      Predicate<Integer> predicate9 = predicate6.and(predicate8);
      predicate7.and(predicate1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm2;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) predicate9;
      objectArray0[3] = (Object) predicate9;
      objectArray0[4] = (Object) predicate7;
      objectArray0[5] = (Object) predicate9;
      objectArray0[6] = (Object) jSTerm1;
      objectArray0[7] = (Object) predicate7;
      objectArray0[8] = (Object) predicate3;
      jSTerm2.toArray(objectArray0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-3694L));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6357434952314973
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      String string0 = "wzVeN";
      jSTerm0.addAll((Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("wzVeN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6357434952314973
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      String string0 = "wzVeN";
      jSTerm0.addAll((Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("wzVeN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.minus = 41;
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3143738430069454
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("wzVeN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8848713335781608
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution1.fail());
      
      jSTerm0.removeAll(jSSubstitution0);
      StringReader stringReader0 = new StringReader("[)Fl!d%5~xZ[*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean0 = jSTerm1.isFunction();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0330001999799117
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      StringReader stringReader0 = new StringReader("wiw");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.parallelStream();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution3.fail());
      assertNotSame(jSSubstitution3, jSSubstitution0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm2.isConstant());
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(wiW%OJSW-.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4287691203187398
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      StringReader stringReader0 = new StringReader("wz");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.parallelStream();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution3.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.574679441748109
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      stringReader0.read();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("wzVeN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.removeAll(jSSubstitution0);
      JSJshopVars.minus = 41;
      StringReader stringReader1 = new StringReader(".AH+mot.r3I");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      assertFalse(jSTerm1.isEval());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution2.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(",??h%d?Lf1S>xyi");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      streamTokenizer1.quoteChar((-1527));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader(",??h%d?Lf1S>xyi");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1988493129136213
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      StringReader stringReader0 = new StringReader("wiw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.retainAll(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("zNrk^Nna,r[s.qx`s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(0);
      streamTokenizer0.ordinaryChars((-1526), 2);
      int int0 = 63;
      streamTokenizer1.ordinaryChars(63, 33);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 0;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.245171589411516
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      jSTerm0.standardizerTerm();
      jSTerm1.removeAll(jSTerm0);
      jSTerm1.makeEval(false);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.141963331773656
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SdX&+*e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSJshopVars.semicolon = (-1);
      jSTerm0.spliterator();
      streamTokenizer0.nextToken();
      jSTerm0.isGround();
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'A';
      charArray0[2] = 'b';
      charArray0[3] = 'o';
      charArray0[4] = '2';
      charArray0[5] = '\\';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSTerm) null, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.matches((JSTerm) null, jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm2.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9083472827373773
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SdX&+*e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSJshopVars.semicolon = (-1);
      jSTerm0.spliterator();
      streamTokenizer0.nextToken();
      jSTerm0.isGround();
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'A';
      charArray0[2] = 'b';
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm1.isGround();
      JSTerm jSTerm2 = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.377819508039033
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      StringReader stringReader0 = new StringReader("wiw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4254797046832532
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      jSTerm0.standardizerTerm();
      jSTerm1.removeAll(jSTerm0);
      jSTerm1.makeEval(false);
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.makeFunction();
      // Undeclared exception!
      try { 
        JSEvaluate.numericValue(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.174308236115124
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      jSTerm0.standardizerTerm();
      jSTerm1.removeAll(jSTerm0);
      jSTerm1.makeEval(true);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1403895206310386
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.remove(0);
      jSTerm0.call();
      jSTerm2.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        JSEvaluate.numericValue(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertTrue(jSSubstitution0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.69240886298655
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("7A'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-1527));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-1527));
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0751393240053733
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      StringReader stringReader0 = new StringReader("wiw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StringReader stringReader1 = new StringReader("] ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4735023850806486
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.cloneT();
      JSTerm jSTerm1 = new JSTerm();
      int int0 = (-982);
      JSJshopVars.apostrophe = (-982);
      JSJshopVars.plus = (-1);
      stringReader0.reset();
      jSTerm0.equals(jSTerm1);
      Predicate<Object> predicate0 = null;
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "R");
      // Undeclared exception!
      try { 
        predicate1.and((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8576597663535837
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-2), 0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "`&:*:o?4W`?b");
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.and(predicate1);
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer((-2));
      Integer integer2 = new Integer((-4));
      predicate1.test(integer2);
      predicate2.negate();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      Predicate<Integer> predicate3 = predicate0.negate();
      Predicate<Integer> predicate4 = Predicate.isEqual((Object) predicate0);
      predicate4.negate();
      Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Integer> predicate5 = predicate3.or(predicate4);
      predicate5.or(predicate0);
      jSTerm0.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.771623955677366
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("`&:*:o?4W`?b");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.removeAllElements();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      assertFalse(jSTerm0.isEmpty());
      
      System.setCurrentTimeMillis((-373L));
      System.setCurrentTimeMillis(0);
      JSTerm jSTerm2 = jSTerm0.call();
      assertEquals(10, jSTerm2.capacity());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.347578109497319
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = (JSTerm)jSTerm1.remove(0);
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.equals(jSTerm3);
      jSTerm1.isGround();
      jSTerm2.isGround();
      jSSubstitution1.listIterator();
      JSTerm jSTerm4 = null;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1403895206310386
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.remove(0);
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8576597663535837
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-2), 0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "`&:*:o?4W`?b");
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.and(predicate1);
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer((-2));
      Integer integer2 = new Integer((-4));
      predicate1.test(integer2);
      Predicate<Integer> predicate3 = predicate2.negate();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      Predicate<Integer> predicate4 = predicate3.and(predicate0);
      Predicate<Integer> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate5.negate();
      Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Integer> predicate6 = predicate4.negate();
      predicate6.or(predicate0);
      jSTerm0.removeIf(predicate1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1286207461851414
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("wzVeN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.minus = 41;
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.lessT = 45;
      jSTerm1.call();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.isGround();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.standardizerTerm();
      Object object0 = new Object();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSTerm2);
      Predicate<Integer> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Integer> predicate2 = predicate0.and(predicate1);
      Predicate<Integer> predicate3 = predicate2.and(predicate0);
      Predicate<Integer> predicate4 = predicate1.or(predicate0);
      jSTerm1.firstElement();
      Predicate.isEqual((Object) "%%%");
      predicate1.negate();
      Predicate<Integer> predicate5 = predicate3.negate();
      predicate2.or(predicate5);
      jSTerm0.removeIf(predicate4);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("list ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertNotSame(jSTerm2, jSTerm1);
      assertEquals(1, jSTerm2.size());
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.clear();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.375928993365654
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.print();
      Function.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSSubstitution0.add((Object) unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.matches(jSTerm0);
      jSTerm0.removeAll(jSSubstitution0);
      jSTerm1.print();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("wiw");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2821740957339176
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SdX&+*e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSJshopVars.semicolon = (-1);
      jSTerm0.spliterator();
      streamTokenizer0.nextToken();
      jSTerm0.isGround();
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'A';
      charArray0[2] = 'K';
      charArray0[3] = 'o';
      charArray0[4] = '2';
      charArray0[5] = '\\';
      charArray0[6] = '(';
      stringReader0.read(charArray0);
      jSTerm0.equals(jSTerm0);
      JSJshopVars.greaterT = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      jSTerm1.trimToSize();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) streamTokenizer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) streamTokenizer0;
      jSTerm1.toArray(objectArray0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9254081650860664
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.rightPar = 61;
      JSJshopVars.apostrophe = (-982);
      JSJshopVars.plus = (-1);
      stringReader0.reset();
      jSTerm2.isEmpty();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.matches(jSTerm1);
      jSTerm4.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2006631885058168
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SdX&+*e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSJshopVars.semicolon = (-1);
      jSTerm0.spliterator();
      streamTokenizer0.nextToken();
      jSTerm0.isGround();
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'b';
      charArray0[3] = 'o';
      charArray0[4] = '2';
      charArray0[5] = '\\';
      charArray0[6] = '(';
      stringReader0.read(charArray0);
      jSTerm0.isVariable();
      JSJshopVars.greaterT = (int) 'o';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.trimToSize();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) streamTokenizer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) streamTokenizer0;
      jSTerm1.toArray(objectArray0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      unaryOperator0.apply(jSSubstitution1);
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSJshopVars.whiteSpace = 0;
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("([(this Collection)] )", stringBuffer0.toString());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9459101490553132
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?iP@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.631345420808597
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("? P|<{/4wH0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution1.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(",??h%d?Lf1E>xyi");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-1526));
      streamTokenizer0.quoteChar((-1526));
      streamTokenizer0.ordinaryChars(1714, 1714);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      int int0 = 191;
      streamTokenizer2.ordinaryChars((-4), 191);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8848713335781608
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.166084939249829
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?iP@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm2.isFunction());
      assertEquals("[?%%%0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isVariable());
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm0.toString());
      assertEquals(5, stringBuffer0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8288411561741995
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
