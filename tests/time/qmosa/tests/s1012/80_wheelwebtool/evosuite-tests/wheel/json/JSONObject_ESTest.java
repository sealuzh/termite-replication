/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 22:59:03 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.874746655387473
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(1, 356.6F);
      JSONObject jSONObject1 = jSONObject0.put("hx_dAjfv<WDt6Z", (Map) hashMap0);
      Integer integer0 = new Integer(1);
      Integer.getInteger("hx_dAjfv<WDt6Z", (-2677));
      Float float0 = new Float((float) 1);
      hashMap0.put(integer0, float0);
      int int0 = 953;
      jSONObject0.toString(953);
      jSONObject0.toString(1);
      jSONObject1.optJSONObject((String) null);
      byte byte0 = (byte)50;
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getJSONArray("wai");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wai\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0952864969994844
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.doubleToString(1169.8884);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "~Q{9dj;8}svB3.uPL!\"";
      String string1 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("~Q{9dj;8}svB3.uPL!\"", (Collection) linkedList0);
      jSONObject0.optString("~Q{9dj;8}svB3.uPL!\"", (String) null);
      JSONTokener jSONTokener0 = new JSONTokener("1169.8884");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 1169.8884
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7442020541196785
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gC";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("cX5~c0NO", false);
      JSONObject jSONObject2 = jSONObject0.put("u:i|+F", (-4243));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject3 = jSONObject1.put("false", (Collection) linkedList0);
      String string0 = jSONObject2.toString();
      assertNotNull(string0);
      
      jSONObject3.remove("JSONArray initial value should be a string or collection or array.");
      long long0 = jSONObject3.optLong("va");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7522568047010183
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("] is not a number.");
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.put((double) 0L);
      jSONArray0.optDouble(9, (double) 9);
      JSONObject.quote("app");
      JSONObject.quote("\"app\"");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("app");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of app
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0479223673954077
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gC";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("cX5~c0NO", false);
      jSONObject0.optBoolean("cX5~c0NO");
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject2 = new JSONObject(boolean0, stringArray0);
      jSONObject2.optInt("gC", 17);
      jSONObject1.toString();
      jSONObject1.has("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      jSONObject1.put("000", (Collection) linkedList3);
      assertEquals(2, jSONObject1.length());
      
      jSONObject2.toString();
      jSONObject2.remove(";x+$z?_V5,qkF>2wR");
      long long0 = jSONObject2.optLong("getequals");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0080350992949034
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONObject jSONObject2 = new JSONObject();
      Integer integer0 = new Integer((-425));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wheel.json.JSONException";
      stringArray0[1] = "wheel.json.JSONException";
      stringArray0[2] = "__*ji&+qv";
      Double double0 = new Double(8L);
      JSONObject.valueToString(double0);
      stringArray0[4] = "U5a";
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      jSONObject0.put("wheel.json.JSONException", (-425));
      jSONObject0.optJSONArray("oO%aJv&.aG2-9%[");
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject1.isNull("wheel.json.JSONObject");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8811378337201172
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      Long long2 = new Long((-1889));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float(3627.0);
      Float.isFinite((-1889));
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) float0);
      JSONObject jSONObject2 = jSONObject1.putOpt(">)uo=)LH", float0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      Object object1 = new Object();
      JSONObject.getNames(object1);
      long long3 = jSONObject2.optLong(">)uo=)LH");
      assertEquals(1, jSONObject0.length());
      assertEquals(3627L, long3);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2674037897666666
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float(3627.0);
      Float.isFinite((-1889));
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) float0);
      jSONObject0.optString(">)uo=)LH");
      jSONObject0.isNull("-1.00");
      try { 
        jSONObject1.getJSONObject("a8L33");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a8L33\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "\\u";
      jSONObject0.optDouble(string0);
      try { 
        jSONObject0.put(string0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0490393926446688
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject.quote("wheel.json.JSONTokener");
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject.quote((String) null);
      JSONObject.quote((String) null);
      JSONObject.testValidity((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONTokener");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONTokener
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gJC";
      stringArray0[1] = "";
      String string0 = "] ib not a Boolean.";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put(stringArray0[2], false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8804916101540115
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gC";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\t", false);
      StringWriter stringWriter0 = new StringWriter(2615);
      stringWriter0.close();
      stringWriter0.append((CharSequence) "");
      jSONObject0.putOpt("gC", "GT{I}*Fi<f]X<=e`w");
      stringWriter0.append(']');
      stringWriter0.write(2615);
      JSONObject jSONObject2 = jSONObject1.put("", (-631));
      jSONObject2.optJSONArray("isequals");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject2.optLong("", (long) 2615);
      JSONTokener jSONTokener0 = new JSONTokener("i5ZB];JUWsWb6Yy2'e");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of i5ZB];JUWsWb6Yy2'e
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.920375822514236
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("\b", 0L);
      jSONObject1.optBoolean("] not found.");
      jSONObject1.toString(46, 111);
      Short.compare((short)47, (short)8448);
      jSONObject0.optDouble("{\n                                                                                                                                                             \"java.lang.String@0000000004\": java.lang.Long@0000000005,\n                                                                                                                                                             \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n                                                                                                               }", 0.0);
      jSONObject0.remove("VFx");
      jSONObject1.optLong("=s");
      // Undeclared exception!
      jSONObject1.toString((int) (short)8448, 111);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.708727541247471
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Map<Long, Integer> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "\\u";
      jSONObject0.optDouble(string0);
      JSONObject jSONObject1 = jSONObject0.put(": ", 56.4696156602178);
      String string1 = "JSONArray[";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Long long0 = Long.getLong(string0, 0L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(109);
      hashMap0.put(integer0, long0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.keys();
      Float float0 = new Float((double) 0L);
      Object object0 = JSONObject.NULL;
      jSONObject1.put(string0, object0);
      jSONObject1.toString(83, 123);
      try { 
        jSONObject0.getInt("PH9RyoHnysB(l,g7>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"PH9RyoHnysB(l,g7>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.853385597166547
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      Long.getLong("9F]<R_qJ", 0L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.put(">)uom]LH", (Object) float0);
      jSONObject0.toString(123, 123);
      jSONObject0.optJSONObject("Null pointer");
      JSONObject.getNames((Object) jSONObject1);
      StringWriter stringWriter0 = new StringWriter(383);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">)uom]LH");
      jSONObject0.write(stringWriter1);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      String string1 = jSONObject0.getString(">)uom]LH");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.494054379625227
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Long.getLong("2K9ibwnU'6BvLFW");
      JSONObject.numberToString(byte0);
      jSONObject0.optLong("2K9ibwnU'6BvLFW");
      Object object0 = new Object();
      String string0 = "wheel.json.JSONException";
      jSONObject0.append("wheel.json.JSONException", "java.lang.Byte@0000000004");
      Integer integer0 = new Integer(476);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONException", integer0);
      try { 
        jSONObject1.put((String) null, (int) (byte)99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString((Object) null, 209, 34);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.983818251559958
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject.doubleToString(0.31954507037238045);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0.31954507037238045";
      stringArray0[0] = "0.31954507037238045";
      int int0 = 0;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, (long) 0);
      JSONTokener jSONTokener0 = new JSONTokener("0.31954507037238045");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 0.31954507037238045
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4173031381166896
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      jSONObject0.optLong("] is not a number.");
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray1 = jSONArray0.put((double) 9);
      int int0 = (-108);
      jSONArray0.optDouble((-108), 0.0);
      JSONObject.getNames(jSONObject0);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.628972620804062
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = new Float((-570.402424564));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "GU<uc\"+4y|w";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "~W'!^";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("~W'!^", "GU<uc\"+4y|w");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.addAll((Collection<?>) linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.add((Object) "GU<uc\"+4y|w");
      jSONObject0.toString(239, (-195));
      Short.compare((short) (-108), (short) (-108));
      jSONObject1.optDouble("Eo\"I\"", (-896.58323257111));
      jSONObject1.remove("{\"java.lang.String@0000000003\": [\"java.lang.String@0000000005\"]}");
      long long0 = jSONObject0.optLong("GU<uc\"+4y|w");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.2444564776422196
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.031334983940743
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      stringArray0[3] = "\b";
      stringArray0[4] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      jSONObject0.put("\b", false);
      JSONObject.quote("\b");
      int int0 = 43;
      Integer integer0 = new Integer(43);
      int int1 = 19;
      Integer.max(59, 19);
      JSONObject.valueToString(integer0, 43, 43);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \b
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3264815432622115
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7f$e";
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "<&";
      stringArray0[4] = "\r";
      stringArray0[5] = "null";
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>(hashMap0);
      Integer integer0 = new Integer(3224);
      Long long0 = Long.valueOf((long) 3224);
      hashMap1.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float((-282.25834015458));
      jSONObject0.put("<&", (Object) hashMap1);
      jSONObject0.putOpt("] is not a number.", (Object) null);
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject.getNames(object1);
      int int0 = jSONObject0.optInt("Expected a ',' or ']'");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7621783446330834
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "hx_dAjfv<WDt6Z";
      int int0 = 1;
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>(1, 1);
      JSONObject jSONObject1 = jSONObject0.put("hx_dAjfv<WDt6Z", (Map) hashMap0);
      Integer integer0 = new Integer(1);
      Float float0 = new Float((float) 1);
      hashMap0.put(integer0, float0);
      JSONObject.valueToString(jSONObject0, 39, 1206);
      String string1 = "] is not a Boolean.";
      try { 
        jSONObject1.getDouble("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2976322415905193
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "N7{%p=o-/J";
      jSONObject0.optLong("] is not a number.");
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.put((double) 0L);
      jSONArray0.optDouble(9, (double) 9);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toJSONArray(jSONArray0);
      Long.getLong("true");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.086049059460178
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "\\u";
      jSONObject0.optDouble(string0);
      JSONObject jSONObject1 = jSONObject0.put(": ", 56.4696156602178);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.spliterator();
      jSONObject1.put("JSONArray[", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.putOpt("q~E\"^2[^YPU~d4M.", "q~E\"^2[^YPU~d4M.");
      jSONObject2.optInt("null");
      jSONObject2.putOpt("Expected a ':' after a key", "Expected a ':' after a key");
      JSONObject jSONObject3 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject4 = jSONObject2.append("wheel.json.JSONException", "Expected a ':' after a key");
      jSONObject1.toString(15, (-1195));
      Short.compare((short)3465, (short)3465);
      jSONObject4.optDouble("!yt_:#i8ye]Cy_", 67.86515165827);
      String string1 = "\\u";
      jSONObject2.remove(string1);
      long long0 = jSONObject0.optLong(".");
      assertEquals(5, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.955278611839265
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "1BHqpzGbQu&Dpe|l~l,";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.optInt("!{cA", (-129));
      jSONObject0.toString();
      jSONObject0.has("");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList3);
      jSONObject1.toString();
      jSONObject1.remove((String) null);
      long long2 = jSONObject0.optLong("rw{c;13*?vl%EdBAUB");
      jSONObject1.toString((-129), (-129));
      assertEquals(1, jSONObject0.length());
      assertFalse(long0.equals((Object)long2));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7147176827355386
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject.quote("wheel.json.JSONTokener");
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-641);
      int int1 = 10;
      JSONObject.valueToString("wheel.json.JSONTokener", (-641), 10);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.keys();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.447548555958673
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Long.getLong("2K9ibwnU'6BvLFW");
      JSONObject.numberToString(byte0);
      jSONObject0.optLong("2K9ibwnU'6BvLFW");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.042632211710285
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer((-1882));
      Long long1 = new Long(1607L);
      String string0 = "9F]<R_qJ";
      Long.getLong("9F]<R_qJ", 0L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject();
      String string1 = ">)uom]LH";
      Float float0 = new Float(0.0);
      jSONObject0.toString((-1882), (-1882));
      jSONObject0.optJSONObject("Null pointer");
      JSONObject.getNames((Object) jSONObject0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1882));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.685743554108167
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      String string0 = "1BHqpzGbQu&Dpe|l~l,";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "1BHqpzGbQu&Dpe|l~l,";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.optInt("!{cA", (-129));
      jSONObject0.toString();
      jSONObject0.has("");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList2);
      jSONObject0.toString();
      jSONObject1.remove("");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      String[] stringArray0 = new String[7];
      linkedList0.iterator();
      stringArray0[2] = "f(R";
      jSONArray1.put((Object) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      int int0 = Short.toUnsignedInt((short)32);
      JSONObject.numberToString(double0);
      Short.toUnsignedLong((short)32);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      int int1 = Short.compare((short) (-108), (short) (-108));
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.895912093510352
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject.doubleToString(0.31954507037238045);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0.31954507037238045";
      stringArray0[0] = "0.31954507037238045";
      JSONObject jSONObject0 = new JSONObject("0.31954507037238045", stringArray0);
      jSONObject0.optDouble("39", 0.31954507037238045);
      try { 
        jSONObject0.getString("0.31954507037238045");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0.31954507037238045\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5285107465955883
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gC";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("cX5~c0NO", false);
      StringWriter stringWriter0 = new StringWriter(17);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      JSONObject jSONObject1 = jSONObject0.putOpt("IR\"!)`KJmSb4n", stringWriter1);
      StringWriter stringWriter2 = stringWriter0.append('8');
      stringWriter2.write((-3457));
      JSONObject jSONObject2 = jSONObject0.put("u:i|+F", (-4243));
      jSONObject2.optBoolean((String) null, false);
      jSONObject1.optJSONArray("u:i|+F");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject1.optLong("W*ZJaXNt]#JC5u", (long) (-4243));
      assertEquals(3, jSONObject1.length());
      
      boolean boolean0 = jSONObject3.isNull("6UO{^mcXky$|w]?;");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4692852386030415
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "\\u";
      jSONObject0.optDouble(string0);
      JSONObject jSONObject1 = jSONObject0.put(": ", 56.4696156602178);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.optInt("JSONArray[", 2);
      linkedList0.spliterator();
      jSONObject1.put("JSONArray[", (Collection) linkedList0);
      String string1 = "q~E\"^2[^YPU~d4M.";
      JSONObject jSONObject2 = jSONObject0.putOpt("q~E\"^2[^YPU~d4M.", "q~E\"^2[^YPU~d4M.");
      String string2 = "null";
      jSONObject2.optInt("null");
      JSONObject jSONObject3 = jSONObject2.putOpt("Expected a ':' after a key", "Expected a ':' after a key");
      jSONObject3.optDouble("null", 0.0);
      jSONObject3.optInt(".![c)gq");
      try { 
        jSONObject0.getInt("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.70639666215803
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.listIterator();
      linkedList0.add("Bad value from toJSONString: ");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.toString();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONArray0);
      jSONObject0.names();
      JSONObject.quote("");
      jSONObject0.optDouble("Expected '");
      jSONObject0.optBoolean("", true);
      jSONObject0.optInt("\"\"", 1197);
      jSONObject0.optInt("", 1197);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (long) 1197);
      jSONObject1.keys();
      jSONObject0.put("wheel.json.JSONArray@0000000001", (Object) null);
      JSONObject.getNames((Object) jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "wheel.json.JSONArray@0000000001", 8448, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      Short.compare((short)22, (short)79);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JSONArray.";
      jSONObject0.opt("] is not a JSONArray.");
      jSONObject0.remove("\b");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \b
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.599722436310125
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.compare((short)0, (short)0);
      Short.toUnsignedInt((short)0);
      String string0 = ",\n";
      JSONObject.numberToString(short0);
      Short.toUnsignedLong((short)0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = Integer.getInteger(",\n", integer0);
      JSONObject jSONObject0 = new JSONObject(integer1);
      jSONObject0.keys();
      Float float0 = new Float(2293.0097);
      JSONObject jSONObject1 = jSONObject0.put(",LYW\".Mcr=[(-/fM", (Object) null);
      int int0 = 92;
      jSONObject1.toString((int) (short)0, 92);
      String string1 = "zx ";
      try { 
        jSONObject0.getInt("zx ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zx \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      short short0 = (short)4;
      Short.compare((short)4, (short)4);
      String[] stringArray0 = new String[3];
      String string0 = "] is not a Boolean.";
      stringArray0[0] = "] is not a Boolean.";
      String string1 = "o";
      stringArray0[1] = "o";
      stringArray0[2] = "getcompare";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8474148984738825
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "gettoUnsignedLong");
      JSONTokener jSONTokener0 = new JSONTokener("gettoUnsignedLong");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      String string0 = jSONObject1.optString("xf]3=C37Hb7");
      assertEquals(3, jSONObject1.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9465899685531185
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "\\u";
      jSONObject0.optDouble(string0);
      JSONObject jSONObject1 = jSONObject0.put(": ", 56.4696156602178);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.spliterator();
      jSONObject1.put("JSONArray[", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.putOpt("q~E\"^2[^YPU~d4M.", "q~E\"^2[^YPU~d4M.");
      String string1 = "null";
      StringWriter stringWriter0 = new StringWriter(32);
      jSONObject1.write(stringWriter0);
      jSONObject2.optInt("null");
      JSONObject jSONObject3 = jSONObject2.putOpt("Expected a ':' after a key", "Expected a ':' after a key");
      jSONObject3.optDouble("null", 56.4696156602178);
      jSONObject3.optDouble("EDXlcn{m");
      jSONObject0.optJSONObject("null");
      jSONObject3.length();
      String string2 = "9G";
      try { 
        jSONObject1.getLong("9G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8771830907164597
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      jSONObject0.length();
      JSONObject jSONObject1 = jSONObject0.put("X7^)F})@qeES9_a3", (Object) iterator0);
      String string0 = "";
      jSONObject0.optBoolean("");
      String string1 = "";
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4140512084176216
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      String[] stringArray0 = new String[1];
      String string0 = ",\n";
      int int0 = new Short((short)0);
      stringArray0[0] = ",\n";
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      Short.toUnsignedInt((short)0);
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0996289975412377
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 128, 128);
      Byte byte0 = new Byte((byte) (-125));
      jSONObject0.putOpt("{}", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.690517480487483
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float(3627.0);
      Float.isFinite((-1889));
      jSONObject0.putOpt(">)uo=)LH", float0);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      int int0 = jSONObject0.optInt(">)uo=)LH");
      assertEquals(2, jSONObject0.length());
      assertEquals(3627, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2612942909063087
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      Long.divideUnsigned((-1L), (-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      String string0 = "9F]<R_qJ";
      Long.getLong("9F]<R_qJ", 0L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      String string1 = "] is not a Boolean.";
      JSONObject jSONObject1 = new JSONObject(iterator0);
      String string2 = null;
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.95571359982777
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gC";
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("cX5~c0NO", false);
      int int0 = 17;
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2929322920032833
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      stringArray0[3] = "\b";
      stringArray0[4] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("\b", false);
      jSONObject1.optInt("YL", 0);
      jSONObject0.isNull("kEo");
      try { 
        jSONObject0.getInt("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3285374716017033
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "1BHqpzGbQu&Dpe|l~l,";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      int int0 = jSONObject0.optInt("!{cA", (-129));
      assertEquals((-129), int0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      jSONObject0.has("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      jSONObject0.optJSONArray("[");
      JSONObject jSONObject1 = new JSONObject();
      long long2 = jSONObject1.optLong("", (long) (-129));
      assertEquals((-129L), long2);
      
      boolean boolean0 = jSONObject1.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.521233945011687
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put(": ", 56.4696156602178);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.spliterator();
      jSONObject1.put("JSONArray[", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.putOpt("q~E\"^2[^YPU~d4M.", "q~E\"^2[^YPU~d4M.");
      jSONObject2.optInt("null");
      jSONObject2.putOpt("Expected a ':' after a key", "Expected a ':' after a key");
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      Object object0 = JSONObject.NULL;
      jSONObject2.append("wheel.json.JSONException", "Expected a ':' after a key");
      int int0 = Short.compare((short)699, (short) (-1146));
      assertEquals(1845, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.427460956832019
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optBoolean("\b");
      boolean boolean0 = jSONObject0.optBoolean("M4S^G<NM3i%Uo\"YtI");
      assertFalse(boolean0);
      
      String string0 = jSONObject0.optString("opt");
      assertEquals("", string0);
      
      jSONObject0.optInt("A JSONObject text must begin with '{'");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.881546192643361
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      hashMap0.getOrDefault((Object) null, long0);
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      String string0 = ">)uo=)LH";
      Float float0 = new Float(3627.0);
      Float.isFinite((-1889));
      JSONObject jSONObject1 = jSONObject0.put(">)uo=)LH", (Object) float0);
      try { 
        jSONObject1.getJSONObject("cxf[G3W.wjy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cxf[G3W.wjy\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.830899949470383
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gC";
      stringArray0[1] = "";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", false);
      StringWriter stringWriter0 = new StringWriter(2641);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "gC");
      StringWriter stringWriter2 = stringWriter1.append(']');
      stringWriter2.write(2641);
      jSONObject1.write(stringWriter2);
      jSONObject0.toString((-439), 61);
      jSONObject0.optLong("] is not a Boolean.", 1L);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.641806043768666
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = "";
      Object object0 = new Object();
      jSONObject0.accumulate("L~gM0ra.8a,~&", object0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = new JSONObject((Object) "L~gM0ra.8a,~&");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.32118176605609
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      String string0 = "9F]<R_qJ";
      long long2 = 0L;
      Long.getLong("9F]<R_qJ", 0L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      int int0 = 123;
      jSONObject0.toString(123, 123);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of gettoString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.991167344898598
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer((-1889));
      Long long1 = new Long(1607L);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "1BHqpzGbQu&Dpe|l~l,";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.optInt("!{cA", 46);
      String string0 = jSONObject0.toString();
      jSONObject0.has("");
      jSONObject0.optDouble("!{cA");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      jSONObject0.optJSONArray("[");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("", (long) 46);
      jSONObject1.isNull("");
      Byte byte0 = new Byte((byte)123);
      JSONObject jSONObject2 = jSONObject1.putOpt("Mmq}r`<+@|++k,", byte0);
      String string1 = jSONObject2.toString();
      assertEquals(1, jSONObject1.length());
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.794905508210104
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gC";
      stringArray0[1] = "";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", false);
      StringWriter stringWriter0 = new StringWriter(2641);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "gC");
      jSONObject1.putOpt("W*ZJaXNt]#JC5u", "");
      StringWriter stringWriter2 = stringWriter1.append(']');
      stringWriter2.write(2641);
      jSONObject1.write(stringWriter2);
      jSONObject0.toString((-439), 61);
      jSONObject0.optLong("] is not a Boolean.", (-2003L));
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6829273201267343
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      Short.compare((short)22, (short)79);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("] is not a JSONArray.");
      long long0 = jSONObject0.optLong("gettoUnsignedInt", (long) 2);
      assertEquals(2L, long0);
      
      boolean boolean0 = jSONObject0.isNull("null");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.545202527023502
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      Short.compare((short)22, (short)79);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("] is not a JSONArray.");
      long long0 = jSONObject0.optLong("in");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.221732980543426
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Bad value from toJSONString: ";
      Long long0 = new Long((-3618L));
      Long.sum((-3618L), (-3618L));
      JSONObject.valueToString(long0, 1, (-2642));
      stringArray0[1] = "";
      stringArray0[2] = "KjUA@s,KS{l=";
      String string0 = "*&q/FIc>ql1IzC";
      stringArray0[3] = "*&q/FIc>ql1IzC";
      stringArray0[4] = "@#1Fi.0>g/B";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "}iK6[LJT48B=";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONArray("*&q/FIc>ql1IzC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*&q/FIc>ql1IzC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6200155105291458
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("N7{%p=o-/J");
      assertEquals("\"N7{%p=o-/J\"", string0);
      
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      String string1 = JSONObject.quote((String) null);
      assertEquals("\"\"", string1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9590960964240387
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      short short0 = (short)54;
      Short short1 = new Short((short)54);
      Short.toUnsignedInt((short)0);
      JSONObject jSONObject0 = new JSONObject(short1);
      Short.toUnsignedLong((short)54);
      String string0 = "A JSONArray text must start with '['";
      try { 
        jSONObject0.getJSONArray("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3748734494683075
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      Integer integer0 = new Integer((-425));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wheel.json.JSONException";
      stringArray0[1] = "wheel.json.JSONException";
      stringArray0[2] = "__*ji&+qv";
      stringArray0[3] = "nC@Im{vxFCAfRLzA";
      stringArray0[4] = "U5a";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      boolean boolean0 = jSONObject0.isNull("wheel.json.JSONObject");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.2940209430961875
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "2K9ibwnU'6BvLFW";
      jSONObject0.put("2K9ibwnU'6BvLFW", 1808L);
      jSONObject0.optBoolean("\b");
      jSONObject0.optDouble("2K9ibwnU'6BvLFW", (-2534.2));
      try { 
        jSONObject0.getString("Zk7.JLr2JVV9\"Ji8z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Zk7.JLr2JVV9\\\"Ji8z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.1927069230976977
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "nC@Im{vxFCAfRLzA";
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("nC@Im{vxFCAfRLzA", 0L);
      try { 
        jSONObject1.getBoolean("nC@Im{vxFCAfRLzA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nC@Im{vxFCAfRLzA\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9576699287932238
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gettoUnsignedLong", false);
      try { 
        jSONObject0.getLong("gettoUnsignedLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoUnsignedLong\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^n]`c`f?V9Xx6mB`o_";
      stringArray0[1] = "FV#_?";
      stringArray0[2] = "eq";
      stringArray0[3] = "\"\"";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5646828511367463
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "\\u";
      jSONObject0.optDouble(string0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.spliterator();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", (Collection) linkedList0);
      jSONObject1.keys();
      JSONObject jSONObject2 = jSONObject0.putOpt("q~E\"^2[^YPU~d4.", "q~E\"^2[^YPU~d4.");
      String string1 = "Expected a ':' after a key";
      String string2 = "null";
      jSONObject2.optInt("null");
      jSONObject2.putOpt("Expected a ':' after a key", "Expected a ':' after a key");
      try { 
        jSONObject2.getJSONObject("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-292));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.596656563464183
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "N7{%p=o-/J";
      JSONObject jSONObject1 = jSONObject0.put("u2r/~p(a", false);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      jSONObject0.keys();
      jSONObject1.optString("N7{%p=o-/J", "] is not a number.");
      jSONObject1.optDouble("N7{%p=o-/J");
      jSONObject1.optJSONObject("] is not a number.");
      hashMap0.keySet();
      JSONObject jSONObject2 = jSONObject0.put("N7{%p=o-/J", true);
      JSONObject jSONObject3 = jSONObject2.put("] is not a JSONArray.", (Map) hashMap0);
      jSONObject3.put("Substring bounds error", (Map) hashMap0);
      Long long0 = new Long((-1079L));
      jSONObject0.append(",", long0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",";
      stringArray0[1] = "] is not a number.";
      JSONObject jSONObject4 = new JSONObject("N7{%p=o-/J", stringArray0);
      try { 
        jSONObject4.getInt("u2r/~p(a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u2r/~p(a\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.378307559181034
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gJC";
      stringArray0[1] = "";
      stringArray0[2] = "] ib not a Boolean.";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] ib not a Boolean.", false);
      StringWriter stringWriter0 = new StringWriter(2641);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "gJC");
      jSONObject1.putOpt("W*ZJaXNt]#JC5u", "");
      StringWriter stringWriter2 = stringWriter1.append(']');
      stringWriter2.write(2641);
      jSONObject1.write(stringWriter2);
      jSONObject0.write(stringWriter1);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString("] ib not a Boolean.");
      try { 
        jSONObject1.getString("\"java.lang.String@0000000002\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000002\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.2929322920032833
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Double double0 = new Double(1037.5931142336);
      Double.isFinite(1037.5931142336);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "gJC";
      stringArray0[1] = "";
      stringArray0[2] = "] ib not a Boolean.";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] ib not a Boolean.", false);
      StringWriter stringWriter0 = new StringWriter(2641);
      stringWriter0.close();
      stringWriter0.append((CharSequence) "gJC");
      JSONObject jSONObject2 = jSONObject1.putOpt("W*ZJaXNt]#JC5u", "");
      Float float0 = new Float((double) 2641);
      Float.isFinite(2641);
      Long long0 = new Long(2641);
      jSONObject0.putOpt("W*ZJaXNt]#JC5u", long0);
      Object object0 = new Object();
      JSONObject.getNames((Object) null);
      int int0 = jSONObject2.optInt("gJC");
      assertEquals(2, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.921503829434209
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      jSONObject0.keys();
      jSONObject0.optString("", "");
      jSONObject0.optDouble("");
      jSONObject0.optJSONObject("Null key.");
      hashMap0.keySet();
      jSONObject0.put("] is not a JSONObject.", true);
      jSONObject0.put("", (Map) hashMap0);
      String string0 = "";
      try { 
        jSONObject0.append("", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
