/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:20:05 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.net.URISyntaxException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(211);
      Party party0 = new Party();
      player0.boss = party0;
      Player player1 = new Player(162, "X5*PPp*[", "", 3268);
      player1.setDead((-4878L), true);
      assertEquals(10.0F, player1.getX(), 0.01F);
      
      player1.setX(0.0F);
      player0.isJoinOK(player1, false);
      player0.getIP();
      player1.gangStrength();
      float float0 = player1.getX();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.688514447186191
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      Player player0 = new Player(0, "", "", 0);
      Player player1 = new Player((-3974));
      player0.setJoinOK(player1, true);
      player0.setDead((long) (short)4919);
      player0.isJoinOK(player1, true);
      player0.getZ();
      player0.isConnected();
      try { 
        MockURI.URI("", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7567169975450474
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player((-347));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.pack();
      player0.pack();
      player0.type();
      Player player1 = new Player((short)4919);
      player0.isJoinOK(player1, false);
      player0.setX((-347));
      MockFile mockFile0 = new MockFile("wf@vU(s@|", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wf@vU(s@|");
      mockPrintStream0.println(0L);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      player0.pack(dataOutputStream0);
      player0.getMoney();
      player1.prev = (Party) player0;
      player1.getIP();
      player1.type();
      player0.getIP();
      player0.getX();
      assertEquals((-347.0F), player0.getX(), 0.01F);
      
      int int0 = player1.gangStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)5;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Player player0 = new Player((-1), (String) null, (-1));
      player0.toString();
      System.setCurrentTimeMillis((byte)0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.322575046183876
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(3120);
      player0.setDead();
      player0.setX(3120);
      player0.setDead((long) 3120);
      player0.setConnected(true);
      player0.getSubparty();
      player0.setY(0.1F);
      player0.getName();
      player0.pack();
      player0.setX(3120);
      player0.getX();
      player0.setDead((-1L));
      Party party0 = player0.gangBoss();
      player0.add(party0);
      party0.id = (int) (short)4919;
      party0.prev = (Party) player0;
      player0.add(party0);
      player0.setMoney(3120);
      player0.setY(3120.0F);
      player0.getTimeOfDeath();
      player0.toString();
      player0.getIP();
      player0.setZ(2127.453F);
      float float0 = player0.getY();
      assertEquals(3120.0F, player0.getX(), 0.01F);
      assertEquals(3120.0F, float0, 0.01F);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.19741190322987
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(4919, "", "", 4919);
      Player player1 = new Player(1);
      player1.setDead((long) 0);
      player1.isJoinOK(player0, false);
      player0.getZ();
      player1.isConnected();
      player0.remove(player1);
      Player player2 = new Player(0, "", "", 971);
      player2.setConnected(false);
      player0.getIP();
      Player player3 = new Player((-1229), "", "", (-855), 1);
      player3.getName();
      player3.pack();
      player2.isConnected();
      float float0 = player2.getX();
      assertFalse(player2.isConnected());
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0497978423100225
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.setZ((-1.0F));
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      player0.type();
      player0.type();
      player0.getStrength();
      player0.getZ();
      Player player1 = new Player((byte) (-81), "a[N0p8ZxF<!!W]", "a[N0p8ZxF<!!W]", 28784);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals((-1.0F), player0.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3268842301321655
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(3251, (String) null, "gul\"}c27j%O5T_J", 0);
      player0.setDead((-491L));
      Player player1 = new Player(3251, "gul\"}c27j%O5T_J", "gul\"}c27j%O5T_J", 3251);
      Player player2 = new Player((-2356), (String) null, "W_/+m1Ey", 0);
      player2.setDead((-1L));
      player0.isJoinOK(player2, false);
      player2.getZ();
      player0.isConnected();
      player1.isConnected();
      player0.setZ(3251);
      Player player3 = new Player();
      byte[] byteArray0 = player3.pack();
      Player player4 = new Player();
      player4.unpack(byteArray0);
      Player player5 = new Player((short)4919, "X'*", 1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player2.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      player3.toString();
      Player player6 = new Player(10, (String) null, "W_/+m1Ey", (short)4919, (-258));
      int int0 = player6.getStrength();
      assertEquals((-258), int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5360478614522353
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, 0);
      player0.getY();
      player0.setDead((long) 0);
      player0.getX();
      player0.type();
      player0.setDead((-11L));
      player0.getPictureId();
      Player player1 = new Player();
      player1.isJoinOK(player0, false);
      player0.getZ();
      player0.isConnected();
      player1.setZ(0.2F);
      byte[] byteArray0 = player0.pack();
      player1.unpack(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      player0.toString();
      int int0 = player1.getStrength();
      assertEquals(0.0F, player1.getZ(), 0.01F);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1262368167947456
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      Player player1 = new Player((short)4919);
      player0.isJoinOK(player1, true);
      player1.getZ();
      player1.isConnected();
      player0.setZ(0);
      player1.pack();
      float float0 = Player.MOVE_DISTANCE;
      player1.setDead(616L, true);
      Player player2 = new Player((byte)12, "W", "", (short)4919);
      player2.reset(false);
      player0.getIP();
      player0.isConnected();
      player1.type();
      assertEquals(616L, player1.getTimeOfDeath());
      
      int int0 = player2.getPictureId();
      assertEquals(4919, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(2139, "nq|)1h.4Rr!N[.<P", (-633));
      player0.setX(1.0F);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5365859297869138
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, 0);
      player0.getY();
      player0.setDead((long) 0);
      player0.getX();
      player0.type();
      player0.setDead((-11L));
      player0.getPictureId();
      Player player1 = new Player();
      player1.isJoinOK(player0, false);
      player0.getZ();
      player0.isConnected();
      player1.setZ(99.5009F);
      byte[] byteArray0 = player0.pack();
      player1.unpack(byteArray0);
      Player player2 = new Player(0, "X'*", (-592));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      player2.toString();
      player0.getIP();
      assertEquals((-11L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4700338442560503
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, 0);
      player0.getY();
      player0.setDead((long) 0);
      player0.getX();
      player0.type();
      player0.setDead((-11L));
      player0.getPictureId();
      Player player1 = new Player();
      player1.isJoinOK(player0, false);
      player0.isConnected();
      player1.setZ(99.5009F);
      byte[] byteArray0 = player0.pack();
      player1.unpack(byteArray0);
      Player player2 = new Player(0, "X'*", (-592));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.readDouble();
      player1.unpack(dataInputStream0);
      player1.toString();
      player0.getStrength();
      int int0 = player0.type();
      assertEquals((-11L), player0.getTimeOfDeath());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(541, "", "", 541, 512);
      player0.toString();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(512, player0.getStrength());
      assertEquals(541, player0.getPictureId());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, 0);
      player0.getY();
      assertFalse(player0.isDead());
      
      player0.setDead((long) 0);
      player0.getX();
      player0.type();
      player0.setDead(0L);
      player0.getPictureId();
      int int0 = player0.gangStrength();
      assertTrue(player0.isDead());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.026522790307467
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)5;
      player0.unpack(byteArray0);
      Player player1 = new Player();
      player1.remove(player0);
      player0.setDead((long) (byte) (-69));
      player1.pack();
      player1.add(player0);
      player1.setX(3030.8638F);
      player1.gangStrength();
      player1.pack();
      player0.isDead();
      player1.getY();
      player0.setDead((long) (short)4919, false);
      player1.reset(true);
      assertEquals(3030.8638F, player1.getX(), 0.01F);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3805678363275375
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, 0);
      player0.getY();
      assertEquals(0L, player0.getTimeOfDeath());
      
      player0.setDead((long) 0);
      player0.getX();
      player0.type();
      player0.setDead((-11L));
      player0.getPictureId();
      Player player1 = new Player();
      player1.isJoinOK(player0, true);
      player0.getZ();
      player0.isConnected();
      player1.remove(player0);
      player0.getIP();
      player0.getName();
      player1.pack();
      Player player2 = new Player(5, "", "0P%3#", (byte) (-2));
      player2.id = 5;
      boolean boolean0 = player2.isConnected();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      player0.setX(0.0F);
      player0.unpack(byteArray0);
      byte[] byteArray1 = player0.pack();
      player0.setZ(3251.0F);
      MockFile mockFile0 = new MockFile("&AD0x5#0.", "E`ky`r");
      MockFile.createTempFile("E`ky`r", (String) null, (File) mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.setZ((byte)111);
      player0.pack();
      player0.pack();
      Player player1 = new Player((short)4919, "module.ModuleBrowserDialog$ModuleFilter", "", (-2321), (-2321));
      player1.unpack(byteArray1);
      Player player2 = new Player(2236, "", "|z@", (byte)111);
      player2.type();
      player1.type();
      assertEquals(1, player1.getStrength());
      
      Player player3 = new Player();
      float float0 = player3.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      Player player0 = new Player((-633), "", (-633));
      player0.setMoney((-633));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player1 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.238153103418003
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-69);
      byteArray0[8] = (byte)0;
      player0.unpack(byteArray0);
      player0.remove((Party) null);
      player0.setDead((long) (byte)81);
      player0.pack();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.add((Party) null);
      player0.reset(true);
      player0.setX(3030.8638F);
      player0.gangStrength();
      player0.pack();
      player0.next = null;
      player0.isDead();
      player0.getY();
      player0.getPictureId();
      player0.setMoney((byte) (-6));
      float float0 = player0.getZ();
      assertEquals((-6.0F), player0.getMoney(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ((-1660.2518F));
      player0.setMoney(391.67F);
      player0.gangStrength();
      player0.setZ((-2499.8757F));
      player0.setDead((long) 1);
      player0.next = null;
      player0.getTimeOfDeath();
      player0.getName();
      player0.gangStrength();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("H7Lh8");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(0, (String) null, (String) null, 783);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)10;
      byteArray0[1] = (byte) (-55);
      player0.setZ(783);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "=Zb06xWy8l6";
      String string1 = "gui.ModuleBrowserDialog$ModuleFilter";
      Player player0 = new Player(10, "=Zb06xWy8l6", "gui.ModuleBrowserDialog$ModuleFilter", 10, 10);
      DataInputStream dataInputStream0 = null;
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, 0);
      player0.getY();
      player0.setDead((long) 0);
      player0.getX();
      player0.type();
      player0.setDead(0L);
      player0.getPictureId();
      Player player1 = new Player((-466), "~Ox[F2u@z", "1E%x_[HE", 12);
      player0.prev = (Party) player1;
      player1.add(player0);
      player0.setY(5);
      float float0 = Player.TOLERANCE;
      player1.isDead();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)5;
      try { 
        pipedOutputStream0.write(byteArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      Player player1 = new Player(0, "", "", 0);
      player1.setDead(863L);
      player1.isDead();
      byte byte0 = (byte) (-11);
      byte byte1 = (byte)5;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((-69), (String) null, (String) null, (-69), (-69));
      player0.gangStrength();
      System.setCurrentTimeMillis(523L);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player((-3078), "rd@U!K", "rd@U!K", (-3078), 553);
      player0.setY((-3078));
      player0.getStrength();
      player0.pack();
      int int0 = player0.gangStrength();
      assertEquals((-3078.0F), player0.getY(), 0.01F);
      assertEquals(553, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setY(0);
      player0.setX(0.0F);
      player0.setY(0.0F);
      player0.getPictureId();
      player0.getPictureId();
      player0.setZ(0.0F);
      player0.getStrength();
      player0.getIP();
      Party party0 = player0.gangBoss();
      player0.remove(party0);
      Player player1 = new Player(36);
      player0.boss = (Party) player1;
      player0.setDead(0L, true);
      player0.getZ();
      player0.pack();
      player0.setX(1.0F);
      player0.getTimeOfDeath();
      assertEquals(1.0F, player0.getX(), 0.01F);
      
      float float0 = player1.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead();
      player0.getZ();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gui.ModuleBrowserDialog$ModuleFilter");
      Player player0 = new Player((-1), "l?wb`5TREV}17l.R", (-1));
      player0.setZ((-1));
      Player player1 = new Player(2);
      player0.prev = (Party) player1;
      player0.getX();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)81;
      byteArrayOutputStream0.write(byteArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      player1.pack(dataOutputStream0);
      assertEquals(37, byteArrayOutputStream0.size());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-1);
      Player player0 = new Player((-1), "", "", 2274);
      player0.setX(0);
      byte[] byteArray0 = new byte[0];
      player0.unpack(byteArray0);
      player0.pack();
      player0.setZ(3251.0F);
      Enumeration<InputStream> enumeration0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3234094224875887
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, 0);
      Party party0 = player0.gangBoss();
      player0.prev = party0;
      player0.getY();
      player0.setDead((long) 0);
      player0.getX();
      player0.type();
      player0.getZ();
      player0.isConnected();
      player0.setZ(1404.48F);
      player0.pack();
      float float0 = Player.MOVE_DISTANCE;
      Player player1 = new Player(5);
      player1.setDead((long) (short)4919, true);
      Player player2 = new Player(5, "", "", (byte)12);
      player0.reset(true);
      player2.getIP();
      player1.isConnected();
      player1.type();
      player0.getPictureId();
      float float1 = player1.getX();
      assertEquals(4919L, player1.getTimeOfDeath());
      assertEquals(10.0F, float1, 0.01F);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\\Od{P*o-.n\\!Vd 6/N)|q[:0");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Player player0 = new Player(0, "", "", 0);
      player0.setZ((-1531.18F));
      Player player1 = new Player((short)4919);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      player0.pack();
      player0.getSubparty();
      float float0 = Player.MOVE_DISTANCE;
      player1.setDead((long) (short)4919, true);
      Player player2 = new Player((-1463), "83FS$#] oX5Y~[cv", "kW)8{^!.V*", (-1859));
      player2.reset(true);
      player1.getIP();
      player1.isConnected();
      player0.type();
      assertEquals((-1531.18F), player0.getZ(), 0.01F);
      
      int int0 = player2.getPictureId();
      assertEquals((-1859), int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((-1328));
      Player player1 = new Player(0);
      player1.head = (Party) player0;
      player0.prev = (Party) player1;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player(4919, "2Yl8Je_S", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 4919, (-2857));
      int int0 = player0.type();
      assertEquals((-2857), player0.getStrength());
      assertEquals("2Yl8Je_S", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(5, int0);
      assertEquals(4919, player0.getPictureId());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.488039965861683
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, 0);
      player0.getY();
      player0.setDead((long) 0);
      player0.getX();
      player0.type();
      player0.setDead(0L);
      player0.getPictureId();
      Player player1 = new Player((-466), "~Ox[F2u@z", "1E%x_[HE", 0);
      player0.prev = (Party) player1;
      player1.add(player0);
      player0.setY(5);
      player1.setZ(0.2F);
      Player player2 = new Player(4832, "~Ox[F2u@z", (-466));
      player2.setDead();
      player2.pack();
      player1.getZ();
      player0.setDead((long) (short)4919, true);
      Player player3 = new Player();
      player3.reset(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.getIP();
      player3.getMoney();
      int int0 = player2.type();
      assertEquals(1392409281320L, player2.getTimeOfDeath());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player0.getSubparty();
      player1.remove(player0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)0;
      player0.unpack(byteArray0);
      player1.prev = (Party) player0;
      player0.setJoinOK(player1, true);
      player0.setDead((-3400L));
      player1.setX(1.0F);
      player1.setY((short)4919);
      // Undeclared exception!
      try { 
        player1.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setZ(2569.471F);
      Player player1 = new Player((short)4919, (String) null, "OY}j*wB[vDYe1", 1313, 1313);
      player0.setJoinOK(player1, true);
      assertEquals(2569.471F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((byte)8, "", "", (byte)8, (-506));
      Player player1 = new Player((short)4919);
      player0.setJoinOK(player1, false);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "C=i=5<)QG2!/B=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9710863640582432
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      Player player1 = new Player((-3974));
      player0.setJoinOK(player1, true);
      player0.setDead((long) (short)4919);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.isJoinOK(player1, false);
      player0.getZ();
      player0.isConnected();
      player1.setZ((short)4919);
      player1.pack();
      InputStream inputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((-1), (String) null, (String) null, (-1), (-1));
      player0.setX((-860.205F));
      player0.setZ(0.1F);
      player0.getName();
      player0.setZ((-860.205F));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-54);
      player0.unpack(byteArray0);
      player0.setMoney(3711.3843F);
      player0.setZ(0.0F);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9713931362744876
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[1];
      player0.setX(0.0F);
      player0.unpack(byteArray0);
      player0.pack();
      player0.setZ(3251.0F);
      MockFile mockFile0 = new MockFile("", "E`ky`r");
      MockFile.createTempFile("E`ky`r", (String) null, (File) mockFile0);
      mockFile0.getAbsolutePath();
      MockFile.createTempFile("L:R? ", "N)|q[:", (File) mockFile0);
      Player player1 = new Player(553, "", "V9T`?sD;tS'yfu%", (byte)0, 553);
      Player player2 = new Player((short)4919, "V9T`?sD;tS'yfu%", (short)4919);
      byte[] byteArray1 = new byte[3];
      player2.unpack(byteArray1);
      player0.type();
      assertEquals(3251.0F, player0.getZ(), 0.01F);
      
      int int0 = player2.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 19;
      Player player0 = new Player(19150, "Player", "Player", 19150);
      player0.setX((byte)111);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[2] = (byte)111;
      player0.unpack(byteArray0);
      player0.setZ(0.0F);
      Enumeration<PipedInputStream> enumeration0 = null;
      player0.setConnected(false);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-633);
      MockFile mockFile0 = new MockFile("");
      Player player0 = new Player((-633));
      player0.setX((-1330.1255F));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byte byte0 = (byte) (-50);
      byteArray0[1] = (byte) (-50);
      player0.unpack(byteArray0);
      player0.pack();
      Enumeration<PipedInputStream> enumeration0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player((-466), "~Ox[F2u@z", "~Ox[F2u@z", 0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      Player player1 = new Player((byte)80, "a/", ")c ybHz0JJUGqN]7xT", 2548, 0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      player1.add(player0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      player1.unpack(dataInputStream0);
      player0.getY();
      player0.getName();
      player0.setMoney(1691);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1691);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        pipedOutputStream1.write(byteArray0, 0, 1762);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
