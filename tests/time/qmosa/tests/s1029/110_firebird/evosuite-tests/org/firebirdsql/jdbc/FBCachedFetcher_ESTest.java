/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:50:06 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.ObjectInputStream;
import java.io.StreamCorruptedException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.GDS;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.AbstractIscStmtHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.isc_blob_handle_impl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9983916035564593
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[1][8];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte) (-38);
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)1;
      byteArray0[0] = byteArray1;
      linkedList0.offerFirst(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      Object object0 = new Object();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher1.last();
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.382797757078264
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[1][8];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte) (-38);
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)1;
      byteArray0[0] = byteArray1;
      linkedList0.offerFirst(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      Integer.max(1967, 1003);
      Object object0 = new Object();
      linkedList0.removeFirstOccurrence(object0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.next();
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.isBeforeFirst();
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5327559493328096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[1][8];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)125;
      byteArray1[2] = (byte) (-38);
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)1;
      byteArray0[0] = byteArray1;
      linkedList0.offerFirst(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      Integer.max(1967, 1003);
      Object object0 = new Object();
      linkedList0.removeFirstOccurrence(object0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      fBCachedFetcher0.first();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      fBCachedFetcher0.updateRow(fBResultSet0.row);
      fBCachedFetcher0.next();
      fBCachedFetcher0.insertRow(byteArray0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3398704635314767
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      boolean boolean0 = fBCachedFetcher0.next();
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0008978692206196
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      int int0 = 1967;
      Integer.max(1967, 1003);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.offer((byte[][]) null);
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList1);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, fBResultSet1);
      byte[][] byteArrayArray0 = null;
      linkedList0.add((byte[][]) null);
      fBCachedFetcher1.absolute(1003);
      String string0 = "['h*!otf";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 2986B60D
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      byte[][] byteArray0 = new byte[1][9];
      byte[] byteArray1 = new byte[2];
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.add("3");
      linkedList0.retainAll(linkedBlockingDeque0);
      linkedList0.clone();
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)44;
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8612239858316948
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][7];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-44);
      byteArray1[1] = (byte)42;
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      linkedList0.offer(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][9];
      byte[] byteArray1 = new byte[4];
      byteArray1[1] = (byte) (-101);
      byteArray1[2] = (byte) (-101);
      byteArray1[3] = (byte) (-101);
      byteArray0[0] = byteArray1;
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      linkedList0.add(byteArray0);
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.87581752666317
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][8];
      byte[] byteArray1 = new byte[18];
      byteArray1[0] = (byte) (-17);
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte) (-72);
      byteArray1[4] = (byte) (-44);
      byteArray1[5] = (byte) (-21);
      linkedList0.add(byteArray0);
      byteArray1[6] = (byte) (-55);
      byteArray1[7] = (byte)44;
      byteArray0[0] = byteArray1;
      linkedList0.offer(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      linkedList0.add((byte[][]) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-959));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-13);
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)29;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-12);
      byteArray2[1] = (byte) (-12);
      byteArray2[2] = (byte) (-78);
      byteArray2[3] = (byte)29;
      byteArray2[4] = (byte)29;
      byteArray2[5] = (byte)29;
      byteArray2[6] = (byte)29;
      byteArray2[7] = (byte) (-12);
      byteArray2[8] = (byte) (-13);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)29;
      byteArray3[1] = (byte) (-78);
      byteArray3[2] = (byte) (-13);
      byteArray3[3] = (byte)29;
      byteArray3[4] = (byte) (-12);
      byteArray3[5] = (byte)29;
      byteArray3[6] = (byte) (-78);
      byteArray3[7] = (byte) (-12);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)29;
      byteArray4[1] = (byte) (-78);
      byteArray4[2] = (byte)106;
      byteArray4[3] = (byte) (-13);
      byteArray4[4] = (byte)29;
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte) (-13);
      byteArray4[7] = (byte) (-13);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)106;
      byteArray5[2] = (byte) (-78);
      byteArray5[3] = (byte)29;
      byteArray5[4] = (byte) (-13);
      byteArray5[5] = (byte) (-12);
      byteArray0[4] = byteArray5;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(478);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][4];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-21);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-21);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-21);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte) (-1);
      byteArray2[8] = (byte) (-21);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-21);
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte) (-21);
      byteArray3[5] = (byte) (-1);
      byteArray3[6] = (byte)88;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte) (-1);
      byteArray4[1] = (byte) (-1);
      byteArray4[2] = (byte) (-21);
      byteArray4[3] = (byte)28;
      byteArray4[4] = (byte) (-1);
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)0;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[0];
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[9];
      byteArray6[0] = (byte)88;
      byteArray6[1] = (byte)28;
      byteArray6[2] = (byte) (-21);
      byteArray6[3] = (byte)88;
      byteArray6[4] = (byte) (-21);
      byteArray6[5] = (byte) (-21);
      byteArray6[6] = (byte) (-10);
      byteArray6[7] = (byte)88;
      byteArray6[8] = (byte)28;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[3];
      byteArray7[0] = (byte)0;
      byteArray7[1] = (byte)28;
      byteArray7[2] = (byte) (-10);
      byteArray0[6] = byteArray7;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      byte[] byteArray0 = new byte[2];
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      byte[][] byteArray1 = new byte[6][0];
      byteArray1[0] = byteArray0;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)79;
      byteArray2[1] = (byte)79;
      byteArray2[2] = (byte)79;
      byteArray2[3] = (byte)79;
      byteArray2[4] = (byte)79;
      byteArray2[5] = (byte)79;
      byteArray2[6] = (byte)79;
      byteArray1[1] = byteArray2;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      linkedList2.add(byteArray1);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList4 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList4, (FBObjectListener.FetcherListener) null);
      linkedList0.poll();
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-44);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      Object object1 = new Object();
      predicate4.negate();
      predicate4.test(object1);
      predicate0.or(predicate5);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate3);
      predicate4.or(predicate6);
      Predicate<Object> predicate7 = predicate0.negate();
      predicate2.or(predicate7);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[9][5];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-114);
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte)25;
      byteArray1[6] = (byte) (-44);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-18);
      byteArray2[1] = (byte) (-44);
      byteArray2[2] = (byte) (-85);
      byteArray2[3] = (byte) (-85);
      byteArray2[4] = (byte)25;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte) (-1);
      byteArray4[1] = (byte) (-18);
      byteArray4[2] = (byte) (-2);
      linkedList0.offerLast(byteArray0);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte) (-2);
      byteArray0[4] = byteArray5;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isLast();
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      byte[][] byteArray0 = new byte[1][9];
      byte[] byteArray1 = new byte[2];
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      predicate0.test((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      linkedBlockingDeque0.removeIf(predicate3);
      linkedBlockingDeque0.add("3");
      linkedList0.retainAll(linkedBlockingDeque0);
      linkedList0.clone();
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)44;
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Spliterator<byte[][]> spliterator0 = linkedList0.spliterator();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) spliterator0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate3.and(predicate0);
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate6 = predicate5.or(predicate2);
      Predicate<String> predicate7 = predicate6.and(predicate4);
      Predicate<String> predicate8 = predicate7.negate();
      linkedBlockingDeque0.removeIf(predicate8);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque2.add("IH");
      byte[][] byteArray0 = new byte[0][4];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[9];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[7] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[8] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte) (-15);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)100;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-15);
      byteArray3[3] = (byte)100;
      byteArray3[4] = (byte) (-44);
      byteArray3[5] = (byte) (-44);
      byteArray3[6] = (byte)100;
      byteArray3[7] = (byte)100;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)68;
      byteArray4[2] = (byte) (-15);
      byteArray4[3] = (byte)100;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[2];
      byteArray5[0] = (byte)68;
      byteArray5[1] = (byte) (-15);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte)4;
      byteArray6[1] = (byte) (-15);
      byteArray6[2] = (byte) (-44);
      byteArray0[5] = byteArray6;
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0485627107748057
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.relative(100);
      fBCachedFetcher1.last();
      fBCachedFetcher1.absolute(2608);
      fBCachedFetcher0.next();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getDb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5231920444148086
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      byte[][] byteArray0 = new byte[1][9];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      predicate1.or(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.and(predicate0);
      predicate1.or(predicate2);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.clone();
      linkedList0.offer(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList2.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.relative((-1635));
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.next();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3399002341122683
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[8];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray1 = new FBLongVarCharField[8];
      fBLongVarCharFieldArray1[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray1[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray1[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray1[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray1[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray1[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray1[6] = fBLongVarCharField0;
      fBLongVarCharFieldArray1[7] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.afterLast();
      boolean boolean0 = fBCachedFetcher0.isLast();
      boolean boolean1 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      try { 
        fBCachedFetcher0.absolute((byte)0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      Integer.max(1967, 1003);
      Object object0 = new Object();
      linkedList0.removeFirstOccurrence(object0);
      fBCachedFetcher0.close();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl2 = new isc_stmt_handle_impl();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(79, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      scheduledThreadPoolExecutor0.getQueue();
      MockThread mockThread0 = new MockThread(threadGroup1, "qc7ty|$*XG7Zf]c");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "qc7ty|$*XG7Zf]c");
      MockThread mockThread2 = new MockThread(mockThread1, "|-BP");
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      mockThread0.getStackTrace();
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread2, 0L, 79, timeUnit0);
      linkedList0.removeLastOccurrence(scheduledFuture0);
      linkedList0.spliterator();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[9];
      linkedList0.toArray(fBLongVarCharFieldArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      boolean boolean0 = fBCachedFetcher0.first();
      boolean boolean1 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isEmpty();
      Integer integer0 = new Integer(560);
      linkedList0.removeFirstOccurrence(integer0);
      fBCachedFetcher0.relative(212);
      fBCachedFetcher0.setFetchSize((-616));
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.615726363637287
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.relative(50);
      boolean boolean0 = fBCachedFetcher0.relative((-2967));
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][2];
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      linkedList0.offerFirst(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1807419214577735
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.addFirst((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      assertEquals(1, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 82, 82, (AbstractIscStmtHandle) null, fBResultSet0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Spliterator<byte[][]> spliterator0 = linkedList0.spliterator();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) spliterator0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate3.and(predicate0);
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate6.and(predicate4);
      Predicate<String> predicate8 = predicate7.negate();
      linkedBlockingDeque0.removeIf(predicate8);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque2.add("IH");
      byte[][] byteArray0 = new byte[0][4];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.getRowNum();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[7];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[4][8];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)100;
      byteArray1[5] = (byte)13;
      byteArray1[6] = (byte) (-12);
      byteArray1[7] = (byte)41;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[20];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)50;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)100;
      byteArray2[4] = (byte) (-12);
      byteArray2[5] = (byte)13;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-89);
      byteArray3[1] = (byte)41;
      byteArray3[2] = (byte)2;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)41;
      byteArray4[1] = (byte)13;
      byteArray4[2] = (byte) (-12);
      byteArray4[3] = (byte) (-81);
      byteArray4[4] = (byte)2;
      byteArray4[5] = (byte)2;
      byteArray0[3] = byteArray4;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
